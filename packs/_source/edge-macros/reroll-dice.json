{
  "name": "Reroll Dice",
  "type": "script",
  "_id": "IVZZYNSLF4GdY4uQ",
  "author": "HL2sP4F1F1Sm60cA",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "// Get the selected token's actor\nconst actor = token?.actor || character;\nif (!actor) {\n    ui.notifications.error(\"Please select a token or assign a character\");\n    return;\n}\n\n// Get edge data\nconst edge = actor.getEdge();\nif (!edge) {\n    ui.notifications.error(\"Selected character has no Edge attribute\");\n    return;\n}\n\n// Prompt for number of dice to reroll\nlet d = await new Dialog({\n    title: \"Edge Reroll\",\n    content: `\n        <form>\n            <div class=\"form-group\">\n                <label>Number of Dice to Reroll (Edge Available: ${edge.uses}):</label>\n                <input type=\"number\" name=\"diceCount\" value=\"1\" min=\"1\">\n            </div>\n        </form>\n    `,\n    buttons: {\n        roll: {\n            icon: '<i class=\"fas fa-dice\"></i>',\n            label: \"Reroll\",\n            callback: (html) => {\n                const diceCount = parseInt(html.find('[name=\"diceCount\"]').val());\n                return diceCount;\n            }\n        },\n        cancel: {\n            icon: '<i class=\"fas fa-times\"></i>',\n            label: \"Cancel\"\n        }\n    },\n    default: \"roll\"\n}).render(true);\n\n// Get the number of dice from the dialog\nconst diceCount = await d;\n\nif (!diceCount) return;\n\n// Check if actor has enough edge\nif (edge.uses < diceCount) {\n    ui.notifications.error(`Not enough Edge! Need ${diceCount} but only have ${edge.uses}`);\n    return;\n}\n\n// Roll the dice\nlet roll = new Roll(`${diceCount}d6`);\nawait roll.evaluate({async: true});\n\n// Count hits (5 or 6)\nconst hits = roll.terms[0].results.filter(d => d.result >= 5).length;\n\n// Spend edge\nawait actor.useEdge(-diceCount);\n\n// Create chat message\nconst content = `\n<div class=\"sr6 chat-card roll-card\">\n    <div class=\"card-content\">\n        <div class=\"left-side\">\n            <span class=\"test-value\">\n                <span class=\"value\">Edge Reroll Results</span>\n            </span>\n            <span class=\"test-value\">\n                <span class=\"value\">Dice Rerolled: </span>\n                <span class=\"value-result\">${diceCount}</span>\n            </span>\n            <span class=\"test-value\">\n                <span class=\"value\">New Hits: </span>\n                <span class=\"value-result\">${hits}</span>\n            </span>\n            <span class=\"test-value\">\n                <span class=\"value\">Edge Remaining: </span>\n                <span class=\"value-result\">${edge.uses - diceCount}</span>\n            </span>\n        </div>\n    </div>\n    <div class=\"card-rolls\">\n        <div class=\"roll-result\">\n            ${roll.terms[0].results.map(d => {\n                const success = d.result >= 5;\n                return `<span class=\"die d6 ${success ? 'success' : 'failure'}\">${d.result}</span>`;\n            }).join('')}\n        </div>\n    </div>\n</div>\n`;\n\nawait ChatMessage.create({\n    content: content,\n    speaker: ChatMessage.getSpeaker({actor: actor}),\n    type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n    roll: roll,\n    sound: CONFIG.sounds.dice\n});",
  "folder": null,
  "sort": 0,
  "ownership": {
    "default": 0
  },
  "flags": {
    "condition-lab-triggler": {
      "macroTrigger": ""
    }
  },
  "_stats": {
    "compendiumSource": null,
    "duplicateSource": null,
    "coreVersion": "12.331",
    "systemId": "shadowrun6-elysium",
    "systemVersion": "0.23.2",
    "createdTime": 1743810562093,
    "modifiedTime": 1743810567506,
    "lastModifiedBy": "sr5ebuilder"
  },
  "_key": "!macros!IVZZYNSLF4GdY4uQ"
}
