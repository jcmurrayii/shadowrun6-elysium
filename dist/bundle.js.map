{
  "version": 3,
  "sources": ["../node_modules/xml2js/lib/defaults.js", "../node_modules/xmlbuilder/lib/Utility.js", "../node_modules/xmlbuilder/lib/XMLDOMImplementation.js", "../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js", "../node_modules/xmlbuilder/lib/XMLDOMStringList.js", "../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js", "../node_modules/xmlbuilder/lib/NodeType.js", "../node_modules/xmlbuilder/lib/XMLAttribute.js", "../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js", "../node_modules/xmlbuilder/lib/XMLElement.js", "../node_modules/xmlbuilder/lib/XMLCharacterData.js", "../node_modules/xmlbuilder/lib/XMLCData.js", "../node_modules/xmlbuilder/lib/XMLComment.js", "../node_modules/xmlbuilder/lib/XMLDeclaration.js", "../node_modules/xmlbuilder/lib/XMLDTDAttList.js", "../node_modules/xmlbuilder/lib/XMLDTDEntity.js", "../node_modules/xmlbuilder/lib/XMLDTDElement.js", "../node_modules/xmlbuilder/lib/XMLDTDNotation.js", "../node_modules/xmlbuilder/lib/XMLDocType.js", "../node_modules/xmlbuilder/lib/XMLRaw.js", "../node_modules/xmlbuilder/lib/XMLText.js", "../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js", "../node_modules/xmlbuilder/lib/XMLDummy.js", "../node_modules/xmlbuilder/lib/XMLNodeList.js", "../node_modules/xmlbuilder/lib/DocumentPosition.js", "../node_modules/xmlbuilder/lib/XMLNode.js", "../node_modules/xmlbuilder/lib/XMLStringifier.js", "../node_modules/xmlbuilder/lib/WriterState.js", "../node_modules/xmlbuilder/lib/XMLWriterBase.js", "../node_modules/xmlbuilder/lib/XMLStringWriter.js", "../node_modules/xmlbuilder/lib/XMLDocument.js", "../node_modules/xmlbuilder/lib/XMLDocumentCB.js", "../node_modules/xmlbuilder/lib/XMLStreamWriter.js", "../node_modules/xmlbuilder/lib/index.js", "../node_modules/xml2js/lib/builder.js", "../node_modules/component-emitter/index.js", "../node_modules/stream/index.js", "../node_modules/base64-js/index.js", "../node_modules/ieee754/index.js", "../node_modules/buffer/index.js", "../node_modules/safe-buffer/index.js", "../node_modules/string_decoder/lib/string_decoder.js", "../node_modules/sax/lib/sax.js", "../node_modules/events/events.js", "../node_modules/xml2js/lib/bom.js", "../node_modules/xml2js/lib/processors.js", "../node_modules/timers/index.js", "../node_modules/xml2js/lib/parser.js", "../node_modules/xml2js/lib/xml2js.js", "../src/module/handlebars/HandlebarTemplates.ts", "../src/module/parts/PartsList.ts", "../src/module/constants.ts", "../src/module/rules/RangedWeaponRules.ts", "../src/module/chat.ts", "../src/module/data/DataDefaults.ts", "../src/module/data/DataWrapper.ts", "../src/module/data/SR6ItemDataWrapper.ts", "../src/module/rules/MatrixRules.ts", "../src/module/rules/SkillRules.ts", "../src/module/rolls/SR6Roll.ts", "../src/module/config.ts", "../src/module/actor/flows/SkillFlow.ts", "../src/module/item/flows/ActionFlow.ts", "../src/module/tests/TestCreator.ts", "../src/module/item/ChatData.ts", "../src/module/sockets.ts", "../src/module/item/flows/NetworkDeviceFlow.ts", "../src/module/item/prep/HostPrep.ts", "../src/module/utils/links.ts", "../src/module/item/prep/functions/TechnologyPrep.ts", "../src/module/item/prep/SinPrep.ts", "../src/module/item/prep/functions/ActionPrep.ts", "../src/module/item/prep/functions/RangePrep.ts", "../src/module/item/prep/AdeptPowerPrep.ts", "../src/module/rules/SoakRules.ts", "../src/module/rules/CombatRules.ts", "../src/module/rules/MeleeRules.ts", "../src/module/apps/dialogs/FormDialog.ts", "../src/module/apps/dialogs/DamageApplicationDialog.ts", "../src/module/actor/flows/DamageApplicationFlow.ts", "../src/module/apps/dialogs/TestDialog.ts", "../src/module/template.ts", "../src/module/rules/TestRules.ts", "../node_modules/@yaireo/tagify/dist/src/parts/constants.js", "../node_modules/@yaireo/tagify/dist/src/parts/helpers.js", "../node_modules/@yaireo/tagify/dist/src/parts/defaults.js", "../node_modules/@yaireo/tagify/dist/src/parts/dropdown.js", "../node_modules/@yaireo/tagify/dist/src/parts/suggestions.js", "../node_modules/@yaireo/tagify/dist/src/parts/persist.js", "../node_modules/@yaireo/tagify/dist/src/parts/texts.js", "../node_modules/@yaireo/tagify/dist/src/parts/templates.js", "../node_modules/@yaireo/tagify/dist/src/parts/events.js", "../node_modules/@yaireo/tagify/dist/src/tagify.js", "../node_modules/@yaireo/tagify/dist/src/parts/EventDispatcher.js", "../src/module/utils/sheets.ts", "../src/module/effect/SR6ActiveEffect.ts", "../src/module/effects.ts", "../src/module/effect/flows/SuccessTestEffectsFlow.ts", "../src/module/actor/flows/GmOnlyMessageContentFlow.ts", "../src/module/tests/SuccessTest.ts", "../src/module/tests/OpposedTest.ts", "../src/module/tests/DefenseTest.ts", "../src/module/rules/ActiveDefenseRules.ts", "../src/module/tests/PhysicalDefenseTest.ts", "../src/module/item/flows/ActionResultFlow.ts", "../src/module/item/flows/UpdateActionFlow.ts", "../src/module/rules/FireModeRules.ts", "../src/module/effect/flows/EnvironmentalChangeFlow.ts", "../src/module/effect/flows/SituationModifierEffectsFlow.ts", "../src/module/rules/modifiers/SituationModifier.ts", "../src/module/rules/modifiers/RecoilModifier.ts", "../src/module/rules/modifiers/BackgroundCountModifier.ts", "../src/module/rules/modifiers/NoiseModifier.ts", "../src/module/rules/modifiers/EnvironmentalModifier.ts", "../src/module/rules/modifiers/DefenseModifier.ts", "../src/module/rules/DocumentSituationModifiers.ts", "../src/module/rules/WeaponRangeRules.ts", "../src/module/item/SR6Item.ts", "../src/module/actor/prep/functions/InitiativePrep.ts", "../src/module/actor/prep/functions/ModifiersPrep.ts", "../src/module/actor/prep/functions/ItemPrep.ts", "../src/module/actor/prep/functions/AttributesPrep.ts", "../src/module/actor/prep/functions/MatrixPrep.ts", "../src/module/actor/prep/functions/SkillsPrep.ts", "../src/module/actor/prep/functions/MovementPrep.ts", "../src/module/rules/MonitorRules.ts", "../src/module/actor/prep/functions/WoundsPrep.ts", "../src/module/actor/prep/functions/NPCPrep.ts", "../src/module/actor/prep/functions/ConditionMonitorsPrep.ts", "../src/module/actor/prep/functions/GruntPrep.ts", "../src/module/actor/prep/CharacterPrep.ts", "../src/module/actor/prep/CritterPrep.ts", "../src/module/actor/prep/SpiritPrep.ts", "../src/module/actor/prep/SpritePrep.ts", "../src/module/actor/prep/VehiclePrep.ts", "../src/module/actor/prep/ICPrep.ts", "../src/module/actor/flows/InventoryFlow.ts", "../src/module/actor/flows/ModifierFlow.ts", "../src/module/tests/AttributeOnlyTest.ts", "../src/module/rules/RecoveryRules.ts", "../src/module/rules/ConditionRules.ts", "../src/module/actor/SR6Actor.ts", "../src/module/apps/dialogs/DeleteConfirmationDialog.ts", "../src/module/helpers.ts", "../src/module/handlebars/RollAndLabelHelpers.ts", "../src/module/utils/strings.ts", "../src/module/handlebars/ItemLineHelpers.ts", "../src/module/handlebars/SkillLineHelpers.ts", "../src/module/handlebars/AppHelpers.ts", "../src/module/handlebars/BasicHelpers.ts", "../src/module/handlebars/ActorHelpers.ts", "../src/module/handlebars/HandlebarManager.ts", "../src/module/rules/CompilationRules.ts", "../src/module/tests/CompileSpriteTest.ts", "../src/module/rules/DrainRules.ts", "../src/module/rules/ConjuringRules.ts", "../src/module/tests/OpposedSummonSpiritTest.ts", "../src/module/tests/OpposedRitualTest.ts", "../src/module/rules/RitualRules.ts", "../src/module/tests/RitualSpellcastingTest.ts", "../src/module/migrator/VersionMigration.ts", "../src/module/migrator/versions/Version0_8_0.ts", "../src/module/migrator/versions/Version0_18_0.ts", "../src/module/migrator/versions/Version0_16_0.ts", "../src/module/migrator/versions/Version0_24_0.ts", "../src/module/migrator/versions/Version0_24_1.ts", "../src/module/migrator/Migrator.ts", "../src/module/migration/MigrationRunner.ts", "../src/module/settings.ts", "../src/module/item/SR6ItemSheet.ts", "../src/module/token/SR6Token.ts", "../src/module/combat/SR6Combat.ts", "../src/module/apps/gmtools/OverwatchScoreTracker.js", "../src/module/apps/itemImport/importer/Constants.ts", "../src/module/apps/itemImport/helper/ImportStrategy.ts", "../src/module/apps/itemImport/helper/XMLStrategy.ts", "../src/module/apps/itemImport/helper/JSONStrategy.ts", "../src/module/apps/itemImport/helper/ImportHelper.ts", "../src/module/apps/iconAssigner/iconAssign.ts", "../src/module/apps/itemImport/importer/DataImporter.ts", "../src/module/apps/itemImport/importer/ProgramImporter.ts", "../src/module/apps/itemImport/parser/Parser.ts", "../src/module/apps/itemImport/parser/item/ItemParserBase.ts", "../src/module/apps/itemImport/parser/item/TechnologyItemParserBase.ts", "../src/module/apps/itemImport/parser/weapon/WeaponParserBase.ts", "../src/module/apps/itemImport/parser/weapon/RangedParser.ts", "../src/module/apps/itemImport/parser/weapon/MeleeParser.ts", "../src/module/apps/itemImport/parser/weapon/ThrownParser.ts", "../src/module/apps/itemImport/parser/ParserMap.ts", "../src/module/apps/itemImport/importer/WeaponImporter.ts", "../src/module/apps/itemImport/parser/armor/ArmorParserBase.ts", "../src/module/apps/itemImport/importer/ArmorImporter.ts", "../src/module/apps/itemImport/importer/AmmoImporter.ts", "../src/module/apps/itemImport/parser/mod/ModParserBase.ts", "../src/module/apps/itemImport/importer/ModImporter.ts", "../src/module/apps/itemImport/parser/spell/SpellParserBase.ts", "../src/module/apps/itemImport/parser/spell/CombatSpellParser.ts", "../src/module/apps/itemImport/parser/spell/ManipulationSpellParser.ts", "../src/module/apps/itemImport/parser/spell/IllusionSpellParser.ts", "../src/module/apps/itemImport/parser/spell/DetectionSpellImporter.ts", "../src/module/apps/itemImport/importer/SpellImporter.ts", "../src/module/apps/itemImport/parser/quality/QualityParserBase.ts", "../src/module/apps/itemImport/importer/QualityImporter.ts", "../src/module/apps/itemImport/parser/complex-form/ComplexFormParserBase.ts", "../src/module/apps/itemImport/importer/ComplexFormImporter.ts", "../src/module/apps/itemImport/parser/ware/CyberwareParser.ts", "../src/module/apps/itemImport/importer/WareImporter.ts", "../src/module/apps/itemImport/parser/critter-power/CritterPowerParserBase.ts", "../src/module/apps/itemImport/importer/CritterPowerImporter.ts", "../src/module/apps/itemImport/importer/DeviceImporter.ts", "../src/module/apps/itemImport/importer/EquipmentImporter.ts", "../src/module/apps/itemImport/parser/critter-power/SpritePowerParser.ts", "../src/module/apps/itemImport/importer/SpritePowerImporter.ts", "../src/module/apps/itemImport/apps/import-form.ts", "../src/module/apps/ChangelogApplication.ts", "../src/module/apps/SituationModifiersApplication.ts", "../src/module/apps/skills/SkillEditSheet.ts", "../src/module/apps/skills/LanguageSkillEditSheet.ts", "../src/module/apps/skills/KnowledgeSkillEditSheet.ts", "../src/module/apps/dialogs/MoveInventoryDialog.ts", "../src/module/apps/importer/actorImport/itemImporter/importHelper/BaseParserFunctions.js", "../src/module/apps/importer/actorImport/itemImporter/magicImport/InitiationParser.js", "../src/module/apps/importer/actorImport/itemImporter/technoImport/SubmersionParser.js", "../src/module/apps/importer/actorImport/characterImporter/CharacterInfoUpdater.js", "../src/module/apps/importer/actorImport/itemImporter/importHelper/BaseGearParser.ts", "../src/module/apps/importer/actorImport/itemImporter/bioImport/SinParser.ts", "../src/module/apps/importer/actorImport/itemImporter/matrixImport/DeviceParser.ts", "../src/module/apps/importer/actorImport/itemImporter/matrixImport/ProgramParser.ts", "../src/module/apps/importer/actorImport/itemImporter/weaponImport/AmmoParser.ts", "../src/module/apps/importer/actorImport/itemImporter/importHelper/ParserSelector.ts", "../src/module/apps/importer/actorImport/itemImporter/importHelper/GearsParser.ts", "../src/module/apps/importer/actorImport/itemImporter/armorImport/ArmorParser.js", "../src/module/apps/importer/actorImport/itemImporter/wareImport/WareParser.js", "../src/module/apps/importer/actorImport/itemImporter/bioImport/QualityParser.js", "../src/module/apps/importer/actorImport/itemImporter/magicImport/PowerParser.js", "../src/module/apps/importer/actorImport/itemImporter/magicImport/SpellParser.js", "../src/module/apps/importer/actorImport/itemImporter/weaponImport/WeaponParser.js", "../src/module/apps/importer/actorImport/itemImporter/bioImport/LifestyleParser.js", "../src/module/apps/importer/actorImport/itemImporter/bioImport/ContactParser.js", "../src/module/apps/importer/actorImport/itemImporter/importHelper/SimpleParser.js", "../src/module/apps/importer/actorImport/itemImporter/magicImport/CritterPowerParser.js", "../src/module/apps/importer/actorImport/itemImporter/magicImport/RitualParser.js", "../src/module/apps/importer/actorImport/itemImporter/ItemsParser.js", "../src/module/apps/importer/actorImport/itemImporter/vehicleImport/MountedWeaponParser.js", "../src/module/apps/importer/actorImport/itemImporter/vehicleImport/VehicleModsParser.js", "../src/module/apps/importer/actorImport/itemImporter/vehicleImport/VehicleParser.ts", "../src/module/apps/importer/actorImport/characterImporter/CharacterImporter.js", "../src/module/apps/importer/actorImport/spiritImporter/SpiritInfoUpdater.js", "../src/module/apps/importer/actorImport/spiritImporter/SpiritImporter.js", "../src/module/apps/chummer-import-form.js", "../src/module/apps/importer/actorImport/characterImporter/GenesisInfoUpdater.js", "../src/module/apps/importer/actorImport/characterImporter/GenesisItemsParser.js", "../src/module/apps/importer/actorImport/characterImporter/GenesisImporter.js", "../src/module/apps/genesis-import-form.js", "../src/module/actor/sheets/SR6BaseActorSheet.ts", "../src/module/actor/sheets/SR6ICActorSheet.ts", "../src/module/effect/SR6ActiveEffectConfig.ts", "../src/module/actor/sheets/SR6VehicleActorSheet.ts", "../src/module/actor/sheets/SR6CharacterSheet.ts", "../src/module/actor/sheets/SR6SpiritActorSheet.ts", "../src/module/actor/sheets/SR6SpriteActorSheet.ts", "../src/module/actor/flows/TeamworkFlow.ts", "../src/module/tests/RangedAttackTest.ts", "../src/module/actor/flows/SoakFlow.ts", "../src/module/tests/PhysicalResistTest.ts", "../src/module/tests/MeleeAttackTest.ts", "../src/module/apps/dialogs/SpellcastingTestDialog.ts", "../src/module/tests/SpellCastingTest.ts", "../src/module/tests/DrainTest.ts", "../src/module/rules/CombatSpellRules.ts", "../src/module/tests/CombatSpellDefenseTest.ts", "../src/module/rules/ComplexFormRules.ts", "../src/module/rules/FadeRules.ts", "../src/module/tests/ComplexFormTest.ts", "../src/module/tests/NaturalRecoveryStunTest.ts", "../src/module/tests/NaturalRecoveryPhysicalTest.ts", "../src/module/tests/FadeTest.ts", "../src/module/tests/ThrownAttackTest.ts", "../src/module/tests/PilotVehicleTest.ts", "../src/module/tests/DronePerceptionTest.ts", "../src/module/tests/DroneInfiltrationTest.ts", "../src/module/tests/SuppressionDefenseTest.ts", "../src/module/rules/SpellcastingRules.ts", "../src/module/tests/SummonSpiritTest.ts", "../src/unittests/sr5.SR5Roll.spec.ts", "../src/unittests/utils.ts", "../src/unittests/sr5.RangedWeapon.spec.ts", "../src/unittests/sr5.AttackTests.spec.ts", "../src/unittests/sr5.Modifiers.spec.ts", "../src/unittests/sr5.SR5Item.spec.ts", "../src/unittests/sr5.Matrix.spec.ts", "../src/unittests/sr5.SR5Actor.spec.ts", "../src/unittests/sr5.CharacterDataPrep.spec.ts", "../src/unittests/sr5.CritterDataPrep.spec.ts", "../src/unittests/sr5.SpiritDataPrep.spec.ts", "../src/unittests/sr5.SpriteDataPrep.spec.ts", "../src/unittests/sr5.ICDataPrep.spec.ts", "../src/unittests/sr5.VehicleDataPrep.spec.ts", "../src/module/tests/SkillTest.ts", "../src/unittests/sr5.ActiveEffect.spec.ts", "../src/unittests/sr5.NetworkDevices.spec.ts", "../src/unittests/sr5.Testing.spec.ts", "../src/unittests/sr5.Inventory.spec.ts", "../src/unittests/sr5.WeaponParser.spec.ts", "../src/unittests/actorImport/characterImporter/sr5.CharacterImporter.spec.ts", "../src/unittests/actorImport/characterImporter/sr5.CharacterInfoUpdater.spec.ts", "../src/unittests/actorImport/spiritImporter/spirits.ts", "../src/unittests/actorImport/spiritImporter/sr5.SpiritImporter.spec.ts", "../src/unittests/actorImport/spiritImporter/sr5.SpiritInfoUpdater.spec.ts", "../src/unittests/actorImport/itemImporter/weaponImport/sr5.WeaponImport.spec.ts", "../src/unittests/actorImport/itemImporter/vehicleImport/drone.json", "../src/unittests/actorImport/itemImporter/vehicleImport/sr5.VehicleImporterMountedWeapon.spec.ts", "../src/unittests/sr5.ItemDataPrep.spec.ts", "../src/unittests/actorImport/itemImporter/vehicleImport/vehicle.json", "../src/unittests/actorImport/itemImporter/vehicleImport/sr5.VehicleImporter.spec.ts", "../src/unittests/actorImport/itemImporter/vehicleImport/sr5.VehicleModImporter.spec.ts", "../src/unittests/quench.ts", "../src/module/macros.ts", "../src/module/keybindings.ts", "../src/module/canvas.ts", "../src/module/item/flows/ActionFollowupFlow.ts", "../src/module/tests/OpposedCompileSpriteTest.ts", "../src/module/item/sheets/SR6CallInActionSheet.ts", "../src/module/chatMessage/SR6ChatMessage.ts", "../src/module/vision/astralPerception/astralPerceptionFilter.ts", "../src/module/vision/astralPerception/astralPerceptionDetectionMode.ts", "../src/module/vision/astralPerception/astralPerceptionBackgroundShader.ts", "../src/module/vision/thermographicVision/thermographicFilter.ts", "../src/module/vision/thermographicVision/thermographicDetectionMode.ts", "../src/module/vision/lowlightVision/lowlightFilter.ts", "../src/module/vision/lowlightVision/lowlightDetectionMode.ts", "../src/module/vision/augmentedReality/arFilter.ts", "../src/module/vision/augmentedReality/arDetectionMode.ts", "../src/module/vision/visionConfigurator.ts", "../src/module/effect/autoinline/AutocompleteInlineHooksFlow.ts", "../src/module/systemLinks.ts", "../src/module/tours/sr6Tours.ts", "../src/module/tours/tours.ts", "../src/module/journal/enricher.ts", "../src/module/data/DataStorage.ts", "../src/module/hooks.ts", "../src/module/main.ts"],
  "sourcesContent": ["// Generated by CoffeeScript 1.12.7\n(function() {\n  exports.defaults = {\n    \"0.1\": {\n      explicitCharkey: false,\n      trim: true,\n      normalize: true,\n      normalizeTags: false,\n      attrkey: \"@\",\n      charkey: \"#\",\n      explicitArray: false,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: false,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      childkey: '@@',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      emptyTag: ''\n    },\n    \"0.2\": {\n      explicitCharkey: false,\n      trim: false,\n      normalize: false,\n      normalizeTags: false,\n      attrkey: \"$\",\n      charkey: \"_\",\n      explicitArray: true,\n      ignoreAttrs: false,\n      mergeAttrs: false,\n      explicitRoot: true,\n      validator: null,\n      xmlns: false,\n      explicitChildren: false,\n      preserveChildrenOrder: false,\n      childkey: '$$',\n      charsAsChildren: false,\n      includeWhiteChars: false,\n      async: false,\n      strict: true,\n      attrNameProcessors: null,\n      attrValueProcessors: null,\n      tagNameProcessors: null,\n      valueProcessors: null,\n      rootName: 'root',\n      xmldec: {\n        'version': '1.0',\n        'encoding': 'UTF-8',\n        'standalone': true\n      },\n      doctype: null,\n      renderOpts: {\n        'pretty': true,\n        'indent': '  ',\n        'newline': '\\n'\n      },\n      headless: false,\n      chunkSize: 10000,\n      emptyTag: '',\n      cdata: false\n    }\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var assign, getValue, isArray, isEmpty, isFunction, isObject, isPlainObject,\n    slice = [].slice,\n    hasProp = {}.hasOwnProperty;\n\n  assign = function() {\n    var i, key, len, source, sources, target;\n    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n    if (isFunction(Object.assign)) {\n      Object.assign.apply(null, arguments);\n    } else {\n      for (i = 0, len = sources.length; i < len; i++) {\n        source = sources[i];\n        if (source != null) {\n          for (key in source) {\n            if (!hasProp.call(source, key)) continue;\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n\n  isFunction = function(val) {\n    return !!val && Object.prototype.toString.call(val) === '[object Function]';\n  };\n\n  isObject = function(val) {\n    var ref;\n    return !!val && ((ref = typeof val) === 'function' || ref === 'object');\n  };\n\n  isArray = function(val) {\n    if (isFunction(Array.isArray)) {\n      return Array.isArray(val);\n    } else {\n      return Object.prototype.toString.call(val) === '[object Array]';\n    }\n  };\n\n  isEmpty = function(val) {\n    var key;\n    if (isArray(val)) {\n      return !val.length;\n    } else {\n      for (key in val) {\n        if (!hasProp.call(val, key)) continue;\n        return false;\n      }\n      return true;\n    }\n  };\n\n  isPlainObject = function(val) {\n    var ctor, proto;\n    return isObject(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && (typeof ctor === 'function') && (ctor instanceof ctor) && (Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object));\n  };\n\n  getValue = function(obj) {\n    if (isFunction(obj.valueOf)) {\n      return obj.valueOf();\n    } else {\n      return obj;\n    }\n  };\n\n  module.exports.assign = assign;\n\n  module.exports.isFunction = isFunction;\n\n  module.exports.isObject = isObject;\n\n  module.exports.isArray = isArray;\n\n  module.exports.isEmpty = isEmpty;\n\n  module.exports.isPlainObject = isPlainObject;\n\n  module.exports.getValue = getValue;\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMImplementation;\n\n  module.exports = XMLDOMImplementation = (function() {\n    function XMLDOMImplementation() {}\n\n    XMLDOMImplementation.prototype.hasFeature = function(feature, version) {\n      return true;\n    };\n\n    XMLDOMImplementation.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.createHTMLDocument = function(title) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLDOMImplementation.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLDOMImplementation;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMErrorHandler;\n\n  module.exports = XMLDOMErrorHandler = (function() {\n    function XMLDOMErrorHandler() {}\n\n    XMLDOMErrorHandler.prototype.handleError = function(error) {\n      throw new Error(error);\n    };\n\n    return XMLDOMErrorHandler;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMStringList;\n\n  module.exports = XMLDOMStringList = (function() {\n    function XMLDOMStringList(arr) {\n      this.arr = arr || [];\n    }\n\n    Object.defineProperty(XMLDOMStringList.prototype, 'length', {\n      get: function() {\n        return this.arr.length;\n      }\n    });\n\n    XMLDOMStringList.prototype.item = function(index) {\n      return this.arr[index] || null;\n    };\n\n    XMLDOMStringList.prototype.contains = function(str) {\n      return this.arr.indexOf(str) !== -1;\n    };\n\n    return XMLDOMStringList;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;\n\n  XMLDOMErrorHandler = require('./XMLDOMErrorHandler');\n\n  XMLDOMStringList = require('./XMLDOMStringList');\n\n  module.exports = XMLDOMConfiguration = (function() {\n    function XMLDOMConfiguration() {\n      var clonedSelf;\n      this.defaultParams = {\n        \"canonical-form\": false,\n        \"cdata-sections\": false,\n        \"comments\": false,\n        \"datatype-normalization\": false,\n        \"element-content-whitespace\": true,\n        \"entities\": true,\n        \"error-handler\": new XMLDOMErrorHandler(),\n        \"infoset\": true,\n        \"validate-if-schema\": false,\n        \"namespaces\": true,\n        \"namespace-declarations\": true,\n        \"normalize-characters\": false,\n        \"schema-location\": '',\n        \"schema-type\": '',\n        \"split-cdata-sections\": true,\n        \"validate\": false,\n        \"well-formed\": true\n      };\n      this.params = clonedSelf = Object.create(this.defaultParams);\n    }\n\n    Object.defineProperty(XMLDOMConfiguration.prototype, 'parameterNames', {\n      get: function() {\n        return new XMLDOMStringList(Object.keys(this.defaultParams));\n      }\n    });\n\n    XMLDOMConfiguration.prototype.getParameter = function(name) {\n      if (this.params.hasOwnProperty(name)) {\n        return this.params[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLDOMConfiguration.prototype.canSetParameter = function(name, value) {\n      return true;\n    };\n\n    XMLDOMConfiguration.prototype.setParameter = function(name, value) {\n      if (value != null) {\n        return this.params[name] = value;\n      } else {\n        return delete this.params[name];\n      }\n    };\n\n    return XMLDOMConfiguration;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Element: 1,\n    Attribute: 2,\n    Text: 3,\n    CData: 4,\n    EntityReference: 5,\n    EntityDeclaration: 6,\n    ProcessingInstruction: 7,\n    Comment: 8,\n    Document: 9,\n    DocType: 10,\n    DocumentFragment: 11,\n    NotationDeclaration: 12,\n    Declaration: 201,\n    Raw: 202,\n    AttributeDeclaration: 203,\n    ElementDeclaration: 204,\n    Dummy: 205\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLNode;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLAttribute = (function() {\n    function XMLAttribute(parent, name, value) {\n      this.parent = parent;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.value = this.stringify.attValue(value);\n      this.type = NodeType.Attribute;\n      this.isId = false;\n      this.schemaTypeInfo = null;\n    }\n\n    Object.defineProperty(XMLAttribute.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'ownerElement', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLAttribute.prototype, 'specified', {\n      get: function() {\n        return true;\n      }\n    });\n\n    XMLAttribute.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLAttribute.prototype.toString = function(options) {\n      return this.options.writer.attribute(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLAttribute.prototype.debugInfo = function(name) {\n      name = name || this.name;\n      if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else {\n        return \"attribute: {\" + name + \"}, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLAttribute.prototype.isEqualNode = function(node) {\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.value !== this.value) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLAttribute;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNamedNodeMap;\n\n  module.exports = XMLNamedNodeMap = (function() {\n    function XMLNamedNodeMap(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNamedNodeMap.prototype, 'length', {\n      get: function() {\n        return Object.keys(this.nodes).length || 0;\n      }\n    });\n\n    XMLNamedNodeMap.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItem = function(name) {\n      return this.nodes[name];\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItem = function(node) {\n      var oldNode;\n      oldNode = this.nodes[node.nodeName];\n      this.nodes[node.nodeName] = node;\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItem = function(name) {\n      var oldNode;\n      oldNode = this.nodes[name];\n      delete this.nodes[name];\n      return oldNode || null;\n    };\n\n    XMLNamedNodeMap.prototype.item = function(index) {\n      return this.nodes[Object.keys(this.nodes)[index]] || null;\n    };\n\n    XMLNamedNodeMap.prototype.getNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.setNamedItemNS = function(node) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    XMLNamedNodeMap.prototype.removeNamedItemNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\");\n    };\n\n    return XMLNamedNodeMap;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction, isObject, ref,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, getValue = ref.getValue;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLElement = (function(superClass) {\n    extend(XMLElement, superClass);\n\n    function XMLElement(parent, name, attributes) {\n      var child, j, len, ref1;\n      XMLElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing element name. \" + this.debugInfo());\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.Element;\n      this.attribs = {};\n      this.schemaTypeInfo = null;\n      if (attributes != null) {\n        this.attribute(attributes);\n      }\n      if (parent.type === NodeType.Document) {\n        this.isRoot = true;\n        this.documentObject = parent;\n        parent.rootObject = this;\n        if (parent.children) {\n          ref1 = parent.children;\n          for (j = 0, len = ref1.length; j < len; j++) {\n            child = ref1[j];\n            if (child.type === NodeType.DocType) {\n              child.name = this.name;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    Object.defineProperty(XMLElement.prototype, 'tagName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'namespaceURI', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'prefix', {\n      get: function() {\n        return '';\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'localName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'id', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'className', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'classList', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLElement.prototype, 'attributes', {\n      get: function() {\n        if (!this.attributeMap || !this.attributeMap.nodes) {\n          this.attributeMap = new XMLNamedNodeMap(this.attribs);\n        }\n        return this.attributeMap;\n      }\n    });\n\n    XMLElement.prototype.clone = function() {\n      var att, attName, clonedSelf, ref1;\n      clonedSelf = Object.create(this);\n      if (clonedSelf.isRoot) {\n        clonedSelf.documentObject = null;\n      }\n      clonedSelf.attribs = {};\n      ref1 = this.attribs;\n      for (attName in ref1) {\n        if (!hasProp.call(ref1, attName)) continue;\n        att = ref1[attName];\n        clonedSelf.attribs[attName] = att.clone();\n      }\n      clonedSelf.children = [];\n      this.children.forEach(function(child) {\n        var clonedChild;\n        clonedChild = child.clone();\n        clonedChild.parent = clonedSelf;\n        return clonedSelf.children.push(clonedChild);\n      });\n      return clonedSelf;\n    };\n\n    XMLElement.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLElement.prototype.removeAttribute = function(name) {\n      var attName, j, len;\n      if (name == null) {\n        throw new Error(\"Missing attribute name. \" + this.debugInfo());\n      }\n      name = getValue(name);\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          attName = name[j];\n          delete this.attribs[attName];\n        }\n      } else {\n        delete this.attribs[name];\n      }\n      return this;\n    };\n\n    XMLElement.prototype.toString = function(options) {\n      return this.options.writer.element(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLElement.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLElement.prototype.getAttribute = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].value;\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttribute = function(name, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNode = function(name) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name];\n      } else {\n        return null;\n      }\n    };\n\n    XMLElement.prototype.setAttributeNode = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNode = function(oldAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.removeAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getAttributeNodeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setAttributeNodeNS = function(newAttr) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.hasAttribute = function(name) {\n      return this.attribs.hasOwnProperty(name);\n    };\n\n    XMLElement.prototype.hasAttributeNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttribute = function(name, isId) {\n      if (this.attribs.hasOwnProperty(name)) {\n        return this.attribs[name].isId;\n      } else {\n        return isId;\n      }\n    };\n\n    XMLElement.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.setIdAttributeNode = function(idAttr, isId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLElement.prototype.isEqualNode = function(node) {\n      var i, j, ref1;\n      if (!XMLElement.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.namespaceURI !== this.namespaceURI) {\n        return false;\n      }\n      if (node.prefix !== this.prefix) {\n        return false;\n      }\n      if (node.localName !== this.localName) {\n        return false;\n      }\n      if (node.attribs.length !== this.attribs.length) {\n        return false;\n      }\n      for (i = j = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {\n        if (!this.attribs[i].isEqualNode(node.attribs[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    return XMLElement;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLCharacterData, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLCharacterData = (function(superClass) {\n    extend(XMLCharacterData, superClass);\n\n    function XMLCharacterData(parent) {\n      XMLCharacterData.__super__.constructor.call(this, parent);\n      this.value = '';\n    }\n\n    Object.defineProperty(XMLCharacterData.prototype, 'data', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'length', {\n      get: function() {\n        return this.value.length;\n      }\n    });\n\n    Object.defineProperty(XMLCharacterData.prototype, 'textContent', {\n      get: function() {\n        return this.value;\n      },\n      set: function(value) {\n        return this.value = value || '';\n      }\n    });\n\n    XMLCharacterData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCharacterData.prototype.substringData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.appendData = function(arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.insertData = function(offset, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.deleteData = function(offset, count) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.replaceData = function(offset, count, arg) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLCharacterData.prototype.isEqualNode = function(node) {\n      if (!XMLCharacterData.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.data !== this.data) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLCharacterData;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCData, XMLCharacterData,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLCData = (function(superClass) {\n    extend(XMLCData, superClass);\n\n    function XMLCData(parent, text) {\n      XMLCData.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing CDATA text. \" + this.debugInfo());\n      }\n      this.name = \"#cdata-section\";\n      this.type = NodeType.CData;\n      this.value = this.stringify.cdata(text);\n    }\n\n    XMLCData.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLCData.prototype.toString = function(options) {\n      return this.options.writer.cdata(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLCData;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLComment,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLComment = (function(superClass) {\n    extend(XMLComment, superClass);\n\n    function XMLComment(parent, text) {\n      XMLComment.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing comment text. \" + this.debugInfo());\n      }\n      this.name = \"#comment\";\n      this.type = NodeType.Comment;\n      this.value = this.stringify.comment(text);\n    }\n\n    XMLComment.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLComment.prototype.toString = function(options) {\n      return this.options.writer.comment(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLComment;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDeclaration, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDeclaration = (function(superClass) {\n    extend(XMLDeclaration, superClass);\n\n    function XMLDeclaration(parent, version, encoding, standalone) {\n      var ref;\n      XMLDeclaration.__super__.constructor.call(this, parent);\n      if (isObject(version)) {\n        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;\n      }\n      if (!version) {\n        version = '1.0';\n      }\n      this.type = NodeType.Declaration;\n      this.version = this.stringify.xmlVersion(version);\n      if (encoding != null) {\n        this.encoding = this.stringify.xmlEncoding(encoding);\n      }\n      if (standalone != null) {\n        this.standalone = this.stringify.xmlStandalone(standalone);\n      }\n    }\n\n    XMLDeclaration.prototype.toString = function(options) {\n      return this.options.writer.declaration(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDeclaration;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDAttList = (function(superClass) {\n    extend(XMLDTDAttList, superClass);\n\n    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      XMLDTDAttList.__super__.constructor.call(this, parent);\n      if (elementName == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (attributeName == null) {\n        throw new Error(\"Missing DTD attribute name. \" + this.debugInfo(elementName));\n      }\n      if (!attributeType) {\n        throw new Error(\"Missing DTD attribute type. \" + this.debugInfo(elementName));\n      }\n      if (!defaultValueType) {\n        throw new Error(\"Missing DTD attribute default. \" + this.debugInfo(elementName));\n      }\n      if (defaultValueType.indexOf('#') !== 0) {\n        defaultValueType = '#' + defaultValueType;\n      }\n      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {\n        throw new Error(\"Default value only applies to #FIXED or #DEFAULT. \" + this.debugInfo(elementName));\n      }\n      this.elementName = this.stringify.name(elementName);\n      this.type = NodeType.AttributeDeclaration;\n      this.attributeName = this.stringify.name(attributeName);\n      this.attributeType = this.stringify.dtdAttType(attributeType);\n      if (defaultValue) {\n        this.defaultValue = this.stringify.dtdAttDefault(defaultValue);\n      }\n      this.defaultValueType = defaultValueType;\n    }\n\n    XMLDTDAttList.prototype.toString = function(options) {\n      return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDAttList;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDEntity, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDEntity = (function(superClass) {\n    extend(XMLDTDEntity, superClass);\n\n    function XMLDTDEntity(parent, pe, name, value) {\n      XMLDTDEntity.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD entity name. \" + this.debugInfo(name));\n      }\n      if (value == null) {\n        throw new Error(\"Missing DTD entity value. \" + this.debugInfo(name));\n      }\n      this.pe = !!pe;\n      this.name = this.stringify.name(name);\n      this.type = NodeType.EntityDeclaration;\n      if (!isObject(value)) {\n        this.value = this.stringify.dtdEntityValue(value);\n        this.internal = true;\n      } else {\n        if (!value.pubID && !value.sysID) {\n          throw new Error(\"Public and/or system identifiers are required for an external entity. \" + this.debugInfo(name));\n        }\n        if (value.pubID && !value.sysID) {\n          throw new Error(\"System identifier is required for a public external entity. \" + this.debugInfo(name));\n        }\n        this.internal = false;\n        if (value.pubID != null) {\n          this.pubID = this.stringify.dtdPubID(value.pubID);\n        }\n        if (value.sysID != null) {\n          this.sysID = this.stringify.dtdSysID(value.sysID);\n        }\n        if (value.nData != null) {\n          this.nData = this.stringify.dtdNData(value.nData);\n        }\n        if (this.pe && this.nData) {\n          throw new Error(\"Notation declaration is not allowed in a parameter entity. \" + this.debugInfo(name));\n        }\n      }\n    }\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'notationName', {\n      get: function() {\n        return this.nData || null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDTDEntity.prototype, 'xmlVersion', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDTDEntity.prototype.toString = function(options) {\n      return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDEntity;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDElement, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDElement = (function(superClass) {\n    extend(XMLDTDElement, superClass);\n\n    function XMLDTDElement(parent, name, value) {\n      XMLDTDElement.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD element name. \" + this.debugInfo());\n      }\n      if (!value) {\n        value = '(#PCDATA)';\n      }\n      if (Array.isArray(value)) {\n        value = '(' + value.join(',') + ')';\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.ElementDeclaration;\n      this.value = this.stringify.dtdElementValue(value);\n    }\n\n    XMLDTDElement.prototype.toString = function(options) {\n      return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDElement;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDNotation, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDTDNotation = (function(superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.name(name);\n      this.type = NodeType.NotationDeclaration;\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDTDNotation.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    XMLDTDNotation.prototype.toString = function(options) {\n      return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLDTDNotation;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isObject = require('./Utility').isObject;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLNamedNodeMap = require('./XMLNamedNodeMap');\n\n  module.exports = XMLDocType = (function(superClass) {\n    extend(XMLDocType, superClass);\n\n    function XMLDocType(parent, pubID, sysID) {\n      var child, i, len, ref, ref1, ref2;\n      XMLDocType.__super__.constructor.call(this, parent);\n      this.type = NodeType.DocType;\n      if (parent.children) {\n        ref = parent.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.Element) {\n            this.name = child.name;\n            break;\n          }\n        }\n      }\n      this.documentObject = parent;\n      if (isObject(pubID)) {\n        ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;\n      }\n      if (sysID == null) {\n        ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];\n      }\n      if (pubID != null) {\n        this.pubID = this.stringify.dtdPubID(pubID);\n      }\n      if (sysID != null) {\n        this.sysID = this.stringify.dtdSysID(sysID);\n      }\n    }\n\n    Object.defineProperty(XMLDocType.prototype, 'entities', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if ((child.type === NodeType.EntityDeclaration) && !child.pe) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'notations', {\n      get: function() {\n        var child, i, len, nodes, ref;\n        nodes = {};\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.NotationDeclaration) {\n            nodes[child.name] = child;\n          }\n        }\n        return new XMLNamedNodeMap(nodes);\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'publicId', {\n      get: function() {\n        return this.pubID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'systemId', {\n      get: function() {\n        return this.sysID;\n      }\n    });\n\n    Object.defineProperty(XMLDocType.prototype, 'internalSubset', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLDocType.prototype.element = function(name, value) {\n      var child;\n      child = new XMLDTDElement(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var child;\n      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.entity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, false, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.pEntity = function(name, value) {\n      var child;\n      child = new XMLDTDEntity(this, true, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.notation = function(name, value) {\n      var child;\n      child = new XMLDTDNotation(this, name, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLDocType.prototype.toString = function(options) {\n      return this.options.writer.docType(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocType.prototype.ele = function(name, value) {\n      return this.element(name, value);\n    };\n\n    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);\n    };\n\n    XMLDocType.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocType.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocType.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    XMLDocType.prototype.up = function() {\n      return this.root() || this.documentObject;\n    };\n\n    XMLDocType.prototype.isEqualNode = function(node) {\n      if (!XMLDocType.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.name !== this.name) {\n        return false;\n      }\n      if (node.publicId !== this.publicId) {\n        return false;\n      }\n      if (node.systemId !== this.systemId) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLDocType;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLNode, XMLRaw,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLRaw = (function(superClass) {\n    extend(XMLRaw, superClass);\n\n    function XMLRaw(parent, text) {\n      XMLRaw.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing raw text. \" + this.debugInfo());\n      }\n      this.type = NodeType.Raw;\n      this.value = this.stringify.raw(text);\n    }\n\n    XMLRaw.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLRaw.prototype.toString = function(options) {\n      return this.options.writer.raw(this, this.options.writer.filterOptions(options));\n    };\n\n    return XMLRaw;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLText,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLText = (function(superClass) {\n    extend(XMLText, superClass);\n\n    function XMLText(parent, text) {\n      XMLText.__super__.constructor.call(this, parent);\n      if (text == null) {\n        throw new Error(\"Missing element text. \" + this.debugInfo());\n      }\n      this.name = \"#text\";\n      this.type = NodeType.Text;\n      this.value = this.stringify.text(text);\n    }\n\n    Object.defineProperty(XMLText.prototype, 'isElementContentWhitespace', {\n      get: function() {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    Object.defineProperty(XMLText.prototype, 'wholeText', {\n      get: function() {\n        var next, prev, str;\n        str = '';\n        prev = this.previousSibling;\n        while (prev) {\n          str = prev.data + str;\n          prev = prev.previousSibling;\n        }\n        str += this.data;\n        next = this.nextSibling;\n        while (next) {\n          str = str + next.data;\n          next = next.nextSibling;\n        }\n        return str;\n      }\n    });\n\n    XMLText.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLText.prototype.toString = function(options) {\n      return this.options.writer.text(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLText.prototype.splitText = function(offset) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLText.prototype.replaceWholeText = function(content) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLText;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLCharacterData, XMLProcessingInstruction,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLCharacterData = require('./XMLCharacterData');\n\n  module.exports = XMLProcessingInstruction = (function(superClass) {\n    extend(XMLProcessingInstruction, superClass);\n\n    function XMLProcessingInstruction(parent, target, value) {\n      XMLProcessingInstruction.__super__.constructor.call(this, parent);\n      if (target == null) {\n        throw new Error(\"Missing instruction target. \" + this.debugInfo());\n      }\n      this.type = NodeType.ProcessingInstruction;\n      this.target = this.stringify.insTarget(target);\n      this.name = this.target;\n      if (value) {\n        this.value = this.stringify.insValue(value);\n      }\n    }\n\n    XMLProcessingInstruction.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLProcessingInstruction.prototype.toString = function(options) {\n      return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLProcessingInstruction.prototype.isEqualNode = function(node) {\n      if (!XMLProcessingInstruction.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {\n        return false;\n      }\n      if (node.target !== this.target) {\n        return false;\n      }\n      return true;\n    };\n\n    return XMLProcessingInstruction;\n\n  })(XMLCharacterData);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDummy, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  module.exports = XMLDummy = (function(superClass) {\n    extend(XMLDummy, superClass);\n\n    function XMLDummy(parent) {\n      XMLDummy.__super__.constructor.call(this, parent);\n      this.type = NodeType.Dummy;\n    }\n\n    XMLDummy.prototype.clone = function() {\n      return Object.create(this);\n    };\n\n    XMLDummy.prototype.toString = function(options) {\n      return '';\n    };\n\n    return XMLDummy;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLNodeList;\n\n  module.exports = XMLNodeList = (function() {\n    function XMLNodeList(nodes) {\n      this.nodes = nodes;\n    }\n\n    Object.defineProperty(XMLNodeList.prototype, 'length', {\n      get: function() {\n        return this.nodes.length || 0;\n      }\n    });\n\n    XMLNodeList.prototype.clone = function() {\n      return this.nodes = null;\n    };\n\n    XMLNodeList.prototype.item = function(index) {\n      return this.nodes[index] || null;\n    };\n\n    return XMLNodeList;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    Disconnected: 1,\n    Preceding: 2,\n    Following: 4,\n    Contains: 8,\n    ContainedBy: 16,\n    ImplementationSpecific: 32\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction, isObject, ref1,\n    hasProp = {}.hasOwnProperty;\n\n  ref1 = require('./Utility'), isObject = ref1.isObject, isFunction = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;\n\n  XMLElement = null;\n\n  XMLCData = null;\n\n  XMLComment = null;\n\n  XMLDeclaration = null;\n\n  XMLDocType = null;\n\n  XMLRaw = null;\n\n  XMLText = null;\n\n  XMLProcessingInstruction = null;\n\n  XMLDummy = null;\n\n  NodeType = null;\n\n  XMLNodeList = null;\n\n  XMLNamedNodeMap = null;\n\n  DocumentPosition = null;\n\n  module.exports = XMLNode = (function() {\n    function XMLNode(parent1) {\n      this.parent = parent1;\n      if (this.parent) {\n        this.options = this.parent.options;\n        this.stringify = this.parent.stringify;\n      }\n      this.value = null;\n      this.children = [];\n      this.baseURI = null;\n      if (!XMLElement) {\n        XMLElement = require('./XMLElement');\n        XMLCData = require('./XMLCData');\n        XMLComment = require('./XMLComment');\n        XMLDeclaration = require('./XMLDeclaration');\n        XMLDocType = require('./XMLDocType');\n        XMLRaw = require('./XMLRaw');\n        XMLText = require('./XMLText');\n        XMLProcessingInstruction = require('./XMLProcessingInstruction');\n        XMLDummy = require('./XMLDummy');\n        NodeType = require('./NodeType');\n        XMLNodeList = require('./XMLNodeList');\n        XMLNamedNodeMap = require('./XMLNamedNodeMap');\n        DocumentPosition = require('./DocumentPosition');\n      }\n    }\n\n    Object.defineProperty(XMLNode.prototype, 'nodeName', {\n      get: function() {\n        return this.name;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeType', {\n      get: function() {\n        return this.type;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nodeValue', {\n      get: function() {\n        return this.value;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'parentNode', {\n      get: function() {\n        return this.parent;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'childNodes', {\n      get: function() {\n        if (!this.childNodeList || !this.childNodeList.nodes) {\n          this.childNodeList = new XMLNodeList(this.children);\n        }\n        return this.childNodeList;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'firstChild', {\n      get: function() {\n        return this.children[0] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'lastChild', {\n      get: function() {\n        return this.children[this.children.length - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'previousSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i - 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'nextSibling', {\n      get: function() {\n        var i;\n        i = this.parent.children.indexOf(this);\n        return this.parent.children[i + 1] || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'ownerDocument', {\n      get: function() {\n        return this.document() || null;\n      }\n    });\n\n    Object.defineProperty(XMLNode.prototype, 'textContent', {\n      get: function() {\n        var child, j, len, ref2, str;\n        if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {\n          str = '';\n          ref2 = this.children;\n          for (j = 0, len = ref2.length; j < len; j++) {\n            child = ref2[j];\n            if (child.textContent) {\n              str += child.textContent;\n            }\n          }\n          return str;\n        } else {\n          return null;\n        }\n      },\n      set: function(value) {\n        throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n      }\n    });\n\n    XMLNode.prototype.setParent = function(parent) {\n      var child, j, len, ref2, results;\n      this.parent = parent;\n      if (parent) {\n        this.options = parent.options;\n        this.stringify = parent.stringify;\n      }\n      ref2 = this.children;\n      results = [];\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        results.push(child.setParent(this));\n      }\n      return results;\n    };\n\n    XMLNode.prototype.element = function(name, attributes, text) {\n      var childNode, item, j, k, key, lastChild, len, len1, ref2, ref3, val;\n      lastChild = null;\n      if (attributes === null && (text == null)) {\n        ref2 = [{}, null], attributes = ref2[0], text = ref2[1];\n      }\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (Array.isArray(name)) {\n        for (j = 0, len = name.length; j < len; j++) {\n          item = name[j];\n          lastChild = this.element(item);\n        }\n      } else if (isFunction(name)) {\n        lastChild = this.element(name.apply());\n      } else if (isObject(name)) {\n        for (key in name) {\n          if (!hasProp.call(name, key)) continue;\n          val = name[key];\n          if (isFunction(val)) {\n            val = val.apply();\n          }\n          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {\n            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);\n          } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {\n            lastChild = this.dummy();\n          } else if (isObject(val) && isEmpty(val)) {\n            lastChild = this.element(key);\n          } else if (!this.options.keepNullNodes && (val == null)) {\n            lastChild = this.dummy();\n          } else if (!this.options.separateArrayItems && Array.isArray(val)) {\n            for (k = 0, len1 = val.length; k < len1; k++) {\n              item = val[k];\n              childNode = {};\n              childNode[key] = item;\n              lastChild = this.element(childNode);\n            }\n          } else if (isObject(val)) {\n            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {\n              lastChild = this.element(val);\n            } else {\n              lastChild = this.element(key);\n              lastChild.element(val);\n            }\n          } else {\n            lastChild = this.element(key, val);\n          }\n        }\n      } else if (!this.options.keepNullNodes && text === null) {\n        lastChild = this.dummy();\n      } else {\n        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {\n          lastChild = this.text(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {\n          lastChild = this.cdata(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {\n          lastChild = this.comment(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {\n          lastChild = this.raw(text);\n        } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {\n          lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);\n        } else {\n          lastChild = this.node(name, attributes, text);\n        }\n      }\n      if (lastChild == null) {\n        throw new Error(\"Could not create any elements with: \" + name + \". \" + this.debugInfo());\n      }\n      return lastChild;\n    };\n\n    XMLNode.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, newChild, refChild, removed;\n      if (name != null ? name.type : void 0) {\n        newChild = name;\n        refChild = attributes;\n        newChild.setParent(this);\n        if (refChild) {\n          i = children.indexOf(refChild);\n          removed = children.splice(i);\n          children.push(newChild);\n          Array.prototype.push.apply(children, removed);\n        } else {\n          children.push(newChild);\n        }\n        return newChild;\n      } else {\n        if (this.isRoot) {\n          throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n        }\n        i = this.parent.children.indexOf(this);\n        removed = this.parent.children.splice(i);\n        child = this.parent.element(name, attributes, text);\n        Array.prototype.push.apply(this.parent.children, removed);\n        return child;\n      }\n    };\n\n    XMLNode.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, removed;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level. \" + this.debugInfo(name));\n      }\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.element(name, attributes, text);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return child;\n    };\n\n    XMLNode.prototype.remove = function() {\n      var i, ref2;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element. \" + this.debugInfo());\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref2 = [])), ref2;\n      return this.parent;\n    };\n\n    XMLNode.prototype.node = function(name, attributes, text) {\n      var child, ref2;\n      if (name != null) {\n        name = getValue(name);\n      }\n      attributes || (attributes = {});\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];\n      }\n      child = new XMLElement(this, name, attributes);\n      if (text != null) {\n        child.text(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLNode.prototype.text = function(value) {\n      var child;\n      if (isObject(value)) {\n        this.element(value);\n      }\n      child = new XMLText(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.cdata = function(value) {\n      var child;\n      child = new XMLCData(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.comment = function(value) {\n      var child;\n      child = new XMLComment(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.commentBefore = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.commentAfter = function(value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.comment(value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.raw = function(value) {\n      var child;\n      child = new XMLRaw(this, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLNode.prototype.dummy = function() {\n      var child;\n      child = new XMLDummy(this);\n      return child;\n    };\n\n    XMLNode.prototype.instruction = function(target, value) {\n      var insTarget, insValue, instruction, j, len;\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (j = 0, len = target.length; j < len; j++) {\n          insTarget = target[j];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        instruction = new XMLProcessingInstruction(this, target, value);\n        this.children.push(instruction);\n      }\n      return this;\n    };\n\n    XMLNode.prototype.instructionBefore = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.instructionAfter = function(target, value) {\n      var child, i, removed;\n      i = this.parent.children.indexOf(this);\n      removed = this.parent.children.splice(i + 1);\n      child = this.parent.instruction(target, value);\n      Array.prototype.push.apply(this.parent.children, removed);\n      return this;\n    };\n\n    XMLNode.prototype.declaration = function(version, encoding, standalone) {\n      var doc, xmldec;\n      doc = this.document();\n      xmldec = new XMLDeclaration(doc, version, encoding, standalone);\n      if (doc.children.length === 0) {\n        doc.children.unshift(xmldec);\n      } else if (doc.children[0].type === NodeType.Declaration) {\n        doc.children[0] = xmldec;\n      } else {\n        doc.children.unshift(xmldec);\n      }\n      return doc.root() || doc;\n    };\n\n    XMLNode.prototype.dtd = function(pubID, sysID) {\n      var child, doc, doctype, i, j, k, len, len1, ref2, ref3;\n      doc = this.document();\n      doctype = new XMLDocType(doc, pubID, sysID);\n      ref2 = doc.children;\n      for (i = j = 0, len = ref2.length; j < len; i = ++j) {\n        child = ref2[i];\n        if (child.type === NodeType.DocType) {\n          doc.children[i] = doctype;\n          return doctype;\n        }\n      }\n      ref3 = doc.children;\n      for (i = k = 0, len1 = ref3.length; k < len1; i = ++k) {\n        child = ref3[i];\n        if (child.isRoot) {\n          doc.children.splice(i, 0, doctype);\n          return doctype;\n        }\n      }\n      doc.children.push(doctype);\n      return doctype;\n    };\n\n    XMLNode.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"The root node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLNode.prototype.root = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node.rootObject;\n        } else if (node.isRoot) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.document = function() {\n      var node;\n      node = this;\n      while (node) {\n        if (node.type === NodeType.Document) {\n          return node;\n        } else {\n          node = node.parent;\n        }\n      }\n    };\n\n    XMLNode.prototype.end = function(options) {\n      return this.document().end(options);\n    };\n\n    XMLNode.prototype.prev = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node. \" + this.debugInfo());\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLNode.prototype.next = function() {\n      var i;\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node. \" + this.debugInfo());\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLNode.prototype.importDocument = function(doc) {\n      var clonedRoot;\n      clonedRoot = doc.root().clone();\n      clonedRoot.parent = this;\n      clonedRoot.isRoot = false;\n      this.children.push(clonedRoot);\n      return this;\n    };\n\n    XMLNode.prototype.debugInfo = function(name) {\n      var ref2, ref3;\n      name = name || this.name;\n      if ((name == null) && !((ref2 = this.parent) != null ? ref2.name : void 0)) {\n        return \"\";\n      } else if (name == null) {\n        return \"parent: <\" + this.parent.name + \">\";\n      } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {\n        return \"node: <\" + name + \">\";\n      } else {\n        return \"node: <\" + name + \">, parent: <\" + this.parent.name + \">\";\n      }\n    };\n\n    XMLNode.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLNode.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLNode.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLNode.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLNode.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLNode.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLNode.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLNode.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLNode.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLNode.prototype.u = function() {\n      return this.up();\n    };\n\n    XMLNode.prototype.importXMLBuilder = function(doc) {\n      return this.importDocument(doc);\n    };\n\n    XMLNode.prototype.replaceChild = function(newChild, oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.removeChild = function(oldChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.appendChild = function(newChild) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.hasChildNodes = function() {\n      return this.children.length !== 0;\n    };\n\n    XMLNode.prototype.cloneNode = function(deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.normalize = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isSupported = function(feature, version) {\n      return true;\n    };\n\n    XMLNode.prototype.hasAttributes = function() {\n      return this.attribs.length !== 0;\n    };\n\n    XMLNode.prototype.compareDocumentPosition = function(other) {\n      var ref, res;\n      ref = this;\n      if (ref === other) {\n        return 0;\n      } else if (this.document() !== other.document()) {\n        res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;\n        if (Math.random() < 0.5) {\n          res |= DocumentPosition.Preceding;\n        } else {\n          res |= DocumentPosition.Following;\n        }\n        return res;\n      } else if (ref.isAncestor(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Preceding;\n      } else if (ref.isDescendant(other)) {\n        return DocumentPosition.Contains | DocumentPosition.Following;\n      } else if (ref.isPreceding(other)) {\n        return DocumentPosition.Preceding;\n      } else {\n        return DocumentPosition.Following;\n      }\n    };\n\n    XMLNode.prototype.isSameNode = function(other) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupPrefix = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isDefaultNamespace = function(namespaceURI) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.lookupNamespaceURI = function(prefix) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.isEqualNode = function(node) {\n      var i, j, ref2;\n      if (node.nodeType !== this.nodeType) {\n        return false;\n      }\n      if (node.children.length !== this.children.length) {\n        return false;\n      }\n      for (i = j = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j <= ref2 : j >= ref2; i = 0 <= ref2 ? ++j : --j) {\n        if (!this.children[i].isEqualNode(node.children[i])) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    XMLNode.prototype.getFeature = function(feature, version) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.setUserData = function(key, data, handler) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.getUserData = function(key) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLNode.prototype.contains = function(other) {\n      if (!other) {\n        return false;\n      }\n      return other === this || this.isDescendant(other);\n    };\n\n    XMLNode.prototype.isDescendant = function(node) {\n      var child, isDescendantChild, j, len, ref2;\n      ref2 = this.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (node === child) {\n          return true;\n        }\n        isDescendantChild = child.isDescendant(node);\n        if (isDescendantChild) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    XMLNode.prototype.isAncestor = function(node) {\n      return node.isDescendant(this);\n    };\n\n    XMLNode.prototype.isPreceding = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos < thisPos;\n      }\n    };\n\n    XMLNode.prototype.isFollowing = function(node) {\n      var nodePos, thisPos;\n      nodePos = this.treePosition(node);\n      thisPos = this.treePosition(this);\n      if (nodePos === -1 || thisPos === -1) {\n        return false;\n      } else {\n        return nodePos > thisPos;\n      }\n    };\n\n    XMLNode.prototype.treePosition = function(node) {\n      var found, pos;\n      pos = 0;\n      found = false;\n      this.foreachTreeNode(this.document(), function(childNode) {\n        pos++;\n        if (!found && childNode === node) {\n          return found = true;\n        }\n      });\n      if (found) {\n        return pos;\n      } else {\n        return -1;\n      }\n    };\n\n    XMLNode.prototype.foreachTreeNode = function(node, func) {\n      var child, j, len, ref2, res;\n      node || (node = this.document());\n      ref2 = node.children;\n      for (j = 0, len = ref2.length; j < len; j++) {\n        child = ref2[j];\n        if (res = func(child)) {\n          return res;\n        } else {\n          res = this.foreachTreeNode(child, func);\n          if (res) {\n            return res;\n          }\n        }\n      }\n    };\n\n    return XMLNode;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringifier,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  module.exports = XMLStringifier = (function() {\n    function XMLStringifier(options) {\n      this.assertLegalName = bind(this.assertLegalName, this);\n      this.assertLegalChar = bind(this.assertLegalChar, this);\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      if (!this.options.version) {\n        this.options.version = '1.0';\n      }\n      ref = options.stringify || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[key] = value;\n      }\n    }\n\n    XMLStringifier.prototype.name = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalName('' + val || '');\n    };\n\n    XMLStringifier.prototype.text = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.textEscape('' + val || ''));\n    };\n\n    XMLStringifier.prototype.cdata = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      val = val.replace(']]>', ']]]]><![CDATA[>');\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.comment = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.raw = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return '' + val || '';\n    };\n\n    XMLStringifier.prototype.attValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar(this.attEscape(val = '' + val || ''));\n    };\n\n    XMLStringifier.prototype.insTarget = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.insValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (val.match(/\\?>/)) {\n        throw new Error(\"Invalid processing instruction value: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlVersion = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/1\\.[0-9]+/)) {\n        throw new Error(\"Invalid version number: \" + val);\n      }\n      return val;\n    };\n\n    XMLStringifier.prototype.xmlEncoding = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      val = '' + val || '';\n      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {\n        throw new Error(\"Invalid encoding: \" + val);\n      }\n      return this.assertLegalChar(val);\n    };\n\n    XMLStringifier.prototype.xmlStandalone = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      if (val) {\n        return \"yes\";\n      } else {\n        return \"no\";\n      }\n    };\n\n    XMLStringifier.prototype.dtdPubID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdSysID = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdElementValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttType = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdAttDefault = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdEntityValue = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.dtdNData = function(val) {\n      if (this.options.noValidation) {\n        return val;\n      }\n      return this.assertLegalChar('' + val || '');\n    };\n\n    XMLStringifier.prototype.convertAttKey = '@';\n\n    XMLStringifier.prototype.convertPIKey = '?';\n\n    XMLStringifier.prototype.convertTextKey = '#text';\n\n    XMLStringifier.prototype.convertCDataKey = '#cdata';\n\n    XMLStringifier.prototype.convertCommentKey = '#comment';\n\n    XMLStringifier.prototype.convertRawKey = '#raw';\n\n    XMLStringifier.prototype.assertLegalChar = function(str) {\n      var regex, res;\n      if (this.options.noValidation) {\n        return str;\n      }\n      regex = '';\n      if (this.options.version === '1.0') {\n        regex = /[\\0-\\x08\\x0B\\f\\x0E-\\x1F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      } else if (this.options.version === '1.1') {\n        regex = /[\\0\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\n        if (res = str.match(regex)) {\n          throw new Error(\"Invalid character in string: \" + str + \" at index \" + res.index);\n        }\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.assertLegalName = function(str) {\n      var regex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      this.assertLegalChar(str);\n      regex = /^([:A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])([\\x2D\\.0-:A-Z_a-z\\xB7\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u037D\\u037F-\\u1FFF\\u200C\\u200D\\u203F\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDB7F][\\uDC00-\\uDFFF])*$/;\n      if (!str.match(regex)) {\n        throw new Error(\"Invalid character in name\");\n      }\n      return str;\n    };\n\n    XMLStringifier.prototype.textEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\r/g, '&#xD;');\n    };\n\n    XMLStringifier.prototype.attEscape = function(str) {\n      var ampregex;\n      if (this.options.noValidation) {\n        return str;\n      }\n      ampregex = this.options.noDoubleEncoding ? /(?!&\\S+;)&/g : /&/g;\n      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/\"/g, '&quot;').replace(/\\t/g, '&#x9;').replace(/\\n/g, '&#xA;').replace(/\\r/g, '&#xD;');\n    };\n\n    return XMLStringifier;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  module.exports = {\n    None: 0,\n    OpenTag: 1,\n    InsideTag: 2,\n    CloseTag: 3\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign,\n    hasProp = {}.hasOwnProperty;\n\n  assign = require('./Utility').assign;\n\n  NodeType = require('./NodeType');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLElement = require('./XMLElement');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDummy = require('./XMLDummy');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLWriterBase = (function() {\n    function XMLWriterBase(options) {\n      var key, ref, value;\n      options || (options = {});\n      this.options = options;\n      ref = options.writer || {};\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this[\"_\" + key] = this[key];\n        this[key] = value;\n      }\n    }\n\n    XMLWriterBase.prototype.filterOptions = function(options) {\n      var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;\n      options || (options = {});\n      options = assign({}, this.options, options);\n      filteredOptions = {\n        writer: this\n      };\n      filteredOptions.pretty = options.pretty || false;\n      filteredOptions.allowEmpty = options.allowEmpty || false;\n      filteredOptions.indent = (ref = options.indent) != null ? ref : '  ';\n      filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : '\\n';\n      filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;\n      filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;\n      filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : '';\n      if (filteredOptions.spaceBeforeSlash === true) {\n        filteredOptions.spaceBeforeSlash = ' ';\n      }\n      filteredOptions.suppressPrettyCount = 0;\n      filteredOptions.user = {};\n      filteredOptions.state = WriterState.None;\n      return filteredOptions;\n    };\n\n    XMLWriterBase.prototype.indent = function(node, options, level) {\n      var indentLevel;\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else if (options.pretty) {\n        indentLevel = (level || 0) + options.offset + 1;\n        if (indentLevel > 0) {\n          return new Array(indentLevel).join(options.indent);\n        }\n      }\n      return '';\n    };\n\n    XMLWriterBase.prototype.endline = function(node, options, level) {\n      if (!options.pretty || options.suppressPrettyCount) {\n        return '';\n      } else {\n        return options.newline;\n      }\n    };\n\n    XMLWriterBase.prototype.attribute = function(att, options, level) {\n      var r;\n      this.openAttribute(att, options, level);\n      r = ' ' + att.name + '=\"' + att.value + '\"';\n      this.closeAttribute(att, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.cdata = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<![CDATA[';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ']]>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.comment = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!-- ';\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += ' -->' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.declaration = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?xml';\n      options.state = WriterState.InsideTag;\n      r += ' version=\"' + node.version + '\"';\n      if (node.encoding != null) {\n        r += ' encoding=\"' + node.encoding + '\"';\n      }\n      if (node.standalone != null) {\n        r += ' standalone=\"' + node.standalone + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.docType = function(node, options, level) {\n      var child, i, len, r, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      r += '<!DOCTYPE ' + node.root().name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      if (node.children.length > 0) {\n        r += ' [';\n        r += this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += ']';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, i, j, len, len1, name, prettySuppressed, r, ref, ref1, ref2;\n      level || (level = 0);\n      prettySuppressed = false;\n      r = '';\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r += this.indent(node, options, level) + '<' + node.name;\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        r += this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          r += '>';\n          options.state = WriterState.CloseTag;\n          r += '</' + node.name + '>' + this.endline(node, options, level);\n        } else {\n          options.state = WriterState.CloseTag;\n          r += options.spaceBeforeSlash + '/>' + this.endline(node, options, level);\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        r += '>';\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        r += this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        r += '</' + node.name + '>' + this.endline(node, options, level);\n      } else {\n        if (options.dontPrettyTextNodes) {\n          ref1 = node.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            if ((child.type === NodeType.Text || child.type === NodeType.Raw) && (child.value != null)) {\n              options.suppressPrettyCount++;\n              prettySuppressed = true;\n              break;\n            }\n          }\n        }\n        r += '>' + this.endline(node, options, level);\n        options.state = WriterState.InsideTag;\n        ref2 = node.children;\n        for (j = 0, len1 = ref2.length; j < len1; j++) {\n          child = ref2[j];\n          r += this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        r += this.indent(node, options, level) + '</' + node.name + '>';\n        if (prettySuppressed) {\n          options.suppressPrettyCount--;\n        }\n        r += this.endline(node, options, level);\n        options.state = WriterState.None;\n      }\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.writeChildNode = function(node, options, level) {\n      switch (node.type) {\n        case NodeType.CData:\n          return this.cdata(node, options, level);\n        case NodeType.Comment:\n          return this.comment(node, options, level);\n        case NodeType.Element:\n          return this.element(node, options, level);\n        case NodeType.Raw:\n          return this.raw(node, options, level);\n        case NodeType.Text:\n          return this.text(node, options, level);\n        case NodeType.ProcessingInstruction:\n          return this.processingInstruction(node, options, level);\n        case NodeType.Dummy:\n          return '';\n        case NodeType.Declaration:\n          return this.declaration(node, options, level);\n        case NodeType.DocType:\n          return this.docType(node, options, level);\n        case NodeType.AttributeDeclaration:\n          return this.dtdAttList(node, options, level);\n        case NodeType.ElementDeclaration:\n          return this.dtdElement(node, options, level);\n        case NodeType.EntityDeclaration:\n          return this.dtdEntity(node, options, level);\n        case NodeType.NotationDeclaration:\n          return this.dtdNotation(node, options, level);\n        default:\n          throw new Error(\"Unknown XML node type: \" + node.constructor.name);\n      }\n    };\n\n    XMLWriterBase.prototype.processingInstruction = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<?';\n      options.state = WriterState.InsideTag;\n      r += node.target;\n      if (node.value) {\n        r += ' ' + node.value;\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '?>';\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.raw = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.text = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level);\n      options.state = WriterState.InsideTag;\n      r += node.value;\n      options.state = WriterState.CloseTag;\n      r += this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdAttList = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ATTLIST';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.elementName + ' ' + node.attributeName + ' ' + node.attributeType;\n      if (node.defaultValueType !== '#DEFAULT') {\n        r += ' ' + node.defaultValueType;\n      }\n      if (node.defaultValue) {\n        r += ' \"' + node.defaultValue + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdElement = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ELEMENT';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name + ' ' + node.value;\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdEntity = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!ENTITY';\n      options.state = WriterState.InsideTag;\n      if (node.pe) {\n        r += ' %';\n      }\n      r += ' ' + node.name;\n      if (node.value) {\n        r += ' \"' + node.value + '\"';\n      } else {\n        if (node.pubID && node.sysID) {\n          r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n        } else if (node.sysID) {\n          r += ' SYSTEM \"' + node.sysID + '\"';\n        }\n        if (node.nData) {\n          r += ' NDATA ' + node.nData;\n        }\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.dtdNotation = function(node, options, level) {\n      var r;\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      r = this.indent(node, options, level) + '<!NOTATION';\n      options.state = WriterState.InsideTag;\n      r += ' ' + node.name;\n      if (node.pubID && node.sysID) {\n        r += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n      } else if (node.pubID) {\n        r += ' PUBLIC \"' + node.pubID + '\"';\n      } else if (node.sysID) {\n        r += ' SYSTEM \"' + node.sysID + '\"';\n      }\n      options.state = WriterState.CloseTag;\n      r += options.spaceBeforeSlash + '>' + this.endline(node, options, level);\n      options.state = WriterState.None;\n      this.closeNode(node, options, level);\n      return r;\n    };\n\n    XMLWriterBase.prototype.openNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.closeNode = function(node, options, level) {};\n\n    XMLWriterBase.prototype.openAttribute = function(att, options, level) {};\n\n    XMLWriterBase.prototype.closeAttribute = function(att, options, level) {};\n\n    return XMLWriterBase;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLStringWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  module.exports = XMLStringWriter = (function(superClass) {\n    extend(XMLStringWriter, superClass);\n\n    function XMLStringWriter(options) {\n      XMLStringWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStringWriter.prototype.document = function(doc, options) {\n      var child, i, len, r, ref;\n      options = this.filterOptions(options);\n      r = '';\n      ref = doc.children;\n      for (i = 0, len = ref.length; i < len; i++) {\n        child = ref[i];\n        r += this.writeChildNode(child, options, 0);\n      }\n      if (options.pretty && r.slice(-options.newline.length) === options.newline) {\n        r = r.slice(0, -options.newline.length);\n      }\n      return r;\n    };\n\n    return XMLStringWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  isPlainObject = require('./Utility').isPlainObject;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDOMConfiguration = require('./XMLDOMConfiguration');\n\n  XMLNode = require('./XMLNode');\n\n  NodeType = require('./NodeType');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  module.exports = XMLDocument = (function(superClass) {\n    extend(XMLDocument, superClass);\n\n    function XMLDocument(options) {\n      XMLDocument.__super__.constructor.call(this, null);\n      this.name = \"#document\";\n      this.type = NodeType.Document;\n      this.documentURI = null;\n      this.domConfig = new XMLDOMConfiguration();\n      options || (options = {});\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.stringify = new XMLStringifier(options);\n    }\n\n    Object.defineProperty(XMLDocument.prototype, 'implementation', {\n      value: new XMLDOMImplementation()\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'doctype', {\n      get: function() {\n        var child, i, len, ref;\n        ref = this.children;\n        for (i = 0, len = ref.length; i < len; i++) {\n          child = ref[i];\n          if (child.type === NodeType.DocType) {\n            return child;\n          }\n        }\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'documentElement', {\n      get: function() {\n        return this.rootObject || null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'inputEncoding', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'strictErrorChecking', {\n      get: function() {\n        return false;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlEncoding', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].encoding;\n        } else {\n          return null;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlStandalone', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].standalone === 'yes';\n        } else {\n          return false;\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'xmlVersion', {\n      get: function() {\n        if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {\n          return this.children[0].version;\n        } else {\n          return \"1.0\";\n        }\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'URL', {\n      get: function() {\n        return this.documentURI;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'origin', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'compatMode', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'characterSet', {\n      get: function() {\n        return null;\n      }\n    });\n\n    Object.defineProperty(XMLDocument.prototype, 'contentType', {\n      get: function() {\n        return null;\n      }\n    });\n\n    XMLDocument.prototype.end = function(writer) {\n      var writerOptions;\n      writerOptions = {};\n      if (!writer) {\n        writer = this.options.writer;\n      } else if (isPlainObject(writer)) {\n        writerOptions = writer;\n        writer = this.options.writer;\n      }\n      return writer.document(this, writer.filterOptions(writerOptions));\n    };\n\n    XMLDocument.prototype.toString = function(options) {\n      return this.options.writer.document(this, this.options.writer.filterOptions(options));\n    };\n\n    XMLDocument.prototype.createElement = function(tagName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createDocumentFragment = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTextNode = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createComment = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createCDATASection = function(data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createProcessingInstruction = function(target, data) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttribute = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEntityReference = function(name) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagName = function(tagname) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.importNode = function(importedNode, deep) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createElementNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementById = function(elementId) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.adoptNode = function(source) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.normalizeDocument = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.renameNode = function(node, namespaceURI, qualifiedName) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.getElementsByClassName = function(classNames) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createEvent = function(eventInterface) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createRange = function() {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createNodeIterator = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    XMLDocument.prototype.createTreeWalker = function(root, whatToShow, filter) {\n      throw new Error(\"This DOM method is not implemented.\" + this.debugInfo());\n    };\n\n    return XMLDocument;\n\n  })(XMLNode);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction, isObject, isPlainObject, ref,\n    hasProp = {}.hasOwnProperty;\n\n  ref = require('./Utility'), isObject = ref.isObject, isFunction = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;\n\n  NodeType = require('./NodeType');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLElement = require('./XMLElement');\n\n  XMLCData = require('./XMLCData');\n\n  XMLComment = require('./XMLComment');\n\n  XMLRaw = require('./XMLRaw');\n\n  XMLText = require('./XMLText');\n\n  XMLProcessingInstruction = require('./XMLProcessingInstruction');\n\n  XMLDeclaration = require('./XMLDeclaration');\n\n  XMLDocType = require('./XMLDocType');\n\n  XMLDTDAttList = require('./XMLDTDAttList');\n\n  XMLDTDEntity = require('./XMLDTDEntity');\n\n  XMLDTDElement = require('./XMLDTDElement');\n\n  XMLDTDNotation = require('./XMLDTDNotation');\n\n  XMLAttribute = require('./XMLAttribute');\n\n  XMLStringifier = require('./XMLStringifier');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLDocumentCB = (function() {\n    function XMLDocumentCB(options, onData, onEnd) {\n      var writerOptions;\n      this.name = \"?xml\";\n      this.type = NodeType.Document;\n      options || (options = {});\n      writerOptions = {};\n      if (!options.writer) {\n        options.writer = new XMLStringWriter();\n      } else if (isPlainObject(options.writer)) {\n        writerOptions = options.writer;\n        options.writer = new XMLStringWriter();\n      }\n      this.options = options;\n      this.writer = options.writer;\n      this.writerOptions = this.writer.filterOptions(writerOptions);\n      this.stringify = new XMLStringifier(options);\n      this.onDataCallback = onData || function() {};\n      this.onEndCallback = onEnd || function() {};\n      this.currentNode = null;\n      this.currentLevel = -1;\n      this.openTags = {};\n      this.documentStarted = false;\n      this.documentCompleted = false;\n      this.root = null;\n    }\n\n    XMLDocumentCB.prototype.createChildNode = function(node) {\n      var att, attName, attributes, child, i, len, ref1, ref2;\n      switch (node.type) {\n        case NodeType.CData:\n          this.cdata(node.value);\n          break;\n        case NodeType.Comment:\n          this.comment(node.value);\n          break;\n        case NodeType.Element:\n          attributes = {};\n          ref1 = node.attribs;\n          for (attName in ref1) {\n            if (!hasProp.call(ref1, attName)) continue;\n            att = ref1[attName];\n            attributes[attName] = att.value;\n          }\n          this.node(node.name, attributes);\n          break;\n        case NodeType.Dummy:\n          this.dummy();\n          break;\n        case NodeType.Raw:\n          this.raw(node.value);\n          break;\n        case NodeType.Text:\n          this.text(node.value);\n          break;\n        case NodeType.ProcessingInstruction:\n          this.instruction(node.target, node.value);\n          break;\n        default:\n          throw new Error(\"This XML node type is not supported in a JS object: \" + node.constructor.name);\n      }\n      ref2 = node.children;\n      for (i = 0, len = ref2.length; i < len; i++) {\n        child = ref2[i];\n        this.createChildNode(child);\n        if (child.type === NodeType.Element) {\n          this.up();\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dummy = function() {\n      return this;\n    };\n\n    XMLDocumentCB.prototype.node = function(name, attributes, text) {\n      var ref1;\n      if (name == null) {\n        throw new Error(\"Missing node name.\");\n      }\n      if (this.root && this.currentLevel === -1) {\n        throw new Error(\"Document can only have one root node. \" + this.debugInfo(name));\n      }\n      this.openCurrent();\n      name = getValue(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      attributes = getValue(attributes);\n      if (!isObject(attributes)) {\n        ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];\n      }\n      this.currentNode = new XMLElement(this, name, attributes);\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      if (text != null) {\n        this.text(text);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.element = function(name, attributes, text) {\n      var child, i, len, oldValidationFlag, ref1, root;\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        this.dtdElement.apply(this, arguments);\n      } else {\n        if (Array.isArray(name) || isObject(name) || isFunction(name)) {\n          oldValidationFlag = this.options.noValidation;\n          this.options.noValidation = true;\n          root = new XMLDocument(this.options).element('TEMP_ROOT');\n          root.element(name);\n          this.options.noValidation = oldValidationFlag;\n          ref1 = root.children;\n          for (i = 0, len = ref1.length; i < len; i++) {\n            child = ref1[i];\n            this.createChildNode(child);\n            if (child.type === NodeType.Element) {\n              this.up();\n            }\n          }\n        } else {\n          this.node(name, attributes, text);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attribute = function(name, value) {\n      var attName, attValue;\n      if (!this.currentNode || this.currentNode.children) {\n        throw new Error(\"att() can only be used immediately after an ele() call in callback mode. \" + this.debugInfo(name));\n      }\n      if (name != null) {\n        name = getValue(name);\n      }\n      if (isObject(name)) {\n        for (attName in name) {\n          if (!hasProp.call(name, attName)) continue;\n          attValue = name[attName];\n          this.attribute(attName, attValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        if (this.options.keepNullAttributes && (value == null)) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, \"\");\n        } else if (value != null) {\n          this.currentNode.attribs[name] = new XMLAttribute(this, name, value);\n        }\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.text = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLText(this, value);\n      this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.cdata = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLCData(this, value);\n      this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.comment = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLComment(this, value);\n      this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.raw = function(value) {\n      var node;\n      this.openCurrent();\n      node = new XMLRaw(this, value);\n      this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.instruction = function(target, value) {\n      var i, insTarget, insValue, len, node;\n      this.openCurrent();\n      if (target != null) {\n        target = getValue(target);\n      }\n      if (value != null) {\n        value = getValue(value);\n      }\n      if (Array.isArray(target)) {\n        for (i = 0, len = target.length; i < len; i++) {\n          insTarget = target[i];\n          this.instruction(insTarget);\n        }\n      } else if (isObject(target)) {\n        for (insTarget in target) {\n          if (!hasProp.call(target, insTarget)) continue;\n          insValue = target[insTarget];\n          this.instruction(insTarget, insValue);\n        }\n      } else {\n        if (isFunction(value)) {\n          value = value.apply();\n        }\n        node = new XMLProcessingInstruction(this, target, value);\n        this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      }\n      return this;\n    };\n\n    XMLDocumentCB.prototype.declaration = function(version, encoding, standalone) {\n      var node;\n      this.openCurrent();\n      if (this.documentStarted) {\n        throw new Error(\"declaration() must be the first node.\");\n      }\n      node = new XMLDeclaration(this, version, encoding, standalone);\n      this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.doctype = function(root, pubID, sysID) {\n      this.openCurrent();\n      if (root == null) {\n        throw new Error(\"Missing root node name.\");\n      }\n      if (this.root) {\n        throw new Error(\"dtd() must come before the root node.\");\n      }\n      this.currentNode = new XMLDocType(this, pubID, sysID);\n      this.currentNode.rootNodeName = root;\n      this.currentNode.children = false;\n      this.currentLevel++;\n      this.openTags[this.currentLevel] = this.currentNode;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.dtdElement = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDElement(this, name, value);\n      this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);\n      this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.entity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, false, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.pEntity = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDEntity(this, true, name, value);\n      this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.notation = function(name, value) {\n      var node;\n      this.openCurrent();\n      node = new XMLDTDNotation(this, name, value);\n      this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);\n      return this;\n    };\n\n    XMLDocumentCB.prototype.up = function() {\n      if (this.currentLevel < 0) {\n        throw new Error(\"The document node has no parent.\");\n      }\n      if (this.currentNode) {\n        if (this.currentNode.children) {\n          this.closeNode(this.currentNode);\n        } else {\n          this.openNode(this.currentNode);\n        }\n        this.currentNode = null;\n      } else {\n        this.closeNode(this.openTags[this.currentLevel]);\n      }\n      delete this.openTags[this.currentLevel];\n      this.currentLevel--;\n      return this;\n    };\n\n    XMLDocumentCB.prototype.end = function() {\n      while (this.currentLevel >= 0) {\n        this.up();\n      }\n      return this.onEnd();\n    };\n\n    XMLDocumentCB.prototype.openCurrent = function() {\n      if (this.currentNode) {\n        this.currentNode.children = true;\n        return this.openNode(this.currentNode);\n      }\n    };\n\n    XMLDocumentCB.prototype.openNode = function(node) {\n      var att, chunk, name, ref1;\n      if (!node.isOpen) {\n        if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {\n          this.root = node;\n        }\n        chunk = '';\n        if (node.type === NodeType.Element) {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<' + node.name;\n          ref1 = node.attribs;\n          for (name in ref1) {\n            if (!hasProp.call(ref1, name)) continue;\n            att = ref1[name];\n            chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);\n          }\n          chunk += (node.children ? '>' : '/>') + this.writer.endline(node, this.writerOptions, this.currentLevel);\n          this.writerOptions.state = WriterState.InsideTag;\n        } else {\n          this.writerOptions.state = WriterState.OpenTag;\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '<!DOCTYPE ' + node.rootNodeName;\n          if (node.pubID && node.sysID) {\n            chunk += ' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"';\n          } else if (node.sysID) {\n            chunk += ' SYSTEM \"' + node.sysID + '\"';\n          }\n          if (node.children) {\n            chunk += ' [';\n            this.writerOptions.state = WriterState.InsideTag;\n          } else {\n            this.writerOptions.state = WriterState.CloseTag;\n            chunk += '>';\n          }\n          chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.onData(chunk, this.currentLevel);\n        return node.isOpen = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.closeNode = function(node) {\n      var chunk;\n      if (!node.isClosed) {\n        chunk = '';\n        this.writerOptions.state = WriterState.CloseTag;\n        if (node.type === NodeType.Element) {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + '</' + node.name + '>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        } else {\n          chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + ']>' + this.writer.endline(node, this.writerOptions, this.currentLevel);\n        }\n        this.writerOptions.state = WriterState.None;\n        this.onData(chunk, this.currentLevel);\n        return node.isClosed = true;\n      }\n    };\n\n    XMLDocumentCB.prototype.onData = function(chunk, level) {\n      this.documentStarted = true;\n      return this.onDataCallback(chunk, level + 1);\n    };\n\n    XMLDocumentCB.prototype.onEnd = function() {\n      this.documentCompleted = true;\n      return this.onEndCallback();\n    };\n\n    XMLDocumentCB.prototype.debugInfo = function(name) {\n      if (name == null) {\n        return \"\";\n      } else {\n        return \"node: <\" + name + \">\";\n      }\n    };\n\n    XMLDocumentCB.prototype.ele = function() {\n      return this.element.apply(this, arguments);\n    };\n\n    XMLDocumentCB.prototype.nod = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.ins = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.dec = function(version, encoding, standalone) {\n      return this.declaration(version, encoding, standalone);\n    };\n\n    XMLDocumentCB.prototype.dtd = function(root, pubID, sysID) {\n      return this.doctype(root, pubID, sysID);\n    };\n\n    XMLDocumentCB.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.n = function(name, attributes, text) {\n      return this.node(name, attributes, text);\n    };\n\n    XMLDocumentCB.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLDocumentCB.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLDocumentCB.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLDocumentCB.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLDocumentCB.prototype.i = function(target, value) {\n      return this.instruction(target, value);\n    };\n\n    XMLDocumentCB.prototype.att = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.a = function() {\n      if (this.currentNode && this.currentNode.type === NodeType.DocType) {\n        return this.attList.apply(this, arguments);\n      } else {\n        return this.attribute.apply(this, arguments);\n      }\n    };\n\n    XMLDocumentCB.prototype.ent = function(name, value) {\n      return this.entity(name, value);\n    };\n\n    XMLDocumentCB.prototype.pent = function(name, value) {\n      return this.pEntity(name, value);\n    };\n\n    XMLDocumentCB.prototype.not = function(name, value) {\n      return this.notation(name, value);\n    };\n\n    return XMLDocumentCB;\n\n  })();\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLStreamWriter, XMLWriterBase,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  NodeType = require('./NodeType');\n\n  XMLWriterBase = require('./XMLWriterBase');\n\n  WriterState = require('./WriterState');\n\n  module.exports = XMLStreamWriter = (function(superClass) {\n    extend(XMLStreamWriter, superClass);\n\n    function XMLStreamWriter(stream, options) {\n      this.stream = stream;\n      XMLStreamWriter.__super__.constructor.call(this, options);\n    }\n\n    XMLStreamWriter.prototype.endline = function(node, options, level) {\n      if (node.isLastRootNode && options.state === WriterState.CloseTag) {\n        return '';\n      } else {\n        return XMLStreamWriter.__super__.endline.call(this, node, options, level);\n      }\n    };\n\n    XMLStreamWriter.prototype.document = function(doc, options) {\n      var child, i, j, k, len, len1, ref, ref1, results;\n      ref = doc.children;\n      for (i = j = 0, len = ref.length; j < len; i = ++j) {\n        child = ref[i];\n        child.isLastRootNode = i === doc.children.length - 1;\n      }\n      options = this.filterOptions(options);\n      ref1 = doc.children;\n      results = [];\n      for (k = 0, len1 = ref1.length; k < len1; k++) {\n        child = ref1[k];\n        results.push(this.writeChildNode(child, options, 0));\n      }\n      return results;\n    };\n\n    XMLStreamWriter.prototype.attribute = function(att, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.attribute.call(this, att, options, level));\n    };\n\n    XMLStreamWriter.prototype.cdata = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.cdata.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.comment = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.comment.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.declaration = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.declaration.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.docType = function(node, options, level) {\n      var child, j, len, ref;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level));\n      this.stream.write('<!DOCTYPE ' + node.root().name);\n      if (node.pubID && node.sysID) {\n        this.stream.write(' PUBLIC \"' + node.pubID + '\" \"' + node.sysID + '\"');\n      } else if (node.sysID) {\n        this.stream.write(' SYSTEM \"' + node.sysID + '\"');\n      }\n      if (node.children.length > 0) {\n        this.stream.write(' [');\n        this.stream.write(this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref = node.children;\n        for (j = 0, len = ref.length; j < len; j++) {\n          child = ref[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(']');\n      }\n      options.state = WriterState.CloseTag;\n      this.stream.write(options.spaceBeforeSlash + '>');\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.element = function(node, options, level) {\n      var att, child, childNodeCount, firstChildNode, j, len, name, prettySuppressed, ref, ref1;\n      level || (level = 0);\n      this.openNode(node, options, level);\n      options.state = WriterState.OpenTag;\n      this.stream.write(this.indent(node, options, level) + '<' + node.name);\n      ref = node.attribs;\n      for (name in ref) {\n        if (!hasProp.call(ref, name)) continue;\n        att = ref[name];\n        this.attribute(att, options, level);\n      }\n      childNodeCount = node.children.length;\n      firstChildNode = childNodeCount === 0 ? null : node.children[0];\n      if (childNodeCount === 0 || node.children.every(function(e) {\n        return (e.type === NodeType.Text || e.type === NodeType.Raw) && e.value === '';\n      })) {\n        if (options.allowEmpty) {\n          this.stream.write('>');\n          options.state = WriterState.CloseTag;\n          this.stream.write('</' + node.name + '>');\n        } else {\n          options.state = WriterState.CloseTag;\n          this.stream.write(options.spaceBeforeSlash + '/>');\n        }\n      } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && (firstChildNode.value != null)) {\n        this.stream.write('>');\n        options.state = WriterState.InsideTag;\n        options.suppressPrettyCount++;\n        prettySuppressed = true;\n        this.writeChildNode(firstChildNode, options, level + 1);\n        options.suppressPrettyCount--;\n        prettySuppressed = false;\n        options.state = WriterState.CloseTag;\n        this.stream.write('</' + node.name + '>');\n      } else {\n        this.stream.write('>' + this.endline(node, options, level));\n        options.state = WriterState.InsideTag;\n        ref1 = node.children;\n        for (j = 0, len = ref1.length; j < len; j++) {\n          child = ref1[j];\n          this.writeChildNode(child, options, level + 1);\n        }\n        options.state = WriterState.CloseTag;\n        this.stream.write(this.indent(node, options, level) + '</' + node.name + '>');\n      }\n      this.stream.write(this.endline(node, options, level));\n      options.state = WriterState.None;\n      return this.closeNode(node, options, level);\n    };\n\n    XMLStreamWriter.prototype.processingInstruction = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.processingInstruction.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.raw = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.raw.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.text = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.text.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdAttList = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdAttList.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdElement = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdElement.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdEntity = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdEntity.call(this, node, options, level));\n    };\n\n    XMLStreamWriter.prototype.dtdNotation = function(node, options, level) {\n      return this.stream.write(XMLStreamWriter.__super__.dtdNotation.call(this, node, options, level));\n    };\n\n    return XMLStreamWriter;\n\n  })(XMLWriterBase);\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction, ref;\n\n  ref = require('./Utility'), assign = ref.assign, isFunction = ref.isFunction;\n\n  XMLDOMImplementation = require('./XMLDOMImplementation');\n\n  XMLDocument = require('./XMLDocument');\n\n  XMLDocumentCB = require('./XMLDocumentCB');\n\n  XMLStringWriter = require('./XMLStringWriter');\n\n  XMLStreamWriter = require('./XMLStreamWriter');\n\n  NodeType = require('./NodeType');\n\n  WriterState = require('./WriterState');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    var doc, root;\n    if (name == null) {\n      throw new Error(\"Root element needs a name.\");\n    }\n    options = assign({}, xmldec, doctype, options);\n    doc = new XMLDocument(options);\n    root = doc.element(name);\n    if (!options.headless) {\n      doc.declaration(options);\n      if ((options.pubID != null) || (options.sysID != null)) {\n        doc.dtd(options);\n      }\n    }\n    return root;\n  };\n\n  module.exports.begin = function(options, onData, onEnd) {\n    var ref1;\n    if (isFunction(options)) {\n      ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];\n      options = {};\n    }\n    if (onData) {\n      return new XMLDocumentCB(options, onData, onEnd);\n    } else {\n      return new XMLDocument(options);\n    }\n  };\n\n  module.exports.stringWriter = function(options) {\n    return new XMLStringWriter(options);\n  };\n\n  module.exports.streamWriter = function(stream, options) {\n    return new XMLStreamWriter(stream, options);\n  };\n\n  module.exports.implementation = new XMLDOMImplementation();\n\n  module.exports.nodeType = NodeType;\n\n  module.exports.writerState = WriterState;\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA,\n    hasProp = {}.hasOwnProperty;\n\n  builder = require('xmlbuilder');\n\n  defaults = require('./defaults').defaults;\n\n  requiresCDATA = function(entry) {\n    return typeof entry === \"string\" && (entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0);\n  };\n\n  wrapCDATA = function(entry) {\n    return \"<![CDATA[\" + (escapeCDATA(entry)) + \"]]>\";\n  };\n\n  escapeCDATA = function(entry) {\n    return entry.replace(']]>', ']]]]><![CDATA[>');\n  };\n\n  exports.Builder = (function() {\n    function Builder(opts) {\n      var key, ref, value;\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n    }\n\n    Builder.prototype.buildObject = function(rootObj) {\n      var attrkey, charkey, render, rootElement, rootName;\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === defaults['0.2'].rootName)) {\n        rootName = Object.keys(rootObj)[0];\n        rootObj = rootObj[rootName];\n      } else {\n        rootName = this.options.rootName;\n      }\n      render = (function(_this) {\n        return function(element, obj) {\n          var attr, child, entry, index, key, value;\n          if (typeof obj !== 'object') {\n            if (_this.options.cdata && requiresCDATA(obj)) {\n              element.raw(wrapCDATA(obj));\n            } else {\n              element.txt(obj);\n            }\n          } else if (Array.isArray(obj)) {\n            for (index in obj) {\n              if (!hasProp.call(obj, index)) continue;\n              child = obj[index];\n              for (key in child) {\n                entry = child[key];\n                element = render(element.ele(key), entry).up();\n              }\n            }\n          } else {\n            for (key in obj) {\n              if (!hasProp.call(obj, key)) continue;\n              child = obj[key];\n              if (key === attrkey) {\n                if (typeof child === \"object\") {\n                  for (attr in child) {\n                    value = child[attr];\n                    element = element.att(attr, value);\n                  }\n                }\n              } else if (key === charkey) {\n                if (_this.options.cdata && requiresCDATA(child)) {\n                  element = element.raw(wrapCDATA(child));\n                } else {\n                  element = element.txt(child);\n                }\n              } else if (Array.isArray(child)) {\n                for (index in child) {\n                  if (!hasProp.call(child, index)) continue;\n                  entry = child[index];\n                  if (typeof entry === 'string') {\n                    if (_this.options.cdata && requiresCDATA(entry)) {\n                      element = element.ele(key).raw(wrapCDATA(entry)).up();\n                    } else {\n                      element = element.ele(key, entry).up();\n                    }\n                  } else {\n                    element = render(element.ele(key), entry).up();\n                  }\n                }\n              } else if (typeof child === \"object\") {\n                element = render(element.ele(key), child).up();\n              } else {\n                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {\n                  element = element.ele(key).raw(wrapCDATA(child)).up();\n                } else {\n                  if (child == null) {\n                    child = '';\n                  }\n                  element = element.ele(key, child.toString()).up();\n                }\n              }\n            }\n          }\n          return element;\n        };\n      })(this);\n      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {\n        headless: this.options.headless,\n        allowSurrogateChars: this.options.allowSurrogateChars\n      });\n      return render(rootElement, rootObj).end(this.options.renderOpts);\n    };\n\n    return Builder;\n\n  })();\n\n}).call(this);\n", "function Emitter(object) {\n\tif (object) {\n\t\treturn mixin(object);\n\t}\n\n\tthis._callbacks = new Map();\n}\n\nfunction mixin(object) {\n\tObject.assign(object, Emitter.prototype);\n\tobject._callbacks = new Map();\n\treturn object;\n}\n\nEmitter.prototype.on = function (event, listener) {\n\tconst callbacks = this._callbacks.get(event) ?? [];\n\tcallbacks.push(listener);\n\tthis._callbacks.set(event, callbacks);\n\treturn this;\n};\n\nEmitter.prototype.once = function (event, listener) {\n\tconst on = (...arguments_) => {\n\t\tthis.off(event, on);\n\t\tlistener.apply(this, arguments_);\n\t};\n\n\ton.fn = listener;\n\tthis.on(event, on);\n\treturn this;\n};\n\nEmitter.prototype.off = function (event, listener) {\n\tif (event === undefined && listener === undefined) {\n\t\tthis._callbacks.clear();\n\t\treturn this;\n\t}\n\n\tif (listener === undefined) {\n\t\tthis._callbacks.delete(event);\n\t\treturn this;\n\t}\n\n\tconst callbacks = this._callbacks.get(event);\n\tif (callbacks) {\n\t\tfor (const [index, callback] of callbacks.entries()) {\n\t\t\tif (callback === listener || callback.fn === listener) {\n\t\t\t\tcallbacks.splice(index, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (callbacks.length === 0) {\n\t\t\tthis._callbacks.delete(event);\n\t\t} else {\n\t\t\tthis._callbacks.set(event, callbacks);\n\t\t}\n\t}\n\n\treturn this;\n};\n\nEmitter.prototype.emit = function (event, ...arguments_) {\n\tconst callbacks = this._callbacks.get(event);\n\tif (callbacks) {\n\t\t// Create a copy of the callbacks array to avoid issues if it's modified during iteration\n\t\tconst callbacksCopy = [...callbacks];\n\n\t\tfor (const callback of callbacksCopy) {\n\t\t\tcallback.apply(this, arguments_);\n\t\t}\n\t}\n\n\treturn this;\n};\n\nEmitter.prototype.listeners = function (event) {\n\treturn this._callbacks.get(event) ?? [];\n};\n\nEmitter.prototype.listenerCount = function (event) {\n\tif (event) {\n\t\treturn this.listeners(event).length;\n\t}\n\n\tlet totalCount = 0;\n\tfor (const callbacks of this._callbacks.values()) {\n\t\ttotalCount += callbacks.length;\n\t}\n\n\treturn totalCount;\n};\n\nEmitter.prototype.hasListeners = function (event) {\n\treturn this.listenerCount(event) > 0;\n};\n\n// Aliases\nEmitter.prototype.addEventListener = Emitter.prototype.on;\nEmitter.prototype.removeListener = Emitter.prototype.off;\nEmitter.prototype.removeEventListener = Emitter.prototype.off;\nEmitter.prototype.removeAllListeners = Emitter.prototype.off;\n\nif (typeof module !== 'undefined') {\n\tmodule.exports = Emitter;\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Emitter = require('component-emitter');\n\nfunction Stream() {\n  Emitter.call(this);\n}\nStream.prototype = new Emitter();\nmodule.exports = Stream;\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (!this.hasListeners('error')) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.off('data', ondata);\n    dest.off('drain', ondrain);\n\n    source.off('end', onend);\n    source.off('close', onclose);\n\n    source.off('error', onerror);\n    dest.off('error', onerror);\n\n    source.off('end', cleanup);\n    source.off('close', cleanup);\n\n    dest.off('end', cleanup);\n    dest.off('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('end', cleanup);\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n}\n", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n", "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", ";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // disallow unquoted attribute values if not otherwise configured\n    // and strict mode is true\n    if (parser.opt.unquotedAttributeValues === undefined) {\n      parser.opt.unquotedAttributeValues = !strict;\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n  if (!Stream) Stream = function () {}\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n            continue;\n          }\n\n          if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {\n            parser.state = S.DOCTYPE_DTD\n            parser.doctype += '<!' + parser.sgmlDecl + c\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          if (c === ']') {\n            parser.doctype += c\n            parser.state = S.DOCTYPE\n          } else if (c === '<') {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else if (isQuote(c)) {\n            parser.doctype += c\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          } else {\n            parser.doctype += c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else if (parser.doctype && parser.doctype !== true) {\n            parser.state = S.DOCTYPE_DTD\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            if (!parser.opt.unquotedAttributeValues) {\n              error(parser, 'Unquoted attribute value')\n            }\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n            if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {\n              parser.entity = ''\n              parser.state = returnState\n              parser.write(parsedEntity)\n            } else {\n              parser[buffer] += parsedEntity\n              parser.entity = ''\n              parser.state = returnState\n            }\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default: /* istanbul ignore next */ {\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n        }\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  exports.stripBOM = function(str) {\n    if (str[0] === '\\uFEFF') {\n      return str.substring(1);\n    } else {\n      return str;\n    }\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var prefixMatch;\n\n  prefixMatch = new RegExp(/(?!xmlns)^.*:/);\n\n  exports.normalize = function(str) {\n    return str.toLowerCase();\n  };\n\n  exports.firstCharLowerCase = function(str) {\n    return str.charAt(0).toLowerCase() + str.slice(1);\n  };\n\n  exports.stripPrefix = function(str) {\n    return str.replace(prefixMatch, '');\n  };\n\n  exports.parseNumbers = function(str) {\n    if (!isNaN(str)) {\n      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);\n    }\n    return str;\n  };\n\n  exports.parseBooleans = function(str) {\n    if (/^(?:true|false)$/i.test(str)) {\n      str = str.toLowerCase() === 'true';\n    }\n    return str;\n  };\n\n}).call(this);\n", "\nexports.every = function(str) {\n  return new Every(str);\n};\n\n/*\n  Time map\n*/\n\nvar time = {\n  millisecond: 1,\n  second: 1000,\n  minute: 60000,\n  hour: 3600000,\n  day: 86400000\n};\n\nfor (var key in time) {\n  if (key === 'millisecond') {\n    time.ms = time[key];\n  } else {\n    time[key.charAt(0)] = time[key];\n  }\n  time[key + 's'] = time[key];\n}\n\n\n/*\n  Every constructor\n*/\n\nfunction Every(str) {\n  this.count = 0;\n  var m = parse(str);\n  if (m) {\n    this.time = Number(m[0]) * time[m[1]];\n    this.type = m[1];\n  }\n}\n\nEvery.prototype.do = function(cb) {\n  if (this.time) {\n    this.interval = setInterval(callback, this.time);\n  }\n\n  var that = this;\n  function callback() {\n    that.count++;\n    cb.call(that);\n  }\n  return this;\n};\n\nEvery.prototype.stop = function() {\n  if (this.interval) {\n    clearInterval(this.interval);\n    delete this.interval;\n  }\n  return this;\n};\n\n\n/*\n  Convert string to milliseconds\n\n    ms, millisecond(s)?\n    s, second(s)?\n    m, minute(s)?\n    h, hour(s)?\n    d, day(s)?\n*/\nvar reg = /^\\s*(\\d+(?:\\.\\d+)?)\\s*([a-z]+)\\s*$/;\n\nfunction parse(str) {\n  var m = str.match(reg);\n  if (m && time[m[2]]) {\n    return m.slice(1);\n  }\n  return null;\n}\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  sax = require('sax');\n\n  events = require('events');\n\n  bom = require('./bom');\n\n  processors = require('./processors');\n\n  setImmediate = require('timers').setImmediate;\n\n  defaults = require('./defaults').defaults;\n\n  isEmpty = function(thing) {\n    return typeof thing === \"object\" && (thing != null) && Object.keys(thing).length === 0;\n  };\n\n  processItem = function(processors, item, key) {\n    var i, len, process;\n    for (i = 0, len = processors.length; i < len; i++) {\n      process = processors[i];\n      item = process(item, key);\n    }\n    return item;\n  };\n\n  defineProperty = function(obj, key, value) {\n    var descriptor;\n    descriptor = Object.create(null);\n    descriptor.value = value;\n    descriptor.writable = true;\n    descriptor.enumerable = true;\n    descriptor.configurable = true;\n    return Object.defineProperty(obj, key, descriptor);\n  };\n\n  exports.Parser = (function(superClass) {\n    extend(Parser, superClass);\n\n    function Parser(opts) {\n      this.parseStringPromise = bind(this.parseStringPromise, this);\n      this.parseString = bind(this.parseString, this);\n      this.reset = bind(this.reset, this);\n      this.assignOrPush = bind(this.assignOrPush, this);\n      this.processAsync = bind(this.processAsync, this);\n      var key, ref, value;\n      if (!(this instanceof exports.Parser)) {\n        return new exports.Parser(opts);\n      }\n      this.options = {};\n      ref = defaults[\"0.2\"];\n      for (key in ref) {\n        if (!hasProp.call(ref, key)) continue;\n        value = ref[key];\n        this.options[key] = value;\n      }\n      for (key in opts) {\n        if (!hasProp.call(opts, key)) continue;\n        value = opts[key];\n        this.options[key] = value;\n      }\n      if (this.options.xmlns) {\n        this.options.xmlnskey = this.options.attrkey + \"ns\";\n      }\n      if (this.options.normalizeTags) {\n        if (!this.options.tagNameProcessors) {\n          this.options.tagNameProcessors = [];\n        }\n        this.options.tagNameProcessors.unshift(processors.normalize);\n      }\n      this.reset();\n    }\n\n    Parser.prototype.processAsync = function() {\n      var chunk, err;\n      try {\n        if (this.remaining.length <= this.options.chunkSize) {\n          chunk = this.remaining;\n          this.remaining = '';\n          this.saxParser = this.saxParser.write(chunk);\n          return this.saxParser.close();\n        } else {\n          chunk = this.remaining.substr(0, this.options.chunkSize);\n          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);\n          this.saxParser = this.saxParser.write(chunk);\n          return setImmediate(this.processAsync);\n        }\n      } catch (error1) {\n        err = error1;\n        if (!this.saxParser.errThrown) {\n          this.saxParser.errThrown = true;\n          return this.emit(err);\n        }\n      }\n    };\n\n    Parser.prototype.assignOrPush = function(obj, key, newValue) {\n      if (!(key in obj)) {\n        if (!this.options.explicitArray) {\n          return defineProperty(obj, key, newValue);\n        } else {\n          return defineProperty(obj, key, [newValue]);\n        }\n      } else {\n        if (!(obj[key] instanceof Array)) {\n          defineProperty(obj, key, [obj[key]]);\n        }\n        return obj[key].push(newValue);\n      }\n    };\n\n    Parser.prototype.reset = function() {\n      var attrkey, charkey, ontext, stack;\n      this.removeAllListeners();\n      this.saxParser = sax.parser(this.options.strict, {\n        trim: false,\n        normalize: false,\n        xmlns: this.options.xmlns\n      });\n      this.saxParser.errThrown = false;\n      this.saxParser.onerror = (function(_this) {\n        return function(error) {\n          _this.saxParser.resume();\n          if (!_this.saxParser.errThrown) {\n            _this.saxParser.errThrown = true;\n            return _this.emit(\"error\", error);\n          }\n        };\n      })(this);\n      this.saxParser.onend = (function(_this) {\n        return function() {\n          if (!_this.saxParser.ended) {\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      this.saxParser.ended = false;\n      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;\n      this.resultObject = null;\n      stack = [];\n      attrkey = this.options.attrkey;\n      charkey = this.options.charkey;\n      this.saxParser.onopentag = (function(_this) {\n        return function(node) {\n          var key, newValue, obj, processedKey, ref;\n          obj = {};\n          obj[charkey] = \"\";\n          if (!_this.options.ignoreAttrs) {\n            ref = node.attributes;\n            for (key in ref) {\n              if (!hasProp.call(ref, key)) continue;\n              if (!(attrkey in obj) && !_this.options.mergeAttrs) {\n                obj[attrkey] = {};\n              }\n              newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];\n              processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;\n              if (_this.options.mergeAttrs) {\n                _this.assignOrPush(obj, processedKey, newValue);\n              } else {\n                defineProperty(obj[attrkey], processedKey, newValue);\n              }\n            }\n          }\n          obj[\"#name\"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;\n          if (_this.options.xmlns) {\n            obj[_this.options.xmlnskey] = {\n              uri: node.uri,\n              local: node.local\n            };\n          }\n          return stack.push(obj);\n        };\n      })(this);\n      this.saxParser.onclosetag = (function(_this) {\n        return function() {\n          var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s, xpath;\n          obj = stack.pop();\n          nodeName = obj[\"#name\"];\n          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {\n            delete obj[\"#name\"];\n          }\n          if (obj.cdata === true) {\n            cdata = obj.cdata;\n            delete obj.cdata;\n          }\n          s = stack[stack.length - 1];\n          if (obj[charkey].match(/^\\s*$/) && !cdata) {\n            emptyStr = obj[charkey];\n            delete obj[charkey];\n          } else {\n            if (_this.options.trim) {\n              obj[charkey] = obj[charkey].trim();\n            }\n            if (_this.options.normalize) {\n              obj[charkey] = obj[charkey].replace(/\\s{2,}/g, \" \").trim();\n            }\n            obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];\n            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n              obj = obj[charkey];\n            }\n          }\n          if (isEmpty(obj)) {\n            if (typeof _this.options.emptyTag === 'function') {\n              obj = _this.options.emptyTag();\n            } else {\n              obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;\n            }\n          }\n          if (_this.options.validator != null) {\n            xpath = \"/\" + ((function() {\n              var i, len, results;\n              results = [];\n              for (i = 0, len = stack.length; i < len; i++) {\n                node = stack[i];\n                results.push(node[\"#name\"]);\n              }\n              return results;\n            })()).concat(nodeName).join(\"/\");\n            (function() {\n              var err;\n              try {\n                return obj = _this.options.validator(xpath, s && s[nodeName], obj);\n              } catch (error1) {\n                err = error1;\n                return _this.emit(\"error\", err);\n              }\n            })();\n          }\n          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {\n            if (!_this.options.preserveChildrenOrder) {\n              node = {};\n              if (_this.options.attrkey in obj) {\n                node[_this.options.attrkey] = obj[_this.options.attrkey];\n                delete obj[_this.options.attrkey];\n              }\n              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {\n                node[_this.options.charkey] = obj[_this.options.charkey];\n                delete obj[_this.options.charkey];\n              }\n              if (Object.getOwnPropertyNames(obj).length > 0) {\n                node[_this.options.childkey] = obj;\n              }\n              obj = node;\n            } else if (s) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              objClone = {};\n              for (key in obj) {\n                if (!hasProp.call(obj, key)) continue;\n                defineProperty(objClone, key, obj[key]);\n              }\n              s[_this.options.childkey].push(objClone);\n              delete obj[\"#name\"];\n              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {\n                obj = obj[charkey];\n              }\n            }\n          }\n          if (stack.length > 0) {\n            return _this.assignOrPush(s, nodeName, obj);\n          } else {\n            if (_this.options.explicitRoot) {\n              old = obj;\n              obj = {};\n              defineProperty(obj, nodeName, old);\n            }\n            _this.resultObject = obj;\n            _this.saxParser.ended = true;\n            return _this.emit(\"end\", _this.resultObject);\n          }\n        };\n      })(this);\n      ontext = (function(_this) {\n        return function(text) {\n          var charChild, s;\n          s = stack[stack.length - 1];\n          if (s) {\n            s[charkey] += text;\n            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\\\n/g, '').trim() !== '')) {\n              s[_this.options.childkey] = s[_this.options.childkey] || [];\n              charChild = {\n                '#name': '__text__'\n              };\n              charChild[charkey] = text;\n              if (_this.options.normalize) {\n                charChild[charkey] = charChild[charkey].replace(/\\s{2,}/g, \" \").trim();\n              }\n              s[_this.options.childkey].push(charChild);\n            }\n            return s;\n          }\n        };\n      })(this);\n      this.saxParser.ontext = ontext;\n      return this.saxParser.oncdata = (function(_this) {\n        return function(text) {\n          var s;\n          s = ontext(text);\n          if (s) {\n            return s.cdata = true;\n          }\n        };\n      })(this);\n    };\n\n    Parser.prototype.parseString = function(str, cb) {\n      var err;\n      if ((cb != null) && typeof cb === \"function\") {\n        this.on(\"end\", function(result) {\n          this.reset();\n          return cb(null, result);\n        });\n        this.on(\"error\", function(err) {\n          this.reset();\n          return cb(err);\n        });\n      }\n      try {\n        str = str.toString();\n        if (str.trim() === '') {\n          this.emit(\"end\", null);\n          return true;\n        }\n        str = bom.stripBOM(str);\n        if (this.options.async) {\n          this.remaining = str;\n          setImmediate(this.processAsync);\n          return this.saxParser;\n        }\n        return this.saxParser.write(str).close();\n      } catch (error1) {\n        err = error1;\n        if (!(this.saxParser.errThrown || this.saxParser.ended)) {\n          this.emit('error', err);\n          return this.saxParser.errThrown = true;\n        } else if (this.saxParser.ended) {\n          throw err;\n        }\n      }\n    };\n\n    Parser.prototype.parseStringPromise = function(str) {\n      return new Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.parseString(str, function(err, value) {\n            if (err) {\n              return reject(err);\n            } else {\n              return resolve(value);\n            }\n          });\n        };\n      })(this));\n    };\n\n    return Parser;\n\n  })(events);\n\n  exports.parseString = function(str, a, b) {\n    var cb, options, parser;\n    if (b != null) {\n      if (typeof b === 'function') {\n        cb = b;\n      }\n      if (typeof a === 'object') {\n        options = a;\n      }\n    } else {\n      if (typeof a === 'function') {\n        cb = a;\n      }\n      options = {};\n    }\n    parser = new exports.Parser(options);\n    return parser.parseString(str, cb);\n  };\n\n  exports.parseStringPromise = function(str, a) {\n    var options, parser;\n    if (typeof a === 'object') {\n      options = a;\n    }\n    parser = new exports.Parser(options);\n    return parser.parseStringPromise(str);\n  };\n\n}).call(this);\n", "// Generated by CoffeeScript 1.12.7\n(function() {\n  \"use strict\";\n  var builder, defaults, parser, processors,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  defaults = require('./defaults');\n\n  builder = require('./builder');\n\n  parser = require('./parser');\n\n  processors = require('./processors');\n\n  exports.defaults = defaults.defaults;\n\n  exports.processors = processors;\n\n  exports.ValidationError = (function(superClass) {\n    extend(ValidationError, superClass);\n\n    function ValidationError(message) {\n      this.message = message;\n    }\n\n    return ValidationError;\n\n  })(Error);\n\n  exports.Builder = builder.Builder;\n\n  exports.Parser = parser.Parser;\n\n  exports.parseString = parser.parseString;\n\n  exports.parseStringPromise = parser.parseStringPromise;\n\n}).call(this);\n", "export const preloadHandlebarsTemplates = async () => {\n    const templatePaths = [\n        // actor tabs\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/ActionsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/BioTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/MagicTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/MatrixTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/MiscTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/SkillsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/SocialTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/SpellsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/EffectsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/CritterPowersTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/NetworkTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/InventoryTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/DescriptionTab.html',\n\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\n\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/matrix/SpriteSkillsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/matrix/SpritePowersTab.html',\n\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/vehicle/VehicleSkillsTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/vehicle/VehicleMatrixTab.html',\n\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/ic/ICActorTab.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/tabs/ic/ICMiscTab.html',\n\n        // uncategorized lists\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/Initiative.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ToggleImportFlags.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/import_flag_button.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/Movement.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ProfileImage.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/NameInput.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ActionList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ContactList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/SinAndLifestyleList.html',\n\n        // magic\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/AdeptPowerList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/MetamagicList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/RitualList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/SpellList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/SummoningList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/magic/SpiritOptions.html',\n\n        // matrix\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/ProgramList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/EchoList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/ComplexFormList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/CompilationList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/MatrixAttribute.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/SpritePowerList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/DeviceRating.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/Marks.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/matrix/MatrixActionList.html',\n\n        // attributes\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/attributes/Attribute.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/attributes/FakeAttribute.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/attributes/AttributeList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/attributes/Limits.html',\n\n        // skills\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/skills/ActiveSkillList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\n\n        // vehicle\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/vehicle/VehicleStatsList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/vehicle/VehicleSecondStatsList.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/vehicle/VehicleMovement.html',\n\n        // IC\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ic/ICStats.html',\n        'systems/shadowrun6-elysium/dist/templates/actor/parts/ic/ICConfiguration.html',\n\n        // limited actor\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/character.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/spirit.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/sprite.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/vehicle.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/critter.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/Header.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscCharacter.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscSpirit.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscSprite.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscIc.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscVehicle.html',\n        'systems/shadowrun6-elysium/dist/templates/actor-limited/parts/MiscCritter.html',\n\n\n        'systems/shadowrun6-elysium/dist/templates/item/parts/description.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/technology.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/header.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/weapon-ammo-list.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/weapon-mods-list.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/action.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/action_results.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/modifier.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/damage.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/opposed.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/spell.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/complex_form.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/weapon.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/armor.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/matrix.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/sin.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/contact.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/lifestyle.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/ammo.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/modification.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/program.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/critter_power.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/summoning.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/compilation.html',\n        'systems/shadowrun6-elysium/dist/templates/item/parts/ritual.html',\n\n        'systems/shadowrun6-elysium/dist/templates/rolls/parts/parts-list.html',\n        'systems/shadowrun6-elysium/dist/templates/rolls/parts/Damage.html',\n\n        // to wrap the bodies of tabs\n        'systems/shadowrun6-elysium/dist/templates/common/TabWrapper.html',\n        'systems/shadowrun6-elysium/dist/templates/common/ValueInput.html',\n\n        // Useful wrapper and implemented components\n        'systems/shadowrun6-elysium/dist/templates/common/ValueMaxAttribute.html',\n        'systems/shadowrun6-elysium/dist/templates/common/Attribute.html',\n        'systems/shadowrun6-elysium/dist/templates/common/ValueModifiers.html',\n\n        // useful select template for the common pattern\n        'systems/shadowrun6-elysium/dist/templates/common/Select.html',\n\n        // to create the condition monitors and edge counter\n        'systems/shadowrun6-elysium/dist/templates/common/HorizontalCellInput.html',\n\n        // looks like a ListHeader\n        'systems/shadowrun6-elysium/dist/templates/common/HeaderBlock.html',\n\n        'systems/shadowrun6-elysium/dist/templates/common/NameLineBlock.html',\n\n        // list components\n        'systems/shadowrun6-elysium/dist/templates/common/List/ListItem.html',\n        'systems/shadowrun6-elysium/dist/templates/common/List/ListEntityItem.html',\n        'systems/shadowrun6-elysium/dist/templates/common/List/ListHeader.html',\n\n        // dialogs\n        'systems/shadowrun6-elysium/dist/templates/apps/dialogs/damage-application.html',\n        'systems/shadowrun6-elysium/dist/templates/apps/dialogs/parts/success-test-common.html',\n        'systems/shadowrun6-elysium/dist/templates/apps/dialogs/parts/success-test-documents.html',\n        'systems/shadowrun6-elysium/dist/templates/apps/dialogs/parts/attack-range-dialog-fragment.html',\n\n        // Test chat messages and their parts\n        'systems/shadowrun6-elysium/dist/templates/rolls/success-test-message.html',\n        'systems/shadowrun6-elysium/dist/templates/rolls/parts/rolled-dice.html',\n\n        // Modifier management parts\n        'systems/shadowrun6-elysium/dist/templates/apps/partials/modifiers-physical.hbs'\n    ];\n\n    return loadTemplates(templatePaths);\n};\n", "import ModList = Shadowrun.ModList;\nimport ModListEntry = Shadowrun.ModListEntry;\n\nexport class PartsList<TType> {\n    get list(): ModList<TType> {\n        return this._list.slice();\n    }\n\n    get length(): number {\n        return this._list.length;\n    }\n\n    /**\n     * Return the sum total of the list.\n     *\n     * This can be used for numerical lists, that need the sum of all their list elements.\n     */\n    get total(): number {\n        let total = 0;\n        for (const part of this._list) {\n            if (typeof part.value === 'number') {\n                total += part.value;\n            }\n        }\n        return total;\n    }\n\n    /**\n     * Return the last element in the list.\n     *\n     * This can be used for none numerical parts lists, in which the latest value would be whatever the value is.\n     */\n    get last(): any {\n        return this._list[this._list.length - 1];\n    }\n\n    get isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    getPartValue(name: string): TType | undefined {\n        return this._list.find((part) => part.name === name)?.value;\n    }\n\n    clear(): void {\n        this._list.length = 0;\n    }\n\n    private _list: ModList<TType>;\n\n    constructor(parts?: ModList<TType>) {\n        let actualParts = [] as ModList<TType>;\n        if (parts) {\n            if (Array.isArray(parts)) {\n                actualParts = parts;\n            } else if (typeof parts === 'object') {\n                for (const [name, value] of Object.entries(parts)) {\n                    if (value !== null && value !== undefined) {\n                        // if it's a number, we are dealing with an array as an object\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\n                            actualParts.push({\n                                name: (value as ModListEntry<TType>).name,\n                                value: (value as ModListEntry<TType>).value,\n                            });\n                        } else {\n                            actualParts.push({\n                                name,\n                                value,\n                            } as ModListEntry<TType>);\n                        }\n                    }\n                }\n            }\n        }\n        this._list = actualParts;\n    }\n\n    addPart(name: string, value: TType): void {\n        this._list.push({\n            name,\n            value,\n        });\n    }\n\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\n        const index = this._list.findIndex((part) => part.name === name);\n        if (index > -1) {\n            // if we exist and should've overwrite, return\n            if (!overwrite) return;\n\n            this._list.splice(index, 1);\n            // if we are passed undefined, remove the value\n            if (value === undefined || value === null) return;\n            // recursively go through until we no longer have a part of this name\n            this.addUniquePart(name, value);\n        } else if (value !== undefined) {\n            this.addPart(name, value);\n        } else {\n            console.warn('Shadowrun 6e | PartsList cant add a none-numerical modifier.', name, value);\n        }\n    }\n\n    /**\n     * Remove all occurences of the given part modifier.\n     * \n     * @param name Search parts for this name (exactly)\n     * @returns true for when all parts have been removed, otherwise falls.\n     */\n    removePart(name: string): boolean {\n        let index = this._list.findIndex((part) => part.name === name);\n        let removed = false;\n        while (index > -1) {\n            removed = true;\n            this._list.splice(index, 1);\n            index = this._list.findIndex((part) => part.name === name);\n        }\n        \n        return removed;\n    }\n\n    /**\n     * Check if this part list contains at least one part with a matching name.\n     * \n     * @param name Needle in the part list stack\n     * @returns true, when a matching part is found.\n     */\n    hasPart(name: string): boolean {\n        return this._list.some(part => part.name === name);\n    }\n\n    getMessageOutput() {\n        return this.list;\n    }\n\n    static AddPart<TType>(list: ModList<TType>, name: string, value: TType): ModList<TType> {\n        const parts = new PartsList(list);\n        parts.addPart(name, value);\n        return parts._list;\n    }\n\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\n        const parts = new PartsList(list);\n        parts.addUniquePart(name, value, overwrite);\n        return parts._list;\n    }\n\n    static RemovePart<TType>(list: ModList<TType>, name: string) {\n        const parts = new PartsList(list);\n        parts.removePart(name);\n        return parts._list;\n    }\n\n    static Total(list: ModList<number>) {\n        const parts = new PartsList(list);\n        return parts.total;\n    }\n}\n", "/**\n * The constants file is a bit of a mess of stuff that doesn't change and some shadowrun specific rule values.\n * Everything should be reused by someplace else. Try to avoid any magic values withing your code.\n *\n * The SR object contains initial values and constants. Constants are written in ALL_CAPS_CONSTANTS and should never be\n * changed during runtime.\n * Regarding Shadowrun modifier values: If the rules define a negative modifier, declare it here as such. Don't use a positive\n * modifier and subtract at the place of use.\n *\n * Other than this file config.ts exists and only contains mappings between fixed names/ids and translation labels.\n *\n */\nexport const SYSTEM_NAME = 'shadowrun6-elysium';\nexport const SYSTEM_SOCKET = `system.${SYSTEM_NAME}`;\nexport const FLAGS = {\n    DiagonalMovement: 'diagonalMovement',\n    ShowGlitchAnimation: 'showGlitchAnimation',\n    ShowTokenNameForChatOutput: 'showTokenNameInsteadOfActor',\n    OnlyAllowRollOnDefaultableSkills: 'onlyAllowRollOnDefaultableSkills',\n    ShowSkillsWithDetails: 'showSkillsWithDetails',\n    OnlyAutoRollNPCInCombat: 'onlyAutoRollNPCInCombat',\n    MessageCustomRoll: 'customRoll',\n    ApplyLimits: 'applyLimits',\n    LastRollPromptValue: 'lastRollPromptValue',\n    DisplayDefaultRollCard: 'displayDefaultRollCard',\n    CombatInitiativePass: 'combatInitiativePass',\n    EmbeddedItems: 'embeddedItems',\n    LastFireMode: 'lastFireMode',\n    LastSpellForce: 'lastSpellForce',\n    LastComplexFormLevel: 'lastComplexFormLevel',\n    LastFireRange: 'lastFireRange',\n    Attack: 'attack',\n    Roll: 'roll',\n    ActionTestData: 'actionTestData',\n    TargetsSceneTokenIds: 'targetsSceneTokenIds',\n    ChangelogShownForVersion: 'changelogShownForVersion',\n    Modifier: 'modifier',\n    DoInitPass: 'doInitPass',\n    DoNextRound: 'doNextRound',\n    DoNewActionPhase: 'doNewActionPhase',\n    addNetworkController: 'addNetworkController',\n    SetDataStorage: 'setDataStorage',\n    TokenHealthBars: 'tokenHealthBars',\n    Test: 'TestData',\n    HideGMOnlyChatContent: 'HideGMOnlyChatContent',\n    MustHaveRessourcesOnTest: 'MustConsumeRessourcesOnTest',\n    AutomateMultiDefenseModifier: 'AutomateMultiDefenseModifier',\n    AutomateProgressiveRecoil: 'AutomateProgressiveRecoil',\n    TurnsSinceLastAttack: 'turnsSinceLastAttack',\n    ManualRollOnSuccessTest: 'ManualRollOnSuccessTest',\n    MarkImports: 'MarkImports',\n    ImportIconFolder: 'ImportIconFolder',\n    UseImportIconOverrides: 'UseImportIconOverrides',\n    CreateTargetedEffects: 'CreateTargetedEffects',\n    DefaultOpposedTestActorSelection: 'DefaultOpposedTestActorSelection',\n    TeamworkTestFlow: 'TeamworkTestFlow',\n    UseDamageCondition: 'UseDamageCondition',\n    GlobalDataStorage: 'GlobalDataStorage'\n};\nexport const CORE_NAME = 'core';\nexport const CORE_FLAGS = {\n    RollMode: 'rollMode'\n}\nexport const METATYPEMODIFIER = 'SR6.Character.Modifiers.NPCMetatypeAttribute';\n\nexport const LENGTH_UNIT_TO_METERS_MULTIPLIERS = {\n    'm': 1,\n    'meter': 1,\n    'meters': 1,\n    'km': 1000,\n    'kilometers': 1000,\n    'kilometer': 1000,\n};\n\nexport const DEFAULT_ROLL_NAME = 'Roll';\nexport const LENGTH_UNIT = 'm';\nexport const SKILL_DEFAULT_NAME = '';\nexport const DEFAULT_ID_LENGTH = 16;\n\n// Contain data regarding shadowrun rules, mostly whatever is stated in some table to be looked up in other places.\nexport const SR = {\n    combat: {\n        // Modifiers to use for the different levels / ranges for environmental modifiers.\n        environmental: {\n            range_modifiers: {\n                short: 0,\n                medium: -1,\n                long: -3,\n                extreme: -6,\n                // A modifier of zero will allow for users/gm to still test for targets with their own judgement.\n                out_of_range: 0\n            },\n            levels: {\n                good: 0,\n                light: -1,\n                moderate: -3,\n                heavy: -6,\n                extreme: -10,\n            }\n        },\n\n        INI_RESULT_MOD_AFTER_INI_PASS: -10,\n        INITIAL_INI_PASS: 1,\n        INITIAL_INI_ROUND: 1\n    },\n    die: {\n        glitch: [1],\n        success: [5, 6]\n    },\n    defense: {\n        spell: {\n            direct: {\n                mana: 'willpower',\n                physical: 'body'\n            }\n        }\n    },\n    attributes: {\n        // Use for min/max value ranges (general). This will need expanding for different metatypes, should that ever\n        // come to  be.\n        // These are the most extreme outer, possible modified values for each attribute.\n        ranges: {\n            magic: {min: 0},\n            edge: {min: 0},\n            resonance: {min: 0},\n            essence: {min: 0},\n            body: {min: 0},\n            agility: {min: 0},\n            reaction: {min: 0},\n            strength: {min: 0},\n            willpower: {min: 0},\n            logic: {min: 0},\n            intuition: {min: 0},\n            charisma: {min: 0},\n            attack: {min: 0},\n            sleaze: {min: 0},\n            data_processing: {min: 0},\n            firewall: {min: 0},\n            host_rating: {min: 0, max: 12},\n            pilot: {min: 0},\n            force: {min: 0}\n        },\n        /**\n         * Spirits on creation can have calculated attributes that would lower them to 0 or lower, but still have to have a min value of\n         * 1 for each.\n         */\n        rangesSpirit: {\n            magic: {min: 0},\n            edge: {min: 0},\n            essence: {min: 0},\n            body: {min: 1},\n            agility: {min: 1},\n            reaction: {min: 1},\n            strength: {min: 1},\n            willpower: {min: 1},\n            logic: {min: 1},\n            intuition: {min: 1},\n            charisma: {min: 1},\n            pilot: {min: 0},\n            force: {min: 1}\n        },\n        // Use for initial default values that aren't simply range.<>.min values.\n        defaults: {\n            essence: 6\n        },\n        // Reaction would be displayed as REA, when set to 3.\n        SHORT_NAME_LENGTH: 3\n    },\n    /**\n     * Instead of general attributes, these are the attribute ranges for specific actor types\n     */\n    actorTypeAttributes: {\n        vehicle: {\n            // These physical attributes don't really exist on a vehicle.\n            // System does manage them in regards to GitHub issue #712\n            strength: {min: 0},\n            agility: {min: 0}\n        }\n    },\n    skill: {\n        // @PDF SR5#130\n        DEFAULTING_MODIFIER: -1,\n        SPECIALIZATION_MODIFIER: 2\n    },\n    initiatives: {\n        ic: {\n            dice: 4\n        },\n        ranges: {\n            base: {min: 0},\n            dice: {min: 0, max: 5}\n        }\n    },\n    /**\n     * Grunt related npc constant data.\n     */\n    grunt: {\n        metatype_modifiers: {\n            elf: {\n                attributes: {\n                    agility: +1,\n                    charisma: +2,\n                    edge: -1\n                }\n            },\n            ork: {\n                attributes: {\n                    body: +3,\n                    strength: +2,\n                    logic: -1,\n                    charisma: -1,\n                    edge: -1\n                }\n            },\n            troll: {\n                attributes: {\n                    body: +4,\n                    agility: -1,\n                    strength: +4,\n                    logic: -1,\n                    intuition: -1,\n                    charisma: -2,\n                    edge: -1,\n                },\n                general: {\n                    armor: +1\n                }\n            },\n            dwarf: {\n                attributes: {\n                    body: +2,\n                    reaction: -1,\n                    strength: +2,\n                    willpower: +1,\n                    edge: -1\n                }\n            }\n        }\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR } from \"../constants\";\nimport { Helpers } from \"../helpers\";\nimport { SR6Item } from \"../item/SR6Item\";\nimport RangesTemplateData = Shadowrun.RangesTemplateData;\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\n\n/**\n * shadowrun6-elysium rules applying to ranged weapons in general.\n */\nexport const RangedWeaponRules = {\n    /**\n     * Apply a distance to a selected target to the configured ranges of the used ranged weapon\n     * to determine which range matches the distance.\n     *\n     * Apply ranges according to SR5#175 section 'Range'.\n     * Assume that a distance matches a range up until it's farthest and lowest given value\n     * in the 'Range Table' SR5#185 (i.e. the weapon item range configuration).\n     *\n     * @param distance Distance from the ranged weapon to the target in meters.\n     * @param ranges Configured weapon ranges in meters taken from the weapon item configuration.\n     * @returns The matching weapon range for the given distance.\n     */\n    getRangeForTargetDistance(distance: number, ranges: RangesTemplateData): RangeTemplateData {\n        // Assume ranges to be in ASC order and to define their max range.\n        // Should no range be found, assume distance to be out of range.\n        const rangeKey = Object.keys(ranges).find(range => distance <= ranges[range].distance);\n        if (rangeKey) {\n            return ranges[rangeKey];\n        } else {\n            const { extreme } = ranges;\n            return Helpers.createRangeDescription('SR6.OutOfRange', extreme.distance, SR.combat.environmental.range_modifiers.out_of_range);\n        }\n    },\n\n\n    /**\n     * Calculate recoil compensation based on SR5#175 'Recoil' including SR5#178\n     *\n     * @param item\n     * @returns total amount of recoil compensation to be used when attacking with this item.\n     */\n    recoilCompensation(item: SR6Item): number {\n        let compensation = item.recoilCompensation;\n        if (item.actor) {\n            compensation += item.actor.recoilCompensation;\n        }\n        return compensation;\n    },\n\n    /**\n     * Calculate recoil compensation based on SR5#175 'Recoil' including SR5#178\n     *\n     * @param actor\n     * @returns Partial amount of recoil compensation available to this actor\n     */\n    actorRecoilCompensation(actor: SR6Actor): number {\n        // Each new attack allows one free compensation.\n        if (actor.isVehicle()) return RangedWeaponRules.vehicleRecoilCompensation(actor);\n        else return RangedWeaponRules.humanoidRecoilCompensation(actor);\n    },\n\n    /**\n     * Vehicle use their own rc calculation according to SR5#176 'Vehicle and Drones and Mounted Weapons'\n     *\n     * @returns The recoil compensation part a vehicle will add to the total recoil compensation.\n     */\n    vehicleRecoilCompensation(actor: SR6Actor): number {\n        if (!actor.isVehicle()) return 0;\n\n        const body = actor.getAttribute('body');\n        return body ? body.value : 0;\n    },\n\n    /**\n     * Calculate the actual recoil compensation for vehicles number from source values according to SR5#175 'Recoil'\n     *\n     * @param body The body level of the vehicle\n     */\n    vehicleRecoilCompensationValue(body: number): number {\n        return Math.max(body, 0);\n    },\n\n    /**\n     * Humanoid characters use the default rc calculation according to SR5#175 'Recoil'\n     *\n     * A humanoid in this case is anything with physical attributes that's not a vehicle.\n     * Matrix/Astral actors aren't included.\n     *\n     * @returns The recoil compensation part a humanoid will add to the total recoil compensation.\n     */\n    humanoidRecoilCompensation(actor: SR6Actor): number {\n        if (actor.isVehicle() || actor.isIC() || actor.isSprite()) return 0;\n\n        const strength = actor.getAttribute('strength');\n        if (!strength) return 0;\n        return RangedWeaponRules.humanoidRecoilCompensationValue(strength.value);\n    },\n\n    /**\n     * Calculate the actual recoil compensation for humanoids number from source values according to SR5#175 'Recoil'\n     *\n     * @param strength The strength level of the humanoid\n     * @param baseRc The base recoil compensation\n     * @returns The recoil compensation for a humanoid\n     */\n    humanoidRecoilCompensationValue(strength: number): number {\n        return Math.max(Math.ceil(strength / 3), 0);\n    },\n\n    /**\n     * Free recoil compensation according to SR5#175 'Recoil'\n     * @param baseRc Optional parameter allowing you to define a custom base rc.\n     */\n    humanoidBaseRecoilCompensation(baseRc: number = 1): number {\n        return baseRc;\n    },\n\n    /**\n     * The number of bullets when reloading during a complex action according to SR5#163 'Reloading Weapons'\n     * @param clip The currently used clip\n     * @param dex The owning actors dexterity value\n     * @returns The number of bullets when reloading during a complex action or -1 if it can only be fully reloaded directly\n     */\n    partialReload(clip: string = '', dex: number = 1): number {\n        switch (clip) {\n            case 'internal_magazin':\n            case 'cylinder':\n                return dex;\n            case 'break_action':\n                return 2;\n            case 'muzzle_loader':\n            case 'bow':\n                return 1;\n            default:\n                return -1;\n        }\n    }\n}\n", "import {CORE_FLAGS, CORE_NAME} from './constants';\n\n/**\n * The legacy chat message approach of the system uses a generic chat message to display roll and item information.\n *\n * NOTE: This approach has been deprecated in Foundry 0.8 and should be replaced with custom Roll implementation for each kind of Roll (ActionRoll, AttackRoll, OpposedRoll, ...).\n *\n * @param template The dist path to be used as a template file.\n * @param templateData An untyped object carrying data to display. The template should itself check for what properties are available and only renders what's given.\n */\nexport async function createChatMessage(template: string, templateData): Promise<ChatMessage|null> {\n    const chatData = await createChatData(template, templateData);\n    const message = await ChatMessage.create(chatData);\n\n    if (!message) return null;\n\n    return message;\n}\n\n// templateData has no datatype to pipe through whatever it's given.\n// Clean up your data within templateData creation functions!\nconst createChatData = async (template: string, templateData) => {\n    const html = await renderTemplate(template, templateData);\n\n    const chatData = {\n        user: game.user?.id,\n        speaker: {\n            actor: templateData.actor?.id,\n            token: templateData.token?.id,\n            alias: game.user?.name\n        },\n        item: templateData.item,\n        content: html,\n        rollMode: game.settings.get(CORE_NAME, CORE_FLAGS.RollMode)\n    };\n\n    // @ts-expect-error\n    ChatMessage.applyRollMode(chatData, chatData.rollMode);\n\n    return chatData;\n};\n\nexport async function createItemChatMessage(options) {\n    const templateData = createChatTemplateData(options);\n    return await createChatMessage('systems/shadowrun6-elysium/dist/templates/rolls/item-card.html', templateData);\n}\n\nfunction createChatTemplateData(options) {\n    // field extraction is explicit to enforce visible data flow to ensure clean data.\n    // NOTE: As soon as clear data dynamic data flow can be established, this should be removed for a simple {...options}\n    let {actor, item, description, tests} = options;\n\n    const token = actor?.getToken();\n    const title = game.i18n.localize(\"SR6.Description\");\n\n    return {\n        title,\n        actor,\n        token,\n        item,\n        description,\n        tests\n    }\n}\n", "import {SKILL_DEFAULT_NAME} from \"../constants\";\nimport DamageData = Shadowrun.DamageData;\nimport FireModeData = Shadowrun.FireModeData;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport SkillField = Shadowrun.SkillField;\nimport TrackType = Shadowrun.TrackType;\nimport SourceEntityField = Shadowrun.SourceEntityField;\nimport ValueField = Shadowrun.ValueField;\nimport GenericValueField = Shadowrun.GenericValueField;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport RangeData = Shadowrun.RangeData;\n\ninterface MinimalItemData {\n    // Whatever name you want to give but not ''.\n    name?: string\n    // Whatever item type you want to have.\n    type: string\n}\n\n/**\n * Data Defaults are used for partial template data that can't easily be gotten by instead\n * using game.model.Item.<type>.<whatver> or game.mode.Actor.<type>.<whatever>\n *\n * This is mostly the case when the system doesn't define data in the system template\n * for fields like track, skill that aren't known during document creation by Foundry.\n *\n */\nexport class DataDefaults {\n    /**\n     * Return a base item data structure with minimal necessary FoundryVTT ItemDataModel fields.\n     *\n     * @param name Whatever name you want to give but not ''.\n     * @param type Whatever item type you want to have\n     * @param systemData Whatever partial item system data you want to inject into general model system data.\n     * @returns A minimum viable item data structure to use with Item#create\n     */\n    static baseItemData<ItemData, ItemSystemData>(itemData: MinimalItemData, systemData: Partial<ItemSystemData>={}) {\n        const name = itemData.name ?? 'Unnamed';\n        const type = itemData.type;\n\n        // foundry.utils.duplicate source to avoid keeping reference to model data.\n        const modelSystemData = foundry.utils.duplicate(game.model.Item[type]);\n        if (!modelSystemData) throw new Error(`FoundryVTT doesn't have item type: ${type} registered`);\n        return {\n            name, type,\n            system: foundry.utils.mergeObject(modelSystemData, systemData)\n        } as ItemData;\n    }\n    /**\n     * Damage data to hold everything around damaging actors.\n     *\n     * @param partialDamageData give partial DamageData fields to overwrite default values\n     * @param isDrain whether this damage is for drain (defaults to stun instead of physical)\n     */\n    static damageData(partialDamageData: RecursivePartial<DamageData> = {}, isDrain: boolean = false): DamageData {\n        const data: DamageData = {\n            type: {\n                base: isDrain ? 'stun' : 'physical',\n                value: isDrain ? 'stun' : 'physical',\n            },\n            element: {\n                base: '',\n                value: '',\n            },\n            base: 0,\n            value: 0,\n            ap: {\n                base: 0,\n                value: 0,\n                mod: [],\n                attribute: '',\n                base_formula_operator: 'add',\n            },\n            attribute: '',\n            mod: [],\n            base_formula_operator: 'add',\n            source: {\n                actorId: '',\n                itemId: '',\n                itemType: '',\n                itemName: ''\n            }\n        }\n\n        // Create the merged damage data\n        const mergedData = foundry.utils.mergeObject(data, partialDamageData) as DamageData;\n\n        // Ensure the value property is set\n        if (mergedData.value === undefined) {\n            mergedData.value = mergedData.base;\n        }\n\n        // Ensure type values are set\n        if (!mergedData.type) {\n            mergedData.type = {\n                base: isDrain ? 'stun' : 'physical',\n                value: isDrain ? 'stun' : 'physical'\n            };\n        } else {\n            // Ensure type.base is set\n            if (!mergedData.type.base || mergedData.type.base === '') {\n                mergedData.type.base = isDrain ? 'stun' : 'physical';\n            }\n\n            // Ensure type.value is set\n            if (!mergedData.type.value || mergedData.type.value === '') {\n                mergedData.type.value = mergedData.type.base || (isDrain ? 'stun' : 'physical');\n            }\n        }\n\n        console.log('Shadowrun 6e | Created damage data:', mergedData);\n\n        return mergedData;\n    }\n\n    /**\n     * Armor data used within actor documents.\n     *\n     * @param partialActorArmorData Inject partial armor data\n     */\n    static actorArmor(partialActorArmorData: Partial<Shadowrun.ActorArmor> = {}): Shadowrun.ActorArmor {\n        return foundry.utils.mergeObject({\n            value: 0,\n            mod: [],\n            base: 0,\n            label: '',\n            fire: 0,\n            electric: 0,\n            cold: 0,\n            acid: 0,\n            hardened: false\n        }, partialActorArmorData) as Shadowrun.ActorArmor;\n    }\n\n    /**\n     * Build a minimal viable action roll data structure.\n     *\n     * @param partialActionData Inject any minimal action property\n     */\n    static minimalActionData(partialActionData: Partial<MinimalActionData> = {}) {\n        return foundry.utils.mergeObject({\n            attribute: '',\n            attribute2: '',\n            skill: '',\n            mod: 0,\n            armor: false,\n            limit: {\n                value: 0,\n                attribute: '',\n                mod: [],\n                base: 0,\n            }\n        }, partialActionData) as MinimalActionData;\n    }\n\n    /**\n     * Build a action data capable of rolling a test.\n     *\n     * This is used instead of game.model.Item.action.action as fields like armor don't mesh well with TestCreator._mergeMinimalActionDataInOrder\n     *\n     * @param partialActionRollData\n     * @returns\n     */\n    static actionRollData(partialActionRollData: DeepPartial<ActionRollData> = {}): ActionRollData {\n        return foundry.utils.mergeObject({\n            type: '',\n            categories: [],\n            attribute: '',\n            attribute2: '',\n            skill: '',\n            spec: false,\n            mod: 0,\n            mod_description: '',\n            damage: this.damageData(),\n            modifiers: [],\n            limit: {\n                value: 0,\n                base: 0,\n                attribute: '',\n                mod: []\n            },\n            threshold: {\n                value: 0,\n                base: 0\n            },\n            extended: false,\n            opposed: {\n                test: '',\n                type: '',\n                attribute: '',\n                attribute2: '',\n                skill: '',\n                mod: 0,\n                description: ''\n            },\n            followed: {\n                test: '',\n                attribute: '',\n                attribute2: '',\n                skill: '',\n                mod: 0,\n            },\n            alt_mod: 0,\n            dice_pool_mod: []\n        }, partialActionRollData) as ActionRollData;\n    }\n\n    /**\n     * Build a skill field for use in document data\n     *\n     * @param partialSkillData Inject any skill property\n     */\n    static skillData(partialSkillData: Partial<SkillField> = {}): SkillField {\n        return foundry.utils.mergeObject({\n            name: SKILL_DEFAULT_NAME,\n            base: 0,\n            value: 0,\n            hidden: false,\n            canDefault: false,\n            label: '',\n            bonus: [],\n            specs: [],\n            mod: [],\n            attribute: ''\n        }, partialSkillData) as SkillField;\n    }\n\n    /**\n     * Build a damage track field for use in document data.\n     * @param partialTrackData Injet any track property\n     * @returns\n     */\n    static trackData(partialTrackData: Partial<TrackType> = {}): TrackType {\n        return foundry.utils.mergeObject({\n            value: 0,\n            max: 0,\n            label: '',\n            mod: [],\n            disabled: false,\n            wounds: 0\n        }, partialTrackData) as TrackType;\n    }\n\n    /**\n     * Data structure used to reference other document types.\n     *\n     * Example usage:\n     * Host references other IC actors it's able to start in combat.\n     *\n     * TODO: This uses the v8 old style Document.id pattern instead of v9 style uuid pattern.\n     *\n     * @param partialSourceEntityData\n     * @returns\n     */\n    static sourceItemData(partialSourceEntityData: Partial<SourceEntityField> = {}): SourceEntityField {\n        return foundry.utils.mergeObject({\n            id: '',\n            name: '',\n            pack: null,\n            type: 'Actor',\n            // @ts-expect-error\n            system: partialSourceEntityData.system || undefined\n        }, partialSourceEntityData) as SourceEntityField;\n    }\n\n    /**\n     * Build a numerical value field for use anywhere necessary\n     *\n     * @param partialValueData Inject any value property\n     */\n    static valueData(partialValueData: Partial<ValueField> = {}) {\n        return foundry.utils.mergeObject({\n            base: 0,\n            value: 0,\n            temp: 0,\n            mod: [],\n            label: ''\n        }, partialValueData) as ValueField;\n    }\n\n    /**\n     * Build a value field holding any value for use anywhere necessary\n     * Differs from valueData as it's not only allowing number type values.\n     * @param partialGenericValueData Inject any value property\n     */\n    static genericValueData(partialGenericValueData: Partial<GenericValueField> = {}) {\n        return foundry.utils.mergeObject({\n            base: 0,\n            value: 0,\n            temp: 0,\n            mod: [],\n            label: ''\n        }, partialGenericValueData) as GenericValueField;\n    }\n\n    /**\n     * Build a fire mode field for use in range weapon data or testing\n     *\n     * @param partialFireModeData Inject any fire mode property\n     */\n    static fireModeData(partialFireModeData: Partial<FireModeData> = {}): FireModeData {\n        return foundry.utils.mergeObject({\n            value: 0,\n            label: '',\n            defense: 0,\n            recoil: false,\n            suppression: false,\n            mode: 'single_shot',\n            action: 'simple'\n        }, partialFireModeData);\n    }\n\n    static weaponRangeData(partialRangeData: Partial<RangeData> = {}): RangeData {\n        return foundry.utils.mergeObject({\n            short: 0,\n            medium: 0,\n            long: 0,\n            extreme: 0,\n            category: 'manual',\n        }, partialRangeData);\n    }\n\n    /**\n     * Build a description data segment\n     *\n     * @param partialDescriptionData\n     * @returns\n     */\n    static descriptionData(partialDescriptionData: Partial<Shadowrun.DescriptionData> = {}) {\n        return foundry.utils.mergeObject({\n            value: '',\n            chat: '',\n            source: ''\n        }, partialDescriptionData) as Shadowrun.DescriptionData;\n    }\n\n    /**\n     * Build a technology data segment\n     *\n     * @param partialTechnologyData\n     * @returns\n     */\n    static technologyData(partialTechnologyData: Partial<Shadowrun.TechnologyData> = {}) {\n        return foundry.utils.mergeObject({\n            rating: '',\n            availability: '',\n            quantity: 1,\n            cost: 0,\n            equipped: false,\n            conceal: {\n                base: 0,\n                value: 0,\n                mod: [],\n            },\n            condition_monitor: {\n                label: '',\n                value: 0,\n                max: 0,\n            },\n            wireless: true,\n            networkController: undefined\n        }, partialTechnologyData) as Shadowrun.TechnologyData;\n    }\n\n    /**\n     * Build a attribute data segment.\n     *\n     * @param partialAttributeData\n     * @returns Merged of partial and basic attribute data\n     */\n    static attributeData(partialAttributeData: Partial<Shadowrun.AttributeField> = {}) {\n        return foundry.utils.mergeObject({\n            value: 0,\n            mod: [],\n            base: 0,\n            label: '',\n            hidden: false,\n            device_att: '',\n            temp: 0,\n            limit: ''\n        }, partialAttributeData) as Shadowrun.AttributeField;\n    }\n}\n", "export abstract class DataWrapper<DataType> {\n    constructor(protected data: DataType) {}\n}\n", "import { DataWrapper } from './DataWrapper';\nimport ConditionData = Shadowrun.ConditionData;\nimport ModList = Shadowrun.ModList;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport SpellData = Shadowrun.SpellData;\nimport TechnologyData = Shadowrun.TechnologyData;\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\nimport SpellRange = Shadowrun.SpellRange;\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\nimport ModificationItemData = Shadowrun.ModificationItemData;\nimport ActionResultData = Shadowrun.ActionResultData;\nimport AmmunitionData = Shadowrun.AmmunitionData;\nimport WeaponData = Shadowrun.WeaponData;\nimport DeviceData = Shadowrun.DeviceData;\nimport AmmoData = Shadowrun.AmmoData;\n\nexport class SR6ItemDataWrapper extends DataWrapper<ShadowrunItemData> {\n    getType() {\n        return this.data.type;\n    }\n    getData(): ShadowrunItemDataData {\n        return this.data.system as ShadowrunItemDataData;\n    }\n\n    isAreaOfEffect(): boolean {\n        return this.isGrenade() || this.isAoESpell() || this.isAoEAmmo();\n    }\n\n    /** Should only be used to check for actual armor item type.\n     * NOTE: Should you only care about a possible armor value use couldHaveArmor instead.\n     */\n    isArmor(): boolean {\n        return this.data.type === 'armor';\n    }\n\n    /** Will give an indicator if an item provides an armor value, without locking into only the Armor item type.\n     * NOTE: Should you only care about the armor item type use isArmor instead.\n     */\n    couldHaveArmor(): boolean {\n        const armor = this.getData().armor;\n        return this.isArmor() || armor !== undefined;\n    }\n\n    hasArmorBase(): boolean {\n        return this.hasArmor() && !this.getData().armor?.mod;\n    }\n\n    hasArmorAccessory(): boolean {\n        return this.hasArmor() && (this.getData().armor?.mod ?? false);\n    }\n\n    hasArmor(): boolean {\n        return this.getArmorValue() > 0;\n    }\n\n    isGrenade(): boolean {\n        return this.isThrownWeapon() && (this.getData().thrown?.blast.radius ?? 0) > 0;\n    }\n\n    isThrownWeapon(): boolean {\n        if (!this.isWeapon()) return false;\n        const weaponData = this.getData() as WeaponData;\n        return weaponData.category === 'thrown';\n    }\n\n    isWeapon(): boolean {\n        return this.data.type === 'weapon';\n    }\n\n    isModification(): boolean {\n        return this.data.type === 'modification';\n    }\n\n    isWeaponModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.system.type === 'weapon';\n    }\n\n    isArmorModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.system.type === 'armor';\n    }\n\n    isVehicleModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.system.type === 'vehicle';\n    }\n\n    isDroneModification(): boolean {\n        if (!this.isModification()) return false;\n        const modification = this.data as ModificationItemData;\n        return modification.system.type === 'drone';\n    }\n\n    isProgram(): boolean {\n        return this.data.type === 'program';\n    }\n\n    isQuality(): boolean {\n        return this.data.type === 'quality';\n    }\n\n    isAmmo(): boolean {\n        return this.data.type === 'ammo';\n    }\n\n    isAoEAmmo(): boolean {\n        if (!this.isAmmo()) return false;\n        const ammoData = this.getData() as AmmoData;\n        return (ammoData.blast.radius ?? 0) > 0;\n    }\n\n    isCyberware(): boolean {\n        return this.data.type === 'cyberware';\n    }\n\n    isBioware(): boolean {\n        return this.data.type === 'bioware';\n    }\n\n    isBodyware(): boolean {\n        return this.isCyberware() || this.isBioware();\n    }\n\n    isCombatSpell(): boolean {\n        if (!this.isSpell()) return false;\n        const spellData = this.getData() as unknown as SpellData;\n        return spellData.category === 'combat';\n    }\n\n    isDirectCombatSpell(): boolean {\n        if (!this.isCombatSpell()) return false;\n        return this.getData()?.combat?.type === 'direct';\n    }\n\n    isIndirectCombatSpell(): boolean {\n        if (!this.isCombatSpell()) return false;\n        return this.getData()?.combat?.type === 'indirect';\n    }\n\n    isManaSpell(): boolean {\n        if (!this.isSpell()) return false;\n        // Cast as partial spell data due to conflicting .type between differing item types.\n        const spellData = this.getData() as Partial<SpellData>;\n        return spellData.type === 'mana';\n    }\n\n    isPhysicalSpell(): boolean {\n        if (!this.isSpell()) return false;\n        // Cast as partial spell data due to conflicting .type between differing item types.\n        const spellData = this.getData() as Partial<SpellData>;\n        return spellData.type === 'physical';\n    }\n\n    isRangedWeapon(): boolean {\n        if (!this.isWeapon()) return false;\n        const weaponData = this.getData() as WeaponData;\n        return weaponData.category === 'range';\n    }\n\n    isSpell(): boolean {\n        return this.data.type === 'spell';\n    }\n\n    isAoESpell(): boolean {\n        return this.isSpell() && this.getData().range === 'los_a';\n    }\n\n    isSpritePower(): boolean {\n        return this.data.type === 'sprite_power';\n    }\n\n    isComplexForm(): boolean {\n        return this.data.type === 'complex_form';\n    }\n\n    isContact(): boolean {\n        return this.data.type === 'contact';\n    }\n\n    isCritterPower(): boolean {\n        return this.data.type === 'critter_power';\n    }\n\n    isMeleeWeapon(): boolean {\n        if (!this.isWeapon()) return false;\n        const weaponData = this.getData() as WeaponData;\n        return weaponData.category === 'melee';\n    }\n\n    isDevice(): boolean {\n        return this.data.type === 'device';\n    }\n\n    isEquipment(): boolean {\n        return this.data.type === 'equipment';\n    }\n\n    isEquipped(): boolean {\n        return this.getData().technology?.equipped || false;\n    }\n\n    isWireless(): boolean {\n        return this.getData().technology?.wireless || false;\n    }\n\n    isCyberdeck(): boolean {\n        if (!this.isDevice()) return false;\n        const deviceData = this.getData() as DeviceData;\n        return deviceData.category === 'cyberdeck';\n    }\n\n    isRCC(): boolean {\n        if (!this.isDevice()) return false;\n        const deviceData = this.getData() as DeviceData;\n        return deviceData.category === 'rcc';\n    }\n\n    isCommlink(): boolean {\n        if (!this.isDevice()) return false;\n        const deviceData = this.getData() as DeviceData;\n        return deviceData.category === 'commlink';\n    }\n\n    isMatrixAction(): boolean {\n        // @ts-expect-error\n        return this.isAction() && this.getData().result.success.matrix.placeMarks;\n    }\n\n    isSin(): boolean {\n        return this.data.type === 'sin';\n    }\n\n    isLifestyle(): boolean {\n        return this.data.type === 'lifestyle';\n    }\n\n    getId(): string {\n        // @ts-expect-error // TODO: Foundry Where is my foundry base data?\n        return this.data._id;\n    }\n\n    get hasSource(): boolean {\n        return !!this.getData().description?.source;\n    }\n\n    getSource(): string {\n        return this.getData().description?.source ?? '';\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.getData().technology?.condition_monitor ?? { value: 0, max: 0, label: '' };\n    }\n\n    getRating(): number {\n        return this.getData().technology?.rating || 0;\n    }\n\n    getArmorValue(): number {\n        return this.getData()?.armor?.value ?? 0;\n    }\n\n    getHardened(): boolean {\n        return this.getData()?.armor?.hardened ?? false;\n    }\n\n    hasDefenseRating() : boolean {\n        return this.getData().armor?.defense_rating.base !== 0;\n    }\n\n    getDefenseRating() : number {\n        return this.getData().armor?.defense_rating.value ?? 0;\n    }\n\n    getBaseDefenseRating() : number {\n        return this.getData().armor?.defense_rating.base ?? 0;\n    }\n\n    getDefenseRatingRaw() : object {\n        return this.getData().armor?.defense_rating ?? {};\n    }\n\n    setDefenseRatingValue(value: number) : void {\n        let armor = this.getData().armor;\n        if(armor !== undefined) {\n            armor.defense_rating.value = value;\n        }\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        const { fire, electricity, cold, acid, radiation } = this.getData().armor || {};\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0, radiation: radiation ?? 0 };\n    }\n\n    getLinkedActorUuid(): string | undefined {\n        return this.getData().linkedActor;\n    }\n\n    getName(): string {\n        return this.data.name;\n    }\n\n    /**\n     * Essence loss of an item is flat value and depends on the quantity of that item\n     *\n     * Using quantity allows for two approaches:\n     * - Add an item twice while still having book essence values\n     * - Add an item with quantity 2 while also having book essence values\n     * Both are valid.\n     *\n     * @returns A decimal as essence modifier\n     */\n    getEssenceLoss(): number {\n        const loss = Number(this.getData()?.essence) ?? 0;\n        const quantity = Number(this.getData()?.technology?.quantity) ?? 1;\n\n        return loss * quantity\n    }\n\n    getAmmo(): AmmunitionData|undefined {\n        return this.getData().ammo;\n    }\n\n    getASDF() {\n        if (!this.isDevice()) return undefined;\n\n        // matrix attributes are set up as an object\n        const matrix = {\n            attack: {\n                value: 0,\n                device_att: '',\n            },\n            sleaze: {\n                value: 0,\n                device_att: '',\n            },\n            data_processing: {\n                value: this.getRating(),\n                device_att: '',\n            },\n            firewall: {\n                value: this.getRating(),\n                device_att: '',\n            },\n        };\n\n        // This if statement should cover all types of devices, meaning the \"getRating\" calls above are always overwritten\n        if (this.isCyberdeck() || this.isRCC() || this.isCommlink()) {\n            const atts = this.getData().atts;\n            if (atts) {\n                for (let [key, att] of Object.entries(atts)) {\n                    matrix[att.att].value = att.value;\n                    matrix[att.att].device_att = key;\n                }\n            }\n        }\n\n        return matrix;\n    }\n\n    getQuantity(): number | undefined {\n        return this.getData()?.technology?.quantity || 1;\n    }\n\n    isAction(): boolean {\n        return this.data.type === 'action';\n    }\n\n    getAction(): ActionRollData|undefined {\n        return this.getData().action;\n    }\n\n    getActionDicePoolMod(): number | undefined {\n        return this.getData().action?.mod;\n    }\n\n    getLimitAttribute(): string | undefined {\n        return this.getData().action?.limit?.attribute;\n    }\n\n    getActionSkill(): string | undefined {\n        return this.getData().action?.skill;\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.getData().action?.attribute;\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.getData().action?.attribute2;\n    }\n\n    getActionLimit(): number | undefined {\n        return this.getData().action?.limit?.value;\n    }\n\n    getModifierList(): ModList<number> {\n        return this.getData().action?.dice_pool_mod || [];\n    }\n\n    getActionSpecialization(): string | undefined {\n        if (this.getData().action?.spec) return 'SR6.Specialization';\n        return undefined;\n    }\n\n    getDrain(): number {\n        return this.getData().drain || 0;\n    }\n\n    isUsingRangeCategory(): boolean {\n        if(this.isRangedWeapon()) {\n            const category = this.getData().range?.ranges?.category;\n\n            return !!category && category !== \"manual\";\n        }\n        if(this.isThrownWeapon()) {\n            const category = this.getData().thrown?.ranges?.category;\n\n            return !!category && category !== \"manual\";\n        }\n        return false;\n    }\n\n    getFade(): number {\n        return this.getData().fade || 0;\n    }\n\n    getRecoilCompensation(): number {\n        if (!this.isRangedWeapon()) return 0;\n        const base = this.getData()?.range?.rc.value ?? '0';\n        return Number(base);\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon()) {\n            return this.getData().melee?.reach ?? 0;\n        }\n        return 0;\n    }\n\n    getTechnology(): TechnologyData|undefined {\n        if (\"technology\" in this.data.system)\n            return this.data.system.technology;\n    }\n\n    getRange(): CritterPowerRange|SpellRange|RangeWeaponData|undefined {\n        if (!(\"range\" in this.data.system)) return;\n\n        if (this.data.type === 'critter_power')\n            return this.data.system.range as CritterPowerRange;\n\n        if (this.data.type === 'spell')\n            return this.data.system.range as SpellRange;\n\n        if (this.data.type === 'weapon')\n            return this.data.system.range as RangeWeaponData;\n    }\n\n    getModificationCategory(): string {\n        return this.getData().modification_category ?? '';\n    }\n\n    getModificationCategorySlots(): number {\n        return this.getData().slots ?? 0;\n    }\n\n    hasDefenseTest(): boolean {\n        return this.getData().action?.opposed?.type === 'defense';\n    }\n\n    hasAmmo(): boolean {\n        return !!this.getAmmo();\n    }\n\n    getActionResult(): ActionResultData {\n        // @ts-expect-error\n        return this.getData().result;\n    }\n}\n", "import {SR} from \"../constants\";\nimport {SR6Item} from \"../item/SR6Item\";\n\nexport class MatrixRules {\n    /**\n     * Calculate the matrix condition monitor based on SR5#228 'Matrix Damage'\n     *\n     * The result is round up as for physical and stun monitor (SR5#101), even though it's not specified for\n     * matrix monitors specifically.\n     *\n     * @param deviceRating The device rating of the matrix device for the condition monitor.\n     * @return The condition max condition monitor value\n     */\n    static getConditionMonitor(deviceRating: number): number {\n        deviceRating = Math.max(deviceRating, SR.attributes.ranges.host_rating.min);\n        return Math.ceil(8 + (deviceRating / 2));\n    }\n\n    /**\n     * Derive the IC device rating based of it's hosts rating based on SR5#247 'Intrusion Countermeasures'\n     *\n     */\n    static getICDeviceRating(hostRating: number): number {\n        return Math.max(hostRating, SR.attributes.ranges.host_rating.min);\n    }\n\n    /**\n     * Derive the IC initiative base value of it's host based on SR5#230 'Hot-SIM VR' and SR5#247 'Intrusion Countermeasures'\n     *\n     * @param hostRating A positive host rating.\n     */\n    static getICInitiativeBase(hostRating: number): number {\n        return Math.max(hostRating * 2, SR.attributes.ranges.host_rating.min);\n    }\n\n    /**\n     * Get the amount of initiative dice IC has based on SR5#247 'Intrusion Countermeasures'\n     *\n     */\n    static getICInitiativeDice(): number {\n        return Math.max(SR.initiatives.ic.dice, SR.initiatives.ranges.dice.min);\n    }\n\n    /**\n     * Derive the base value of any meat attribute an IC uses based on SR5#237 'Matrix actions', SR5#256 'Agents'\n     * and SR5#247 'Intrusion Countermeasures'\n     *\n     */\n    static getICMeatAttributeBase(hostRating: number): number {\n        return Math.max(hostRating, SR.attributes.ranges.host_rating.min);\n    }\n\n    /**\n     * Determine if the count of marks (to be placed) is allowed within the rules. SR5#240 'Hack on the Fly'\n     * @param marks\n     */\n    static isValidMarksCount(marks: number): boolean {\n        return marks >= MatrixRules.minMarksCount() && marks <= MatrixRules.maxMarksCount() && marks % 1 === 0;\n    }\n\n    static maxMarksCount(): number {\n        return 3;\n    }\n\n    static minMarksCount(): number {\n        return 0;\n    }\n\n    static getValidMarksCount(marks: number): number {\n        marks = Math.min(marks, MatrixRules.maxMarksCount());\n        return Math.max(marks, MatrixRules.minMarksCount());\n    }\n\n    /**\n     * Derive a hosts attributes ratings based on it's host rating. SR5#247 'Host Attributes'\n     * @param hostRating\n     */\n    static hostMatrixAttributeRatings(hostRating): number[] {\n        return [0, 1, 2, 3].map(rating => rating + hostRating);\n    }\n\n    /**\n     * Determine if a program is a hacking program\n     * @param program The program item to check\n     * @returns True if the program is a hacking program\n     */\n    static isHackingProgram(program: SR6Item): boolean {\n        if (program.type !== 'program') return false;\n\n        // Check if the program's type is explicitly set to 'hacking_program'\n        if (program.system?.type === 'hacking_program') return true;\n\n        // If we can't determine the type, assume it's not a hacking program\n        return false;\n    }\n\n    /**\n     * Check if a matrix action test should accrue overwatch\n     * @param categories The action categories to check\n     * @returns True if the action is a matrix action\n     */\n    static isMatrixAction(categories: string[]): boolean {\n        if (!categories || !categories.length) return false;\n\n        // Matrix action categories\n        const matrixCategories = [\n            'matrix',\n            'matrix_action',\n            'matrix_defense',\n            'matrix_initiative',\n            'matrix_perception',\n            'matrix_search',\n            'hack_on_the_fly',\n            'brute_force',\n            'data_spike',\n            'crack_file',\n            'matrix_stealth',\n            'matrix_confuse_persona',\n            'matrix_jump_into_rigged_device',\n            'matrix_control_device',\n            'matrix_format_device',\n            'matrix_reboot_device',\n            'matrix_full_matrix_defense',\n            'matrix_hide',\n            'matrix_jack_out',\n            'matrix_jam_signals',\n            'matrix_spoof_command',\n            'matrix_trace_icon'\n        ];\n\n        return categories.some(category => matrixCategories.includes(category));\n    }\n\n    /**\n     * Check if a matrix action is illegal based on its legality attribute\n     * @param action The action data to check\n     * @returns True if the action is an illegal matrix action\n     */\n    static isIllegalMatrixAction(action: Shadowrun.ActionRollData): boolean {\n        // Check if the action has a legality attribute set to 'illegal'\n        if (action.legality === 'illegal') return true;\n\n        // If no legality attribute is set, fall back to checking categories\n        if (action.categories && action.categories.length > 0) {\n            // Cracking-based categories that indicate illegal actions\n            const illegalCategories = [\n                'hack_on_the_fly',\n                'brute_force',\n                'data_spike',\n                'crack_file',\n                'matrix_stealth'\n            ];\n\n            return action.categories.some(category => illegalCategories.includes(category));\n        }\n\n        return false;\n    }\n}", "import SkillField = Shadowrun.SkillField;\nimport {PartsList} from \"../parts/PartsList\";\nimport {SR6} from \"../config\";\nimport {SR} from \"../constants\";\n\nexport class SkillRules {\n\n    /**\n     * Determing if a skills value / level makes defaulting necessary.\n     *\n     * NOTE: A skill can be altered by an effect, which will leave it's base untouched.\n     *       Therefore it's calculated value must be used as a level\n     *\n     * @param skill Any legacy or custom skill\n     * @returns true, if a roll for the given skill must default.\n     */\n    static mustDefaultToRoll(skill: SkillField): boolean {\n        return skill.value === 0;\n    }\n    /**\n     * Allow defaulting a skill role.\n     * @PDF SR5#130\n     * @param skill Check for this skills ability to be defaulted.\n     * @return true will allow for a SuccessTest / role to proceed.\n     */\n    static allowDefaultingRoll(skill: SkillField): boolean {\n        // Check for skill defaulting at the base, since modifiers or bonus can cause a positive pool, while\n        // still defaulting.\n        return skill.canDefault;\n    }\n\n    /**\n     * Allow a skill role.\n     * @PDF SR5#130\n     * @param skill Check for this skills ability to be rolled.\n     * @return true will allow for a SuccessTest / role to proceed.\n     */\n    static allowRoll(skill: SkillField): boolean {\n        return !SkillRules.mustDefaultToRoll(skill) || SkillRules.allowDefaultingRoll(skill);\n    }\n\n    /**\n     * Add the defaulting modifier part to a parts list\n     * @param parts Should be a PartsList involved with skills.\n     */\n    static addDefaultingPart(parts: PartsList<number>) {\n        parts.addUniquePart('SR6.Defaulting', SkillRules.defaultingModifier);\n    }\n\n    /**\n     * Get the level a specific skill without its attribute.\n     * @param skill\n     * @param options\n     * @param options.specialization If true will add the default specialization bonus onto the level.\n     */\n    static level(skill: SkillField, options = {specialization: false}): number {\n        if (this.mustDefaultToRoll(skill)) {\n            return SkillRules.defaultingModifier;\n        }\n\n        // An attribute can have a NaN value if no value has been set yet. Do the skill for consistency.\n        const skillValue = typeof skill.value === 'number' ? skill.value : 0;\n        const specializationBonus = options.specialization ? SR.skill.SPECIALIZATION_MODIFIER : 0;\n\n        return skillValue + specializationBonus;\n    }\n\n    static get defaultingModifier(): number {\n        return SR.skill.DEFAULTING_MODIFIER;\n    }\n\n    static get SpecializationModifier(): number {\n        return SR.skill.SPECIALIZATION_MODIFIER;\n    }\n}\n", "import {SR} from \"../constants\";\nimport ModList = Shadowrun.ModList;\n\n// TODO: Data for casting actor / item (uuid)\n// TODO: maybe copy of the action data from the casting item / actor\ninterface ShadowrunRollData {\n    limit: number\n    threshold: number\n    parts: ModList<number> // TODO: Is this useful?\n    explodeSixes: boolean\n}\n\ninterface ShadowrunChatMessageData {\n    title?: String\n    content?: String\n    roll?: SR6Roll\n}\n\n\n/**\n * Apply Shadowrun 5 rules to a FoundryVTT Roll.\n *\n * TODO: This class should create a basic Success Test template and be extended\n *       for further Test templates (versus, action, weapon?, spell?)\n *\n * TODO: A chat message should contain all data needed to cast resulting actions.\n */\nexport class SR6Roll extends Roll {\n    override data: ShadowrunRollData\n\n    // toJSON(): any {\n    //     // TODO: Check if data includes custom ShadowrunRollData\n    //     const data = super.toJSON();\n    //     // add class Roll to the json so dice-so-nice works\n    //     // TODO: Check if this is still necessary.\n    //     // data.class = 'Roll';\n    //     return data;\n    // }\n\n    get sides(): number[] {\n        // 0.7.x foundryVTT\n        if (this.terms) {\n            //@ts-expect-error\n            return this.terms[0].results.map(result => result.result);\n        }\n\n        //@ts-expect-error\n        // 0.6.x foundryVTT\n        return this.parts[0].rolls.map(roll => roll.roll);\n    }\n\n    get limit(): number {\n        return this.data.limit;\n    }\n\n    get threshold(): number {\n        return this.data.threshold;\n    }\n\n    get parts(): ModList<number> {\n        return this.data.parts;\n    }\n\n    // TODO: Not needed anymore with complex Formula of SuccessTest\n    get explodeSixes(): boolean {\n        return this.data.explodeSixes;\n    }\n\n    count(side: number): number {\n        return this.sides.reduce((counted, result) => result === side ? counted + 1 : counted,\n                                 0);\n    }\n\n    // TODO: Rework this to work with the complex formula of SuccessTest.formula (total counts all cs and cf)\n    get hits(): number {\n        const calculatedHits = this.sides.reduce((hits, result) => SR.die.success.includes(result) ? hits + 1 : hits, 0);\n        console.log('Shadowrun 6e | SR6Roll calculating hits from sides:', this.sides);\n        console.log('Shadowrun 6e | SR6Roll success values are:', SR.die.success);\n        console.log('Shadowrun 6e | SR6Roll calculated hits:', calculatedHits);\n        return calculatedHits;\n    }\n\n    get glitches(): number {\n        return this.sides.reduce((glitches, result) => SR.die.glitch.includes(result) ? glitches + 1 : glitches,\n                                 0);\n    }\n\n\n    /**\n     * The amount of dice going into the throw (the pool used).\n     *\n     * NOTE: this can be different from the amount of dice actually thrown.\n     *       Use SR6Roll#diceThrown instead\n     */\n    get pool(): number {\n        // 0.7.x > FoundryVTT\n        if (this.terms) {\n            return this.dice[0].number;\n        }\n\n        //@ts-expect-error\n        // till 0.6.x FoundryVTT\n        return this.parts[0].rolls.length;\n    }\n\n    /**\n     * The amount of dice actually thrown after all dice explosions have been resolved.\n     */\n    get poolThrown(): number {\n        return this.sides.length;\n    }\n\n    get glitched(): boolean {\n        return this.glitches > Math.floor(this.pool / 2);\n    }\n\n    override get total(): number {\n        return this.hits;\n    }\n}\n", "/**\n * Shadowrun 5 configuration for static values.\n *\n * NOTE: Do NOT import code into this file, as this might cause circular imports.\n */\n\nexport const SR6 = {\n    itemTypes: {\n        action: 'SR6.ItemTypes.Action',\n        adept_power: 'SR6.ItemTypes.AdeptPower',\n        ammo: 'SR6.ItemTypes.Ammo',\n        armor: 'SR6.ItemTypes.Armor',\n        bioware: 'SR6.ItemTypes.Bioware',\n        complex_form: 'SR6.ItemTypes.ComplexForm',\n        contact: 'SR6.ItemTypes.Contact',\n        critter_power: 'SR6.ItemTypes.CritterPower',\n        cyberware: 'SR6.ItemTypes.Cyberware',\n        device: 'SR6.ItemTypes.Device',\n        echo: 'SR6.ItemTypes.Echo',\n        equipment: 'SR6.ItemTypes.Equipment',\n        host: 'SR6.ItemTypes.Host',\n        lifestyle: 'SR6.ItemTypes.Lifestyle',\n        metamagic: 'SR6.ItemTypes.Metamagic',\n        modification: 'SR6.ItemTypes.Modification',\n        program: 'SR6.ItemTypes.Program',\n        quality: 'SR6.ItemTypes.Quality',\n        ritual: 'SR6.ItemTypes.Ritual',\n        sin: 'SR6.ItemTypes.Sin',\n        spell: 'SR6.ItemTypes.Spell',\n        sprite_power: 'SR6.ItemTypes.SpritePower',\n        weapon: 'SR6.ItemTypes.Weapon',\n        call_in_action: 'TYPES.Item.call_in_action'\n    },\n\n    // All available attributes. These are available as testable attributes across all actor types.\n    attributes: {\n        agility: 'SR6.AttrAgility',\n        attack: 'SR6.MatrixAttrAttack',\n        body: 'SR6.AttrBody',\n        charisma: 'SR6.AttrCharisma',\n        data_processing: 'SR6.MatrixAttrDataProc',\n        edge: 'SR6.AttrEdge',\n        essence: 'SR6.AttrEssence',\n        firewall: 'SR6.MatrixAttrFirewall',\n        intuition: 'SR6.AttrIntuition',\n        logic: 'SR6.AttrLogic',\n        magic: 'SR6.AttrMagic',\n        reaction: 'SR6.AttrReaction',\n        resonance: 'SR6.AttrResonance',\n        sleaze: 'SR6.MatrixAttrSleaze',\n        strength: 'SR6.AttrStrength',\n        willpower: 'SR6.AttrWillpower',\n        pilot: 'SR6.Vehicle.Stats.Pilot',\n        force: 'SR6.Force',\n        initiation: 'SR6.Initiation',\n        submersion: 'SR6.Submersion',\n        transhumanism: 'SR6.Transhumanism',\n        rating: 'SR6.Rating',\n    },\n\n    /**\n     * All labels for all limits used across all actor and item types.\n     */\n    limits: {\n        physical: 'SR6.LimitPhysical',\n        social: 'SR6.LimitSocial',\n        mental: 'SR6.LimitMental',\n        astral: 'SR6.LimitAstral',\n        attack: 'SR6.MatrixAttrAttack',\n        sleaze: 'SR6.MatrixAttrSleaze',\n        data_processing: 'SR6.MatrixAttrDataProc',\n        firewall: 'SR6.MatrixAttrFirewall',\n        speed: 'SR6.Vehicle.Stats.Speed',\n        sensor: 'SR6.Vehicle.Stats.Sensor',\n        handling: 'SR6.Vehicle.Stats.Handling',\n        magic: 'SR6.AttrMagic',\n        initiation: 'SR6.Initiation'\n    },\n\n    specialTypes: {\n        mundane: 'SR6.Mundane',\n        magic: 'SR6.Awakened',\n        resonance: 'SR6.Emerged',\n    },\n\n    damageTypes: {\n        physical: 'SR6.DmgTypePhysical',\n        stun: 'SR6.DmgTypeStun',\n        matrix: 'SR6.DmgTypeMatrix'\n    },\n\n    weaponRangeCategories: {\n        manual: {\n            label: 'SR6.Weapon.Range.Category.Manual',\n        },\n        taser: {\n            label: 'SR6.Weapon.Range.Category.Taser',\n            ranges: {\n                short: 5,\n                medium: 10,\n                long: 15,\n                extreme: 20,\n            },\n        },\n        holdOutPistol: {\n            label: 'SR6.Weapon.Range.Category.HoldOutPistol',\n            ranges: {\n                short: 5,\n                medium: 15,\n                long: 30,\n                extreme: 50,\n            },\n        },\n        lightPistol: {\n            label: 'SR6.Weapon.Range.Category.LightPistol',\n            ranges: {\n                short: 5,\n                medium: 15,\n                long: 30,\n                extreme: 50,\n            },\n        },\n        heavyPistol: {\n            label: 'SR6.Weapon.Range.Category.HeavyPistol',\n            ranges: {\n                short: 5,\n                medium: 20,\n                long: 40,\n                extreme: 60,\n            },\n        },\n        machinePistol: {\n            label: 'SR6.Weapon.Range.Category.MachinePistol',\n            ranges: {\n                short: 5,\n                medium: 15,\n                long: 30,\n                extreme: 50,\n            },\n        },\n        smg: {\n            label: 'SR6.Weapon.Range.Category.SMG',\n            ranges: {\n                short: 10,\n                medium: 40,\n                long: 80,\n                extreme: 150,\n            },\n        },\n        assaultRifle: {\n            label: 'SR6.Weapon.Range.Category.AssaultRifle',\n            ranges: {\n                short: 25,\n                medium: 150,\n                long: 350,\n                extreme: 550,\n            },\n        },\n        shotgunFlechette: {\n            label: 'SR6.Weapon.Range.Category.ShotgunFlechette',\n            ranges: {\n                short: 15,\n                medium: 30,\n                long: 45,\n                extreme: 60,\n            },\n        },\n        shotgunSlug: {\n            label: 'SR6.Weapon.Range.Category.ShotgunSlug',\n            ranges: {\n                short: 10,\n                medium: 40,\n                long: 80,\n                extreme: 150,\n            },\n        },\n        sniperRifle: {\n            label: 'SR6.Weapon.Range.Category.SniperRifle',\n            ranges: {\n                short: 50,\n                medium: 350,\n                long: 800,\n                extreme: 1500,\n            },\n        },\n        sportingRifle: {\n            label: 'SR6.Weapon.Range.Category.SportingRifle',\n            ranges: {\n                short: 50,\n                medium: 250,\n                long: 500,\n                extreme: 750,\n            },\n        },\n        lightMachinegun: {\n            label: 'SR6.Weapon.Range.Category.LightMachinegun',\n            ranges: {\n                short: 25,\n                medium: 200,\n                long: 400,\n                extreme: 800,\n            },\n        },\n        mediumHeavyMachinegun: {\n            label: 'SR6.Weapon.Range.Category.MediumHeavyMachinegun',\n            ranges: {\n                short: 40,\n                medium: 250,\n                long: 750,\n                extreme: 1200,\n            },\n        },\n        assaultCannon: {\n            label: 'SR6.Weapon.Range.Category.AssaultCannon',\n            ranges: {\n                short: 50,\n                medium: 300,\n                long: 750,\n                extreme: 1500,\n            },\n        },\n        grenadeLauncher: {\n            label: 'SR6.Weapon.Range.Category.GrenadeLauncher',\n            ranges: {\n                short: 50,\n                medium: 100,\n                long: 150,\n                extreme: 500,\n            },\n        },\n        missileLauncher: {\n            label: 'SR6.Weapon.Range.Category.MissileLauncher',\n            ranges: {\n                short: 70,\n                medium: 150,\n                long: 450,\n                extreme: 1500,\n            },\n        },\n        bow: {\n            label: 'SR6.Weapon.Range.Category.Bow',\n            ranges: {\n                short: 1,\n                medium: 10,\n                long: 30,\n                extreme: 60,\n                attribute: 'strength',\n            },\n        },\n        lightCrossbow: {\n            label: 'SR6.Weapon.Range.Category.LightCrossbow',\n            ranges: {\n                short: 6,\n                medium: 24,\n                long: 60,\n                extreme: 120,\n            },\n        },\n        mediumCrossbow: {\n            label: 'SR6.Weapon.Range.Category.MediumCrossbow',\n            ranges: {\n                short: 9,\n                medium: 36,\n                long: 90,\n                extreme: 150,\n            },\n        },\n        heavyCrossbow: {\n            label: 'SR6.Weapon.Range.Category.HeavyCrossbow',\n            ranges: {\n                short: 15,\n                medium: 45,\n                long: 120,\n                extreme: 180,\n            },\n        },\n        thrownKnife: {\n            label: 'SR6.Weapon.Range.Category.ThrownKnife',\n            ranges: {\n                short: 1,\n                medium: 2,\n                long: 3,\n                extreme: 5,\n                attribute: 'strength',\n            },\n        },\n        net: {\n            label: 'SR6.Weapon.Range.Category.Net',\n            ranges: {\n                short: 0.5,\n                medium: 1,\n                long: 1.5,\n                extreme: 2.5,\n                attribute: 'strength',\n            },\n        },\n        shuriken: {\n            label: 'SR6.Weapon.Range.Category.Shuriken',\n            ranges: {\n                short: 1,\n                medium: 2,\n                long: 5,\n                extreme: 7,\n                attribute: 'strength',\n            },\n        },\n        standardThrownGrenade: {\n            label: 'SR6.Weapon.Range.Category.StandardThrownGrenade',\n            ranges: {\n                short: 2,\n                medium: 4,\n                long: 6,\n                extreme: 10,\n                attribute: 'strength',\n            },\n        },\n        aerodynamicThrownGrenade: {\n            label: 'SR6.Weapon.Range.Category.AerodynamicThrownGrenade',\n            ranges: {\n                short: 2,\n                medium: 4,\n                long: 8,\n                extreme: 15,\n                attribute: 'strength',\n            },\n        },\n        harpoonGun: {\n            label: 'SR6.Weapon.Range.Category.HarpoonGun',\n            ranges: {\n                short: 5,\n                medium: 20,\n                long: 40,\n                extreme: 60,\n            },\n        },\n        harpoonGunUnderwater: {\n            label: 'SR6.Weapon.Range.Category.HarpoonGunUnderwater',\n            ranges: {\n                short: 6,\n                medium: 24,\n                long: 60,\n                extreme: 120,\n            },\n        },\n        flamethrower: {\n            label: 'SR6.Weapon.Range.Category.Flamethrower',\n            ranges: {\n                short: 15,\n                medium: 20,\n                long: -1,\n                extreme: -1,\n            },\n        }\n\n    },\n\n    elementTypes: {\n        fire: 'SR6.ElementFire',\n        cold: 'SR6.ElementCold',\n        acid: 'SR6.ElementAcid',\n        electricity: 'SR6.ElementElectricity',\n        radiation: 'SR6.ElementRadiation',\n    },\n\n    spellCategories: {\n        combat: 'SR6.Spell.CatCombat',\n        detection: 'SR6.Spell.CatDetection',\n        health: 'SR6.Spell.CatHealth',\n        illusion: 'SR6.Spell.CatIllusion',\n        manipulation: 'SR6.Spell.CatManipulation'\n    },\n\n    spellTypes: {\n        physical: 'SR6.Spell.TypePhysical',\n        mana: 'SR6.Spell.TypeMana',\n    },\n\n    spellRanges: {\n        touch: 'SR6.Spell.RangeTouch',\n        los: 'SR6.Spell.RangeLos',\n        los_a: 'SR6.Spell.RangeLosA',\n    },\n\n    combatSpellTypes: {\n        direct: 'SR6.Spell.CombatDirect',\n        indirect: 'SR6.Spell.CombatIndirect',\n    },\n\n    detectionSpellTypes: {\n        directional: 'SR6.Spell.DetectionDirectional',\n        psychic: 'SR6.Spell.DetectionPsychic',\n        area: 'SR6.Spell.DetectionArea',\n    },\n\n    illusionSpellTypes: {\n        obvious: 'SR6.Spell.IllusionObvious',\n        realistic: 'SR6.Spell.IllusionRealistic',\n    },\n\n    illusionSpellSenses: {\n        'single-sense': 'SR6.Spell.IllusionSingleSense',\n        'multi-sense': 'SR6.Spell.IllusionMultiSense',\n    },\n\n    attributeRolls: {\n        composure: 'SR6.RollComposure',\n        lift_carry: 'SR6.RollLiftCarry',\n        judge_intentions: 'SR6.RollJudgeIntentions',\n        memory: 'SR6.RollMemory',\n    },\n\n    /**\n     * Used for complex form targeting options.\n     */\n    matrixTargets: {\n        persona: 'SR6.TargetPersona',\n        device: 'SR6.TargetDevice',\n        file: 'SR6.TargetFile',\n        self: 'SR6.TargetSelf',\n        sprite: 'SR6.TargetSprite',\n        host: 'TYPES.Item.host',\n        ic: 'TYPES.Actor.ic',\n        other: 'SR6.TargetOther',\n    },\n\n    durations: {\n        instant: 'SR6.DurationInstant',\n        sustained: 'SR6.DurationSustained',\n        permanent: 'SR6.DurationPermanent',\n    },\n\n    weaponCategories: {\n        range: 'SR6.Weapon.Category.Range',\n        melee: 'SR6.Weapon.Category.Melee',\n        thrown: 'SR6.Weapon.Category.Thrown',\n    },\n\n    weaponCliptypes: {\n        removable_clip: 'SR6.Weapon.Cliptype.RemovableClip',\n        break_action:'SR6.Weapon.Cliptype.BreakAction',\n        belt_fed:'SR6.Weapon.Cliptype.BeltFed',\n        internal_magazin:'SR6.Weapon.Cliptype.InternalMagazin',\n        muzzle_loader:'SR6.Weapon.Cliptype.MuzzleLoader',\n        cylinder:'SR6.Weapon.Cliptype.Cylinder',\n        drum:'SR6.Weapon.Cliptype.Drum',\n        bow:'SR6.Weapon.Cliptype.Bow',\n    },\n\n    weaponRanges: {\n        short: 'SR6.Weapon.Range.Short',\n        medium: 'SR6.Weapon.Range.Medium',\n        long: 'SR6.Weapon.Range.Long',\n        extreme: 'SR6.Weapon.Range.Extreme',\n    },\n\n    qualityTypes: {\n        positive: 'SR6.QualityTypePositive',\n        negative: 'SR6.QualityTypeNegative',\n        lifemodule: 'SR6.QualityTypeLifeModule'\n    },\n\n    adeptPower: {\n        types: {\n            active: 'SR6.AdeptPower.Types.Active',\n            passive: 'SR6.AdeptPower.Types.Passive',\n        },\n    },\n\n    deviceCategories: {\n        commlink: 'SR6.DeviceCatCommlink',\n        cyberdeck: 'SR6.DeviceCatCyberdeck',\n        rcc: 'SR6.DeviceCatRCC',\n    },\n\n    cyberwareGrades: {\n        standard: 'SR6.CyberwareGradeStandard',\n        alpha: 'SR6.CyberwareGradeAlpha',\n        beta: 'SR6.CyberwareGradeBeta',\n        delta: 'SR6.CyberwareGradeDelta',\n        used: 'SR6.CyberwareGradeUsed',\n    },\n\n    knowledgeSkillCategories: {\n        street: 'SR6.KnowledgeSkillStreet',\n        academic: 'SR6.KnowledgeSkillAcademic',\n        professional: 'SR6.KnowledgeSkillProfessional',\n        interests: 'SR6.KnowledgeSkillInterests',\n    },\n\n    activeSkills: {\n        astral: 'SR6.Skill.Astral',\n        athletics: 'SR6.Skill.Athletics',\n        biotech: 'SR6.Skill.Biotech',\n        closecombat: 'SR6.Skill.CloseCombat',\n        con: 'SR6.Skill.Con',\n        conjuring: 'SR6.Skill.Conjuring',\n        cracking: 'SR6.Skill.Cracking',\n        electronics: 'SR6.Skill.Electronics',\n        enchanting: 'SR6.Skill.Enchanting',\n        engineering: 'SR6.Skill.Engineering',\n        exoticweapons: 'SR6.Skill.ExoticWeapons',\n        firearms: 'SR6.Skill.Firearms',\n        influence: 'SR6.Skill.Influence',\n        outdoors: 'SR6.Skill.Outdoors',\n        perception: 'SR6.Skill.Perception',\n        piloting: 'SR6.Skill.Piloting',\n        sorcery: 'SR6.Skill.Sorcery',\n        stealth: 'SR6.Skill.Stealth',\n        tasking: 'SR6.Skill.Tasking'\n    },\n\n    /**\n     * Some skills are created on the fly and don't exist on all actors.\n     * These values are used for those.\n     */\n    activeSkillAttribute: {\n        flight: 'agility'\n    },\n\n    actionTypes: {\n        none: 'SR6.ActionTypeNone',\n        free: 'SR6.ActionTypeFree',\n        minor: 'SR6.ActionTypeMinor',\n        major: 'SR6.ActionTypeMajor',\n        varies: 'SR6.ActionTypeVaries',\n    },\n\n    initiativeTiming: {\n        none: 'SR6.InitiativeTimingNone',\n        initiative: 'SR6.InitiativeTimingInOrder',\n        anytime: 'SR6.InitiativeTimingAnyTime',\n    },\n\n    // Use within action damage calculation (base <operator> attribute) => value\n    actionDamageFormulaOperators: {\n        add: '+',\n        subtract: '-',\n        multiply: '*',\n        divide: '/'\n    },\n\n    // Map all Shadowrun.ActionCategories to their matching labels.\n    // For more information around action categories, see type documentation.\n    actionCategories: {\n        'addiction_mental': \"SR6.ActionCategory.AddictionMental\",\n        'addiction_physical': \"SR6.ActionCategory.AddictionPhysical\",\n        'addiction': \"SR6.ActionCategory.Addiction\",\n        'attack_melee': \"SR6.ActionCategory.AttackMelee\",\n        'attack_ranged': \"SR6.ActionCategory.AttackRanged\",\n        'attack_thrown': \"SR6.ActionCategory.AttackThrown\",\n        'attack': \"SR6.ActionCategory.Attack\",\n        'brute_force': \"SR6.ActionCategory.BruteForce\",\n        \"climbing\": \"SR6.ActionCategory.Climbing\",\n        'compiling': \"SR6.ActionCategory.Compiling\",\n        'complex_form': \"SR6.ActionCategory.ComplexForm\",\n        'defense_suppression': \"SR6.ActionCategory.DefenseSuppression\",\n        'defense': \"SR6.ActionCategory.Defense\",\n        'drain': \"SR6.ActionCategory.Drain\",\n        'fade': \"SR6.ActionCategory.Fade\",\n        'hack_on_the_fly': \"SR6.ActionCategory.HackOnTheFly\",\n        'magic': \"SR6.ActionCategory.Magic\",\n        'matrix': 'SR6.ActionCategory.Matrix',\n        'recovery_physical': \"SR6.ActionCategory.RecoveryPhysical\",\n        'recovery_stun': \"SR6.ActionCategory.RecoveryStun\",\n        'recovery': \"SR6.ActionCategory.Recovery\",\n        'resist_disease': \"SR6.ActionCategory.ResistDisease\",\n        'resist_toxin': \"SR6.ActionCategory.ResistToxin\",\n        'resist': \"SR6.ActionCategory.Resist\",\n        'resonance': \"SR6.ActionCategory.Resonance\",\n        'rigging': \"SR6.ActionCategory.Rigging\",\n        'social': 'SR6.ActionCategory.Social',\n        'spell_combat': \"SR6.ActionCategory.SpellCombat\",\n        'spell_detection': \"SR6.ActionCategory.SpellDetection\",\n        'spell_healing': \"SR6.ActionCategory.SpellHealing\",\n        'spell_illusion': \"SR6.ActionCategory.SpellIllusion\",\n        'spell_manipulation': \"SR6.ActionCategory.SpellManipulation\",\n        'spell_ritual': \"SR6.ActionCategory.SpellRitual\",\n        'summoning': \"SR6.ActionCategory.Summoning\",\n    },\n\n    matrixAttributes: {\n        attack: 'SR6.MatrixAttrAttack',\n        sleaze: 'SR6.MatrixAttrSleaze',\n        data_processing: 'SR6.MatrixAttrDataProc',\n        firewall: 'SR6.MatrixAttrFirewall'\n    },\n\n    initiativeCategories: {\n        meatspace: 'SR6.InitCatMeatspace',\n        astral: 'SR6.InitCatAstral',\n        matrix: 'SR6.InitCatMatrix',\n    },\n\n    // Gear modification types. :) Not modifiers.\n    modificationTypes: {\n        weapon: 'SR6.Weapon.Weapon',\n        armor: 'SR6.Armor',\n        vehicle: 'SR6.Vehicle.Vehicle',\n        drone: 'SR6.Vehicle.Drone'\n    },\n\n    mountPoints: {\n        barrel: 'SR6.Barrel',\n        under_barrel: 'SR6.UnderBarrel',\n        stock: 'SR6.Stock',\n        top: 'SR6.Top',\n        side: 'SR6.Side',\n        internal: 'SR6.Internal',\n    },\n\n    modificationCategories: {\n        body: 'SR6.Vehicle.ModificationCategoryTypes.body',\n        cosmetic: 'SR6.Vehicle.ModificationCategoryTypes.cosmetic',\n        electromagnetic: 'SR6.Vehicle.ModificationCategoryTypes.electromagnetic',\n        power_train: 'SR6.Vehicle.ModificationCategoryTypes.power_train',\n        protection: 'SR6.Vehicle.ModificationCategoryTypes.protection',\n        weapons: 'SR6.Vehicle.ModificationCategoryTypes.weapons',\n    },\n\n    lifestyleTypes: {\n        street: 'SR6.LifestyleStreet',\n        squatter: 'SR6.LifestyleSquatter',\n        low: 'SR6.LifestyleLow',\n        medium: 'SR6.LifestyleMiddle',\n        high: 'SR6.LifestyleHigh',\n        luxory: 'SR6.LifestyleLuxory',\n        other: 'SR6.LifestyleOther',\n    },\n\n    /**\n     * Labels for ALL actor types actor based local modifiers.\n     *\n     * All modifiers across all actor types must be included here, this is only used for display.\n     */\n    actorModifiers: {\n        armor: 'SR6.ModifierTypes.Armor',\n        astral_initiative_dice: 'SR6.ModifierTypes.AstralDice',\n        astral_initiative: 'SR6.ModifierTypes.AstralInit',\n        astral_limit: 'SR6.ModifierTypes.AstralLimit',\n        composure: 'SR6.ModifierTypes.Composure',\n        defense_block: 'SR6.ModifierTypes.DefenseBlock',\n        defense_dodge: 'SR6.ModifierTypes.DefenseDodge',\n        defense_parry: 'SR6.ModifierTypes.DefenseParry',\n        defense_melee: 'SR6.ModifierTypes.DefenseMelee',\n        defense_ranged: 'SR6.ModifierTypes.DefenseRanged',\n        defense: 'SR6.ModifierTypes.Defense',\n        drain: 'SR6.ModifierTypes.Drain',\n        essence: 'SR6.ModifierTypes.Essence',\n        fade: 'SR6.ModifierTypes.Fade',\n        global: 'SR6.ModifierTypes.Global',\n        judge_intentions: 'SR6.ModifierTypes.JudgeIntentions',\n        lift_carry: 'SR6.ModifierTypes.LiftCarry',\n        matrix_initiative_dice: 'SR6.ModifierTypes.MatrixDice',\n        matrix_initiative: 'SR6.ModifierTypes.MatrixInit',\n        matrix_track: 'SR6.ModifierTypes.MatrixTrack',\n        meat_initiative_dice: 'SR6.ModifierTypes.MeatSpaceDice',\n        meat_initiative: 'SR6.ModifierTypes.MeatSpaceInit',\n        memory: 'SR6.ModifierTypes.Memory',\n        mental_limit: 'SR6.ModifierTypes.MentalLimit',\n        multi_defense: 'SR6.ModifierTypes.DefenseMulti',\n        pain_tolerance_physical: 'SR6.ModifierTypes.PainTolerancePhysical',\n        pain_tolerance_stun: 'SR6.ModifierTypes.PainToleranceStun',\n        physical_limit: 'SR6.ModifierTypes.PhysicalLimit',\n        physical_overflow_track: 'SR6.ModifierTypes.PhysicalOverflowTrack',\n        physical_track: 'SR6.ModifierTypes.PhysicalTrack',\n        reach: 'SR6.ModifierTypes.Reach',\n        run: 'SR6.ModifierTypes.Run',\n        soak: 'SR6.ModifierTypes.Soak',\n        social_limit: 'SR6.ModifierTypes.SocialLimit',\n        stun_track: 'SR6.ModifierTypes.StunTrack',\n        walk: 'SR6.ModifierTypes.Walk',\n        wound_tolerance: 'SR6.ModifierTypes.WoundTolerance',\n    },\n\n    /**\n     * Tooltip labels used for actor modifiers. Key should use actorModifiers key.\n     */\n    actorModifiersTooltip: {\n        armor: 'SR6.Tooltips.Modifiers.armor',\n        astral_initiative_dice: 'SR6.Tooltips.Modifiers.astral_initiative_dice',\n        astral_initiative: 'SR6.Tooltips.Modifiers.astral_initiative',\n        astral_limit: 'SR6.Tooltips.Modifiers.astral_limit',\n        composure: 'SR6.Tooltips.Modifiers.composure',\n        defense_block: 'SR6.Tooltips.Modifiers.defense_block',\n        defense_dodge: 'SR6.Tooltips.Modifiers.defense_dodge',\n        defense_parry: 'SR6.Tooltips.Modifiers.defense_parry',\n        defense_melee: 'SR6.Tooltips.Modifiers.defense_melee',\n        defense_ranged: 'SR6.Tooltips.Modifiers.defense_ranged',\n        defense: 'SR6.Tooltips.Modifiers.defense',\n        drain: 'SR6.Tooltips.Modifiers.drain',\n        essence: 'SR6.Tooltips.Modifiers.essence',\n        fade: 'SR6.Tooltips.Modifiers.fade',\n        global: 'SR6.Tooltips.Modifiers.global',\n        judge_intentions: 'SR6.Tooltips.Modifiers.judge_intentions',\n        lift_carry: 'SR6.Tooltips.Modifiers.lift_carry',\n        matrix_initiative_dice: 'SR6.Tooltips.Modifiers.matrix_initiative_dice',\n        matrix_initiative: 'SR6.Tooltips.Modifiers.matrix_initiative',\n        matrix_track: 'SR6.Tooltips.Modifiers.matrix_track',\n        meat_initiative_dice: 'SR6.Tooltips.Modifiers.meat_initiative_dice',\n        meat_initiative: 'SR6.Tooltips.Modifiers.meat_initiative',\n        memory: 'SR6.Tooltips.Modifiers.memory',\n        mental_limit: 'SR6.Tooltips.Modifiers.mental_limit',\n        multi_defense: 'SR6.Tooltips.Modifiers.multi_defense',\n        pain_tolerance_physical: 'SR6.Tooltips.Modifiers.pain_tolerance_physical',\n        pain_tolerance_stun: 'SR6.Tooltips.Modifiers.pain_tolerance_stun',\n        physical_limit: 'SR6.Tooltips.Modifiers.physical_limit',\n        physical_overflow_track: 'SR6.Tooltips.Modifiers.physical_overflow_track',\n        physical_track: 'SR6.Tooltips.Modifiers.physical_track',\n        reach: 'SR6.Tooltips.Modifiers.reach',\n        run: 'SR6.Tooltips.Modifiers.run',\n        soak: 'SR6.Tooltips.Modifiers.soak',\n        social_limit: 'SR6.Tooltips.Modifiers.social_limit',\n        stun_track: 'SR6.Tooltips.Modifiers.stun_track',\n        walk: 'SR6.Tooltips.Modifiers.walk',\n        wound_tolerance: 'SR6.Tooltips.Modifiers.wound_tolerance',\n    },\n\n    /**\n     * Modification types used for actions and general success tests, based on actors.\n     *\n     * These are meant to be used with the Modifiers and SituationModifier classes and SR6Actor.modifiers.totalFor('wounds').\n     *\n     * There are additional item based modifiers that aren't present here.\n     *\n     * NOTE: Adding a modifier type here will directly affect modifiers shown on item actions for user selection.\n     */\n    modifierTypes: {\n        armor: 'SR6.ModifierTypes.Armor',\n        composure: 'SR6.ModifierTypes.Composure',\n        defense: 'SR6.ModifierTypes.Defense',\n        multi_defense: 'SR6.ModifierTypes.DefenseMulti',\n        drain: 'SR6.ModifierTypes.Drain',\n        environmental: 'SR6.ModifierTypes.Environmental',\n        ['environmental.light']: 'SR6.ModifierTypes.EnvironmentalLight',\n        ['environmental.visibility']: 'SR6.ModifierTypes.EnvironmentalVisibility',\n        ['environmental.wind']: 'SR6.ModifierTypes.EnvironmentalWind',\n        ['environmental.range']: 'SR6.ModifierTypes.EnvironmentalRange',\n        background_count: 'SR6.ModifierTypes.BackgroundCount',\n        noise: 'SR6.ModifierTypes.Noise',\n        fade: 'SR6.ModifierTypes.Fade',\n        global: 'SR6.ModifierTypes.Global',\n        judge_intentions: 'SR6.ModifierTypes.JudgeIntentions',\n        lift_carry: 'SR6.ModifierTypes.LiftCarry',\n        memory: 'SR6.ModifierTypes.Memory',\n        soak: 'SR6.ModifierTypes.Soak',\n        wounds: 'SR6.ModifierTypes.Wounds',\n        recoil: 'SR6.ModifierTypes.Recoil',\n    },\n\n    /**\n     * Define here what kind of active test is to be used for the different weapon categories as a main action test.\n     */\n    weaponCategoryActiveTests: {\n        'range': 'RangedAttackTest',\n        'melee': 'MeleeAttackTest',\n        'thrown': 'ThrownAttackTest'\n    },\n\n    /**\n     * When casting tests from these item types, use these tests as active tests\n     */\n    activeTests: {\n        'spell': 'SpellCastingTest',\n        'ritual': 'RitualSpellcastingTest',\n        'complex_form': 'ComplexFormTest'\n    },\n\n    /**\n     * Using different active test details should result in these opposed tests\n     *\n     * Structure: {\n     *  [item.type]: {[item.system.type]}: 'OpposedTest'\n     * }\n     */\n    opposedTests: {\n        'spell': {\n            'combat': 'CombatSpellDefenseTest'\n        }\n    },\n\n    /**\n     * Using different resist tests for the oppositing depending on active tests details\n     *  Structure: {\n     *  [item.type]: {[item.system.type]}: 'OpposedTest'\n     * }\n     */\n    opposedResistTests: {\n        'spell': {\n            'combat': 'PhysicalResistTest'\n        }\n    },\n\n    /**\n     * When a test is cast an active test this defines what tests should follow that tests completion\n     */\n    followedTests: {\n        'SpellCastingTest': 'DrainTest'\n    },\n\n    // When a firemode with suppression is used, this test should defend against it.\n    suppressionDefenseTest: 'SuppressionDefenseTest',\n\n    /**\n     * Names of FoundryVTT packs supplied by the system to be used as action sources.\n     */\n    packNames: {\n        'generalActions': 'general-actions',\n        'matrixActions': 'matrix-actions'\n    },\n\n    programTypes: {\n        common_program: 'SR6.CommonProgram',\n        hacking_program: 'SR6.HackingProgram',\n        agent: 'SR6.Agent',\n    },\n\n    spiritTypes: {\n        // base types\n        air: 'SR6.Spirit.Types.Air',\n        aircraft: 'SR6.Spirit.Types.Aircraft',\n        airwave: 'SR6.Spirit.Types.Airwave',\n        automotive: 'SR6.Spirit.Types.Automotive',\n        beasts: 'SR6.Spirit.Types.Beasts',\n        ceramic: 'SR6.Spirit.Types.Ceramic',\n        earth: 'SR6.Spirit.Types.Earth',\n        energy: 'SR6.Spirit.Types.Energy',\n        fire: 'SR6.Spirit.Types.Fire',\n        guardian: 'SR6.Spirit.Types.Guardian',\n        guidance: 'SR6.Spirit.Types.Guidance',\n        man: 'SR6.Spirit.Types.Man',\n        metal: 'SR6.Spirit.Types.Metal',\n        plant: 'SR6.Spirit.Types.Plant',\n        ship: 'SR6.Spirit.Types.Ship',\n        task: 'SR6.Spirit.Types.Task',\n        train: 'SR6.Spirit.Types.Train',\n        water: 'SR6.Spirit.Types.Water',\n\n        // toxic types\n        toxic_air: 'SR6.Spirit.Types.ToxicAir',\n        toxic_beasts: 'SR6.Spirit.Types.ToxicBeasts',\n        toxic_earth: 'SR6.Spirit.Types.ToxicEarth',\n        toxic_fire: 'SR6.Spirit.Types.ToxicFire',\n        toxic_man: 'SR6.Spirit.Types.ToxicMan',\n        toxic_water: 'SR6.Spirit.Types.ToxicWater',\n\n        // blood types\n        blood: 'SR6.Spirit.Types.Blood',\n\n        // shadow types\n        muse: 'SR6.Spirit.Types.Muse',\n        nightmare: 'SR6.Spirit.Types.Nightmare',\n        shade: 'SR6.Spirit.Types.Shade',\n        succubus: 'SR6.Spirit.Types.Succubus',\n        wraith: 'SR6.Spirit.Types.Wraith',\n\n        // shedim types\n        shedim: 'SR6.Spirit.Types.Shedim',\n        master_shedim: 'SR6.Spirit.Types.MasterShedim',\n\n        // insect types\n        caretaker: 'SR6.Spirit.Types.Caretaker',\n        nymph: 'SR6.Spirit.Types.Nymph',\n        scout: 'SR6.Spirit.Types.Scout',\n        soldier: 'SR6.Spirit.Types.Soldier',\n        worker: 'SR6.Spirit.Types.Worker',\n        queen: 'SR6.Spirit.Types.Queen',\n\n        // Necro types\n        carcass: \"SR6.Spirit.Types.Carcass\",\n        corpse: \"SR6.Spirit.Types.Corpse\",\n        rot: \"SR6.Spirit.Types.Rot\",\n        palefire: \"SR6.Spirit.Types.Palefire\",\n        detritus: \"SR6.Spirit.Types.Detritus\",\n\n        // Howling Shadow spirits\n        anarch: \"SR6.Spirit.Types.Anarch\",\n        arboreal: \"SR6.Spirit.Types.Arboreal\",\n        blackjack: \"SR6.Spirit.Types.Blackjack\",\n        boggle: \"SR6.Spirit.Types.Boggle\",\n        bugul: \"SR6.Spirit.Types.Bugul\",\n        chindi: \"SR6.Spirit.Types.Chindi\",\n        croki: \"SR6.Spirit.Types.Croki\",\n        duende: \"SR6.Spirit.Types.Duende\",\n        elvar: \"SR6.Spirit.Types.Elvar\",\n        erinyes: \"SR6.Spirit.Types.Erinyes\",\n        greenman: \"SR6.Spirit.Types.Greenman\",\n        imp: \"SR6.Spirit.Types.Imp\",\n        jarl: \"SR6.Spirit.Types.Jarl\",\n        kappa: \"SR6.Spirit.Types.Kappa\",\n        kokopelli: \"SR6.Spirit.Types.Kokopelli\",\n        morbi: \"SR6.Spirit.Types.Morbi\",\n        nocnitasa: \"SR6.Spirit.Types.Nocnitasa\",\n        phantom: \"SR6.Spirit.Types.Phantom\",\n        preta: \"SR6.Spirit.Types.Preta\",\n        stabber: \"SR6.Spirit.Types.Stabber\",\n        tungak: \"SR6.Spirit.Types.Tungak\",\n        vucub: \"SR6.Spirit.Types.Vucub\",\n    },\n\n    /**\n     * Actor types that can be called in using the call in action type and be\n     * set in it's system.action_type property.\n     */\n    callInActorTypes: {\n        'spirit': 'TYPES.Actor.spirit',\n        'sprite': 'TYPES.Actor.sprite'\n    },\n\n    critterPower: {\n        categories: {\n            mundane: 'SR6.CritterPower.Categories.Mundane',\n            paranormal: 'SR6.CritterPower.Categories.Paranormal',\n            free_spirit: 'SR6.CritterPower.Categories.FreeSpirit',\n            emergent: 'SR6.CritterPower.Categories.Emergent',\n            shapeshifter: 'SR6.CritterPower.Categories.Shapeshifter',\n            drake: 'SR6.CritterPower.Categories.Drake',\n            echoes: 'SR6.CritterPower.Categories.Echoes',\n            weakness: 'SR6.CritterPower.Categories.Weakness',\n            paranormal_infected: 'SR6.CritterPower.Categories.ParanormalInfected',\n        },\n        types: {\n            mana: 'SR6.CritterPower.Types.Mana',\n            physical: 'SR6.CritterPower.Types.Physical',\n        },\n        ranges: {\n            los: 'SR6.CritterPower.Ranges.LineOfSight',\n            self: 'SR6.CritterPower.Ranges.Self',\n            touch: 'SR6.CritterPower.Ranges.Touch',\n            los_a: 'SR6.CritterPower.Ranges.LineOfSightArea',\n            special: 'SR6.CritterPower.Ranges.Special',\n        },\n        durations: {\n            always: 'SR6.CritterPower.Durations.Always',\n            instant: 'SR6.CritterPower.Durations.Instant',\n            sustained: 'SR6.CritterPower.Durations.Sustained',\n            permanent: 'SR6.CritterPower.Durations.Permanent',\n            special: 'SR6.CritterPower.Durations.Special',\n        },\n    },\n\n    spriteTypes: {\n        courier: 'SR6.Sprite.Types.Courier',\n        crack: 'SR6.Sprite.Types.Crack',\n        data: 'SR6.Sprite.Types.Data',\n        fault: 'SR6.Sprite.Types.Fault',\n        machine: 'SR6.Sprite.Types.Machine',\n        companion: 'SR6.Sprite.Types.Companion',\n        generalist:'SR6.Sprite.Types.Generalist',\n    },\n\n    vehicle: {\n        types: {\n            air: 'SR6.Vehicle.Types.Air',\n            aerospace: 'SR6.Vehicle.Types.Aerospace',\n            ground: 'SR6.Vehicle.Types.Ground',\n            water: 'SR6.Vehicle.Types.Water',\n            walker: 'SR6.Vehicle.Types.Walker',\n            exotic: 'SR6.Vehicle.Types.Exotic',\n        },\n        stats: {\n            handling: 'SR6.Vehicle.Stats.Handling',\n            off_road_handling: 'SR6.Vehicle.Stats.OffRoadHandling',\n            speed: 'SR6.Vehicle.Stats.Speed',\n            off_road_speed: 'SR6.Vehicle.Stats.OffRoadSpeed',\n            acceleration: 'SR6.Vehicle.Stats.Acceleration',\n            pilot: 'SR6.Vehicle.Stats.Pilot',\n            sensor: 'SR6.Vehicle.Stats.Sensor',\n            seats: 'SR6.Vehicle.Stats.Seats'\n        },\n        control_modes: {\n            manual: 'SR6.Vehicle.ControlModes.Manual',\n            remote: 'SR6.Vehicle.ControlModes.Remote',\n            rigger: 'SR6.Vehicle.ControlModes.Rigger',\n            autopilot: 'SR6.Vehicle.ControlModes.Autopilot',\n        },\n        environments: {\n            speed: 'SR6.Vehicle.Environments.Speed',\n            handling: 'SR6.Vehicle.Environments.Handling',\n        },\n    },\n\n    ic: {\n        types: {\n            acid: \"SR6.IC.Types.Acid\",\n            binder: \"SR6.IC.Types.Binder\",\n            black_ic: \"SR6.IC.Types.BlackIC\",\n            blaster: \"SR6.IC.Types.Blaster\",\n            bloodhound: \"SR6.IC.Types.Bloodhound\",\n            blue_goo: \"SR6.IC.Types.BlueGoo\",\n            catapult: \"SR6.IC.Types.Catapult\",\n            crash: \"SR6.IC.Types.Crash\",\n            flicker: \"SR6.IC.Types.Flicker\",\n            jammer: \"SR6.IC.Types.Jammer\",\n            killer: \"SR6.IC.Types.Killer\",\n            marker: \"SR6.IC.Types.Marker\",\n            patrol: \"SR6.IC.Types.Patrol\",\n            probe: \"SR6.IC.Types.Probe\",\n            scramble: \"SR6.IC.Types.Scramble\",\n            shocker: \"SR6.IC.Types.Shocker\",\n            sleuther: \"SR6.IC.Types.Sleuther\",\n            sparky: \"SR6.IC.Types.Sparky\",\n            tar_baby: \"SR6.IC.Types.TarBaby\",\n            track: \"SR6.IC.Types.Track\"\n        }\n    },\n\n    character: {\n        types: {\n            human: 'SR6.Character.Types.Human',\n            elf: 'SR6.Character.Types.Elf',\n            ork: 'SR6.Character.Types.Ork',\n            dwarf: 'SR6.Character.Types.Dwarf',\n            troll: 'SR6.Character.Types.Troll',\n        },\n    },\n\n    /**\n     * The available range weapon modes for to SR5#424\n     *\n     * These are the mode selectors on the weapon. The term 'fire mode'\n     * is only used to describe as the combination of weapon mode and action\n     * used, causing a specific fire mode.\n     *\n     * NOTE: This list is also used for sorting order of ranged weapon mode.\n     *       Alter it with care.\n     */\n    rangeWeaponMode: [\n        'single_shot',\n        'semi_auto',\n        'burst_fire',\n        'full_auto'\n    ],\n\n    rangeWeaponModeLabel: {\n        'single_shot': 'SR6.Weapon.Mode.SingleShot',\n        'semi_auto': 'SR6.Weapon.Mode.SemiAuto',\n        'burst_file': 'SR6.Weapon.Mode.BurstFire',\n        'full_auto': 'SR6.Weapon.Mode.FullAuto'\n    },\n\n    /**\n     * The preconfigured default Shadowrun firemodes according to SR5#180\n     *\n     * These are separate from ranged weapon modes but depend on the selected\n     * ranged weapon mode.\n     */\n    fireModes: [\n    {\n        label: \"SR6.Weapon.Mode.SingleShot\",\n        value: 1,\n        recoil: false,\n        defense: 0,\n        suppression: false,\n        action: 'simple',\n        mode: 'single_shot'\n    },\n    {\n        label: \"SR6.Weapon.Mode.SemiAutoShort\",\n        value: 1,\n        recoil: true,\n        defense: 0,\n        suppression: false,\n        action: 'simple',\n        mode: 'semi_auto'\n    },\n    {\n        label: \"SR6.Weapon.Mode.SemiAutoBurst\",\n        value: 3,\n        recoil: true,\n        defense: -2,\n        suppression: false,\n        action: 'complex',\n        mode: 'semi_auto'\n    },\n\n    {\n        label: \"SR6.Weapon.Mode.BurstFire\",\n        value: 3,\n        recoil: true,\n        defense: -2,\n        suppression: false,\n        action: 'simple',\n        mode: 'burst_fire'\n    },\n    {\n        label: \"SR6.Weapon.Mode.BurstFireLong\",\n        value: 6,\n        recoil: true,\n        defense: -5,\n        suppression: false,\n        action: 'complex',\n        mode: 'burst_fire',\n    },\n    {\n        label: \"SR6.Weapon.Mode.FullAutoShort\",\n        value: 6,\n        recoil: true,\n        defense: -5,\n        suppression: false,\n        action: 'simple',\n        mode: 'full_auto'\n    },\n    {\n        label: 'SR6.Weapon.Mode.FullAutoLong',\n        value: 10,\n        recoil: true,\n        defense: -9,\n        suppression: false,\n        action: 'complex',\n        mode: 'full_auto'\n    },\n    {\n        label: 'SR6.Suppressing',\n        value: 20,\n        recoil: false,\n        defense: 0,\n        suppression: true,\n        action: 'complex',\n        mode: 'full_auto'\n    }\n    ] as Shadowrun.FireModeData[],\n\n    /**\n     * Active/AdvancedEffect apply To types and their labels.\n     *\n     * actor is the default Foundry apply to type of ActiveEffects and will be affect actor data.\n     */\n    effectApplyTo: {\n        'actor': 'SR6.FOUNDRY.Actor',\n        // 'item': 'SR6.FOUNDRY.Item', // Disabled, as systems nested item approach brings issues.\n        'targeted_actor': 'SR6.ActiveEffect.ApplyTos.TargetedActor',\n        'test_all': 'SR6.Test',\n        'test_item': 'SR6.ActiveEffect.ApplyTos.TestItem',\n        'modifier': 'SR6.Modifier'\n    },\n\n    itemSubTypeIconOverrides: {\n        action: {},\n        adept_power: {\n            'adept-spell': 'spell/spell'\n        },\n        ammo: {\n            'ammo': '',\n            'arrow': '',\n            'bola': '',\n            'bolt': '',\n            'grenade': '',\n            'micro-torpedo': '',\n            'minigrenade': '',\n            'missile': '',\n            'rocket': '',\n            'torpedo-grenade': ''\n        },\n        armor: {\n            'armor': '',\n            'cloaks': '',\n            'clothing': '',\n            'high-fashion-armor-clothing': '',\n            'specialty-armor': ''\n        },\n        bioware: {\n            'basic': 'bioware/bioware',\n            'bio-weapons': '',\n            'biosculpting': '',\n            'chemical-gland-modifications': '',\n            'complimentary-genetics': '',\n            'cosmetic-bioware': '',\n            'cultured': '',\n            'environmental-microadaptation': '',\n            'exotic-metaglands': '',\n            'genetic-restoration': '',\n            'immunization': '',\n            'orthoskin-upgrades': '',\n            'phenotype-adjustment': 'bioware/biosculpting',\n            'symbionts': 'bioware/cultured',\n            'transgenic-alteration': 'bioware/transgenic-alteration',\n            'transgenics': ''\n        },\n        complex_form: {},\n        contact: {},\n        critter_power: {\n            'mana': '',\n            'physical': 'critter_power/critter_power'\n        },\n        cyberware: {\n            'auto-injector-mods': '',\n            'bodyware': '',\n            'cosmetic-enhancement': 'bioware/cosmetic-bioware',\n            'cyber-implant-weapon': '',\n            'cyber-implant-weapon-accessory': '',\n            'cyberlimb': '',\n            'cyberlimb-accessory': '',\n            'cyberlimb-enhancement': '',\n            'cybersuite': '',\n            'earware': '',\n            'eyeware': '',\n            'hard-nanoware': '',\n            'headware': 'cyberware/cyberware',\n            'nanocybernetics': 'cyberware/hard-nanoware',\n            'soft-nanoware': 'cyberware/hard-nanoware',\n            'special-biodrone-cyberware': ''\n        },\n        device: {\n            'commlink': 'device',\n            'cyberdeck': '',\n            'rcc': ''\n        },\n        echo: {},\n        equipment: {\n            'alchemical-tools': '',\n            'appearance-modification': '',\n            'armor-enhancements': '',\n            'audio-devices': '',\n            'audio-enhancements': '',\n            'autosofts': 'equipment/software',\n            'biotech': '',\n            'booster-chips': '',\n            'breaking-and-entering-gear': '',\n            'btls': '',\n            'chemicals': '',\n            'commlink-accessories': '',\n            'commlink-apps': 'equipment/software',\n            'commlink-cyberdeck-form-factors': '',\n            'communications-and-countermeasures': 'equipment/pi-tac',\n            'contracts-upkeep': '',\n            'critter-gear': '',\n            'currency': '',\n            'custom-cyberdeck-attributes': '',\n            'cyberdeck-modules': '',\n            'cyberterminals': 'equipment/pi-tac',\n            'disguises': 'equipment/appearance-modification',\n            'drug-grades': '',\n            'drugs': '',\n            'electronic-accessories': '',\n            'electronic-modification': '',\n            'electronic-parts': '',\n            'electronics-accessories': '',\n            'entertainment': '',\n            'explosives': '',\n            'extraction-devices': '',\n            'foci': '',\n            'food': '',\n            'formulae': '',\n            'grapple-gun': '',\n            'hard-nanoware': 'cyberware/hard-nanoware',\n            'housewares': '',\n            'id-credsticks': '',\n            'magical-compounds': '',\n            'magical-supplies': '',\n            'matrix-accessories': '',\n            'metatype-specific': '',\n            'miscellany': '',\n            'musical-instruments': '',\n            'nanogear': 'cyberware/hard-nanoware',\n            'paydata': '',\n            'pi-tac': '',\n            'pi-tac-programs': 'equipment/software',\n            'printing': '',\n            'reporter-gear': '',\n            'rfid-tags': 'equipment/pi-tac',\n            'security-devices': '',\n            'sensor-functions': '',\n            'sensor-housings': '',\n            'sensors': 'equipment/pi-tac',\n            'services': '',\n            'skillsofts': 'equipment/software',\n            'software': '',\n            'software-tweaks': 'equipment/software',\n            'survival-gear': '',\n            'tailored-perfume-cologne': '',\n            'tools': '',\n            'tools-of-the-trade': '',\n            'toxins': '',\n            'vision-devices': '',\n            'vision-enhancements': ''\n        },\n        host: {},\n        lifestyle: {},\n        metamagic: {},\n        modification: {\n            'barrel': '',\n            'other': '',\n            'side': '',\n            'stock': '',\n            'top': '',\n            'under': 'modification/modification'\n        },\n        program:        {\n            'common_program': '',\n            'hacking_program': ''\n        },\n        quality: {\n            'negative': '',\n            'positive': ''\n        },\n        sin: {},\n        spell: {\n            'combat': '',\n            'detection': '',\n            'enchantments': '',\n            'health': '',\n            'illusion': '',\n            'manipulation': ''\n        },\n        ritual: {},\n        sprite_power: {},\n        weapon: {\n            // Options before : in name are 'Grenade', 'Minigrenade', 'Rocket', 'Missile', 'Torpedo Grenade', 'Micro-Torpedo'\n            'melee': '',\n            'ranged': '',\n            'thrown': '',\n            'assault-cannons': '',\n            'assault-rifles': '',\n            'bio-weapon': 'cyberware/cyber-implant-weapon',\n            'blades': '',\n            'bows': '',\n            'carbines': '',\n            'clubs': '',\n            'crossbows': '',\n            'cyberweapon': 'cyberware/cyber-implant-weapon',\n            'exotic-melee-weapons': '',\n            'exotic-ranged-weapons': '',\n            'flamethrowers': '',\n            'gear': 'equipment/equipment',\n            'grenade-launchers': '',\n            'grenade': 'ammo/grenade',\n            'heavy-machine-guns': 'weapon/assault-cannons',\n            'heavy-pistols': '',\n            'holdouts': '',\n            'improvised-weapons': '',\n            'laser-weapons': '',\n            'light-machine-guns': 'weapon/assault-cannons',\n            'light-pistols': '',\n            'machine-pistols': '',\n            'medium-machine-guns': 'weapon/assault-cannons',\n            'micro-drone-weapons': '',\n            'micro-torpedo': 'ammo/micro-torpedo',\n            'minigrenade': 'ammo/minigrenade',\n            'missile': 'ammo/missile',\n            'missile-launchers': '',\n            'quality': 'quality/quality',\n            'rocket': 'ammo/rocket',\n            'shotguns': '',\n            'sniper-rifles': '',\n            'sporting-rifles': 'weapon/carbines',\n            'submachine-guns': '',\n            'tasers': '',\n            'torpedo-grenade': 'ammo/torpedo-grenade',\n            'unarmed': '',\n            'underbarrel-weapons': 'modification/modification'\n        }\n    }\n} as const;\n", "import SkillField = Shadowrun.SkillField;\nimport {SkillRules} from \"../../rules/SkillRules\";\nimport {PartsList} from \"../../parts/PartsList\";\nimport {FLAGS, SYSTEM_NAME} from \"../../constants\";\n\nexport class SkillFlow {\n    /**\n     * Handle everything around how a skill should be defaulted\n     * @param skill\n     * @param parts\n     */\n    static handleDefaulting(skill: SkillField, parts: PartsList<number>) {\n        if (!SkillRules.mustDefaultToRoll(skill)) return;\n\n        if (!SkillFlow.allowDefaultingRoll(skill)) {\n            ui.notifications?.warn(game.i18n.localize('SR6.Warnings.SkillCantBeDefault'));\n            return;\n        }\n\n        SkillRules.addDefaultingPart(parts);\n    }\n\n    /**\n     * Check if either the system settings or skill configuration allow for a skill to be defaulted.\n     * @param skill\n     * @return true will allow a role on the skill that needs defaulting.\n     */\n    static allowDefaultingRoll(skill: SkillField): boolean {\n        // Check if settings allow rolls of skills that otherwise would need to be defaulted.\n        const allowUnimproviseable = game.settings.get(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills) === false;\n        if (allowUnimproviseable)\n            return true;\n\n        return SkillRules.allowDefaultingRoll(skill);\n    }\n\n    static allowRoll(skill: SkillField): boolean {\n        if (SkillRules.mustDefaultToRoll(skill) && SkillFlow.allowDefaultingRoll(skill)) {\n            return true;\n        }\n        return SkillRules.allowRoll(skill);\n    }\n\n    static isCustomSkill(skill: SkillField): boolean {\n        return skill.name !== undefined && skill.name !== '';\n    }\n\n    static isLegacySkill(skill: SkillField): boolean {\n        return !SkillFlow.isCustomSkill(skill);\n    }\n}\n", "/**\n * Handle all things related to the action template (template.json)\n */\nimport { SR6Actor } from \"../../actor/SR6Actor\";\nimport { Helpers } from \"../../helpers\";\nimport { SR6Item } from \"../SR6Item\";\nimport { PartsList } from \"../../parts/PartsList\";\nimport { SR6 } from \"../../config\";\nimport { DataDefaults } from \"../../data/DataDefaults\";\nimport { Translation } from \"../../utils/strings\";\n\nexport class ActionFlow {\n    /**\n     * Calculate action damage configuration based on flat damage field and possible dynamic attribute modification.\n     *\n     * @param damage The damage field as defined within the ActionData\n     * @param actor The actor to use should a dynamic calculation be needed.\n     * @param item\n     */\n    static calcDamageData(damage: Shadowrun.DamageData, actor?: SR6Actor, item?: SR6Item): Shadowrun.DamageData {\n        // Avoid manipulation on original data, which might come from database values.\n        damage = foundry.utils.duplicate(damage);\n\n        if (!actor) return damage;\n\n        if (item) {\n            damage.source = ActionFlow._damageSource(actor, item);\n        }\n\n        this._applyModifiableValue(damage, actor);\n        damage.value = Helpers.calcTotal(damage, { min: 0 });\n\n        this._applyModifiableValue(damage.ap, actor);\n        damage.ap.value = Helpers.calcTotal(damage.ap, { min: 0 });\n\n        return damage;\n    }\n\n    static _applyModifiableValue(value: Shadowrun.ModifiableValueLinked, actor: SR6Actor) {\n        const attribute = actor.findAttribute(value.attribute);\n        if (!attribute) return;\n\n        if (!value.base_formula_operator) {\n            console.error(`Unsupported formula operator: '${value.base_formula_operator}' used. Falling back to 'add'.`);\n            value.base_formula_operator = 'add';\n        }\n\n        // Avoid altering base OR value fields and raising the resulting damage on multiple function calls.\n        switch (value.base_formula_operator) {\n            case \"add\":\n                PartsList.AddUniquePart(value.mod, attribute.label, attribute.value);\n                break;\n            case \"subtract\":\n                PartsList.AddUniquePart(value.mod, attribute.label, -attribute.value);\n                break;\n            case \"multiply\":\n                PartsList.AddUniquePart(value.mod, 'SR6.Value', (value.base * attribute.value) - value.base);\n                break;\n            case \"divide\":\n                // Remove base from value by modifying.\n                PartsList.AddUniquePart(value.mod, 'SR6.BaseValue', value.base * -1);\n                // Add division result as modifier on zero.\n                const denominator = attribute.value === 0 ? 1 : attribute.value;\n                PartsList.AddUniquePart(value.mod, 'SR6.Value', Math.floor(value.base / denominator));\n                break;\n        }\n    }\n\n    /**\n     * Damage that's caused by an item can later be used to determine how that damage should be applied\n     *\n     * @param actor The actor used to determine damage\n     * @param item The item from which damage's been determined from.\n     */\n    static _damageSource(actor: SR6Actor, item: SR6Item): Shadowrun.DamageSource {\n        return {\n            actorId: actor.id || '',\n            itemId: item.id || '',\n            itemName: item.name || '',\n            itemType: item.type\n        }\n    }\n\n    /**\n     * Does an action based damage contain any damaging content.\n     *\n     * @param damage Any Shadowrun.DamageData taken from an template action section\n     *\n     * @returns true, when the user configured damage contains any parts.\n     */\n    static hasDamage(damage: Shadowrun.DamageData): boolean {\n        if (damage.base !== 0) return true;\n        if (damage.attribute) return true;\n        if (damage.type) return true;\n        if (damage.element) return true;\n\n        return false;\n    }\n\n    /**\n     * Collect all active skills either from global context or from within a given document.\n     *\n     * Normalize custom and legacy skills to a single format.\n     * Legacy skills have no name, but use their name as id.\n     * Custom skills have a name but their id is random.\n     *\n     * @param actor An optional actor to retrieve skills from (including custom skills)\n     * @param skillName An optional skill that should be included in the selection, even if it's missing from the global list.\n     * @returns Sorted list of skills with a name : label key-value structure for select elements on sheets.\n     */\n    static sortedActiveSkills(actor?: SR6Actor, skillName?: string) {\n        // CASE - Return default skills whenn no local actor skills are used.\n        //        The major use case is the sidebar item creation, where no actor is available.\n        if (!actor || actor.isIC()) {\n            // Inject this items custom skill into the global skill list.\n            const globalSkills = foundry.utils.deepClone(SR6.activeSkills);\n            ActionFlow._injectMissingCustomSkill(globalSkills, skillName);\n            return Helpers.sortConfigValuesByTranslation(globalSkills);\n        }\n\n        // CASE - Return actor skills when available.\n        //        the major use case is owned items, where the actor is available.\n        const activeSkills = actor.getActiveSkills();\n\n        // Convert skill data to a value label mapping.\n        const skills: Record<string, Translation> = {};\n        for (const [id, skill] of Object.entries(activeSkills)) {\n            const key = skill.name || id;\n            const label = skill.label || skill.name;\n            skills[key] = label as Translation;\n        }\n\n        ActionFlow._injectMissingCustomSkill(skills, skillName);\n        return Helpers.sortConfigValuesByTranslation(skills);\n    }\n\n    /**\n     * Insert the given skill as a default skill in case it's missing.\n     *\n     * This is needed for sidebar items, that don\u00B4t have local custom skills like owned items, to still\n     * show the custom skill in the sill selection.\n     *\n     * @param skills The set of active skills to be used.\n     * @param skillName The skill name to be injected.\n     */\n    static _injectMissingCustomSkill(skills: Record<string, Translation>, skillName?: string) {\n        if (!skillName) return;\n\n        const foundCustomSkill = Object.values(skills).some(name => name === skillName);\n        if (foundCustomSkill) return;\n        if (skillName && !skills[skillName]) skills[skillName] = skillName as Translation;\n    }\n}\n", "import {SR6Item} from \"../item/SR6Item\";\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport {\n    SuccessTest,\n    SuccessTestMessageData,\n    TestData,\n    SuccessTestData,\n    TestDocuments,\n    TestOptions\n} from \"./SuccessTest\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {SkillRules} from \"../rules/SkillRules\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\nimport {SR6Roll} from \"../rolls/SR6Roll\";\nimport {Helpers} from \"../helpers\";\nimport {OpposedTest, OpposedTestData} from \"./OpposedTest\";\nimport {SR6} from \"../config\";\nimport {SkillFlow} from \"../actor/flows/SkillFlow\";\nimport {ActionFlow} from \"../item/flows/ActionFlow\";\n\n/**\n * Any test implementation can either be created by calling it's constructor directly or by using the TestCreator.\n *\n * TestCreator provides a set of helper functions to create a test from different sources, as well as test data\n * based either on an items (or generic) action data or specific input (like from numerical values for pool, threshold,\n * and limit).\n *\n * Usage:\n * See the different from* functions for entry points.\n *\n * To retrieve a test implementation class, use the _getTestClass function.\n */\nexport const TestCreator = {\n    /**\n     * A helper method to create a SuccessTest from a simple pool value, without\n     * actor / item involvement.\n     *\n     * TODO: fromPool as a name for 'from values' doesn't quite describe the method anymore, since a pool doesn't need to be given.\n     * @param values The values to use for the test.\n     * @param options See TestOptions documentation.\n     */\n    fromPool: function(values: { pool: number, limit?: number, threshold?: number }={pool: 0, limit: 0, threshold: 0}, options?: TestOptions): SuccessTest {\n        const data = TestCreator._minimalTestData();\n        data.pool.base = values.pool;\n        data.threshold.base = values.threshold || 0;\n        data.limit.base = values.limit || 0;\n\n        // Use the registered SuccessTest implementation.\n        const successTestCls = TestCreator._getTestClass('SuccessTest');\n        return new successTestCls(data, undefined, options);\n    },\n\n    /**\n     * Create a Test from action item configuration.\n     *\n     * @param item Any item type that defines an action.\n     * @param actor The actor to use for the resulting SR6Roll,\n     *              will default to the items parent otherwise.\n     * @param options See SuccessTestOptions documentation.\n     *\n     * @returns Tries to create a SuccessTest from given action item or undefined if it failed.\n     */\n    fromItem: async function(item: SR6Item, actor?: SR6Actor, options?: TestOptions): Promise<any | undefined> {\n        //@ts-expect-error Default to item parent actor, if none given.\n        if (!actor) actor = item.parent;\n        if (!(actor instanceof SR6Actor)) {\n            console.error(\"Shadowrun 6e | A SuccessTest can only be created with an explicit Actor or Item with an actor parent.\")\n            return;\n        }\n\n        const action = item.getAction();\n        if (!action) return;\n        // Determine what initial test type to use.\n        if (!action.test) {\n            action.test = 'SuccessTest';\n            console.warn(`Shadowrun 6e | An action without a defined test handler defaulted to ${'SuccessTest'}`);\n        }\n\n        if (!game['shadowrun6-elysium'].tests.hasOwnProperty(action.test)) {\n            console.error(`Shadowrun 6e | Test registration for test ${action.test} is missing`);\n            return;\n        }\n\n        // Any action item will return a list of values to create the test pool from.\n        const cls = TestCreator._getTestClass(action.test);\n        const data = await TestCreator._getTestDataFromItemAction(cls, item, actor);\n        const documents = {item, actor};\n        return new cls(data, documents, options);\n    },\n\n    /**\n     * Create a test from action data only, when not having an item.\n     *\n     * @param action The action data to use for the test.\n     * @param actor The actor to use for retrieving source values defined within the action.\n     * @param options See TestOptions documentation.\n     */\n    fromAction: async function(action: Shadowrun.ActionRollData, actor: SR6Actor, options?: TestOptions): Promise<SuccessTest | undefined> {\n        if (!action.test) {\n            action.test = 'SuccessTest';\n            console.warn(`Shadowrun 6e | An action without a defined test handler defaulted to ${'SuccessTest'}`);\n        }\n\n        if (!game['shadowrun6-elysium'].tests.hasOwnProperty(action.test)) {\n            console.error(`Shadowrun 6e | Test registration for test ${action.test} is missing`);\n            return;\n        }\n\n        // Any action item will return a list of values to create the test pool from.\n        const cls = TestCreator._getTestClass(action.test);\n        const data = await TestCreator._prepareTestDataWithAction(action, actor, TestCreator._minimalTestData());\n        const documents = {actor};\n\n        return new cls(data, documents, options);\n    },\n\n    /**\n     * Create a test using an Action item stored in any collection\n     * @param packName The package / compendium name to search for the action\n     * @param actionName The items name within the given packName\n     * @param actor The actor used to roll the test with\n     * @param options General TestOptions\n     */\n    fromPackAction: async function(packName: string, actionName: string, actor: SR6Actor, options?: TestOptions): Promise<SuccessTest|undefined> {\n        const item = await Helpers.getPackAction(packName, actionName);\n        if (!item) {\n            console.error(`Shadowrun5 | The pack ${packName} doesn't include an item ${actionName}`);\n            return;\n        }\n\n        return TestCreator.fromItem(item, actor, options);\n    },\n\n    /**\n     * Create a test implementation from a past test included within a message\n     *\n     * @param id The message id to retrieve test data from.\n     */\n    fromMessage: async function(id: string, options?: TestOptions): Promise<SuccessTest | undefined> {\n        const flagData = TestCreator.getTestDataFromMessage(id);\n        return this._fromMessageTestData(flagData, options);\n    },\n\n    /**\n     * Retrieve possible test data from a given message id.\n     *\n     * If you need the test implementation, use @fromMessage instead.\n     *\n     * @param id The message id to retrieve test data from.\n     * @returns Raw test data from message flags or undefined if none found.\n     */\n    getTestDataFromMessage(id: string): SuccessTestMessageData | undefined {\n        const message = game.messages?.get(id);\n        if (!message) {\n            console.error(`Shadowrun 6e | Couldn't find a message for id ${id} to create a message action`);\n            return;\n        }\n\n        // Check if message contains any test data.\n        const flagData = message.getFlag(SYSTEM_NAME, FLAGS.Test) as SuccessTestMessageData;\n        if (!flagData) return;\n\n        return flagData;\n    },\n\n\n    /**\n     * Create a test implementation directly from a message flags test data.\n     * @param testData\n     * @returns\n     */\n    _fromMessageTestData: function(testData, options?: TestOptions) {\n        // Use test data to create the original test from it.\n        testData = foundry.utils.duplicate(testData) as SuccessTestMessageData;\n        if (!testData || !testData.rolls) return;\n\n        const rolls = testData.rolls.map(roll => SR6Roll.fromData<SR6Roll>(roll as any));\n        const documents = {rolls};\n\n        // Allow callers to overwrite previous test options, otherwise fall back.\n        options = options ?? testData.data.options;\n        return TestCreator.fromTestData(testData.data, documents, options);\n    },\n\n    /**\n     * Create a test implementation for a specific action on a message.\n     *\n     * This can be an opposed test, resist or followup test.\n     *\n     * @param id The id of the to be used message.\n     * @param testClsName The test class name to be used with the message test data.\n     * @param options See TestOptions documentation.\n     */\n    fromMessageAction: async function(id: string, testClsName: string, options?: TestOptions): Promise<SuccessTest | undefined> {\n        if (!game.user) return;\n\n        const message = game.messages?.get(id);\n        if (!message) {\n            console.error(`Shadowrun 6e | Couldn't find a message for id ${id} to create a message action`);\n            return;\n        }\n\n        // Avoid altering test in flag.\n        const testData = foundry.utils.duplicate(message.getFlag(SYSTEM_NAME, FLAGS.Test)) as SuccessTestMessageData;\n        if (!testData || !testData.data || !testData.rolls) {\n            console.error(`Shadowrun 6e | Message with id ${id} doesn't have valid test data in it's flags.`);\n            return;\n        }\n\n        const testClass = TestCreator._getTestClass(testClsName);\n        if (!testClass) {\n            console.error(`Shadowrun 6e | Couldn't find a registered test implementation for ${testClsName}`);\n            return;\n        }\n\n        // Determine actors to roll test with.\n        let actors = await Helpers.getOpposedTestActors(testData.data);\n\n        // Inform user about tokens with deleted sidebar actors.\n        // This can both happen for linked tokens immediately and unlinked tokens after reloading.\n        if (actors.filter(actor => !actor).length > 0) {\n            ui.notifications?.warn('TOKEN.WarningNoActor', {localize: true});\n            return;\n        }\n\n        // filter out actors current user shouldn't be able to test with.\n        actors = actors.filter(actor => actor.isOwner);\n        // Fallback to player character.\n        if (actors.length === 0 && game.user.character) {\n            actors.push(game.user.character);\n        }\n\n        if (actors.length === 0) {\n            ui.notifications?.warn(game.i18n.localize('SR6.Warnings.TokenSelectionNeeded'));\n        }\n        else {\n            console.log('Shadowrun 6e | Casting an opposed test using these actors', actors, testData);\n        }\n\n        for (const actor of actors) {\n            const data = await testClass._getOpposedActionTestData(testData.data, actor, id);\n            if (!data) return;\n\n            const documents = {actor};\n            const test = new testClass(data, documents, options);\n\n            // Await test chain resolution for each actor, to avoid dialog spam.\n            await test.execute();\n        }\n    },\n\n    /**\n     * Helper method to create a test implementation from given test data directly.\n     *\n     * Test values will be taken from data and not refreshed from the source actor.\n     *\n     * @param data The TestData of some test implementation within test registry.\n     * @param documents Documents to connect test to. These don't have to match the ones originally used and\n     *                  won't be used for retrieving source values.\n     * @param options Optional test options.\n     */\n    fromTestData: function(data: TestData, documents?: TestDocuments, options?: TestOptions): SuccessTest {\n        const type = data.type || 'SuccessTest';\n        const cls = TestCreator._getTestClass(type);\n        return new cls(data, documents, options);\n    },\n\n    /**\n     * Use any kind of opposed test to create a resist test based on that.\n     *\n     * This can be used for damage resistance tests.\n     *\n     * Within a typical success test, opposed test and resist test flow, this will\n     * happen after both main and opposed test have finished. The resiting test will be\n     * executed in context of both with the actor of the opposed test as source.\n     *\n     * The original action provides both the opposing and resiting test.\n     *\n     * @param opposed The opposed test to create a resist test with.\n     * @param options See TestOptions documentation.\n     */\n    fromOpposedTestResistTest: async function(opposed: OpposedTest, options?: TestOptions): Promise<SuccessTest | void> {\n        // Don't change the data's source.\n        const opposedData = foundry.utils.duplicate(opposed.data);\n\n        if (!opposedData?.against?.opposed?.resist?.test) return console.error(`Shadowrun 6e | Given test doesn't define an opposed resist test`, opposed);\n        if (!opposed.actor) return console.error(`Shadowrun 6e | A ${opposed.title} can't operate without a populated actor given`);\n\n        const resistTestCls = TestCreator._getTestClass(opposedData.against.opposed.resist.test);\n\n        const data = await TestCreator._getOpposedResistTestData(resistTestCls, opposedData, opposed.actor, opposed.data.messageUuid);\n        const documents = {actor: opposed.actor};\n\n        return new resistTestCls(data, documents, options);\n    },\n\n    /**\n     * Use any kind of test to create a followup test based on that.\n     *\n     * This can be used for drain tests.\n     *\n     * TODO: Describe a clear separation between resist and follow up test use cases.\n     *\n     * @param test Any test implementation with an action providing a follow up test.\n     * @param options See TestOptions documentation.\n     */\n    fromFollowupTest: async function(test: SuccessTest, options?: TestOptions): Promise<SuccessTest  | void> {\n        if (!test?.data?.action?.followed?.test) return;\n        if (!test.item) return console.error(`Shadowrun 6e | Test doesn't have a populated item document`);\n        if (!test.actor) return console.error(`Shadowrun 6e | Test doesn't have a populated actor document`);\n\n        const testCls = TestCreator._getTestClass(test.data.action.followed.test);\n        if (!testCls) return console.error(`Shadowrun 6e | A ${test.constructor.name} has a unregistered follow up test configured`, this);\n\n        const data = TestCreator._minimalTestData();\n        data.title = testCls.title;\n        data.previousMessageId = test.data.messageUuid;\n        data.against = test.data;\n\n        // Allow different elements of this to override action data.\n        const action = TestCreator._mergeMinimalActionDataInOrder(\n            DataDefaults.actionRollData({test: testCls.name}),\n            await testCls._getDocumentTestAction(test.item, test.actor),\n            testCls._getDefaultTestAction());\n\n        const testData = await testCls._prepareActionTestData(action, test.actor, data);\n        testData.following = test.data;\n\n        const documents = {item: test.item, actor: test.actor};\n\n        return new testCls(testData, documents, options);\n    },\n\n    /*\n     * Prompt the user for a default SuccessTest.\n     */\n    promptSuccessTest: async function() {\n        // Get the last used pool size for simple SuccessTestDialogs\n        const lastPoolValue = Number(game.user?.getFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue)) || 0;\n\n        const test = TestCreator.fromPool({pool: lastPoolValue});\n        await test.execute();\n\n        if (test.evaluated) {\n            // Store the last used pool size for the next simple SuccessTest\n            await game.user?.setFlag(SYSTEM_NAME, FLAGS.LastRollPromptValue, test.pool.value);\n        }\n    },\n\n    /**\n     * Return a test class from the global registry.\n     *\n     * @param testName A Test class constructor name registered as a test.\n     */\n    _getTestClass: function(testName: string): any | undefined {\n        if (!testName) return;\n        if (!game['shadowrun6-elysium'].tests.hasOwnProperty(testName)) {\n            console.error(`Shadowrun 6e | Tried getting a Test Class ${testName}, which isn't registered in: `, game['shadowrun6-elysium'].tests);\n            return;\n        }\n        return game['shadowrun6-elysium'].tests[testName];\n    },\n\n    /**\n     * Return test data based on an items action.\n     *\n     * @param testCls A test class implementation to use for retrieving action data.\n     * @param item\n     * @param actor\n     */\n    _getTestDataFromItemAction: async function(testCls, item: SR6Item, actor: SR6Actor): Promise<TestData> {\n        // Prepare general data structure with labeling.\n        const data = TestCreator._minimalTestData();\n\n        // Get user defined action configuration.\n        let action = item.getAction();\n        if (!action || !actor) {\n            return data;\n        }\n\n        action = TestCreator._mergeMinimalActionDataInOrder(\n            action,\n            await testCls._getDocumentTestAction(item, actor),\n            testCls._getDefaultTestAction());\n\n        return await TestCreator._prepareTestDataWithAction(action, actor, data);\n    },\n\n    /**\n     * An opposed resist test is related to the result of an opposed test.\n     *\n     * This can be a physical damage resist test and will be derived from configuration\n     * of the original test that's being opposed.\n     *\n     * @param resistTestCls The resist test class to be used.\n     * @param opposedData The opposing test, including the original test being opposed.\n     * @param actor The actor doing the testing.\n     * @param previousMessageId The Message id of the originating opposing test.\n     */\n    _getOpposedResistTestData: async function(resistTestCls, opposedData: OpposedTestData, actor: SR6Actor, previousMessageId?: string) {\n        if (!opposedData.against.opposed.resist.test) {\n            console.error(`Shadowrun 6e | Supplied test action doesn't contain an resist test in it's opposed test configuration`, opposedData, this);\n            return;\n        }\n        if (!actor) {\n            console.error(`Shadowrun 6e | Can't resolve opposed test values due to missing actor`, resistTestCls);\n        }\n\n        // Prepare general data structure with labeling.\n        const data = TestCreator._minimalTestData();\n        data.previousMessageId = previousMessageId;\n        data.following = opposedData;\n        // Make sure to give NO target actors. Otherwise, user selection will be used.\n        data.targetActorsUuid = [];\n\n        // Setup the original item actions minimal action resist configuration as a complete item action.\n        let action = DataDefaults.actionRollData({\n            ...opposedData.against.opposed.resist\n        });\n        // Provide default action information.\n        action = TestCreator._mergeMinimalActionDataInOrder(\n            action,\n            resistTestCls._getDocumentTestAction(),\n            resistTestCls._getDefaultTestAction()\n        );\n\n        // Alter default action information with user defined information.\n        return await TestCreator._prepareTestDataWithAction(action, actor, data);\n    },\n\n    /**\n     * Prepare test data with source values based on action data.\n     *\n     * @param action Action data to prepare test data with.\n     * @param actor Actor to use for retrieving source values and execute test with.\n     * @param data Any test implementations resulting basic test data.\n     */\n    _prepareTestDataWithAction: async function(action: Shadowrun.ActionRollData, actor: SR6Actor, data: SuccessTestData) {\n        // Action values might be needed later to redo the same test.\n        data.action = action;\n\n        const pool = new PartsList<number>(data.pool.mod);\n\n        // Prepare pool values.\n        if (action.skill) {\n            // Grab the skill by its id (default skills), or its label (custom skills).\n            const skill = actor.getSkill(action.skill) ?? actor.getSkill(action.skill, {byLabel: true});\n\n            // Notify user about their sins.\n            if (skill && !SkillFlow.allowRoll(skill)) ui.notifications?.warn('SR6.Warnings.SkillCantBeDefault', {localize: true});\n\n            // Custom skills don't have a label, but a name.\n            // Legacy skill don't have a name, but have a label.\n            // Your mind is like this water, my friend. When it is agitated, it becomes difficult to see. But if you allow it to settle, the answer becomes clear.\n            if (skill) pool.addUniquePart(skill.label || skill.name, SkillRules.level(skill));\n            // TODO: Check if this is actual skill specialization and for a +2 config for it instead of MagicValue.\n            if (action.spec) pool.addUniquePart('SR6.Specialization', SkillRules.SpecializationModifier);\n        }\n        // The first attribute is either used for skill or attribute only tests.\n        if (action.attribute) {\n            const attribute = actor.getAttribute(action.attribute);\n            // Don't use addUniquePart as one attribute might be used twice.\n            if (attribute) pool.addPart(attribute.label, attribute.value);\n            // Apply matrix modifiers, when applicable\n            if (attribute && actor._isMatrixAttribute(action.attribute)) actor._addMatrixParts(pool, true);\n        }\n        // The second attribute is only used for attribute only tests.\n        if (!action.skill && action.attribute2) {\n            const attribute = actor.getAttribute(action.attribute2);\n            // Don't use addUniquePart as one attribute might be used twice.\n            if (attribute) pool.addPart(attribute.label, attribute.value);\n            // Apply matrix modifiers, when applicable\n            if (attribute && actor._isMatrixAttribute(action.attribute2)) actor._addMatrixParts(pool, true);\n        }\n\n        // TODO: Test and check if this still works.\n        if (action.mod) {\n            data.modifiers.mod = PartsList.AddUniquePart(data.modifiers.mod, 'SR6.DicePoolModifier', action.mod);\n        }\n\n        // Include pool modifiers that have been collected on the action item.\n        // These can come from nested items and more.\n        if(action.dice_pool_mod) {\n            action.dice_pool_mod.forEach(mod => PartsList.AddUniquePart(data.modifiers.mod, mod.name, mod.value));\n        }\n\n        // Add the armor value as a pool modifier, since 'armor' is part of the test description.\n        if (action.armor) {\n            const armor = actor.getArmor();\n            data.pool.mod = PartsList.AddUniquePart(data.pool.mod,'SR6.Armor', armor.value);\n        }\n\n        // Prepare limit values...\n        if (action.limit.base) {\n            // TODO: For easier readability this could be mapped to an item specific limit value\n            //       For WeaponItem this would result in 'Precision' to be shown instead of a numerical literal.\n            data.limit.base = Number(action.limit.base);\n        }\n\n        // Prepare threshold values...\n        if (action.threshold.base) {\n            data.threshold.base = Number(action.threshold.base);\n        }\n\n        // Prepare general damage values...\n        // ...a test without damage, shouldn't contain any damage information.\n        if (ActionFlow.hasDamage(action.damage)) {\n            data.damage = foundry.utils.duplicate(action.damage);\n        }\n\n        // Prepare opposed and resist tests...\n        if (action.opposed.test) {\n            data.opposed = action.opposed;\n        }\n\n\n        // Prepare test modifiers and possible applicable selections\n        const modifiers: {[key in Shadowrun.ModifierTypes]?: string[]} = {};\n        for (const modifier of data.action.modifiers) {\n            // A modifier with an applicable selection is found.\n            if (modifier.includes('.')) {\n                // Assert correct action modifier segment structure.\n                const segments = modifier.split('.') as string[];\n                if (segments.length > 2) console.error('Shadowrun 6e | Action contained a partial modifier with more than two segments', modifier, data.action);\n\n                // Record the modifier category with it's single applicable.\n                const [category, applicable] = segments;\n                modifiers[category] = modifiers[category] ?? [];\n                modifiers[category].push(applicable);\n\n            // No applicable found yet, just collect the modifier\n            } else {\n                modifiers[modifier] = modifiers[modifier] ?? [];\n            }\n        }\n\n        // Apply applicable selections and collect modifiers.\n        for (const [name, applicable] of Object.entries(modifiers)) {\n            // Setup the resulting modifier value.\n            const label = SR6.modifierTypes[name];\n            const options = {applicable};\n            const value = actor.modifiers.totalFor(name, options);\n            data.modifiers.mod = PartsList.AddUniquePart(data.modifiers.mod, label, value);\n        }\n\n        // Mark test as extended.\n        data.extended = action.extended;\n\n        return data;\n    },\n\n    /**\n     * Return minimal viable test data without test specific customization.\n     */\n    _minimalTestData: function(): any {\n        return {\n            pool: DataDefaults.valueData({label: 'SR6.DicePool'}),\n            limit: DataDefaults.valueData({label: 'SR6.Limit'}),\n            threshold: DataDefaults.valueData({label: 'SR6.Threshold'}),\n            damage: DataDefaults.damageData(),\n            modifiers: DataDefaults.valueData({label: 'SR6.Labels.Action.Modifiers'}),\n            values: {},\n            action: DataDefaults.actionRollData(),\n            opposed: {}\n        };\n    },\n\n    /**\n     * Merge multiple MinimalActionData objects into one action object. This will only look at keys within a minimal action,\n     * not all action keys.\n     *\n     * A value of a minimal action will only overwrite the main action value if that is not set.\n     *\n     * For example:\n     * A: action.skill == '' will be overwritten by minimalAction.skill == 'Spellcasting'\n     * B: action.skill == 'ritual_spellcasting' won't be overwritten by minimalAction.skill == 'Spellcasting'\n     * C: action.armor == true will be overwritten by minimalAction.armor == false\n     *\n     * @param sourceAction Main action, as defined by user input.\n     * @param defaultActions List of partial actions, as defined by test implementations.\n     * @returns A copy of the main action with all minimalActions properties applied in order of arguments.\n     */\n    _mergeMinimalActionDataInOrder: function(sourceAction, ...defaultActions: Partial<Shadowrun.MinimalActionData>[]): Shadowrun.ActionRollData {\n        // This action might be taken from ItemData, causing changes to be reflected upstream.\n        const resultAction = foundry.utils.duplicate(sourceAction);\n\n        // Check if overwriting default\n        for (const defaultAction of defaultActions) {\n            if (Object.keys(defaultAction).length === 0) continue;\n\n            // Iterate over complete MinimalActionData to avoid tests providing other ActionRollData fields they're not\n            // supposed to override.\n            for (const key of Object.keys(DataDefaults.minimalActionData())) {\n                if (TestCreator._keepItemActionValue(sourceAction, defaultAction, key)) continue;\n\n                resultAction[key] = defaultAction[key];\n            }\n        }\n\n        return resultAction;\n    },\n\n    /**\n     * Should an action value be kept even if a default action defines another value?\n     *\n     * This comparison checks either a simple value against defaults OR checks values grouped as a\n     * logical unit (skill+attribute/2)\n     *\n     * @param action The original action data.\n     * @param defaultAction A partial action that may provide values to apply to the main action.\n     * @param key The action key to take the value from\n     * @returns true for when the original action value should be kept, false if it's to be overwritten.\n     */\n    _keepItemActionValue(action: Shadowrun.ActionRollData, defaultAction: Partial<Shadowrun.MinimalActionData>, key: string): boolean {\n        if (!defaultAction.hasOwnProperty(key)) return true;\n\n        // Avoid user confusion. A user might change one value of a logical value grouping (skill+attribute)\n        // and get a default value for the other.\n        // Instead check some values as a section and only use default values when not one value of that\n        // section has been changed by user input.\n        const skillSection = ['skill', 'attribute', 'attribute2', 'armor'];\n        if (skillSection.includes(key)) {\n            const noneDefault = skillSection.some(sectionKey => TestCreator._actionHasNoneDefaultValue(action, sectionKey));\n            return noneDefault;\n        }\n\n        // Fallback to basic value checking.\n        return TestCreator._actionHasNoneDefaultValue(action, key);\n    },\n\n    /**\n     * Determine if the field value behind the action property 'key' is of a none-default value.\n     *\n     * This can be used to determine if a user / automated change has been made.\n     *\n     * @param action Any action configuration.\n     * @param key A key of action configuration within action parameter\n     * @returns false, when the value behind key is a default value. true, when it's a custom value.\n     */\n    _actionHasNoneDefaultValue(action: Shadowrun.ActionRollData, key: string): boolean {\n        if (!action.hasOwnProperty(key)) return false;\n\n        // NOTE: A more complete comparison would take a default ActionRollData object and compare the sub-key against it.\n        const value = action[key];\n        const type = foundry.utils.getType(value);\n\n        // A value name should only be overwritten when no value has been user selected.\n        // This would affect .skill and .attribute like fields.\n        if (type === 'string') return value.length > 0;\n        // A list of value names should only be overwritten when not one has been user selected.\n        // This would affect .modifiers like fields.\n        if (type === 'Array') return value.length > 0;\n        // Booleans don't have a intrinsic default value on ActionRollData.\n        if (type === 'boolean' && key === 'armor') return action[key] === true; // default is false\n\n        return false;\n    },\n\n    /**\n     * Determine if a test's dialog should NOT be shown, when executing a test.\n     *\n     * @param event A PointerEvent by user interaction\n     */\n    shouldHideDialog(event: Shadowrun.RollEvent|undefined): boolean {\n        if (!event) return false;\n        const bindings = game.keybindings.get(\"shadowrun6-elysium\", \"hide-test-dialog\");\n        for (const binding of bindings) {\n            return event[binding.key] === true;\n        }\n        return false;\n    },\n\n    /**\n     * Determine if a test's dialog should be shown, when executing a test.\n     *\n     * @param event A PointerEvent by user interaction\n     */\n    shouldShowDialog(event: Shadowrun.RollEvent|undefined): boolean {\n        return !TestCreator.shouldHideDialog(event);\n    },\n\n    /**\n     * Determine if instead of rolling an item based test, only the item's description should be posted as a chat message.\n     *\n     * @param event A PointerEvent by user interaction\n     */\n    shouldPostItemDescription(event: Shadowrun.RollEvent|undefined): boolean {\n        if (!event) return false;\n        const bindings = game.keybindings.get(\"shadowrun6-elysium\", \"show-item-card\");\n        for (const binding of bindings) {\n            return event[binding.key] === true;\n        }\n        return false;\n    }\n};\n", "\nimport { Helpers } from '../helpers';\nimport DeviceData = Shadowrun.DeviceData;\nimport { SR6Item } from './SR6Item';\nimport AmmoData = Shadowrun.AmmoData;\nimport { SR6 } from \"../config\";\nimport { Translation } from '../utils/strings';\n\n/**\n * ChatData returns little info boxes for each item type.\n * These are shown for items in actor item lists when looking at their description and within\n * chat description messages of items.\n *\n * NOTE: This here is hard to read, requires per item type handling and is not very flexible.\n *       This should be refactored into are more readable approach.\n *\n * These info boxes will be shown in a few places, most notibly the chat message but also\n * - actor sheets\n */\nexport const ChatData = {\n    call_in_action: (system: Shadowrun.CallInActionData, labels, props) => {\n        switch (system.actor_type) {\n            case 'sprite':\n                if (system.sprite.type) props.push(`${game.i18n.localize(\"SR6.Compilation.SpriteType\")} ${game.i18n.localize(SR6.spriteTypes[system.sprite.type])}`);\n                if (system.sprite.level) props.push(`${game.i18n.localize('SR6.Level')} ${system.sprite.level}`);\n                return;\n            case 'spirit':\n                if (system.spirit.type) props.push(`${game.i18n.localize(\"SR6.Summoning.SpiritType\")} ${game.i18n.localize(SR6.spiritTypes[system.spirit.type])}`);\n                if (system.spirit.force) props.push(`${game.i18n.localize('SR6.Force')} ${system.spirit.force}`);\n                return;\n        }\n    },\n    action: (system, labels, props) => {\n        if (system.action) {\n            const labelStringList: string[] = [];\n            if (system.action.skill) {\n                labelStringList.push(Helpers.label(system.action.skill));\n                labelStringList.push(Helpers.label(system.action.attribute));\n            } else if (system.action.attribute2) {\n                labelStringList.push(Helpers.label(system.action.attribute));\n                labelStringList.push(Helpers.label(system.action.attribute2));\n            } else if (system.action.attribute) {\n                labelStringList.push(Helpers.label(system.action.attribute));\n            }\n            if (system.action.mod) {\n                labelStringList.push(`${game.i18n.localize('SR6.ItemMod')} (${system.action.mod})`);\n            }\n            if (labelStringList.length) {\n                labels.roll = labelStringList.join(' + ');\n            }\n\n            if (system.action.opposed.type) {\n                const { opposed } = system.action;\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\n            }\n\n            // setup action props\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\n            if (system.action.type !== '' && system.action.type !== 'varies' && system.action.type !== 'none') {\n                props.push(`${Helpers.label(`${game.i18n.localize(SR6.actionTypes[system.action.type])}`)} ${game.i18n.localize('SR6.Action')}`);\n            }\n            if (system.action.limit) {\n                const { limit } = system.action;\n                const attribute = limit.attribute ? `[${game.i18n.localize(SR6.limits[limit.attribute])}]` : '';\n                const limitVal = limit.value ? limit.value : '';\n                let limitStr = '';\n                if (attribute) {\n                    limitStr += attribute;\n                }\n                if (limitVal) {\n                    if (attribute) {\n                        limitStr += ' + ';\n                    }\n                    limitStr += limitVal;\n                }\n\n                if (limitStr) {\n                    props.push(`${game.i18n.localize('SR6.Limit')} ${limitStr}`);\n                }\n            }\n            if (system.action.damage.type.value) {\n                const { damage } = system.action;\n                let damageString = '';\n                let elementString = '';\n                let operator = SR6.actionDamageFormulaOperators[damage.base_formula_operator] ?? '';\n                let attribute = damage.attribute ? `${game.i18n.localize(SR6.attributes[damage.attribute])} ${operator} ` : '';\n                if (damage.value || attribute) {\n                    const type = damage.type.value ? game.i18n.localize(SR6.damageTypes[damage.type.value]).toUpperCase().charAt(0) : '';\n                    damageString = `${game.i18n.localize('SR6.DV')} ${attribute}${damage.value}${type}`;\n                }\n                if (damage.element.value) {\n                    // if we have a damage value and are electric, follow the convention of (e) after\n                    if (damage.value) {\n                        if (damage.element.value === 'electricity') {\n                            damageString += ` (${game.i18n.localize(SR6.elementTypes.electricity).toLowerCase().charAt(0)})`;\n                        } else {\n                            elementString = Helpers.label(game.i18n.localize(SR6.elementTypes[damage.element.value]));\n                        }\n                    } else {\n                        elementString = Helpers.label(game.i18n.localize(SR6.elementTypes[damage.element.value]));\n                    }\n                }\n                if (damageString) props.push(damageString);\n                if (elementString) props.push(elementString);\n\n                const ap = damage.ap;\n                operator = SR6.actionDamageFormulaOperators[ap.base_formula_operator] ?? '';\n                attribute = ap.attribute ? `${game.i18n.localize(SR6.attributes[ap.attribute])} ${operator} ` : '';\n                if (ap.value || attribute) {\n                    props.push(`${game.i18n.localize('SR6.AP')} ${attribute}${damage.ap.value}`);\n                }\n            }\n        }\n    },\n\n    sin: (system, labels, props) => {\n        // Avoid displaying rating null (empty input field) and rating 0.\n        if (system.technology.rating) props.push(`${game.i18n.localize('SR6.Rating')} ${system.technology.rating}`);\n        system.licenses.forEach((license) => {\n            if (license.rtg) props.push(`${license.name} ${game.i18n.localize('SR6.Rating').charAt(0)}${license.rtg}`);\n        });\n    },\n\n    contact: (system, labels, props) => {\n        props.push(system.type);\n        props.push(`${game.i18n.localize('SR6.Contact.Connection')} ${system.connection}`);\n        props.push(`${game.i18n.localize('SR6.Contact.Loyalty')} ${system.loyalty}`);\n        if (system.blackmail) {\n            props.push(game.i18n.localize('SR6.Contact.Blackmail'));\n        }\n        if (system.family) {\n            props.push(game.i18n.localize('SR6.Contact.Family'));\n        }\n    },\n\n    lifestyle: (system, labels, props) => {\n        props.push(game.i18n.localize(SR6.lifestyleTypes[system.type]));\n        if (system.cost) props.push(`\u00A5${system.cost}`);\n        if (system.comforts) props.push(`${game.i18n.localize('SR6.LifestyleComforts')} ${system.comforts}`);\n        if (system.security) props.push(`${game.i18n.localize('SR6.LifestyleSecurity')} ${system.security}`);\n        if (system.neighborhood) props.push(`${game.i18n.localize('SR6.LifestyleNeighborhood')} ${system.neighborhood}`);\n        if (system.guests) props.push(`${game.i18n.localize('SR6.LifestyleGuests')} ${system.guests}`);\n    },\n\n    adept_power: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n        props.push(`${game.i18n.localize('SR6.PP')} ${system.pp}`);\n        props.push(Helpers.label(game.i18n.localize(SR6.adeptPower.types[system.type])));\n    },\n\n    armor: (system, labels, props) => {\n        if (system.armor) {\n            if (system.armor.capacity) props.push(`${game.i18n.localize('SR6.Capacity')} ${system.armor.capacity}`);\n            if (system.armor.defense_rating.value) props.push(`${game.i18n.localize('SR6.DefenseRating')} ${system.armor.defense_rating.value}`);\n            if (system.armor.social_rating.value) props.push(`${game.i18n.localize('SR6.SocialRating')} ${system.armor.social_rating.value}`);\n            if (system.armor.value) props.push(`${game.i18n.localize('SR6.Armor')} ${system.armor.mod ? '+' : ''}${system.armor.value}`);\n            if (system.armor.acid) props.push(`${game.i18n.localize('SR6.ElementAcid')} ${system.armor.acid}`);\n            if (system.armor.cold) props.push(`${game.i18n.localize('SR6.ElementCold')} ${system.armor.cold}`);\n            if (system.armor.fire) props.push(`${game.i18n.localize('SR6.ElementFire')} ${system.armor.fire}`);\n            if (system.armor.electricity) props.push(`${game.i18n.localize('SR6.ElementElectricity')} ${system.armor.electricity}`);\n            if (system.armor.radiation) props.push(`${game.i18n.localize('SR6.ElementRadiation')} ${system.armor.radiation}`);\n        }\n    },\n\n    ammo: (system, labels, props) => {\n        if (system.damageType) props.push(`${game.i18n.localize(\"SR6.DamageType\")} ${game.i18n.localize(SR6.damageTypes[system.damageType])}`);\n        if (system.damage) props.push(`${game.i18n.localize(\"SR6.DamageValue\")} ${system.damage}`);\n        if (system.element) props.push(`${game.i18n.localize(\"SR6.Element\")} ${game.i18n.localize(SR6.elementTypes[system.element])}`);\n        if (system.ap) props.push(`${game.i18n.localize(\"SR6.AP\")} ${system.ap}`);\n        if (system.blast.radius) props.push(`${game.i18n.localize('SR6.BlastRadius')} ${system.blast.radius}m`);\n        if (system.blast.dropoff) props.push(`${game.i18n.localize('SR6.Dropoff')} ${system.blast.dropoff}/m`);\n    },\n\n    program: (system, labels, props) => {\n        props.push(game.i18n.localize(SR6.programTypes[system.type]));\n    },\n\n    complex_form: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n        props.push(game.i18n.localize(SR6.matrixTargets[system.target]));\n        props.push(`${system.duration}`);\n\n        const { fade } = system;\n        if (fade > 0) props.push(`${game.i18n.localize('SR6.Fade')} ${game.i18n.localize('SR6.Level').charAt(0)}+${fade}`);\n        else if (fade < 0) props.push(`${game.i18n.localize('SR6.Fade')} ${game.i18n.localize('SR6.Level').charAt(0)}${fade}`);\n        else props.push(`${game.i18n.localize('SR6.Fade')} ${game.i18n.localize('SR6.Level').charAt(0)}`);\n    },\n\n    cyberware: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n        ChatData.armor(system, labels, props);\n        if (system.essence) props.push(`${game.i18n.localize('SR6.AttrEssence').substring(0, 3)} ${system.essence}`);\n    },\n\n    bioware: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n        ChatData.armor(system, labels, props);\n        if (system.essence) props.push(`${game.i18n.localize('SR6.AttrEssence').substring(0, 3)} ${system.essence}`);\n    },\n\n    device: (system: DeviceData, labels, props) => {\n        if (system.technology && system.technology.rating) props.push(`${game.i18n.localize('SR6.Rating')} ${system.technology.rating}`);\n        // Show ALL matrix ratings for these devices\n        if (system.category === 'cyberdeck' || system.category === 'rcc') {\n            for (const attribute of Object.values(system.atts)) {\n                props.push(`${Helpers.label(`${game.i18n.localize(SR6.matrixAttributes[attribute.att])}`)} ${attribute.value}`);\n            }\n        }\n        // Commlinks CAN have all values, but tend to only have dp and fw\n        // Therefore only show non-zero values\n        if (system.category === 'commlink') {\n            for (const attribute of Object.values(system.atts)) {\n                if (attribute.value) props.push(`${Helpers.label(`${game.i18n.localize(SR6.matrixAttributes[attribute.att])}`)} ${attribute.value}`);\n            }\n        }\n    },\n\n    equipment: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n        if (system.technology && system.technology.rating) props.push(`${game.i18n.localize('SR6.Rating')} ${system.technology.rating}`);\n    },\n\n    quality: (system, labels, props) => {\n        ChatData.action(system, labels, props);\n\n        props.push(Helpers.label(game.i18n.localize(SR6.qualityTypes[system.type])));\n        if (system.rating) props.push(`${game.i18n.localize('SR6.Rating')} ${system.rating}`);\n    },\n\n    sprite_power: (system, labels, props) => {\n        // add action data\n        ChatData.action(system, labels, props);\n    },\n\n    critter_power: (system, labels, props) => {\n        props.push(game.i18n.localize(SR6.critterPower.types[system.powerType]));\n        props.push(game.i18n.localize(SR6.critterPower.durations[system.duration]));\n        props.push(game.i18n.localize(SR6.critterPower.ranges[system.range]));\n        if (system.rating) props.push(`${game.i18n.localize('SR6.Rating')} ${system.rating}`);\n\n        // add action data\n        ChatData.action(system, labels, props);\n    },\n\n    // add properties for spell data, follow order in book\n    spell: (system, labels, props) => {\n        // first category and type\n        props.push(game.i18n.localize(SR6.spellCategories[system.category]), game.i18n.localize(SR6.spellTypes[system.type]));\n\n        // add subtype tags\n        if (system.category === 'combat') {\n            props.push(game.i18n.localize(SR6.combatSpellTypes[system.combat.type]));\n        } else if (system.category === 'health') {\n        } else if (system.category === 'illusion') {\n            props.push(game.i18n.localize(SR6.illusionSpellTypes[system.illusion.type]));\n            props.push(game.i18n.localize(SR6.illusionSpellSenses[system.illusion.sense]));\n        } else if (system.category === 'manipulation') {\n            if (system.manipulation.damaging) props.push(game.i18n.localize('SR6.Spell.ManipulationDamaging'));\n            if (system.manipulation.mental) props.push(game.i18n.localize('SR6.Spell.ManipulationMental'));\n            if (system.manipulation.environmental) props.push(game.i18n.localize('SR6.Spell.ManipulationEnvironmental'));\n            if (system.manipulation.physical) props.push(game.i18n.localize('SR6.Spell.ManipulationPhysical'));\n        } else if (system.category === 'detection') {\n            props.push(game.i18n.localize(SR6.detectionSpellTypes[system.detection.type]));\n            props.push(system.detection.passive ? game.i18n.localize('SR6.Passive') :  game.i18n.localize('SR6.Active'));\n            if (system.detection.extended) props.push(game.i18n.localize('SR6.DetectionSpellExtended'));\n        }\n        // add range\n        props.push(game.i18n.localize(SR6.spellRanges[system.range]));\n\n        // add action data\n        ChatData.action(system, labels, props);\n\n        // add duration data\n        props.push(game.i18n.localize(SR6.durations[system.duration]));\n\n        // add drain data\n        const { drain } = system;\n        if (drain > 0) props.push(game.i18n.format('SR6.QuickInfo.DrainForce', {sign: '+', drain}));\n        else if (drain < 0) props.push(game.i18n.format('SR6.QuickInfo.DrainForce', {sign: '', drain}));\n        else props.push(game.i18n.format('SR6.QuickInfo.DrainForce', {sign: '', drain: ''}));\n\n        labels.roll = 'Cast';\n    },\n\n    ritual: (system, labels, props) => {\n        props.push(game.i18n.localize(SR6.spellTypes[system.type]));\n        props.push(system.descriptors);\n\n        ChatData.action(system, labels, props);\n    },\n\n    weapon: (system, labels, props, item: SR6Item) => {\n        ChatData.action(system, labels, props);\n        for (let i = 0; i < props.length; i++) {\n            const prop = props[i];\n            if (prop.includes('Limit')) {\n                props[i] = prop.replace('Limit', game.i18n.localize('SR6.Accuracy'));\n            }\n        }\n\n        const equippedAmmo = item.getEquippedAmmo();\n        if (equippedAmmo && system.ammo && system.ammo.current?.max) {\n            if (equippedAmmo) {\n                const ammoData = equippedAmmo.system as AmmoData;\n                const { current, spare_clips } = system.ammo;\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\n                if (ammoData.blast.radius) props.push(`${game.i18n.localize('SR6.BlastRadius')} ${ammoData.blast.radius}m`);\n                if (ammoData.blast.dropoff) props.push(`${game.i18n.localize('SR6.Dropoff')} ${ammoData.blast.dropoff}/m`);\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR6.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\n            }\n        }\n\n        if (system.technology?.conceal?.value) {\n            props.push(`${game.i18n.localize('SR6.Conceal')} ${system.technology.conceal.value}`);\n        }\n\n        if (system.category === 'range') {\n            if (system.range.rc) {\n                let rcString = `${game.i18n.localize('SR6.RecoilCompensation')} ${system.range.rc.value}`;\n                if (item?.actor) {\n                    rcString += ` (${game.i18n.localize('SR6.Total')} ${item.totalRecoilCompensation})`;\n                }\n                props.push(rcString);\n            }\n            if (system.range.modes) {\n                const newModes: Translation[] = [];\n                const { modes } = system.range;\n                if (modes.single_shot) newModes.push('SR6.Weapon.Mode.SingleShotShort');\n                if (modes.semi_auto) newModes.push('SR6.Weapon.Mode.SemiAutoShort');\n                if (modes.burst_fire) newModes.push('SR6.Weapon.Mode.BurstFireShort');\n                if (modes.full_auto) newModes.push('SR6.Weapon.Mode.FullAutoShort');\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\n            }\n            if (system.range.ranges) {\n                /**\n                 * Display weapon ranges in this format: <CATEGORY (short/medium/long/extreme/attribute)\n                 */\n                const { short, medium, long, extreme, category, attribute } = system.range.ranges;\n                const categoryLabel = game.i18n.localize(SR6.weaponRangeCategories[category]?.label ?? '');\n                let output = `${categoryLabel} (${short}/${medium}/${long}/${extreme})`;\n                if (attribute) {\n                    output += `/${attribute}`;\n                }\n                props.push(output);\n            }\n        } else if (system.category === 'melee') {\n            if (system.melee.reach) {\n                const reachString = `${game.i18n.localize('SR6.Reach')} ${system.melee.reach}`;\n                // find accuracy in props and insert ourselves after it\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\n                if (accIndex > -1) {\n                    props.splice(accIndex + 1, 0, reachString);\n                } else {\n                    props.push(reachString);\n                }\n            }\n        } else if (system.category === 'thrown') {\n            const { blast } = system.thrown;\n            if (blast?.radius) props.push(`${game.i18n.localize('SR6.BlastRadius')} ${blast.radius}m`);\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR6.Dropoff')} ${blast.dropoff}/m`);\n\n            if (system.thrown.ranges) {\n                const mult = system.thrown.ranges.attribute && item?.actor ? item.actor.system.attributes[system.thrown.ranges.attribute].value : 1;\n                const ranges = [system.thrown.ranges.short, system.thrown.ranges.medium, system.thrown.ranges.long, system.thrown.ranges.extreme];\n                props.push(ranges.map((v) => v * mult).join('/'));\n            }\n        }\n\n        const equippedMods = item.getEquippedMods();\n        if (equippedMods) {\n            equippedMods.forEach((mod) => {\n                props.push(`${mod.name}`);\n            });\n        }\n    },\n};\n", "import {SYSTEM_SOCKET} from \"./constants\";\nimport SocketMessageBody = Shadowrun.SocketMessageData;\n\n/**\n * Simple handling of creating and emitting socket messages\n * Use emit for messages meant for all users\n * > SocketMessage.emit(FLAGS.<yourFlag>, {yourDataField: 'yourData'})\n *\n * Use emitForGM for messages meant only for ONE gm\n * > SocketMessage.emitGM(FLAGS.<yourFlag>, {yourDataField: 'yourData'})\n * \n * To listen to these socket messages see Hooks#registerSocketListeners\n */\nexport class SocketMessage {\n    static _createMessage(type, data, userId?): SocketMessageBody {\n        return {type, data, userId}\n    }\n\n    static async emit(type, data) {\n        if (!game.socket) return;\n\n        const message = SocketMessage._createMessage(type, data);\n        console.trace('Shadowrun 6e | Emitting shadowrun6-elysium system socket message', message);\n        await game.socket.emit(SYSTEM_SOCKET, message);\n    }\n\n    static async emitForGM(type, data) {\n        if (!game.socket || !game.user || !game.users) return;\n        if (game.user.isGM) return console.error('Active user is GM! Aborting socket message...');\n\n        SocketMessage._assertActiveGMUser();\n\n        const gmUser = game.users.find(user => user.isGM);\n        if (!gmUser) return console.error('No active GM user! One GM must be active for this action to work.');\n\n        const message = SocketMessage._createMessage(type, data, gmUser.id);\n        console.trace('Shadowrun 6e | Emitting shadowrun6-elysium system socket message', message);\n        await game.socket.emit(SYSTEM_SOCKET, message);\n    }\n\n    /**\n     * Assert at least one active GM user to avoid confusing bugs when none is present and gm socket message\n     * aren\u00B4t handeled.\n     * \n     * If that's the case, also inform users to avoid confusion.\n     */\n    static _assertActiveGMUser() {\n        if (!game.users) return;\n        for (const user of game.users) {\n            if (user.active && user.isGM) return;\n        }\n        ui.notifications?.error('There is no active GM user to perform this action. Please ask your GM to logon.');\n        throw new Error('Shadowrun 6e | No active GM user found.');\n    }\n}\n", "import {SR6Actor} from \"../../actor/SR6Actor\";\nimport {SR6Item} from \"../SR6Item\";\nimport {SocketMessage} from \"../../sockets\";\nimport {FLAGS} from \"../../constants\";\nimport SocketAddNetworkControllerMessageData = Shadowrun.SocketAddNetworkControllerMessageData;\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\n\nexport class NetworkDeviceFlow {\n    /**\n     * Abstract away Foundry uuid system to allow for further implementation changes and typing restrictions.\n     *\n     * @param target Whatever Document you want to link to.\n     */\n    static buildLink(target: SR6Item|SR6Actor|TokenDocument) {\n        return target.uuid;\n    }\n\n    //Pass-through to resolveLink for cases in which we know it will return an item and not an actor\n    static async resolveItemLink(link: string) {\n        return await this.resolveLink(link) as SR6Item|undefined;\n    }\n\n    /**\n     * Repacking FoundryVTT fromUuid without async promise to make it usable in sync functions.\n     *\n     * @param link\n     */\n    static async resolveLink(link: string) {\n        if (!link) return;\n\n        return await fromUuid(link) as SR6Item|SR6Actor|undefined;\n    }\n\n    static async emitAddNetworkControllerSocketMessage(controller: SR6Item, networkDeviceLink: string) {\n        const controllerLink = NetworkDeviceFlow.buildLink(controller);\n\n        await SocketMessage.emitForGM(FLAGS.addNetworkController, {controllerLink, networkDeviceLink});\n    }\n\n    /**\n     * Handle socket messages adding a device to the device list of network\n     * @param message\n     */\n    static async _handleAddNetworkControllerSocketMessage(message: SocketAddNetworkControllerMessageData) {\n        console.log('Shadowrun 6e | Handle add network controller socket message', message);\n        if (!game.user?.isGM) return console.error(`Shadowrun 6e | Abort handling of message. Current user isn't a GM`, game.user);\n\n        const controller = await NetworkDeviceFlow.resolveItemLink(message.data.controllerLink);\n        const device = await NetworkDeviceFlow.resolveLink(message.data.networkDeviceLink);\n\n        if (!controller || !device) return console.error('Shadowrun 6e | Either the networks controller or device did not resolve.');\n\n        await NetworkDeviceFlow._handleAddDeviceToNetwork(controller, device);\n    }\n\n    /**\n     * Connect a device to a network controller.\n     *\n     * A network controller is the device managing the PAN/WAN.\n     * A network device is to be added to the network managed by the controller.\n     *\n     * @param controller\n     * @param device\n     */\n    static async addDeviceToNetwork(controller: SR6Item, device: SR6Item|SR6Actor) {\n        console.log(`SR6: Elysium | Adding an the item ${device.name} to the controller ${controller.name}`, controller, device);\n        if (controller.id === device.id) return console.warn('Shadowrun 6e | A device cant be its own network controller');\n        if (!device.canBeNetworkDevice) return ui.notifications?.error(game.i18n.localize('SR6.Errors.CanOnlyAddTechnologyItemsToANetwork'));\n        if (!controller.canBeNetworkController) return;\n\n        if (NetworkDeviceFlow._currentUserCanModifyDevice(controller) && NetworkDeviceFlow._currentUserCanModifyDevice(device))\n            await NetworkDeviceFlow._handleAddDeviceToNetwork(controller, device);\n        else\n            await NetworkDeviceFlow.emitAddNetworkControllerSocketMessage(controller, device.uuid);\n    }\n\n    /**\n     * Handle everything around adding a device to a controller, including removing it from already connected networks.\n     *\n     * Note: This method needs GM access\n     *\n     * @param controller\n     * @param device\n     */\n    private static async _handleAddDeviceToNetwork(controller: SR6Item, device: SR6Item|SR6Actor): Promise<any> {\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(controller) && !NetworkDeviceFlow._currentUserCanModifyDevice(device)) return console.error(`User isn't owner or GM of this device`, controller);\n\n        const controllerData = controller.asDevice || controller.asHost;\n        if (!controllerData) return console.error(`Device isn't capable of accepting network devices`, controller);\n        const networkController = device.getNetworkController();\n\n        // Remove device from a network it's already connected to.\n        if (networkController) await NetworkDeviceFlow._removeDeviceFromController(device);\n\n        // Add the device to a new controller\n        const controllerLink = NetworkDeviceFlow.buildLink(controller);\n        await NetworkDeviceFlow._setControllerFromLink(device, controllerLink);\n\n        // Add the device to the list of devices of the controller.\n        const networkDeviceLink = NetworkDeviceFlow.buildLink(device);\n        const networkDevices = controllerData.system.networkDevices;\n        if (networkDevices.includes(networkDeviceLink)) return;\n\n        return NetworkDeviceFlow._setDevicesOnController(controller, [...networkDevices, networkDeviceLink]);\n    }\n\n    /**\n     * This method is removing a device from the controller devices list. It doesn't remove the controller reference itself.\n\n     * @param device A network device that's connected to a controller.\n     */\n    static async removeDeviceFromController(device: SR6Item|SR6Actor|undefined) {\n        if (!device) return;\n\n        console.log(`Shadowrun 6e | Removing device ${device.name} from its controller`);\n\n        await NetworkDeviceFlow._removeDeviceFromController(device);\n        await NetworkDeviceFlow._removeControllerFromDevice(device);\n    }\n\n    /**\n     * Remove a single device (given as a link) from a controllers network and disconnect the device from the controller.\n     *\n     * @param controller\n     * @param deviceLink\n     */\n    static async removeDeviceLinkFromNetwork(controller: SR6Item, deviceLink: string) {\n        console.log(`Shadowrun 6e | Removing device with uuid ${deviceLink} from network`);\n        const controllerData = controller.asController();\n        const device = await NetworkDeviceFlow.resolveLink(deviceLink);\n\n        // Remove an existing item from the network.\n        if (device) {\n            const networkController = device.getNetworkController();\n            if (networkController) await NetworkDeviceFlow._removeControllerFromDevice(device);\n        }\n\n        // Remove the deviceLink from the controller.\n        if (!controllerData) return;\n        const deviceLinks = controllerData.system.networkDevices.filter(existingLink => existingLink !== deviceLink);\n        await NetworkDeviceFlow._setDevicesOnController(controller, deviceLinks);\n    }\n\n\n    /**\n     * Clear a controllers network, disconnecting it's devices from the controller and the controller\n     * from it's devices.\n     *\n     * @param controller\n     */\n    static async removeAllDevicesFromNetwork(controller: SR6Item) {\n        console.log(`Shadowrun 6e | Removing all devices from network ${controller.name}`);\n\n        await NetworkDeviceFlow._removeControllerFromAllDevices(controller);\n        await NetworkDeviceFlow._removeAllDevicesFromController(controller);\n    }\n\n    private static async _setControllerFromLink(device: SR6Item|SR6Actor, controllerLink: string) {\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 6e | Given device cant be part of a network', device);\n        await device.setNetworkController(controllerLink);\n    }\n\n    /**\n     * As part of the deleteItem FoundryVTT event this method will called by all active users, even if they lack permission.\n     * @param device The device to remove a connected controller from.\n     * @private\n     */\n    private static async _removeControllerFromDevice(device: SR6Item|SR6Actor) {\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 6e | Given device cant be part of a network', device);\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(device)) return;\n        await device.setNetworkController(\"\");\n    }\n\n    private static async _setDevicesOnController(controller: SR6Item, deviceLinks: string[]) {\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 6e | Given device cant control a network', controller);\n        await controller.update({'system.networkDevices': deviceLinks});\n    }\n\n    private static async _removeAllDevicesFromController(controller: SR6Item) {\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 6e | Given device cant control a network', controller);\n        await controller.update({'system.networkDevices': []});\n    }\n\n    /**\n     * As part of the deleteItem FoundryVTT event this method will be called by all active users, even if they lack permission.\n     * @param device The device that is to be removed from the network controller.\n     * @private\n     */\n    private static async _removeDeviceFromController(device: SR6Item|SR6Actor){\n        if (!device.canBeNetworkDevice) return console.error('Shadowrun 6e | Given device cant be part of a network', device);\n        const networkController = device.getNetworkController();\n        if (!networkController) return;\n\n        // Controller might not exist anymore.\n        const controller = await NetworkDeviceFlow.resolveItemLink(networkController);\n        if (!controller) return;\n        if (!NetworkDeviceFlow._currentUserCanModifyDevice(controller)) return;\n\n        const controllerData = controller.asController();\n        if (!controllerData) return;\n\n        // Remove device from it's controller.\n        const deviceLink = NetworkDeviceFlow.buildLink(device);\n        const deviceLinks = controllerData.system.networkDevices.filter(existingLink => existingLink !== deviceLink);\n        await NetworkDeviceFlow._setDevicesOnController(controller, deviceLinks);\n    }\n\n    private static async _removeControllerFromAllDevices(controller: SR6Item) {\n        if (!controller.canBeNetworkController) return console.error('Shadowrun 6e | Given device cant control a network', controller);\n        const controllerData = controller.asController();\n        if (!controllerData) return;\n\n        const networkDevices = controllerData.system.networkDevices;\n\n        // Remove controller from all its connected devices.\n        if (networkDevices) {\n            const devices: (SR6Item|SR6Actor)[] = [];\n            for (const deviceLink of networkDevices) {\n                const device = await NetworkDeviceFlow.resolveLink(deviceLink);\n                if (device) devices.push(device);\n            }\n            for (const device of devices) {\n                if (!device) continue;\n                await NetworkDeviceFlow._removeControllerFromDevice(device);\n            }\n        }\n    }\n\n    /**\n     * Return all network devices connected to a controller.\n     *\n     *\n     * @param controller\n     */\n    static async getNetworkDevices(controller: SR6Item): Promise<(SR6Item | SR6Actor)[]> {\n        const devices: (SR6Item|SR6Actor)[] = [];\n        const controllerData = controller.asController();\n        if (!controllerData) return devices;\n\n        for (const link of controllerData.system.networkDevices) {\n            const device = await NetworkDeviceFlow.resolveLink(link);\n            if (device)  devices.push(device);\n            else console.warn(`SR6: Elysium | Controller ${controller.name} has a network device ${link} that doesn't exist anymore`);\n        }\n\n        return devices;\n    }\n\n    /**\n     * Note: This handler will be called for all active users, even if they lack permission to alter item data.\n     *       This can result in lingering network devices or controllers, when no GM or device owner is active.\n     *\n     * @param item This can be a network controller or device or neither.\n     * @param data\n     * @param id\n     */\n    static async handleOnDeleteItem(item: SR6Item, data: ShadowrunItemDataData, id: string) {\n        console.debug(`Shadowrun 6e | Checking for network on deleted item ${item.name}`, item);\n        // A deleted controller must be removed from all its devices.\n        if (item.canBeNetworkController) return await NetworkDeviceFlow._removeControllerFromAllDevices(item);\n        // A deleted device must be removed from its controller.\n        if (item.canBeNetworkDevice) return await NetworkDeviceFlow._removeDeviceFromController(item);\n    }\n\n    static _currentUserCanModifyDevice(device: SR6Item|SR6Actor): boolean {\n        return game.user?.isGM || device.isOwner;\n    }\n}\n", "import HostData = Shadowrun.HostData;\nimport {MatrixRules} from \"../../rules/MatrixRules\";\n\nexport function HostDataPreparation(system: HostData) {\n    HostPrep.setDeviceCategory(system);\n    HostPrep.prepareMatrixAttributes(system);\n}\n\n\nexport class HostPrep {\n    static setDeviceCategory(system: HostData) {\n        // Host matrix 'devices' are always hosts and never commlink / cyberdecks.\n        system.category = 'host';\n    }\n\n    /**\n     * Apply host matrix attribute rating.\n     * \n     * Allow for custom attribute selections by user circumventing the rules.\n     * \n     * This also allows for Kill Code#42 alternative host attribute values.\n     * \n     * @param system\n     */\n    static prepareMatrixAttributes(system: HostData) {\n        const { customAttributes } = system;\n\n        const hostAttributeRatings = MatrixRules.hostMatrixAttributeRatings(system.rating);\n        Object.values(system.atts).forEach(attribute => {\n            attribute.value = customAttributes ? attribute.value : hostAttributeRatings.pop();\n            attribute.editable = customAttributes;\n        })\n    }\n}", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR6Item } from \"../item/SR6Item\";\n\n/**\n * Utils used for opening links\n */\n\nexport class LinksHelpers {\n    /**\n     * Determine if the given string contains a PDF pattern.\n     *\n     * @param candidate The string that might contain a PDF pattern like SR5 123\n     */\n    static isPDF(candidate: string | undefined): boolean {\n        if (!candidate) return false;\n        return candidate.split(' ').length === 2;\n    }\n    /**\n     * Determine if given string contains a url pattern.\n     *\n     * Parsing an url is expensive and doing so on UUIDs for JournalEntryPages will kill the browser :)\n     * Therefore we assume what is not anything else, might be a url.\n     *\n     * @param candidate The string that might contain a url\n     * @returns true, when candidate contains a url pattern\n     */\n    static isURL(candidate: string | undefined): boolean {\n        if (!candidate) return false;\n\n        // Start in order of little performance expence\n        if (LinksHelpers.isPDF(candidate)) return false;\n        if (LinksHelpers.isUuid(candidate)) return false;\n\n        return true;\n    }\n\n    /**\n     * Determine if given string contains a valid uuid pattern.\n     *\n     * FoundryVTT doesn't provide a method to check if a string is a valid uuid.\n     * We assume a uuid will end on a 16 digit id and will contain at least one dot.\n     *\n     * @param candidate A string containing a Document.uuid\n     * @returns true, when candidate contains a valid uuid pattern\n     */\n    static isUuid(candidate: string | undefined) {\n        if (!candidate) return false;\n\n        // @ts-expect-error // parseUuid is not defined in the @league-of-foundry-developers/foundry-vtt-types package\n        return !!foundry.utils.parseUuid(candidate).collection;\n    }\n\n    /**\n     * Resolve given uuid for better handling for different document types.\n     * @param source\n     */\n    static async resolveUuid(source: string) {\n        // @ts-expect-error // parseUuid is not defined in the @league-of-foundry-developers/foundry-vtt-types package\n        const resolvedUuid = foundry.utils.parseUuid(source);\n\n        const uuid = resolvedUuid.uuid.split('#')[0];\n        const anchor = resolvedUuid.uuid.split('#')[1];\n\n        const document = await fromUuid(uuid);\n\n        return { document, resolvedUuid, anchor }\n    }\n\n    /**\n     * Use the items source field to open it as another browser tab.\n     *\n     * This is meant to allow for wikis to be used as sources.\n     */\n    static openSourceURL(source: string | undefined) {\n        if (source === '') {\n            ui.notifications?.error('SR6.SourceFieldEmptyError', { localize: true });\n        }\n\n        window.open(source);\n    }\n\n    /**\n     * Use the items source field to try matching it against a PDF document and display that within FoundryVTT.\n     */\n    static openSourcePDF(source: string | undefined) {\n        // Check for pdfpager module hook: https://github.com/farling42/fvtt-pdf-pager\n        if (!ui['pdfpager']) {\n            ui.notifications?.warn('SR6.DIALOG.MissingModuleContent', { localize: true });\n            return;\n        }\n\n        if (!source) {\n            ui.notifications?.error('SR6.SourceFieldEmptyError', { localize: true });\n            return;\n        }\n\n        const [code, page] = source.split(' ');\n\n        //@ts-expect-error\n        ui.pdfpager.openPDFByCode(code, { page: parseInt(page) });\n    }\n\n    /**\n     * Open the document associated with the given uuid.\n     *\n     * @param source\n     */\n    static async openSourceByUuid(source: string|undefined) {\n        if (!source) return;\n        const { document, resolvedUuid, anchor } = await LinksHelpers.resolveUuid(source);\n\n        if (!document) {\n            ui.notifications?.error('SR6.SourceFieldEmptyError', { localize: true });\n            return;\n        }\n\n        try {\n            if (document instanceof SR6Item || document instanceof SR6Actor || document instanceof JournalEntry) {\n                document.sheet?.render(true);\n                // @ts-expect-error TODO: foundry-vtt-types v10\n            } else if (document instanceof JournalEntryPage) {\n                document.parent.sheet.render(true, { pageId: document.id, anchor: anchor ?? undefined });\n            } else {\n                ui.notifications?.error(`The document has no associated sheet.`);\n            }\n        } catch (error) {\n            ui.notifications?.error(`Error opening the sheet for UUID: ${resolvedUuid.uuid}`, error);\n        }\n    }\n\n    /**\n     * Use the items source field and try different means of opening it.\n     */\n    static async openSource(source: string | undefined) {\n        if (LinksHelpers.isPDF(source)) {\n            return LinksHelpers.openSourcePDF(source);\n        }\n        if (LinksHelpers.isUuid(source)) {\n            return await LinksHelpers.openSourceByUuid(source);\n        }\n        if (LinksHelpers.isURL(source)) {\n            return LinksHelpers.openSourceURL(source);\n        }\n    }\n}\n", "import { Helpers } from \"../../../helpers\";\nimport { PartsList } from \"../../../parts/PartsList\";\nimport { SR6Item } from \"../../SR6Item\";\n\n/**\n * Item data preparation around the 'technology' template.json item template.\n */\nexport const TechnologyPrep = {\n    /**\n     * Calculate the device condition monitor\n     *\n     * See SR5#228 'Matrix Damage'\n     * @param technology The system technology section to be altered\n     */\n    prepareConditionMonitor(technology: Shadowrun.TechnologyData) {\n        // taMiF: This seems to be legacy code to avoid a migration.\n        //        Leave it in, as it doesn't hurt for now.\n        if (technology.condition_monitor === undefined) {\n            technology.condition_monitor = { value: 0, max: 0, label: '' };\n        }\n\n        const rating = typeof technology.rating === 'string' ? 0 : technology.rating;\n        technology.condition_monitor.max = 8 + Math.ceil(rating / 2);\n    },\n\n    /**\n     * Calculate a devices ability to conceal.\n     *\n     * See SR5#419 'Concealing Gear'\n     * @param technology The system technology section to be altered\n     * @param equippedMods Those item mods that are equipped.\n     */\n    prepareConceal(technology: Shadowrun.TechnologyData, equippedMods: SR6Item[]) {\n        // Calculate conceal data.\n        if (!technology.conceal) technology.conceal = {base: 0, value: 0, mod: []};\n\n        const concealParts = new PartsList<number>();\n        equippedMods.forEach((mod) => {\n            if (mod.system.conceal  && mod.system.conceal > 0) {\n                concealParts.addUniquePart(mod.name as string, mod.system.conceal);\n            }\n        });\n\n        technology.conceal.mod = concealParts.list;\n        technology.conceal.value = Helpers.calcTotal(technology.conceal);\n    }\n}\n", "/**\n * SIN item data preparation\n */\nexport const SinPrep = {\n    prepareBaseData(system: Shadowrun.SinData) {\n        SinPrep.prepareLicenseData(system);\n    },\n    prepareLicenseData(system: Shadowrun.SinData) {\n        if (typeof system.licenses === 'object') {\n            // taMiF: This seems to be a hacky solution to some internal or Foundry issue with reading\n            //        a object/HashMap when an array/iterable was expected\n            system.licenses = Object.values(system.licenses);\n        }\n    }\n}", "import { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport { SR6Item } from '../../SR6Item';\n/**\n * Item data preparation around the 'action' template.json item template.\n */\nexport const ActionPrep = {\n    /**\n     * Main preparation method for actions prep.\n     * @param action The ActionRollData to alter.\n     * @param item The item to use as a source.\n     * @param equippedMods Equipped modifications on that item.\n     * @param equippedAmmo Equipped ammunition on that item.\n     */\n    prepareData(action: Shadowrun.ActionRollData, item: SR6Item, equippedMods: SR6Item[], equippedAmmo?: SR6Item) {\n        ActionPrep.clearMods(action);\n        ActionPrep.prepareDamageSource(action, item);\n        ActionPrep.prepareWithMods(action, equippedMods);\n        ActionPrep.prepareWithAmmo(action, equippedAmmo);\n        ActionPrep.calculateValues(action);\n    },\n    /**\n     * remove any possible previous mods that might have been introduced by preparation or alteration in system data.\n     *\n     * @param action The ActionRollData to alter.\n     */\n    clearMods(action: Shadowrun.ActionRollData) {\n        action.alt_mod = 0;\n        action.limit.mod = [];\n        action.damage.mod = [];\n        action.damage.ap.mod = [];\n        action.dice_pool_mod = [];\n    },\n\n    /**\n     * Provide the action damage a source for the damage calculation.\n     *\n     * @param action The ActionRollData to alter.\n     * @param item The item to use as a source.\n     */\n    prepareDamageSource(action: Shadowrun.ActionRollData, item: SR6Item) {\n        if (!item.actor?.system) return;\n\n        action.damage.source = {\n            actorId: item.actor.id as string,\n            itemId: item.id as string,\n            itemName: item.name as string,\n            itemType: item.type\n        };\n    },\n\n    /**\n     * Prepare weapon action data effects of the quipped ammo item.\n     * @param action The systems data action property to be altered.\n     * @param equippedAmmo The equipped ammunition item\n     */\n    prepareWithAmmo(action: Shadowrun.ActionRollData, equippedAmmo?: SR6Item) {\n        // No equipped ammo, just calculate the damage directly.\n        if (!equippedAmmo) {\n            action.damage.element.value = action.damage.element.base;\n            action.damage.type.value = action.damage.type.base;\n\n            return;\n        }\n\n        // Collect weapon value modifications from used ammunition.\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const ammoData = equippedAmmo.system as AmmoData;\n        const limitParts = new PartsList(action.limit.mod);\n\n        // Some ammunition want to replace the weapons damage, others modify it.\n        if (ammoData.replaceDamage) {\n            action.damage.override = { name: equippedAmmo.name as string, value: Number(ammoData.damage) };\n        } else {\n            action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name as string, ammoData.damage);\n        }\n\n        // add mods to ap from ammo\n        action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name as string, ammoData.ap);\n\n        if (ammoData.accuracy) limitParts.addUniquePart(equippedAmmo.name as string, ammoData.accuracy);\n\n        // override element\n        if (ammoData.element) {\n            action.damage.element.value = ammoData.element;\n        } else {\n            action.damage.element.value = action.damage.element.base;\n        }\n\n        // override damage type\n        if (ammoData.damageType) {\n            action.damage.type.value = ammoData.damageType;\n        } else {\n            action.damage.type.value = action.damage.type.base;\n        }\n\n        // Apply collected modifications.\n        action.limit.mod = limitParts.list;\n    },\n\n    /**\n     * Prepare general action data.\n     *\n     * This is used for all item type having actions and includes weapon value calculation as well.\n     *\n     * @param action The systems data action property to be altered.\n     * @param equippedMods Those item mods that are equipped\n     */\n    prepareWithMods(action: Shadowrun.ActionRollData, equippedMods: SR6Item[]) {\n        // @ts-expect-error\n        // Due to faulty template value items without a set operator will have a operator literal instead since 0.7.10.\n        if (action.damage.base_formula_operator === '+') {\n            action.damage.base_formula_operator = 'add';\n        }\n\n        // Collect weapon value modifications from modifications.\n        const limitParts = new PartsList(action.limit.mod);\n        const dpParts = new PartsList(action.dice_pool_mod);\n        equippedMods.forEach((mod) => {\n            const modification = mod.asModification();\n            if (!modification) return;\n\n            if (modification.system.accuracy) limitParts.addUniquePart(mod.name as string, modification.system.accuracy);\n            if (modification.system.dice_pool) dpParts.addUniquePart(mod.name as string, modification.system.dice_pool);\n        });\n\n        // Apply collected modifications.\n        action.limit.mod = limitParts.list;\n        action.dice_pool_mod = dpParts.list;\n    },\n\n    /**\n     * Calculate the total values of action data.\n     *\n     * @param action To be altered action data.\n     */\n    calculateValues(action: Shadowrun.ActionRollData) {\n        action.damage.value = Helpers.calcTotal(action.damage);\n        action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\n        action.limit.value = Helpers.calcTotal(action.limit);\n    }\n}\n", "import { PartsList } from \"../../../parts/PartsList\";\nimport { SR6Item } from \"../../SR6Item\";\nimport { Helpers } from '../../../helpers';\n/**\n * Weapon item data preparation\n */\nexport const RangePrep = {\n    prepareData(range: Shadowrun.RangeWeaponData, equippedMods: SR6Item[]) {\n        RangePrep.clearMods(range);\n        RangePrep.prepareRecoilCompensation(range, equippedMods);\n    },\n\n    clearMods(range: Shadowrun.RangeWeaponData) {\n        range.rc.mod = [];\n    },\n    /**\n     * Prepare a ranged weapons recoil compensation.\n     *\n     * @param range The system range data for weapons to be altered.\n     * @param equippedMods Those item mods that are equipped.\n     */\n    prepareRecoilCompensation(range: Shadowrun.RangeWeaponData, equippedMods: SR6Item[]) {\n        const rangeParts = new PartsList<number>();\n\n        // Apply ammo recoil compensation.\n        equippedMods.forEach(mod => {\n            if (mod.system.rc) rangeParts.addPart(mod.name as string, mod.system.rc);\n        });\n        range.rc.mod = rangeParts.list;\n        range.rc.value = Helpers.calcTotal(range.rc);\n    }\n}\n", "/**\n * Adept power item data preparation\n */\n\nexport const AdeptPowerPrep = {\n    prepareBaseData(system: Shadowrun.AdeptPowerData) {\n        AdeptPowerPrep.prepareType(system);\n    },\n    /**\n     * Determine Adept Power Type based on action type.\n     * @param action \n     */\n    prepareType(system: Shadowrun.AdeptPowerData) {\n        system.type = system.action.type ? 'active' : 'passive';\n    }\n}", "import { SR6Actor } from '../actor/SR6Actor';\nimport { Helpers } from '../helpers';\nimport DamageData = Shadowrun.DamageData;\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport CharacterActorData = Shadowrun.CharacterData;\n\n/**\n * Soaking rules for actors\n */\nexport class SoakRules {\n    /**\n     * Reduces the damage value based on net hits and damage data and actor special rules\n     *\n     * @remarks\n     * Make sure that you first call modifyDamageType before you call this method\n     * to determine the correct damage type (physical, stun, matrix)\n     *\n     * @param damageData The incoming damage\n     * @param hits The number of hits on the soak tests\n     * @returns The updated damage data\n     */\n    static reduceDamage(actor: SR6Actor, damageData: DamageData, hits: number): ModifiedDamageData {\n\n        // Vehicles are immune to stun damage (electricity stun damage is handled in a different place)\n        // Note: This also takes care of the vehicle immunity, since physical damage that does not exceed armor\n        // will be converted to stun damage and then reduced to 0. This does not work with drones wearing armor\n        // but we do not support this.\n        if (damageData.type.value === 'stun' && actor.isVehicle()) {\n            return Helpers.reduceDamageByHits(damageData, damageData.value, 'SR6.VehicleStunImmunity');\n        }\n\n        return Helpers.reduceDamageByHits(damageData, hits, 'SR6.SoakTest');\n    }\n\n    /**\n     * Turns physical damage to stun damage based on the damage and armor\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n    static modifyPhysicalDamageForArmor(damage: DamageData, actor : SR6Actor): DamageData {\n        const updatedDamage = foundry.utils.duplicate(damage) as DamageData;\n\n        if (damage.type.value === 'physical') {\n            // Physical damage is only transformed for some actors\n            if (!actor.isCharacter() && !actor.isSpirit() && !actor.isCritter() && !actor.isVehicle()) {\n                return updatedDamage;\n            }\n\n            const modifiedArmor = actor.getModifiedArmor(damage);\n            if (modifiedArmor) {\n                const armorWillChangeDamageType = modifiedArmor.value > damage.value;\n\n                if (armorWillChangeDamageType) {\n                    updatedDamage.type.value = 'stun';\n                }\n            }\n        }\n\n        return updatedDamage;\n    }\n\n    /**\n     * Turns matrix damage to biofeedback based on the actor state\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n    static modifyMatrixDamageForBiofeedback(damage: DamageData, actor : SR6Actor): DamageData {\n        const updatedDamage = foundry.utils.duplicate(damage) as DamageData;\n\n        if (damage.type.value === 'matrix') {\n            const actorData = actor.system as CharacterActorData;\n\n            // Only characters can receive biofeedback damage at the moment.\n            // TODO Technomancer and Sprites special rules?\n            if (!actor.isCharacter()) {\n                return updatedDamage;\n            }\n\n            if (actorData.initiative.perception === 'matrix') {\n                if (actorData.matrix.hot_sim) {\n                    updatedDamage.type.value = 'physical';\n                }\n                else {\n                    updatedDamage.type.value = 'stun';\n                }\n            }\n        }\n\n        return updatedDamage;\n    }\n}\n", "import {SR} from \"../constants\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {Helpers} from \"../helpers\";\nimport DamageData = Shadowrun.DamageData;\nimport ValueField = Shadowrun.ValueField;\nimport {SoakRules} from \"./SoakRules\";\nimport {SR6Actor} from \"../actor/SR6Actor\";\n\nexport class CombatRules {\n    static iniOrderCanDoAnotherPass(scores: number[]): boolean {\n        for (const score of scores) {\n            if (CombatRules.iniScoreCanDoAnotherPass(score)) return true;\n        }\n        return false;\n    }\n    /**\n     * Check if there is another initiative pass possible with the given score.\n     * @param score\n     * @return true means another initiative pass is possible\n     */\n    static iniScoreCanDoAnotherPass(score: number): boolean {\n        return CombatRules.reduceIniResultAfterPass(score) > 0;\n    }\n    /**\n     * Reduce the given initiative score according to @PDF SR5#159\n     * @param score This given score can't be reduced under zero.\n     */\n    static reduceIniResultAfterPass(score: number): number {\n        return Math.max(score + SR.combat.INI_RESULT_MOD_AFTER_INI_PASS, 0);\n    }\n\n    /**\n     * Reduce the initiative score according to the current initiative pass @PDF SR5#160.\n     * @param score\n     * @param pass The current initiative pass. Each combat round starts at the initiative pass of 1.\n     */\n    static reduceIniOnLateSpawn(score: number, pass: number): number {\n        // Assure valid score ranges.\n        // Shift initiative pass value range from min 1 to min 0 for multiplication.\n        pass = Math.max(pass - 1, 0);\n        score = Math.max(score, 0);\n\n        // Reduce the new score according to. NOTE: Modifier is negative\n        const reducedScore = score + pass * SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\n        return CombatRules.getValidInitiativeScore(reducedScore);\n    }\n\n    /**\n     * Return a valid initiative score on updates or score changes\n     *\n     * @param score The initiative score after it's been updated.\n     * @returns A valid initiative score\n     */\n    static getValidInitiativeScore(score: number): number {\n        return Math.max(score, 0);\n    }\n\n    /**\n     * Determine if an attack hits the defender based on their hits.\n     *\n     * According to combat sequence (SR5#173) part defend.\n     *\n     * @param attackerHits\n     * @param defenderHits\n     * @returns true, when the attack hits.\n     */\n    static attackHits(attackerHits: number, defenderHits: number): boolean {\n        return attackerHits > defenderHits;\n    }\n\n    /**\n     * Determine if an attack grazes the defender.\n     *\n     * According to combat sequence (SR5#173) part defend.\n     *\n     * @param attackerHits\n     * @param defenderHits\n     * @returns true, when the attack grazes.\n     */\n    static attackGrazes(attackerHits: number, defenderHits: number): boolean {\n        return attackerHits === defenderHits;\n    }\n\n    /**\n     * Determine if an attack misses the defender based on their hits.\n     *\n     * According to combat sequence (SR5#173) part defend.\n     *\n     * @param attackerHits\n     * @param defenderHits\n     * @returns true, when the attack hits.\n     */\n    static attackMisses(attackerHits: number, defenderHits: number): boolean {\n        return !CombatRules.attackHits(attackerHits, defenderHits);\n    }\n\n    /**\n     * Modify Damage according to combat sequence (SR5#173) part defend. Successful attack.\n     *\n     * @param defender The active defender\n     * @param attackerHits The attackers hits. Should be a positive number.\n     * @param defenderHits The attackers hits. Should be a positive number.\n     * @param damage Incoming damage to be modified\n     * @return A new damage object for modified damage.\n     */\n    static modifyDamageAfterHit(defender: SR6Actor, attackerHits: number, defenderHits: number, damage: DamageData): DamageData {\n        let modified = foundry.utils.duplicate(damage);\n\n        // netHits should never be below zero...\n        if (attackerHits < 0) attackerHits = 0;\n        if (defenderHits < 0) defenderHits = 0;\n\n        // SR5#173  Step3: Defend B.\n        PartsList.AddUniquePart(modified.mod, 'SR6.Attacker', attackerHits);\n        PartsList.AddUniquePart(modified.mod, 'SR6.Defender', -defenderHits);\n        modified.value = Helpers.calcTotal(modified, {min: 0});\n\n        // SR5#173 Step 3: Defend B.\n        modified = CombatRules.modifyDamageTypeAfterHit(modified, defender);\n\n        return modified;\n    }\n\n    /**\n     * Check if vehicle wouldn't take any damage due to vehicle armor rules (SR5#199)\n     * @param incomingDamage The incoming damage\n     * @param attackerHits The attackers hits. Should be a positive number.\n     * @param defenderHits The attackers hits. Should be a positive number.\n     * @param actor The active defender\n     */\n    static isBlockedByVehicleArmor(incomingDamage: DamageData, attackerHits: number, defenderHits: number, actor: SR6Actor): boolean {\n        if(!actor.isVehicle()) {\n            return false;\n        }\n\n        return CombatRules.isDamageLessThanArmor(incomingDamage, attackerHits, defenderHits, actor);\n    }\n\n    /**\n     * Check if actor wouldn't take any damage due to hardened armor rules (SR5#397)\n     * @param incomingDamage The incoming damage\n     * @param attackerHits The attackers hits. Should be a positive number.\n     * @param defenderHits The attackers hits. Should be a positive number.\n     * @param actor The active defender\n     */\n    static isBlockedByHardenedArmor(incomingDamage: DamageData, attackerHits: number = 0, defenderHits: number = 0, actor: SR6Actor): boolean {\n        const armor = actor.getArmor(incomingDamage);\n\n        if(!armor.hardened) {\n            return false;\n        }\n\n        return CombatRules.isDamageLessThanArmor(incomingDamage, attackerHits, defenderHits, actor);\n    }\n\n    /**\n     * Check if incoming damage (modified by net hits) is less than the actor's armor (modified by AP).\n     * Used for vehicle armor, hardened armor, and physical -> stun damage logic\n     * @param incomingDamage The incoming damage\n     * @param attackerHits The attackers hits. Should be a positive number.\n     * @param defenderHits The attackers hits. Should be a positive number.\n     * @param actor The active defender\n     */\n    static isDamageLessThanArmor(incomingDamage: DamageData, attackerHits: number, defenderHits: number, actor: SR6Actor): boolean {\n        const modifiedDamage = CombatRules.modifyDamageAfterHit(actor, attackerHits, defenderHits, incomingDamage);\n\n        const modifiedAv = actor.getArmor(incomingDamage).value;\n        const modifiedDv = modifiedDamage.value;\n\n        return modifiedDv < modifiedAv;\n    }\n\n    /**\n     * Check if vehicle wouldn't take any damage due to non-electric stun damage\n     * @param incomingDamage The incoming damage\n     * @param actor The active defender\n     */\n    static doesNoPhysicalDamageToVehicle(incomingDamage: DamageData, actor: SR6Actor): boolean {\n        return actor.isVehicle() && incomingDamage.type.value === 'stun' && incomingDamage.element.value !== \"electricity\";\n    }\n\n    /**\n     * Modify damage according to suppression defense (SR5#179). Successful attack.\n     *\n     * In case of suppression a successful attack just does weapon damage (base + ammunition)\n     *\n     * @param damage The incoming weapon damage of the attack, unaltered.\n     */\n    static modifyDamageAfterSuppressionHit(damage: DamageData): DamageData {\n        return foundry.utils.duplicate(damage);\n    }\n\n    /**\n     * Modify damage according to combat sequence (SR5#173 part defend. Missing attack.\n     * @param damage Incoming damage to be modified\n     * @param isHitWithNoDamage Optional parameter used for physical defense tests when attack hits but will deal no damage\n     * @return A new damage object for modified damage.\n     */\n    static modifyDamageAfterMiss(damage: DamageData, isHitWithNoDamage?: boolean): DamageData {\n        const modifiedDamage = foundry.utils.duplicate(damage);\n\n        // Keep base and modification intact, only overwriting the result.\n        modifiedDamage.override = {name: 'SR6.TestResults.Success', value: 0};\n        Helpers.calcTotal(modifiedDamage, {min: 0});\n        modifiedDamage.ap.override = {name: 'SR6.TestResults.Success', value: 0};\n        Helpers.calcTotal(modifiedDamage.ap);\n        modifiedDamage.type.value = '';\n\n        // If attack hits but deals no damage, keep the element of the attack for any side effects.\n        if(!isHitWithNoDamage) {\n            modifiedDamage.element.value = '';\n        }\n\n        return modifiedDamage;\n    }\n\n    /**\n     * Modify damage according to combat sequence (SR5#173 part defend B). Damage resistance.\n     *\n     * @param actor The actor resisting the damage\n     * @param damage Incoming damage to be modified.\n     * @param hits The resisting tests hits\n     * @return A new damage object for modified damage.\n     */\n    static modifyDamageAfterResist(actor: SR6Actor, damage: DamageData, hits: number): DamageData {\n        if (hits < 0) hits = 0;\n\n        // modifiedDamage.mod = PartsList.AddUniquePart(modifiedDamage.mod, 'SR6.Resist', -hits);\n        let {modified} = SoakRules.reduceDamage(actor, damage, hits);\n\n        Helpers.calcTotal(modified, {min: 0});\n\n        return modified;\n    }\n\n    /**\n     * Modify amor according to combat sequence (SR5#173) part defend.\n     *\n     * @param armor An armor value to be modified.\n     * @param damage The damage containing the armor penetration to be applied.\n     * @returns A new armor value for modified armor\n     */\n    static modifyArmorAfterHit(armor: ValueField, damage: DamageData): ValueField {\n        const modifiedArmor = foundry.utils.duplicate(armor);\n\n        // ignore ap without effect\n        if (damage.ap.value <= 0) return modifiedArmor;\n\n        console.error('Check if ap is a negative value or positive value during weapon item configuration');\n        PartsList.AddUniquePart(modifiedArmor.mod, 'SR6.AP', damage.ap.value);\n        modifiedArmor.value = Helpers.calcTotal(modifiedArmor, {min: 0});\n\n        return modifiedArmor;\n    }\n\n    /**\n     * Changes the damage type based on the incoming damage type and the actor state (armor, matrix perception..)\n     * @param damage The incoming damage\n     * @param actor The actor affected by the damage\n     * @returns The updated damage data\n     */\n    static modifyDamageTypeAfterHit(damage: DamageData, actor : SR6Actor) : DamageData {\n        // Careful, order of damage conversion is very important\n        // Electricity stun damage is considered physical for vehicles\n        let updatedDamage = foundry.utils.duplicate(damage) as DamageData;\n        if (actor.isVehicle() && updatedDamage.element.value === 'electricity' && updatedDamage.type.value === 'stun') {\n            updatedDamage.type.value = 'physical';\n        }\n\n        const damageSourceItem = Helpers.findDamageSource(damage);\n        if (damageSourceItem && damageSourceItem.isDirectCombatSpell) {\n            // Damage from direct combat spells is never converted\n            return updatedDamage;\n        }\n\n        updatedDamage = SoakRules.modifyPhysicalDamageForArmor(updatedDamage, actor);\n        return SoakRules.modifyMatrixDamageForBiofeedback(updatedDamage, actor);\n    }\n\n    /**\n     * Determine the amount of initiative score modifier change.\n     *\n     * According to SR5#170 'Wound Modifiers'.\n     *\n     * @param woundModBefore A negative wound modifier, before taking latest damage.\n     * @param woundModAfter A negative wound modifier, after taking latest damage.\n     * @return An to be applied initiative score modifier\n     */\n    static combatInitiativeScoreModifierAfterDamage(woundModBefore: number, woundModAfter: number): number {\n        // Make sure no positive values are passed into.\n        return Math.min(woundModBefore, 0) - Math.min(woundModAfter, 0);\n    }\n\n    /**\n     * Can a defense mode be used with a specific initiative score\n     *\n     * @param iniScore The combatants ini score\n     * @param defenseIniScoreMod  The defense modes ini score modifier\n     */\n    static canUseActiveDefense(iniScore: number, defenseIniScoreMod: number): boolean {\n        // Validate input values against valid value range.\n        return (Math.max(iniScore, 0) + Math.min(defenseIniScoreMod, 0)) < 0\n    }\n\n    /**\n     * Calculate defense modifier for multiple previous attacks in a combat turn.\n     *\n     * See SR5#189 'Defense Modifiers Table'.\n     *\n     * @param attacks Amount of attacks within the current combat turn\n     * @returns A negative modifier or zero to be applied on physical defense tests.\n     */\n    static defenseModifierForPreviousAttacks(attacks: number): number {\n        return Math.max(attacks, 0) * -1;\n    }\n\n    /**\n     * Calculate the initiative score adjustment to be made for damage taken during active combat\n     *\n     * See SR6.160 'Changing Initiative'\n     *\n     * @param woundsBefore Wound modifier (-2) before damage has been taken\n     * @param woundsAfter Wound modifier (-3) after damage has been taken\n     */\n    static initiativeScoreWoundAdjustment(woundsBefore: number, woundsAfter: number) {\n        return woundsAfter - woundsBefore;\n    }\n}\n", "export class MeleeRules {\n    /**\n     * Determine melee defense reach modifier according to Meele Attack (SR5#186)\n     *\n     * @param incomingReach The attackers reach value\n     * @param defendingReach The defenders reach value\n     */\n    static defenseReachModifier(incomingReach: number, defendingReach: number): number {\n        return defendingReach - incomingReach;\n    }\n}", "export interface FormDialogData extends Dialog.Data{\n\ttemplateData: object;\n\ttemplatePath: string;\n\tonAfterClose?: Function;\n}\n\nexport interface FormDialogOptions extends DialogOptions {\n    // When true, will apply dialog form element inputs to this.data.\n    applyFormChangesOnSubmit: boolean | null\n}\n\n/**\n * A FormDialog is the FormApplication equivalent for Dialogs.\n *\n * It will look for form elements and apply value changes to the local data property according to the name attribute\n * of the form element. This works the same as it does with general FoundryVTT Applications.\n */\nexport class FormDialog extends Dialog<FormDialogOptions> {\n    selection: object;\n    selectedButton: string;\n    form: HTMLFormElement;\n\n    _onAfterClose: Function;\n    _selectionPromise: Promise<object>;\n    _selectionResolve: Function;\n    _selectionReject: Function;\n    _templateData: object;\n    _templatePath: string;\n\n    constructor(data: FormDialogData, options?: FormDialogOptions) {\n        super(data, options);\n\n        const {templateData, templatePath} = data;\n        this._templateData = templateData;\n        this._templatePath = templatePath;\n\n        this._onAfterClose = data.onAfterClose || this.onAfterClose;\n\n        this.selection = this._emptySelection();\n\n        this._selectionPromise = new Promise((resolve, reject) => {\n            this._selectionResolve = resolve;\n            // Reject is stored, but never used in favor of FormDialog.canceled\n            this._selectionReject = reject;\n        });\n    }\n\n    override async close() {\n        await super.close();\n\n        if (this.canceled) {\n            // Delay resolving the dialog promise to avoid Foundry calling this.element.remove(), removing all open dialogs.\n            setTimeout(() => this._selectionResolve(this.selection), 250);\n        }\n    }\n\n    override activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        html.on(\"change\", \"input,select,textarea\", this._onChangeInput.bind(this));\n    }\n\n\n    override async submit(button) {\n        this.selectedButton = button.name ?? button.label;\n\n        this.applyFormData();\n\n        super.submit(button);\n        // @ts-expect-error\n        await this.afterSubmit(\"jQuery\" in this.options ? this.element : this.element [0]);\n    }\n\n    async afterSubmit(html: JQuery) {\n        // Await in case of a possible async handler.\n        this.selection = await this._onAfterClose(html, this.selectedButton);\n\n        // Delay resolving the dialog promise to avoid Foundry calling this.element.remove(), removing all open dialogs.\n        setTimeout(() => this._selectionResolve(this.selection), 250);\n    }\n\n    /**\n     * Allow Foundry Sheet behavior for dialogs with complex forms.\n     * @returns\n     */\n    applyFormData() {\n        if (!this.options.applyFormChangesOnSubmit) return;\n\n        if ( !this.form ) throw new Error(`The FormApplication subclass has no registered form element`);\n        const fd = new FormDataExtended(this.form, {editors: {}});\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const data = fd.object;\n\n        this._updateData(data);\n    }\n\n    _updateData(data) {\n        //@ts-expect-error // TODO: FormDialog.data typing is missing\n        foundry.utils.mergeObject(this.data.templateData, data);\n    }\n\n    //@ts-expect-error\n    getData() {\n        // Dialog.getData expects buttons to be set.\n        this.data.buttons = this.data.buttons || this.buttons;\n        this._amendButtonsWithName(this.data.buttons);\n\n        // Call pre-configured Dialog.getData.\n        const data = super.getData();\n\n        // Merge default Dialog data with whatever's been given.\n        return foundry.utils.mergeObject(data, {\n            ...this.data,\n            content: ''\n        });\n    }\n\n    /**\n     * Dialog button object to be rendered underneath dialog content.\n     * Follows Dialog.data.buttons typing.\n     */\n    get buttons() {\n        return {}\n    }\n\n    /**\n     * Template file to render the inner dialog content with.\n     * Will be given FormDialog.data to render.\n     */\n    get templateContent(): string {\n        return '';\n    }\n\n    async select(): Promise<any> {\n        await this.render(true);\n\n        if (this._selectionPromise === undefined || this.selection === undefined) {\n            return this._emptySelection();\n        }\n        return await this._selectionPromise;\n    }\n\n    _emptySelection(): object {\n        return {};\n    }\n\n    /** Dialog has been confirmed and something has been selected.\n     */\n    get selected(): boolean {\n        return !this.canceled;\n    }\n\n    /** Dialog has been canceled and nothing has been selected.\n     *\n     * Will also report cancel if a cancel button has been defined.\n     */\n    get canceled(): boolean {\n        return !this.selectedButton || this.selectedButton === 'cancel';\n    }\n\n    /** @override */\n    static getButtons(): Record<string, object> {\n        return {};\n    }\n\n    /** Allow for the selected button to be addressed by its key, not it's localized label.\n     */\n    _amendButtonsWithName(buttons) {\n        Object.keys(buttons).forEach(name => buttons[name].name = name);\n    }\n\n    /**\n     * See FormApplication._renderInner\n     */\n    override async _renderInner(data): Promise<JQuery<HTMLElement>> {\n        const templatePath = data.templatePath || this.templateContent;\n        if (templatePath)\n            data.content = await renderTemplate(data.templatePath || this.templateContent,\n                                                data.templateData || data);\n\n        const html = await super._renderInner(data);\n        this.form = html.filter((i, el) => el instanceof HTMLFormElement)[0] as HTMLFormElement;\n        if ( !this.form ) this.form = html.find(\"form\")[0];\n        return html;\n    }\n\n    /**\n     * Based on FormDialog.options configuration apply changes to data.\n     */\n    async _onChangeInput(event) {\n        const el = event.target;\n\n        if ( this.options.applyFormChangesOnSubmit ) {\n            this.applyFormData();\n            this.render();\n        }\n    }\n\n    /**\n     * Sub dialogs should override this method for custom handling of closing dialog.\n     */\n    onAfterClose(html: JQuery<HTMLElement>) {}\n}", "import {FormDialog, FormDialogData} from \"./FormDialog\";\nimport DamageData = Shadowrun.DamageData;\nimport {SR6Actor} from \"../../actor/SR6Actor\";\n\nexport class DamageApplicationDialog extends FormDialog {\n\n    constructor(actors : SR6Actor[], damage: DamageData, options?) {\n        const dialogData = DamageApplicationDialog.getDialogData(actors, damage);\n        super(dialogData, options);\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'damage-application';\n        // TODO: Class Dialog here is needed for dialog button styling.\n        options.classes = ['sr6', 'form-dialog'];\n        options.resizable = true;\n        options.height = 'auto';\n        return options;\n    }\n\n    static getDialogData(actors : SR6Actor[], damage: DamageData): FormDialogData {\n        const title = game.i18n.localize('SR6.DamageApplication.Title');\n        const templatePath = 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/damage-application.html';\n\n        // Simplify / refactor this\n        const actorDamage : any = actors.map(a => { return {actor:a} }) ;\n        const templateData = {\n            damage,\n            actorDamage,\n        };\n\n        const buttons = {\n            damage: {\n                label: game.i18n.localize('SR6.DamageApplication.ApplyDamage')\n            }\n        }\n\n        const onAfterClose = () => actorDamage;\n\n        return {\n            title,\n            templatePath,\n            templateData,\n            onAfterClose,\n            buttons,\n            default: 'damage'\n        } as unknown as FormDialogData;\n    }\n}\n", "import {DamageApplicationDialog} from \"../../apps/dialogs/DamageApplicationDialog\";\nimport {SR6Actor} from \"../SR6Actor\";\nimport DamageData = Shadowrun.DamageData;\nimport DamageType = Shadowrun.DamageType;\nimport DamageElement = Shadowrun.DamageElement;\nimport { Helpers } from '../../helpers';\nimport { TestCreator } from '../../tests/TestCreator';\n\nexport class DamageApplicationFlow {\n\n    /**\n     * Runs the flow to apply damage to multiple actors with user interaction\n     * This will also take care of changing the damage type if necessary\n     * @param actors The actors that are affected\n     * @param damage The damage the actors will receive\n     */\n    async runApplyDamage(actors: SR6Actor[], damage : DamageData) {\n        // Show user the affected actors and the damage values\n        const damageApplicationDialog = await new DamageApplicationDialog(actors, damage);\n        await damageApplicationDialog.select();\n\n        if (damageApplicationDialog.canceled) {\n            return;\n        }\n\n        actors.forEach((actor) => {\n            this.applyDamageToActor(actor, damage);\n        });\n    }\n\n    /** Apply all types of damage to the actor.\n     *\n     * @param damage The damage to apply. Stun damage will be turned to physical for grunts.\n     */\n    async applyDamageToActor(actor : SR6Actor, damage: DamageData) {\n        if (damage.value <= 0) {\n            return;\n        }\n\n        // We change the damage type from stun to physical for grunts (they do not have a stun track)\n        // We are not doing this earlier in the soak flow to avoid confusing the user\n        damage = this.changeStunToPhysicalForGrunts(actor, damage);\n\n        await actor.addDamage(damage);\n    }\n\n    private changeStunToPhysicalForGrunts(actor : SR6Actor, damage: DamageData): DamageData {\n        const updatedDamage = foundry.utils.duplicate(damage) as DamageData;\n        if (!actor.isGrunt()) {\n            return updatedDamage;\n        }\n\n        // Grunts do not have a stun track and will always receive physical damage.\n        if (damage.type.value === 'stun') {\n            updatedDamage.type.value = 'physical';\n        }\n\n        return updatedDamage;\n    }\n\n    static handleRenderChatMessage(app: ChatMessage, html, data) {\n        html.on('click', '.apply-damage', event => DamageApplicationFlow.chatMessageActionApplyDamage(html, event));\n    }\n\n    /**\n     * When triggered from a chat message\n     * @param html\n     * @param event\n     * @returns\n     */\n    static async chatMessageActionApplyDamage(html, event) {\n        event.stopPropagation();\n        event.preventDefault();\n        const applyDamage = $(event.currentTarget);\n\n        const value = Number(applyDamage.data('damageValue'));\n        const type = String(applyDamage.data('damageType')) as DamageType;\n        const ap = Number(applyDamage.data('damageAp'));\n        const element = String(applyDamage.data('damageElement')) as DamageElement;\n        let damage = Helpers.createDamageData(value, type, ap, element);\n\n        let actors = Helpers.getSelectedActorsOrCharacter();\n\n        // Should no selection be available try guessing.\n        if (actors.length === 0) {\n            const messageId = html.data('messageId');\n\n            const test = await TestCreator.fromMessage(messageId);\n            if (!test) return\n            await test.populateDocuments();\n\n            // If targeting is available, use that.\n            if (test.hasTargets) test.targets.forEach(target => actors.push(target.actor as SR6Actor));\n            // Otherwise apply to the actor casting the damage.\n            else actors.push(test.actor as SR6Actor);\n        }\n\n        // Abort if no actors could be collected.\n        if (actors.length === 0) {\n            ui.notifications?.warn(game.i18n.localize(\"SR6.Warnings.TokenSelectionNeeded\"));\n            return;\n        }\n\n        await new DamageApplicationFlow().runApplyDamage(actors, damage);\n    }\n}\n", "import {FormDialog, FormDialogData, FormDialogOptions} from \"./FormDialog\";\nimport {SuccessTest} from \"../../tests/SuccessTest\";\nimport { SuccessTestData } from '../../tests/SuccessTest';\nimport {SR6} from \"../../config\";\nimport {Helpers} from \"../../helpers\";\nimport { Translation } from '../../utils/strings';\n\nexport interface TestDialogData extends FormDialogData {\n    test: SuccessTest\n    rollMode: string\n    rollModes: CONFIG.Dice.RollModes\n    config: typeof SR6\n}\n\n/**\n * A way of allowing tests to inject handlers without having to sub-class the whole dialog\n */\nexport interface TestDialogListener {\n    query: string\n    on: string\n    callback: (event: JQuery<HTMLElement>, dialog: TestDialog) => void\n}\n\n/**\n * TODO: Add TestDialog JSDoc\n */\nexport class TestDialog extends FormDialog {\n    override data: TestDialogData\n    // Listeners as given by the dialogs creator.\n    listeners: TestDialogListener[]\n\n    // @ts-expect-error // TODO: default option value with all the values...\n    constructor(data, options: FormDialogOptions = {}, listeners: TestDialogListener[]=[]) {\n        // Allow for Sheet style form submit value handling.\n        options.applyFormChangesOnSubmit = true;\n        super(data, options);\n\n        this.listeners = listeners;\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'test-dialog';\n        // TODO: Class Dialog here is needed for dialog button styling.\n        options.classes = ['sr6', 'form-dialog'];\n        options.resizable = true;\n        options.height = 'auto';\n        // @ts-expect-error\n        options.width = 'auto';\n        return options;\n    }\n\n    override activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        // Handle in-dialog entity links to render the respective sheets.\n        html.find('.entity-link').on('click', Helpers.renderEntityLinkSheet)\n\n        this._injectExternalActiveListeners(html);\n    }\n\n    /**\n     * Inject the listeners while binding local `this` to them.\n     */\n    _injectExternalActiveListeners(html: JQuery) {\n        for (const listener of this.listeners) {\n            //@ts-expect-error\n            html.find(listener.query).on(listener.on, (event: JQuery<HTMLElement>) => listener.callback.bind(this.data.test)(event, this));\n        }\n    }\n\n    /**\n     * Overwrite this method to provide an alternative template for the dialog inner content.\n     *\n     * data.templatePath work's the same and can be used as well.\n     */\n    override get templateContent(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/success-test-dialog.html';\n    }\n\n    //@ts-expect-error\n    getData() {\n        const data = super.getData() as unknown as TestDialogData;\n\n        //@ts-expect-error //TODO: default to general roll mode user setting\n        data.rollMode = data.test.data.options?.rollMode;\n        data.rollModes = CONFIG.Dice.rollModes;\n        data.default = 'roll';\n\n        // Add in general SR5 config to allow access to general values.\n        data.config = SR6;\n\n        return data;\n    }\n\n    /**\n     * Overwrite this method to provide the dialog application title.\n     */\n    override get title() {\n        const data = this.data as unknown as TestDialogData;\n        return game.i18n.localize(data.test.title as Translation);\n    }\n\n    /**\n     * Overwrite this method to provide dialog buttons.\n     */\n    override get buttons() {\n        // Check if this is a skill test and if the skill can be rolled\n        const canRoll = this._canRollSkill();\n\n        return {\n            roll: {\n                label: game.i18n.localize('SR6.Roll'),\n                icon: '<i class=\"fas fa-dice-six\"></i>',\n                disabled: !canRoll,\n                title: !canRoll ? game.i18n.localize('SR6.Warnings.SkillCantBeRolled') : ''\n            },\n            cancel: {\n                label: game.i18n.localize('SR6.Dialogs.Common.Cancel')\n            }\n        };\n    }\n\n    /**\n     * Check if the skill in this test can be rolled\n     * @returns true if the skill can be rolled, false otherwise\n     */\n    _canRollSkill(): boolean {\n        const test = this.data.test;\n\n        // If this isn't a skill test, we can always roll\n        if (!test.data.action || !test.data.action.skill) return true;\n\n        // If we don't have an actor, we can't check the skill\n        if (!test.actor) return true;\n\n        // Get the skill from the actor\n        const skill = test.actor.getSkill(test.data.action.skill) ||\n                      test.actor.getSkill(test.data.action.skill, {byLabel: true});\n\n        // If we don't have a skill, we can't roll it\n        if (!skill) return false;\n\n        // Check if the skill can be rolled\n        // Make sure the rules object exists before accessing it\n        // @ts-ignore\n        if (game.shadowrun6e && game.shadowrun6e.rules && game.shadowrun6e.rules.SkillRules) {\n            // @ts-ignore\n            return game.shadowrun6e.rules.SkillRules.allowRoll(skill);\n        }\n\n        // If we can't access the rules, assume the skill can be rolled\n        return true;\n    }\n\n    /**\n     * Callback for after the dialog has closed.\n     * @param html\n     */\n    override onAfterClose(html: JQuery<HTMLElement>): SuccessTestData {\n        return this.data.test.data;\n    }\n\n    /**\n     * Update ValueField data used on the template and alter automatic calculation with manual override values, where\n     * necessary.\n     *\n     * @param data An object with keys in Foundry UpdateData style {'key.key.key': value}\n     */\n    override _updateData(data) {\n        // The user canceled their interaction by canceling, don't apply form changes.\n        if (this.selectedButton === 'cancel') return;\n\n        // First, apply changes to ValueField style values in a way that makes sense.\n        Object.entries(data).forEach(([key, value]) => {\n            // key is expected to be relative from TestDialog.data and begin with 'test'\n            const valueField = foundry.utils.getProperty(this.data, key);\n            if (foundry.utils.getType(valueField) !== 'Object' || !valueField.hasOwnProperty('mod')) return;\n\n            // Remove from further automatic data merging.\n            delete data[key]\n\n            // Don't apply an unneeded override.\n            if (valueField.value === value) return;\n\n            if (value === null || value === '')\n                delete valueField.override\n            else\n                valueField.override = {name: 'SR6.ManualOverride', value: Number(value)};\n        });\n\n        // Second, apply generic values.\n        foundry.utils.mergeObject(this.data, data);\n\n        // Give tests opportunity to change resulting values on the fly.\n        this.data.test.prepareBaseValues();\n        this.data.test.calculateBaseValues();\n        this.data.test.validateBaseValues();\n    }\n}\n", "import { SR6Item } from './item/SR6Item';\n\n/**\n * This class has been mostly copied from the FoundryVTT Dnd5e system.\n *\n * As to that systems license agreement, here is the license agreement for parts this file.\n *\n * Copyright 2021 Andrew Clayton\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Place a template based on item blast data with\n * - preview on mouse movement\n * - confirm and place template preview on left click\n * - cancel template preview on right click\n *\n */\nexport default class Template extends MeasuredTemplate {\n    override x: number;\n    override y: number;\n    // The source item of this template.\n    // NOTE: This is never really used.\n    item?: SR6Item;\n    // Will be called once placement is confirmed or canceled.\n    onComplete?: () => void;\n\n    /**\n     * Track the timestamp when the last mouse move event was captured.\n     */\n    #moveTime: number = 0;\n\n    /* -------------------------------------------- */\n\n    /**\n     * The initially active CanvasLayer to re-activate after the workflow is complete.\n     */\n    #initialLayer: CanvasLayer;\n\n    /* -------------------------------------------- */\n\n    /**\n     * Track the bound event handlers so they can be properly canceled later.\n     */\n    #events: any;\n\n    /**\n     * Create a template preview based on given items blast data.\n     *\n     * This is factory method to create a new template instance.\n     *\n     * @param item Item containing any blast data.\n     * @param onComplete Handler to call when template is placed.\n     * @returns Template instance. Not drawn on scene.\n     */\n    static fromItem(item: SR6Item, onComplete?: () => void): Template | undefined {\n        if (!canvas.scene) return;\n\n        // Either use blast data or default values.\n        const blast = item.getBlastData();\n\n        // Cast string to const for type const string union to match.\n        const templateShape = 'circle' as const;\n\n        const templateData = {\n            t: templateShape,\n            user: game.user?.id,\n            direction: 0,\n            x: 0,\n            y: 0,\n            fillColor: game.user?.color,\n            distance: blast?.radius || 1, // Adhere to DataModel validation.\n            dropoff: blast?.dropoff || 0\n        };\n\n        // Use overwritten MeasuredTemplate class to create a new instance.\n        const cls = CONFIG.MeasuredTemplate.documentClass;\n        const template = new cls(templateData, { parent: canvas.scene });\n        const object = new this(template);\n\n        // Connect system information to template.\n        object.item = item;\n        object.onComplete = onComplete;\n\n        return object;\n    }\n\n    /**\n     * Draw a preview of this Template instance on the currently active scene.\n     */\n    async drawPreview() {\n        if (!canvas.ready || !this.layer.preview) return;\n\n        const initialLayer = canvas.activeLayer;\n        if (!initialLayer) return;\n\n        await this.draw();\n        this.layer.activate();\n        this.layer.preview.addChild(this);\n        return this.activatePreviewListeners(initialLayer);\n    }\n\n    activatePreviewListeners(initialLayer: CanvasLayer) {\n        return new Promise((resolve, reject) => {\n            if (!canvas.ready || !canvas.stage || !canvas.app) return;\n\n            this.#initialLayer = initialLayer;\n            this.#events = {\n                cancel: this._onCancelPlacement.bind(this),\n                confirm: this._onConfirmPlacement.bind(this),\n                move: this._onMovePlacement.bind(this),\n                resolve,\n                reject,\n                rotate: this._onRotatePlacement.bind(this)\n            };\n\n            // Activate listeners\n            canvas.stage?.on(\"mousemove\", this.#events.move);\n            canvas.stage?.on(\"mousedown\", this.#events.confirm);\n            canvas.app.view.oncontextmenu = this.#events.cancel;\n            canvas.app.view.onwheel = this.#events.rotate;\n        });\n    }\n    /**\n     * Shared code for when template placement ends by being confirmed or canceled.\n    * @param {Event} event  Triggering event that ended the placement.\n    */\n    async _finishPlacement(event) {\n        if (!canvas.stage || !canvas.app) return;\n\n        // @ts-expect-error TEST\n        this.layer._onDragLeftCancel(event);\n        canvas.stage.off(\"mousemove\", this.#events.move);\n        canvas.stage.off(\"mousedown\", this.#events.confirm);\n        canvas.app.view.oncontextmenu = null;\n        canvas.app.view.onwheel = null;\n        this.#initialLayer.activate();\n\n        if (this.onComplete) this.onComplete();\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Move the template preview when the mouse moves.\n     * @param {Event} event  Triggering mouse event.\n     */\n    _onMovePlacement(event) {\n        event.stopPropagation();\n        const now = Date.now(); // Apply a 20ms throttle\n        if (now - this.#moveTime <= 20) return;\n        const center = event.data.getLocalPosition(this.layer);\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const interval = canvas.grid.type === CONST.GRID_TYPES.GRIDLESS ? 0 : 2;\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const snapped = canvas.grid.getSnappedPosition(center.x, center.y, interval);\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        this.document.updateSource({ x: snapped.x, y: snapped.y });\n        this.refresh();\n        this.#moveTime = now;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Rotate the template preview by 3\u02DA increments when the mouse wheel is rotated.\n     * @param {Event} event  Triggering mouse event.\n     */\n    _onRotatePlacement(event) {\n        if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\n        event.stopPropagation();\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\n        const snap = event.shiftKey ? delta : 5;\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const update = { direction: this.document.direction + (snap * Math.sign(event.deltaY)) };\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        this.document.updateSource(update);\n        this.refresh();\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Confirm placement when the left mouse button is clicked.\n     * @param {Event} event  Triggering mouse event.\n     */\n    async _onConfirmPlacement(event) {\n        await this._finishPlacement(event);\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const interval = canvas.grid.type === CONST.GRID_TYPES.GRIDLESS ? 0 : 2;\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        const destination = canvas.grid.getSnappedPosition(this.document.x, this.document.y, interval);\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        this.document.updateSource(destination);\n        // @ts-expect-error TODO: foundry-vtt-types v11\n        this.#events.resolve(canvas.scene.createEmbeddedDocuments(\"MeasuredTemplate\", [this.document.toObject()]));\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Cancel placement when the right mouse button is clicked.\n     * @param {Event} event  Triggering mouse event.\n     */\n    async _onCancelPlacement(event) {\n        await this._finishPlacement(event);\n        this.#events.reject();\n    }\n}\n", "\nexport const TestRules = {\n\n    /**\n     * The modifier value applied for each extended test iteration\n     */\n    extendedModifierValue: -1,\n\n    /**\n     * Calculate the modifier for the next extended test run.\n     *\n     * @param current The current extended test modifier or zero.\n     */\n    calcNextExtendedModifier: (current: number = 0): number => {\n        return current + TestRules.extendedModifierValue;\n    },\n\n    /**\n     * Can a test be extended using the given pool value\n     * @param pool The pool of the test to be extended.\n     * @param threshold The extended test threshold to be met\n     * @param extendedHits The summed up hits across all test iterations\n     * @returns When true, test can be extended.\n     */\n    canExtendTest: (pool: number, threshold: number, extendedHits: number): boolean => {\n        // An extended test without a threshold set can extend until no pool is left.\n        if (threshold > 0)\n            return extendedHits < threshold && pool > 0;\n\n        return pool > 0;\n    },\n\n    /**\n     * Has a Success Test been successful?\n     * @param hits Amount of hits (reduced by limit) scored on a test\n     * @param threshold Threshold to reach for a test. 0 should none be applied.\n     * @returns true, when hits vs threshold score a success\n     */\n    success:(hits: number, threshold: number): boolean => {\n        // Don't allow any negative values.\n        hits = Math.max(hits, 0);\n        threshold = Math.max(threshold, 0);\n\n        // Either check against meeting the threshold or simply any hits.\n        if (threshold > 0) return hits >= threshold;\n        else return hits > 0;\n    },\n\n    /**\n     * Has a Success Test glitched?\n     *\n     * @param glitches The amount of dice with glitch value\n     * @param pool The amount of dice used for the test as a whole\n     * @returns If true, the given success test values result in a glitched test\n     */\n    glitched: (glitches: number, pool: number): boolean => {\n        // Don't allow any negative values.\n        glitches = Math.max(glitches, 0);\n        pool = Math.max(pool, 1);\n\n        return glitches > Math.floor(pool / 2);\n    },\n\n    /**\n     * Has a Success Test glitched critically?\n     *\n     * @param hits Amount of hits achieved\n     * @param glitched Has a test been glitched?\n     */\n    criticalGlitched: (hits: number, glitched: boolean): boolean => {\n        return hits === 0 && glitched;\n    }\n}", "export var ZERO_WIDTH_CHAR = '\\u200B';\nexport var ZERO_WIDTH_UNICODE_CHAR = `&#8203;`", "import {ZERO_WIDTH_CHAR} from './constants'\n\nexport const logger = {\n    isEnabled() { return window.TAGIFY_DEBUG ?? true},\n    log(...args){ this.isEnabled() && console.log('[Tagify]:', ...args) },\n    warn(...args) { this.isEnabled() && console.warn('[Tagify]:', ...args) }\n}\n\n// console.json = console.json || function(argument){\n//     for(var arg=0; arg < arguments.length; ++arg)\n//         console.log(  JSON.stringify(arguments[arg], null, 4)  )\n// }\n\n// const isEdge = /Edge/.test(navigator.userAgent)\nexport const sameStr = (s1, s2, caseSensitive, trim) => {\n    // cast to String\n    s1 = \"\"+s1;\n    s2 = \"\"+s2;\n\n    if( trim ){\n        s1 = s1.trim()\n        s2 = s2.trim()\n    }\n\n    return caseSensitive\n        ? s1 == s2\n        : s1.toLowerCase() == s2.toLowerCase()\n}\n\n\n// const getUID = () => (new Date().getTime() + Math.floor((Math.random()*10000)+1)).toString(16)\nexport const removeCollectionProp = (collection, unwantedProps) => collection && Array.isArray(collection) && collection.map(v => omit(v, unwantedProps))\n\nexport function omit(obj, props){\n    var newObj = {}, p;\n    for( p in obj )\n        if( props.indexOf(p) < 0 )\n            newObj[p] = obj[p]\n    return newObj\n}\n\nexport function decode( s ) {\n    var el = document.createElement('div');\n    return s.replace(/\\&#?[0-9a-z]+;/gi, function(enc){\n        el.innerHTML = enc;\n        return el.innerText\n    })\n}\n\n/**\n * utility method\n * https://stackoverflow.com/a/35385518/104380\n * @param  {String} s [HTML string]\n * @return {Object}   [DOM node]\n */\nexport function parseHTML( s ){\n    var parser = new DOMParser(),\n        node   = parser.parseFromString(s.trim(), \"text/html\");\n\n    return node.body.firstElementChild;\n}\n\n/**\n * Removed new lines and irrelevant spaces which might affect layout, and are better gone\n * @param {string} s [HTML string]\n */\nexport function minify( s ){\n    return s ? s\n        .replace(/\\>[\\r\\n ]+\\</g, \"><\")\n        .split(/>\\s+</).join('><').trim()\n        : \"\"\n}\n\nexport function removeTextChildNodes( elm ){\n    var iter = document.createNodeIterator(elm, NodeFilter.SHOW_TEXT, null, false),\n        textnode;\n\n    // print all text nodes\n    while (textnode = iter.nextNode()){\n        if( !textnode.textContent.trim() )\n            textnode.parentNode.removeChild(textnode)\n    }\n}\n\nexport function getfirstTextNode( elm, action ){\n    action = action || 'previous';\n    while ( elm = elm[action + 'Sibling'] )\n        if( elm.nodeType == 3 )\n            return elm\n}\n\n/**\n * utility method\n * https://stackoverflow.com/a/6234804/104380\n */\nexport function escapeHTML( s ){\n    return typeof s == 'string' ? s\n        .replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/`|'/g, \"&#039;\")\n        : s;\n}\n\n/**\n * Checks if an argument is a javascript Object\n */\nexport function isObject(obj) {\n    var type = Object.prototype.toString.call(obj).split(' ')[1].slice(0, -1);\n    return obj === Object(obj) && type != 'Array' && type != 'Function' && type != 'RegExp' && type != 'HTMLUnknownElement';\n}\n\n/**\n * merge objects into a single new one\n * TEST: extend({}, {a:{foo:1}, b:[]}, {a:{bar:2}, b:[1], c:()=>{}})\n */\nexport function extend( o, o1, o2) {\n    if( !(o instanceof Object) ) o = {};\n\n    copy(o, o1);\n    if( o2 )\n        copy(o, o2)\n\n    function copy(a,b){\n        // copy o2 to o\n        for( var key in b )\n            if( b.hasOwnProperty(key) ){\n                if( isObject(b[key]) ){\n                    if( !isObject(a[key]) )\n                        a[key] = Object.assign({}, b[key])\n                    else\n                        copy(a[key], b[key])\n\n                    continue;\n                }\n\n                if( Array.isArray(b[key]) ){\n                    a[key] = Object.assign([], b[key])\n                    continue\n                }\n\n                a[key] = b[key]\n            }\n    }\n\n    return o\n}\n\n/**\n * concatenates N arrays without dups.\n * If an array's item is an Object, compare by `value`\n */\nexport function concatWithoutDups(){\n    const newArr = [],\n        existingObj = {};\n\n    for( let arr of arguments ) {\n        for( let item of arr ) {\n            // if current item is an object which has yet to be added to the new array\n            if( isObject(item) ){\n                if( !existingObj[item.value] ){\n                    newArr.push(item)\n                    existingObj[item.value] = 1\n                }\n            }\n\n            // if current item is not an object and is not in the new array\n            else if( !newArr.includes(item) )\n                newArr.push(item)\n        }\n    }\n\n    return newArr\n}\n\n/**\n *  Extracted from: https://stackoverflow.com/a/37511463/104380\n * @param {String} s\n */\nexport function unaccent( s ){\n    // if not supported, do not continue.\n    // developers should use a polyfill:\n    // https://github.com/walling/unorm\n    if( !String.prototype.normalize )\n        return s\n\n    if (typeof(s) === 'string')\n        return s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")\n}\n\n/**\n * Meassures an element's height, which might yet have been added DOM\n * https://stackoverflow.com/q/5944038/104380\n * @param {DOM} node\n */\nexport function getNodeHeight( node ){\n    var height, clone = node.cloneNode(true)\n    clone.style.cssText = \"position:fixed; top:-9999px; opacity:0\"\n    document.body.appendChild(clone)\n    height = clone.clientHeight\n    clone.parentNode.removeChild(clone)\n    return height\n}\n\nexport var isChromeAndroidBrowser = () => /(?=.*chrome)(?=.*android)/i.test(navigator.userAgent)\n\nexport function getUID() {\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    )\n}\n\nexport function isNodeTag(node){\n    return isNodeBelongsToThisTagifyInstance.call(this, node) && node?.classList?.contains(this.settings.classNames.tag)\n}\n\nexport function isWithinNodeTag(node){\n    return isNodeBelongsToThisTagifyInstance.call(this, node) && node?.closest(this.settings.classNames.tagSelector)\n}\n\nfunction isNodeBelongsToThisTagifyInstance(node) {\n    let closestTagifyNode = node?.closest(this.settings.classNames.namespaceSelector)\n    return closestTagifyNode === this.DOM.scope\n}\n\n/**\n* Get the caret position relative to the viewport\n* https://stackoverflow.com/q/58985076/104380\n*\n* @returns {object} left, top distance in pixels\n*/\nexport function getCaretGlobalPosition(){\n   const sel = document.getSelection()\n\n   if( sel.rangeCount ){\n       const r = sel.getRangeAt(0)\n       const node = r.startContainer\n       const offset = r.startOffset\n       let rect,  r2;\n\n       if (offset > 0) {\n           r2 = document.createRange()\n           r2.setStart(node, offset - 1)\n           r2.setEnd(node, offset)\n           rect = r2.getBoundingClientRect()\n           return {left:rect.right, top:rect.top, bottom:rect.bottom}\n       }\n\n       if( node.getBoundingClientRect )\n           return node.getBoundingClientRect()\n   }\n\n   return {left:-9999, top:-9999}\n}\n\n/**\n * Injects content (either string or node) at the current the current (or specificed) caret position\n * @param {content} string/node\n * @param {range} Object (optional, a range other than the current window selection)\n */\nexport function injectAtCaret(content, range){\n    var selection = window.getSelection();\n    range = range || selection.getRangeAt(0)\n\n    if( typeof content == 'string' )\n        content = document.createTextNode(content)\n\n    if( range ) {\n        range.deleteContents()\n        range.insertNode(content)\n    }\n\n    return content\n}\n\n/** Setter/Getter\n * Each tag DOM node contains a custom property called \"__tagifyTagData\" which hosts its data\n * @param {Node}   tagElm\n * @param {Object} data\n */\nexport function getSetTagData(tagElm, data, override){\n    if( !tagElm ){\n        logger.warn(\"tag element doesn't exist\",{tagElm, data})\n        return data\n    }\n\n    if( data )\n        tagElm.__tagifyTagData = override\n            ? data\n            : extend({}, tagElm.__tagifyTagData || {}, data)\n\n    return tagElm.__tagifyTagData\n}\n\nexport function placeCaretAfterNode( node ){\n    if( !node || !node.parentNode ) return\n\n    var nextSibling = node,\n        sel = window.getSelection(),\n        range = sel.getRangeAt(0);\n\n    if (sel.rangeCount) {\n        range.setStartAfter(nextSibling);\n        range.collapse(true)\n        // range.setEndBefore(nextSibling || node);\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n}\n\n/**\n * iterate all tags, checking if multiple ones are close-siblings and if so, add a zero-space width character between them,\n * which forces the caret to be rendered when the selection is between tags.\n * Also do that if the tag is the first node.\n * @param {Array} tags\n */\nexport function fixCaretBetweenTags(tags, TagifyHasFocuse) {\n    tags.forEach(tag => {\n        if( getSetTagData(tag.previousSibling) || !tag.previousSibling ) {\n            var textNode = document.createTextNode(ZERO_WIDTH_CHAR)\n            tag.before(textNode)\n            TagifyHasFocuse && placeCaretAfterNode(textNode)\n        }\n    })\n}\n\n", "export default {\r\n    delimiters          : \",\",            // [RegEx] split tags by any of these delimiters (\"null\" to cancel) Example: \",| |.\"\r\n    pattern             : null,           // RegEx pattern to validate input by. Ex: /[1-9]/\r\n    tagTextProp         : 'value',        // tag data Object property which will be displayed as the tag's text\r\n    maxTags             : Infinity,       // Maximum number of tags\r\n    callbacks           : {},             // Exposed callbacks object to be triggered on certain events\r\n    addTagOnBlur        : true,           // automatically adds the text which was inputed as a tag when blur event happens\r\n    addTagOn            : ['blur', 'tab', 'enter'],  // if the tagify field (in a normal mode) has any non-tag input in it, convert it to a tag on any of these events: blur away from the field, click \"tab\"/\"enter\" key\r\n    onChangeAfterBlur   : true,           // By default, the native way of inputs' onChange events is kept, and it only fires when the field is blured.\r\n    duplicates          : false,          // \"true\" - allow duplicate tags\r\n    whitelist           : [],             // Array of tags to suggest as the user types (can be used along with \"enforceWhitelist\" setting)\r\n    blacklist           : [],             // A list of non-allowed tags\r\n    enforceWhitelist    : false,          // Only allow tags from the whitelist\r\n    userInput           : true,           // disable manually typing/pasting/editing tags (tags may only be added from the whitelist)\r\n    focusable           : true,           // Allow the component as a whole to recieve focus. There are implementations of Tagify without external border and so 'focusability' causes unwanted behaviour\r\n    keepInvalidTags     : false,          // if true, do not remove tags which did not pass validation\r\n    createInvalidTags   : true,           // if false, do not create invalid tags from invalid user input\r\n    mixTagsAllowedAfter : /,|\\.|\\:|\\s/,   // RegEx - Define conditions in which mix-tags content allows a tag to be added after\r\n    mixTagsInterpolator : ['[[', ']]'],   // Interpolation for mix mode. Everything between these will become a tag, if is a valid Object\r\n    backspace           : true,           // false / true / \"edit\"\r\n    skipInvalid         : false,          // If `true`, do not add invalid, temporary, tags before automatically removing them\r\n    pasteAsTags         : true,           // automatically converts pasted text into tags. if \"false\", allows for further text editing\r\n\r\n    editTags            : {\r\n        clicks      : 2,                  // clicks to enter \"edit-mode\": 1 for single click. any other value is considered as double-click\r\n        keepInvalid : true                // keeps invalid edits as-is until `esc` is pressed while in focus\r\n    },              // 1 or 2 clicks to edit a tag. false/null for not allowing editing\r\n    transformTag        : ()=>{},         // Takes a tag input string as argument and returns a transformed value\r\n    trim                : true,           // whether or not the value provided should be trimmed, before being added as a tag\r\n    a11y: {\r\n        focusableTags: false\r\n    },\r\n\r\n    mixMode: {\r\n        insertAfterTag  : '\\u00A0',       // String/Node to inject after a tag has been added (see #588)\r\n    },\r\n\r\n    autoComplete: {\r\n        enabled: true,        // Tries to suggest the input's value while typing (match from whitelist) by adding the rest of term as grayed-out text\r\n        rightKey: false,      // If `true`, when Right key is pressed, use the suggested value to create a tag, else just auto-completes the input. in mixed-mode this is set to \"true\"\r\n        tabKey: false,        // If 'true`, pressing `tab` key would only auto-complete but not also convert to a tag (like `rightKey` does).\r\n    },\r\n\r\n    classNames: {\r\n        namespace            : 'tagify',\r\n        mixMode              : 'tagify--mix',\r\n        selectMode           : 'tagify--select',\r\n        input                : 'tagify__input',\r\n        focus                : 'tagify--focus',\r\n        tagNoAnimation       : 'tagify--noAnim',\r\n        tagInvalid           : 'tagify--invalid',\r\n        tagNotAllowed        : 'tagify--notAllowed',\r\n        scopeLoading         : 'tagify--loading',\r\n        hasMaxTags           : 'tagify--hasMaxTags',\r\n        hasNoTags            : 'tagify--noTags',\r\n        empty                : 'tagify--empty',\r\n        inputInvalid         : 'tagify__input--invalid',\r\n        dropdown             : 'tagify__dropdown',\r\n        dropdownWrapper      : 'tagify__dropdown__wrapper',\r\n        dropdownHeader       : 'tagify__dropdown__header',\r\n        dropdownFooter       : 'tagify__dropdown__footer',\r\n        dropdownItem         : 'tagify__dropdown__item',\r\n        dropdownItemActive   : 'tagify__dropdown__item--active',\r\n        dropdownItemHidden   : 'tagify__dropdown__item--hidden',\r\n        dropdownItemSelected : 'tagify__dropdown__item--selected',\r\n        dropdownInital       : 'tagify__dropdown--initial',\r\n        tag                  : 'tagify__tag',\r\n        tagText              : 'tagify__tag-text',\r\n        tagX                 : 'tagify__tag__removeBtn',\r\n        tagLoading           : 'tagify__tag--loading',\r\n        tagEditing           : 'tagify__tag--editable',\r\n        tagFlash             : 'tagify__tag--flash',\r\n        tagHide              : 'tagify__tag--hide',\r\n\r\n    },\r\n\r\n    dropdown: {\r\n        classname          : '',\r\n        enabled            : 2,      // minimum input characters to be typed for the suggestions dropdown to show\r\n        maxItems           : 10,\r\n        searchKeys         : [\"value\", \"searchBy\"],\r\n        fuzzySearch        : true,\r\n        caseSensitive      : false,\r\n        accentedSearch     : true,\r\n        includeSelectedTags: false,  // Should the suggestions list Include already-selected tags (after filtering)\r\n        escapeHTML         : true,   // escapes HTML entities in the suggestions' rendered text\r\n        highlightFirst     : true,   // highlights first-matched item in the list\r\n        closeOnSelect      : true,   // closes the dropdown after selecting an item, if `enabled:0` (which means always show dropdown)\r\n        clearOnSelect      : true,   // after selecting a suggetion, should the typed text input remain or be cleared\r\n        position           : 'all',  // 'manual' / 'text' / 'all'\r\n        appendTarget       : null    // defaults to document.body once DOM has been loaded\r\n    },\r\n\r\n    hooks: {\r\n        beforeRemoveTag: () => Promise.resolve(),\r\n        beforePaste: () => Promise.resolve(),\r\n        suggestionClick: () => Promise.resolve(),\r\n        beforeKeyDown: () => Promise.resolve(),\r\n    }\r\n}", "import { sameStr, isObject, minify, getNodeHeight, getCaretGlobalPosition } from './helpers'\nimport suggestionsMethods from './suggestions'\n\nexport function initDropdown(){\n    this.dropdown = {}\n\n    // auto-bind \"this\" to all the dropdown methods\n    for( let p in this._dropdown )\n        this.dropdown[p] = typeof this._dropdown[p] === 'function'\n            ? this._dropdown[p].bind(this)\n            : this._dropdown[p]\n\n    this.dropdown.refs()\n    this.DOM.dropdown.__tagify = this\n}\n\nexport default {\n    ...suggestionsMethods,\n\n    refs(){\n        this.DOM.dropdown = this.parseTemplate('dropdown', [this.settings])\n        this.DOM.dropdown.content = this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\")\n    },\n\n    getHeaderRef(){\n        return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\")\n    },\n\n    getFooterRef(){\n        return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\")\n    },\n\n    getAllSuggestionsRefs(){\n        return [...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)]\n    },\n\n    /**\n     * shows the suggestions select box\n     * @param {String} value [optional, filter the whitelist by this value]\n     */\n    show( value ){\n        var _s = this.settings,\n            firstListItem,\n            firstListItemValue,\n            allowNewTags = _s.mode == 'mix' && !_s.enforceWhitelist,\n            noWhitelist =  !_s.whitelist || !_s.whitelist.length,\n            noMatchListItem,\n            isManual = _s.dropdown.position == 'manual';\n\n        // if text still exists in the input, and `show` method has no argument, then the input's text should be used\n        value = value === undefined ? this.state.inputText : value\n\n        // ⚠️ Do not render suggestions list  if:\n        // 1. there's no whitelist (can happen while async loading) AND new tags arn't allowed\n        // 2. dropdown is disabled\n        // 3. loader is showing (controlled outside of this code)\n        if( (noWhitelist && !allowNewTags && !_s.templates.dropdownItemNoMatch)\n            || _s.dropdown.enabled === false\n            || this.state.isLoading\n            || this.settings.readonly )\n            return;\n\n        clearTimeout(this.dropdownHide__bindEventsTimeout)\n\n        // if no value was supplied, show all the \"whitelist\" items in the dropdown\n        // @type [Array] listItems\n        this.suggestedListItems = this.dropdown.filterListItems(value)\n\n        // trigger at this exact point to let the developer the chance to manually set \"this.suggestedListItems\"\n        if( value && !this.suggestedListItems.length ){\n            this.trigger('dropdown:noMatch', value)\n\n            if( _s.templates.dropdownItemNoMatch )\n                noMatchListItem = _s.templates.dropdownItemNoMatch.call(this, {value})\n        }\n\n        // if \"dropdownItemNoMatch\" was not defined, procceed regular flow.\n        //\n        if( !noMatchListItem ){\n            // in mix-mode, if the value isn't included in the whilelist & \"enforceWhitelist\" setting is \"false\",\n            // then add a custom suggestion item to the dropdown\n            if( this.suggestedListItems.length ){\n                if( value   &&   allowNewTags   &&   !this.state.editing.scope  &&  !sameStr(this.suggestedListItems[0].value, value) )\n                    this.suggestedListItems.unshift({value})\n            }\n            else{\n                if( value   &&   allowNewTags  &&  !this.state.editing.scope ){\n                    this.suggestedListItems = [{value}]\n                }\n                // hide suggestions list if no suggestion matched\n                else{\n                    this.input.autocomplete.suggest.call(this);\n                    this.dropdown.hide()\n                    return;\n                }\n            }\n\n            firstListItem =  this.suggestedListItems[0]\n            firstListItemValue = \"\"+(isObject(firstListItem) ? firstListItem.value : firstListItem)\n\n            if( _s.autoComplete && firstListItemValue ){\n                // only fill the sugegstion if the value of the first list item STARTS with the input value (regardless of \"fuzzysearch\" setting)\n                if( firstListItemValue.indexOf(value) == 0 )\n                    this.input.autocomplete.suggest.call(this, firstListItem)\n            }\n        }\n\n        this.dropdown.fill(noMatchListItem)\n\n        if( _s.dropdown.highlightFirst ) {\n            this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(_s.classNames.dropdownItemSelector))\n        }\n\n        // bind events, exactly at this stage of the code. \"dropdown.show\" method is allowed to be\n        // called multiple times, regardless if the dropdown is currently visible, but the events-binding\n        // should only be called if the dropdown wasn't previously visible.\n        if( !this.state.dropdown.visible )\n            // timeout is needed for when pressing arrow down to show the dropdown,\n            // so the key event won't get registered in the dropdown events listeners\n            setTimeout(this.dropdown.events.binding.bind(this))\n\n        // set the dropdown visible state to be the same as the searched value.\n        // MUST be set *before* position() is called\n        this.state.dropdown.visible = value || true\n        this.state.dropdown.query = value\n\n        this.setStateSelection()\n\n        // try to positioning the dropdown (it might not yet be on the page, doesn't matter, next code handles this)\n        if( !isManual ){\n            // a slight delay is needed if the dropdown \"position\" setting is \"text\", and nothing was typed in the input,\n            // so sadly the \"getCaretGlobalPosition\" method doesn't recognize the caret position without this delay\n            setTimeout(() => {\n                this.dropdown.position()\n                this.dropdown.render()\n            })\n        }\n\n        // a delay is needed because of the previous delay reason.\n        // this event must be fired after the dropdown was rendered & positioned\n        setTimeout(() => {\n            this.trigger(\"dropdown:show\", this.DOM.dropdown)\n        })\n    },\n\n    /**\n     * Hides the dropdown (if it's not managed manually by the developer)\n     * @param {Boolean} overrideManual\n     */\n    hide( overrideManual ){\n        var {scope, dropdown} = this.DOM,\n            isManual = this.settings.dropdown.position == 'manual' && !overrideManual;\n\n        // if there's no dropdown, this means the dropdown events aren't binded\n        if( !dropdown || !document.body.contains(dropdown) || isManual ) return;\n\n        window.removeEventListener('resize', this.dropdown.position)\n        this.dropdown.events.binding.call(this, false) // unbind all events\n\n        // if the dropdown is open, and the input (scope) is clicked,\n        // the dropdown should be now \"close\", and the next click (on the scope)\n        // should re-open it, and without a timeout, clicking to close will re-open immediately\n        //  clearTimeout(this.dropdownHide__bindEventsTimeout)\n        //  this.dropdownHide__bindEventsTimeout = setTimeout(this.events.binding.bind(this), 250)  // re-bind main events\n\n\n        scope.setAttribute(\"aria-expanded\", false)\n        dropdown.parentNode.removeChild(dropdown)\n\n        // scenario: clicking the scope to show the dropdown, clicking again to hide -> calls dropdown.hide() and then re-focuses the input\n        // which casues another onFocus event, which checked \"this.state.dropdown.visible\" and see it as \"false\" and re-open the dropdown\n        setTimeout(() => {\n            this.state.dropdown.visible = false\n        }, 100)\n\n        this.state.dropdown.query =\n        this.state.ddItemData =\n        this.state.ddItemElm =\n        this.state.selection = null\n\n        // if the user closed the dropdown (in mix-mode) while a potential tag was detected, flag the current tag\n        // so the dropdown won't be shown on following user input for that \"tag\"\n        if( this.state.tag && this.state.tag.value.length ){\n            this.state.flaggedTags[this.state.tag.baseOffset] = this.state.tag\n        }\n\n        this.trigger(\"dropdown:hide\", dropdown)\n\n        return this\n    },\n\n    /**\n     * Toggles dropdown show/hide\n     * @param {Boolean} show forces the dropdown to show\n     */\n    toggle(show){\n        this.dropdown[this.state.dropdown.visible && !show ? 'hide' : 'show']()\n    },\n\n    getAppendTarget() {\n        var _sd = this.settings.dropdown;\n        return typeof _sd.appendTarget === 'function' ? _sd.appendTarget() : _sd.appendTarget;\n    },\n\n    render(){\n        // let the element render in the DOM first, to accurately measure it.\n        // this.DOM.dropdown.style.cssText = \"left:-9999px; top:-9999px;\";\n        var ddHeight = getNodeHeight(this.DOM.dropdown),\n            _s = this.settings,\n            appendTarget = this.dropdown.getAppendTarget();\n\n        if( _s.dropdown.enabled === false ) return this;\n\n        this.DOM.scope.setAttribute(\"aria-expanded\", true)\n\n        // if the dropdown has yet to be appended to the DOM,\n        // append the dropdown to the body element & handle events\n        if( !document.body.contains(this.DOM.dropdown) ){\n            this.DOM.dropdown.classList.add( _s.classNames.dropdownInital )\n            this.dropdown.position(ddHeight)\n            appendTarget.appendChild(this.DOM.dropdown)\n\n            setTimeout(() =>\n                this.DOM.dropdown.classList.remove( _s.classNames.dropdownInital )\n            )\n        }\n\n        return this\n    },\n\n    /**\n     * re-renders the dropdown content element (see \"dropdownContent\" in templates file)\n     * @param {String/Array} HTMLContent - optional\n     */\n    fill( HTMLContent ){\n        HTMLContent = typeof HTMLContent == 'string'\n            ? HTMLContent\n            : this.dropdown.createListHTML(HTMLContent || this.suggestedListItems)\n\n        var dropdownContent = this.settings.templates.dropdownContent.call(this, HTMLContent)\n\n        this.DOM.dropdown.content.innerHTML = minify(dropdownContent)\n    },\n\n    /**\n     * Re-renders only the header & footer.\n     * Used when selecting a suggestion and it is wanted that the suggestions dropdown stays open.\n     * Since the list of sugegstions is not being re-rendered completely every time a suggestion is selected (the item is transitioned-out)\n     * then the header & footer should be kept in sync with the suggestions data change\n     */\n    fillHeaderFooter(){\n        var suggestions = this.dropdown.filterListItems(this.state.dropdown.query),\n            newHeaderElem = this.parseTemplate('dropdownHeader', [suggestions]),\n            newFooterElem = this.parseTemplate('dropdownFooter', [suggestions]),\n            headerRef = this.dropdown.getHeaderRef(),\n            footerRef = this.dropdown.getFooterRef();\n\n        newHeaderElem && headerRef?.parentNode.replaceChild(newHeaderElem, headerRef)\n        newFooterElem && footerRef?.parentNode.replaceChild(newFooterElem, footerRef)\n    },\n\n    /**\n     * dropdown positioning logic\n     * (shown above/below or next to typed text for mix-mode)\n     */\n    position( ddHeight ){\n        var _sd = this.settings.dropdown,\n            appendTarget = this.dropdown.getAppendTarget();\n\n        if( _sd.position == 'manual' || !appendTarget) return\n\n        var rect, top, bottom, left, width, ancestorsOffsets,\n            isPlacedAbove,\n            cssTop, cssLeft,\n            ddElm = this.DOM.dropdown,\n            isRTL = _sd.RTL,\n            isDefaultAppendTarget = appendTarget === document.body,\n            isSelfAppended = appendTarget === this.DOM.scope,\n            appendTargetScrollTop = isDefaultAppendTarget ? window.pageYOffset : appendTarget.scrollTop,\n            root = document.fullscreenElement || document.webkitFullscreenElement || document.documentElement,\n            viewportHeight = root.clientHeight,\n            viewportWidth = Math.max(root.clientWidth || 0, window.innerWidth || 0),\n            positionTo = viewportWidth > 480 ? _sd.position : 'all',\n            ddTarget = this.DOM[positionTo == 'input' ? 'input' : 'scope'];\n\n        ddHeight = ddHeight || ddElm.clientHeight\n\n        function getAncestorsOffsets(p){\n            var top = 0, left = 0;\n\n            p = p.parentNode;\n\n            // when in element-fullscreen mode, do not go above the fullscreened-element\n            while(p && p != root){\n                top += p.offsetTop || 0\n                left += p.offsetLeft || 0\n                p = p.parentNode\n            }\n\n            return {top, left};\n        }\n\n        function getAccumulatedAncestorsScrollTop() {\n            var scrollTop = 0,\n                p = _sd.appendTarget.parentNode;\n\n            while(p){\n                scrollTop += p.scrollTop || 0;\n                p = p.parentNode\n            }\n\n            return scrollTop;\n        }\n\n        if( !this.state.dropdown.visible ) return\n\n        if( positionTo == 'text' ){\n            rect   = getCaretGlobalPosition()\n            bottom = rect.bottom\n            top    = rect.top\n            left   = rect.left\n            width  = 'auto'\n        }\n\n        else{\n            ancestorsOffsets = getAncestorsOffsets(appendTarget)\n            rect   = ddTarget.getBoundingClientRect()\n            top    = isSelfAppended ? -1 : rect.top - ancestorsOffsets.top\n            bottom = (isSelfAppended ? rect.height : rect.bottom - ancestorsOffsets.top) - 1\n            left   = isSelfAppended ? -1 : rect.left - ancestorsOffsets.left\n            width  = rect.width + 'px'\n        }\n\n        // if the \"append target\" isn't the default, correct the `top` variable by ignoring any scrollTop of the target's Ancestors\n        if( !isDefaultAppendTarget ) {\n            let accumulatedAncestorsScrollTop = getAccumulatedAncestorsScrollTop()\n            top += accumulatedAncestorsScrollTop\n            bottom += accumulatedAncestorsScrollTop\n        }\n\n        top = Math.floor(top)\n        bottom = Math.ceil(bottom)\n\n        isPlacedAbove = _sd.placeAbove ?? viewportHeight - rect.bottom < ddHeight\n\n        // flip vertically if there is no space for the dropdown below the input\n        cssTop = (isPlacedAbove ? top : bottom) + appendTargetScrollTop;\n\n        // \"pageXOffset\" property is an alias for \"scrollX\"\n        cssLeft = `left: ${(left + (isRTL ? (rect.width || 0) : 0) + window.pageXOffset)}px;`\n\n       // rtl = rtl ?? viewportWidth -\n        ddElm.style.cssText = `${cssLeft}; top: ${cssTop}px; min-width: ${width}; max-width: ${width}`;\n\n        ddElm.setAttribute('placement', isPlacedAbove ? 'top' : 'bottom')\n        ddElm.setAttribute('position', positionTo)\n    },\n}\n", "import { isObject, escapeHTML, extend, unaccent, logger } from './helpers'\n\n\n/**\n * Tagify's dropdown suggestions-related logic\n */\n\nexport default {\n    events : {\n        /**\n         * Events should only be binded when the dropdown is rendered and removed when isn't\n         * because there might be multiple Tagify instances on a certain page\n         * @param  {Boolean} bindUnbind [optional. true when wanting to unbind all the events]\n         */\n        binding( bindUnbind = true ){\n            // references to the \".bind()\" methods must be saved so they could be unbinded later\n            var _CB = this.dropdown.events.callbacks,\n                // callback-refs\n                _CBR = (this.listeners.dropdown = this.listeners.dropdown || {\n                    position          : this.dropdown.position.bind(this, null),\n                    onKeyDown         : _CB.onKeyDown.bind(this),\n                    onMouseOver       : _CB.onMouseOver.bind(this),\n                    onMouseLeave      : _CB.onMouseLeave.bind(this),\n                    onClick           : _CB.onClick.bind(this),\n                    onScroll          : _CB.onScroll.bind(this),\n                }),\n                action = bindUnbind ? 'addEventListener' : 'removeEventListener';\n\n            if( this.settings.dropdown.position != 'manual' ){\n                document[action]('scroll', _CBR.position, true)\n                window[action]('resize', _CBR.position)\n                window[action]('keydown', _CBR.onKeyDown)\n            }\n\n            this.DOM.dropdown[action]('mouseover', _CBR.onMouseOver)\n            this.DOM.dropdown[action]('mouseleave', _CBR.onMouseLeave)\n            this.DOM.dropdown[action]('mousedown', _CBR.onClick)\n            this.DOM.dropdown.content[action]('scroll', _CBR.onScroll)\n        },\n\n        callbacks : {\n            onKeyDown(e){\n                // ignore keys during IME composition\n                if( !this.state.hasFocus || this.state.composing )\n                    return\n\n                // get the \"active\" element, and if there was none (yet) active, use first child\n                var _s = this.settings,\n                    includeSelectedTags = _s.dropdown.includeSelectedTags,\n                    selectedElm = this.DOM.dropdown.querySelector(_s.classNames.dropdownItemActiveSelector),\n                    selectedElmData = this.dropdown.getSuggestionDataByNode(selectedElm),\n                    isMixMode = _s.mode == 'mix',\n                    isSelectMode = _s.mode == 'select';\n\n                _s.hooks.beforeKeyDown(e, {tagify:this})\n                    .then(result => {\n                        switch( e.key ){\n                            case 'ArrowDown' :\n                            case 'ArrowUp' :\n                            case 'Down' :  // >IE11\n                            case 'Up' : {  // >IE11\n                                e.preventDefault()\n                                var dropdownItems = this.dropdown.getAllSuggestionsRefs(),\n                                    actionUp = e.key == 'ArrowUp' || e.key == 'Up';\n\n                                if( selectedElm ) {\n                                    selectedElm = this.dropdown.getNextOrPrevOption(selectedElm, !actionUp)\n                                }\n\n                                // if no element was found OR current item is not a \"real\" item, loop\n                                if( !selectedElm || !selectedElm.matches(_s.classNames.dropdownItemSelector) ){\n                                    selectedElm = dropdownItems[actionUp ? dropdownItems.length - 1 : 0];\n                                }\n\n                                this.dropdown.highlightOption(selectedElm, true)\n                                // selectedElm.scrollIntoView({inline: 'nearest', behavior: 'smooth'})\n                                break;\n                            }\n                            case 'PageUp':\n                            case 'PageDown': {\n                                e.preventDefault()\n                                const dropdownItems = this.dropdown.getAllSuggestionsRefs()\n                                const itemsPerPage = Math.floor(this.DOM.dropdown.content.clientHeight / dropdownItems[0]?.offsetHeight) || 1\n                                const isPageUp = e.key === 'PageUp'\n\n                                if (selectedElm) {\n                                    const currentIndex = dropdownItems.indexOf(selectedElm)\n                                    const targetIndex = isPageUp\n                                        ? Math.max(0, currentIndex - itemsPerPage)\n                                        : Math.min(dropdownItems.length - 1, currentIndex + itemsPerPage)\n                                    selectedElm = dropdownItems[targetIndex]\n                                } else {\n                                    selectedElm = dropdownItems[0]\n                                }\n\n                                this.dropdown.highlightOption(selectedElm, true)\n                                break;\n                            }\n                            case 'Home':\n                            case 'End': {\n                                e.preventDefault()\n                                const dropdownItems = this.dropdown.getAllSuggestionsRefs()\n                                selectedElm = dropdownItems[e.key === 'Home' ? 0 : dropdownItems.length - 1]\n                                this.dropdown.highlightOption(selectedElm, true)\n                                break;\n                            }\n                            case 'Escape' :\n                            case 'Esc': // IE11\n                                this.dropdown.hide();\n                                break;\n\n                            case 'ArrowRight' :\n                                // do not continue if the left arrow key was pressed while typing, because assuming the user wants to bypass any of the below logic and edit the content without intervention.\n                                // also do not procceed if a tag should be created when the setting `autoComplete.rightKey` is set to `true`\n                                if( this.state.actions.ArrowLeft || _s.autoComplete.rightKey )\n                                    return\n                            case 'Tab' : {\n                                let shouldAutocompleteOnKey = !_s.autoComplete.rightKey || !_s.autoComplete.tabKey\n\n                                // in mix-mode, treat arrowRight like Enter key, so a tag will be created\n                                if( !isMixMode && !isSelectMode && selectedElm && shouldAutocompleteOnKey && !this.state.editing && selectedElmData ){\n                                    e.preventDefault() // prevents blur so the autocomplete suggestion will not become a tag\n                                    var value = this.dropdown.getMappedValue(selectedElmData)\n\n                                    this.state.autoCompleteData = selectedElmData;\n                                    this.input.autocomplete.set.call(this, value)\n                                    return false\n                                }\n                                return true\n                            }\n                            case 'Enter' : {\n                                e.preventDefault()\n\n                                // temporary set the \"actions\" state to indicate to the main \"blur\" event it shouldn't execute any if its logic.\n                                // a `100ms` is a good-enough timeout after some testing\n                                this.state.actions.selectOption = true;\n                                setTimeout(()=> this.state.actions.selectOption = false, 100)\n\n                                _s.hooks.suggestionClick(e, {tagify:this, tagData:selectedElmData, suggestionElm:selectedElm})\n                                    .then(() => {\n                                        if( selectedElm ){\n                                            var nextOrPrevOption = includeSelectedTags ? selectedElm : this.dropdown.getNextOrPrevOption(selectedElm, !actionUp),\n                                                nextOrPrevOptionValue = nextOrPrevOption.getAttribute('value')\n\n                                            this.dropdown.selectOption(selectedElm, e, () => {\n                                                // highlight next option\n                                                nextOrPrevOption = this.dropdown.getSuggestionNodeByValue(nextOrPrevOptionValue)\n                                                this.dropdown.highlightOption(nextOrPrevOption)\n                                            })\n\n                                            return\n                                        }\n                                        else\n                                            this.dropdown.hide()\n\n                                        if( !isMixMode )\n                                            this.addTags(this.state.inputText.trim(), true)\n                                    })\n                                    .catch(err => logger.warn(err))\n\n                                break;\n                            }\n                            case 'Backspace' : {\n                                if( isMixMode || this.state.editing.scope ) return;\n\n                                const value = this.input.raw.call(this)\n\n                                if( value == \"\" || value.charCodeAt(0) == 8203 ){\n                                    if( _s.backspace === true )\n                                        this.removeTags()\n                                    else if( _s.backspace == 'edit' )\n                                        setTimeout(this.editTag.bind(this), 0)\n                                }\n                            }\n                        }\n                    })\n            },\n\n            onMouseOver(e){\n                var ddItem = e.target.closest(this.settings.classNames.dropdownItemSelector)\n                // event delegation check\n                this.dropdown.highlightOption(ddItem)\n            },\n\n            onMouseLeave(e){\n                // de-highlight any previously highlighted option\n                this.dropdown.highlightOption()\n            },\n\n            onClick(e){\n                if( e.button != 0 || e.target == this.DOM.dropdown || e.target == this.DOM.dropdown.content ) return; // allow only mouse left-clicks\n\n                var selectedElm = e.target.closest(this.settings.classNames.dropdownItemSelector),\n                    selectedElmData = this.dropdown.getSuggestionDataByNode(selectedElm)\n\n                // temporary set the \"actions\" state to indicate to the main \"blur\" event it shouldn't execute any if its logic.\n                // a `100ms` is a good-enough timeout after some testing\n                this.state.actions.selectOption = true;\n                setTimeout(()=> this.state.actions.selectOption = false, 100)\n\n                this.settings.hooks.suggestionClick(e, {tagify:this, tagData:selectedElmData, suggestionElm:selectedElm})\n                    .then(() => {\n                        if( selectedElm )\n                            this.dropdown.selectOption(selectedElm, e)\n                        else\n                            this.dropdown.hide()\n                    })\n                    .catch(err => logger.warn(err))\n            },\n\n            onScroll(e){\n                var elm = e.target,\n                    pos = elm.scrollTop / (elm.scrollHeight - elm.parentNode.clientHeight) * 100;\n\n                this.trigger(\"dropdown:scroll\", {percentage:Math.round(pos)})\n            },\n        }\n    },\n\n    /**\n     * fill data into the suggestions list\n     * (mainly used to update the list when removing tags while the suggestions dropdown is visible, so they will be re-added to the list. not efficient)\n     */\n    refilter( value ){\n        value = value || this.state.dropdown.query || ''\n        this.suggestedListItems = this.dropdown.filterListItems(value)\n\n        this.dropdown.fill()\n\n        if( !this.suggestedListItems.length )\n            this.dropdown.hide()\n\n        this.trigger(\"dropdown:updated\", this.DOM.dropdown)\n    },\n\n    /**\n     * Given a suggestion-item, return the data associated with it\n     * @param {HTMLElement} tagElm\n     * @returns Object\n     */\n    getSuggestionDataByNode( tagElm ){\n        var item, value = tagElm && tagElm.getAttribute('value')\n\n        for(var i = this.suggestedListItems.length; i--; ) {\n            item = this.suggestedListItems[i]\n            if( isObject(item) && item.value == value ) return item\n            // for primitive whitelist items:\n            else if( item == value ) return {value: item}\n        }\n    },\n\n    getSuggestionNodeByValue( value ){\n        var dropdownItems = this.dropdown.getAllSuggestionsRefs()\n        return dropdownItems.find(item => item.getAttribute('value') === value);\n    },\n\n    getNextOrPrevOption(selected, next = true) {\n        var dropdownItems = this.dropdown.getAllSuggestionsRefs(),\n            selectedIdx = dropdownItems.findIndex(item => item === selected);\n\n        return next ? dropdownItems[selectedIdx + 1] : dropdownItems[selectedIdx - 1]\n    },\n\n    /**\n     * mark the currently active suggestion option\n     * @param {Object}  elm            option DOM node\n     * @param {Boolean} adjustScroll   when navigation with keyboard arrows (up/down), auto-scroll to always show the highlighted element\n     */\n    highlightOption( elm, adjustScroll ){\n        var className = this.settings.classNames.dropdownItemActive,\n            itemData;\n\n        // focus casues a bug in Firefox with the placeholder been shown on the input element\n        // if( this.settings.dropdown.position != 'manual' )\n        //     elm.focus();\n\n        if( this.state.ddItemElm ){\n            this.state.ddItemElm.classList.remove(className)\n            this.state.ddItemElm.removeAttribute(\"aria-selected\")\n        }\n\n        if( !elm ){\n            this.state.ddItemData = null\n            this.state.ddItemElm = null\n            this.input.autocomplete.suggest.call(this)\n            return;\n        }\n\n        itemData = this.dropdown.getSuggestionDataByNode(elm)\n        this.state.ddItemData = itemData\n        this.state.ddItemElm = elm\n\n        // this.DOM.dropdown.querySelectorAll(\".\" + this.settings.classNames.dropdownItemActive).forEach(activeElm => activeElm.classList.remove(className));\n        elm.classList.add(className);\n        elm.setAttribute(\"aria-selected\", true)\n\n        if( adjustScroll )\n            elm.parentNode.scrollTop = elm.clientHeight + elm.offsetTop - elm.parentNode.clientHeight\n\n        // Try to autocomplete the typed value with the currently highlighted dropdown item\n        if( this.settings.autoComplete ){\n            this.input.autocomplete.suggest.call(this, itemData)\n            this.dropdown.position() // suggestions might alter the height of the tagify wrapper because of unkown suggested term length that could drop to the next line\n        }\n    },\n\n    /**\n     * Create a tag from the currently active suggestion option\n     * @param {Object} elm  DOM node to select\n     * @param {Object} event The original Click event, if available (since keyboard ENTER key also triggers this method)\n     */\n    selectOption( elm, event, onSelect ){\n        var _s = this.settings,\n            includeSelectedTags = _s.dropdown.includeSelectedTags,\n            {clearOnSelect, closeOnSelect} = _s.dropdown;\n\n        if( !elm ) {\n            this.addTags(this.state.inputText, true)\n            closeOnSelect && this.dropdown.hide()\n            return;\n        }\n\n        event = event || {}\n\n        // if in edit-mode, do not continue but instead replace the tag's text.\n        // the scenario is that \"addTags\" was called from a dropdown suggested option selected while editing\n\n        var value = elm.getAttribute('value'),\n            isNoMatch = value == 'noMatch',\n            isMixMode = _s.mode == 'mix',\n            tagData = this.suggestedListItems.find(item => (item.value ?? item) == value)\n\n        // The below event must be triggered, regardless of anything else which might go wrong\n        this.trigger('dropdown:select', {data:tagData, elm, event})\n\n        if( !tagData && !isNoMatch ){\n            closeOnSelect && setTimeout(this.dropdown.hide.bind(this))\n            return\n        }\n\n        if( this.state.editing ) {\n            let normalizedTagData = this.normalizeTags([tagData])[0]\n            tagData = _s.transformTag.call(this, normalizedTagData) || normalizedTagData\n\n            // normalizing value, because \"tagData\" might be a string, and therefore will not be able to extend the object\n            this.onEditTagDone(null, extend({__isValid: true}, tagData))\n        }\n        // Tagify instances should re-focus to the input element once an option was selected, to allow continuous typing\n        else {\n            this[isMixMode ? \"addMixTags\" : \"addTags\"]([tagData || this.input.raw.call(this)], clearOnSelect)\n        }\n\n        if( !isMixMode && !this.DOM.input.parentNode )\n            return\n\n        setTimeout(() => {\n            this.DOM.input.focus()\n            this.toggleFocusClass(true)\n        })\n\n        closeOnSelect && setTimeout(this.dropdown.hide.bind(this))\n\n        // execute these tasks once a suggestion has been selected\n        if(includeSelectedTags) {\n            onSelect && onSelect()\n        }\n\n        // if the selected suggestion is removed after being selected, more things things needs to be done:\n        else {\n            elm.addEventListener('transitionend', () => {\n                this.dropdown.fillHeaderFooter()\n\n                setTimeout(() => {\n                    elm.remove()\n                    this.dropdown.refilter()\n                    onSelect && onSelect()\n                }, 100)\n            }, {once: true})\n\n            // hide selected suggestion\n            elm.classList.add(this.settings.classNames.dropdownItemHidden)\n        }\n    },\n\n    // adds all the suggested items, including the ones which are not currently rendered,\n    // unless specified otherwise (by the \"onlyRendered\" argument)\n    selectAll( onlyRendered ){\n        // having suggestedListItems with items messes with \"normalizeTags\" when wanting\n        // to add all tags\n        this.suggestedListItems.length = 0;\n        this.dropdown.hide()\n\n        this.dropdown.filterListItems('');\n\n        var tagsToAdd = this.dropdown.filterListItems('');\n\n        if( !onlyRendered )\n            tagsToAdd = this.state.dropdown.suggestions\n\n        // some whitelist items might have already been added as tags so when addings all of them,\n        // skip adding already-added ones, so best to use \"filterListItems\" method over \"settings.whitelist\"\n        this.addTags(tagsToAdd, true)\n        return this\n    },\n\n    /**\n     * returns an HTML string of the suggestions' list items\n     * @param {String} value string t\n     * o filter the whitelist by\n     * @param {Object} options \"exact\" - for exact complete match\n     * @return {Array} list of filtered whitelist items according to the settings provided and current value\n     */\n    filterListItems( value, options ){\n        var _s = this.settings,\n            _sd = _s.dropdown,\n            options = options || {},\n            list = [],\n            exactMatchesList = [],\n            whitelist = _s.whitelist,\n            suggestionsCount = _sd.maxItems >= 0 ? _sd.maxItems : Infinity,\n            includeSelectedTags = _sd.includeSelectedTags,\n            hasCustomSort = typeof _sd.sortby == 'function',\n            searchKeys = _sd.searchKeys,\n            whitelistItem,\n            valueIsInWhitelist,\n            searchBy,\n            isDuplicate,\n            niddle,\n            i = 0;\n\n        value = (_s.mode == 'select' && this.value.length && this.value[0][_s.tagTextProp] == value\n            ? '' // do not filter if the tag, which is already selecetd in \"select\" mode, is the same as the typed text\n            : value);\n\n        if( !value || !searchKeys.length ){\n            list = includeSelectedTags\n                ? whitelist\n                : whitelist.filter(item => !this.isTagDuplicate( isObject(item) ? item.value : item )) // don't include tags which have already been added.\n\n            var filteredList = hasCustomSort\n                ? _sd.sortby(list, niddle)\n                : list.slice(0, suggestionsCount); // respect \"maxItems\" dropdown setting\n\n            this.state.dropdown.suggestions = filteredList;\n\n            return filteredList;\n        }\n\n        niddle = _sd.caseSensitive\n            ? \"\"+value\n            : (\"\"+value).toLowerCase()\n\n        // checks if ALL of the words in the search query exists in the current whitelist item, regardless of their order\n        function stringHasAll(s, query){\n            return query.toLowerCase().split(' ').every(q => s.includes(q.toLowerCase()))\n        }\n\n        for( ; i < whitelist.length; i++ ){\n            let startsWithMatch, exactMatch;\n\n            whitelistItem = whitelist[i] instanceof Object ? whitelist[i] : { value:whitelist[i] } //normalize value as an Object\n\n            let itemWithoutSearchKeys = !Object.keys(whitelistItem).some(k => searchKeys.includes(k) ),\n                _searchKeys = itemWithoutSearchKeys ? [\"value\"] : searchKeys\n\n            if( _sd.fuzzySearch && !options.exact ){\n                searchBy = _searchKeys.reduce((values, k) => values + \" \" + (whitelistItem[k]||\"\"), \"\").toLowerCase().trim()\n\n                if( _sd.accentedSearch ){\n                    searchBy = unaccent(searchBy)\n                    niddle = unaccent(niddle)\n                }\n\n                startsWithMatch = searchBy.indexOf(niddle) == 0\n                exactMatch = searchBy === niddle\n                valueIsInWhitelist = stringHasAll(searchBy, niddle)\n            }\n\n            else {\n                startsWithMatch = true;\n                valueIsInWhitelist = _searchKeys.some(k => {\n                    var v = '' + (whitelistItem[k] || '') // if key exists, cast to type String\n\n                    if( _sd.accentedSearch ){\n                        v = unaccent(v)\n                        niddle = unaccent(niddle)\n                    }\n\n                    if( !_sd.caseSensitive )\n                        v = v.toLowerCase()\n\n                    exactMatch = v === niddle\n\n                    return options.exact\n                        ? v === niddle\n                        : v.indexOf(niddle) == 0\n                })\n            }\n\n            isDuplicate = !_sd.includeSelectedTags && this.isTagDuplicate( isObject(whitelistItem) ? whitelistItem.value : whitelistItem )\n\n            // match for the value within each \"whitelist\" item\n            if( valueIsInWhitelist && !isDuplicate )\n                if( exactMatch && startsWithMatch)\n                    exactMatchesList.push(whitelistItem)\n                else if( _sd.sortby == 'startsWith' && startsWithMatch )\n                    list.unshift(whitelistItem)\n                else\n                    list.push(whitelistItem)\n        }\n\n        this.state.dropdown.suggestions = exactMatchesList.concat(list);\n\n        // custom sorting function\n        var filteredList = hasCustomSort\n            ? _sd.sortby(exactMatchesList.concat(list), niddle)\n            : exactMatchesList.concat(list).slice(0, suggestionsCount)\n\n        this.state.dropdown.suggestions = filteredList;\n        return filteredList\n    },\n\n    /**\n     * Returns the final value of a tag data (object) with regards to the \"mapValueTo\" dropdown setting\n     * @param {Object} tagData\n     * @returns\n     */\n    getMappedValue(tagData){\n        var mapValueTo = this.settings.dropdown.mapValueTo,\n            value = (mapValueTo\n                ? typeof mapValueTo == 'function' ? mapValueTo(tagData) : (tagData[mapValueTo] || tagData.value)\n                : tagData.value);\n\n        return value\n    },\n\n    /**\n     * Creates the dropdown items' HTML\n     * @param  {Array} sugegstionsList  [Array of Objects]\n     * @return {String}\n     */\n    createListHTML( sugegstionsList ){\n        return extend([], sugegstionsList).map((suggestion, idx) => {\n            if( typeof suggestion == 'string' || typeof suggestion == 'number' )\n                suggestion = {value:suggestion}\n\n            var mappedValue = this.dropdown.getMappedValue(suggestion);\n\n            mappedValue = (typeof mappedValue == 'string' && this.settings.dropdown.escapeHTML)\n                ? escapeHTML(mappedValue)\n                : mappedValue;\n\n            return this.settings.templates.dropdownItem.apply(this, [{...suggestion, mappedValue}, this])\n        }).join(\"\")\n    }\n}", "const VERSION = 1; // current version of persisted data. if code change breaks persisted data, verison number should be bumped.\nconst STORE_KEY = '@yaireo/tagify/'\n\nexport const getPersistedData = id => key => {\n    if( !id ) return;\n\n    // if \"persist\" is \"false\", do not save to localstorage\n    let customKey = '/'+key,\n        persistedData,\n        currentStorageVersion = localStorage?.getItem(STORE_KEY + id + '/v')\n\n    if( currentStorageVersion === VERSION){\n        try{ persistedData = JSON.parse(localStorage[STORE_KEY + id + customKey]) }\n        catch(err){}\n    }\n\n    return persistedData\n}\n\nexport const setPersistedData = id => {\n    if( !id ) return () => {};\n\n    // for storage invalidation\n    localStorage?.setItem(STORE_KEY + id + '/v', VERSION)\n\n    return (data, key) => {\n        let customKey = '/'+key,\n            persistedData = JSON.stringify(data)\n\n        if( data && key ){\n            localStorage?.setItem(STORE_KEY + id + customKey, persistedData)\n            dispatchEvent( new Event('storage') )\n        }\n    }\n}\n\nexport const clearPersistedData = id => key => {\n    const base = STORE_KEY + '/' + id + '/';\n\n    // delete specific key in the storage\n    if( key )\n        localStorage.removeItem(base + key)\n\n    // delete all keys in the storage with a specific tagify id\n    else {\n        for(let k in localStorage)\n            if( k.includes(base) )\n                localStorage.removeItem(k)\n    }\n}\n", "export default {\r\n    empty      : \"empty\",\r\n    exceed     : \"number of tags exceeded\",\r\n    pattern    : \"pattern mismatch\",\r\n    duplicate  : \"already exists\",\r\n    notAllowed : \"not allowed\"\r\n}", "import {ZERO_WIDTH_UNICODE_CHAR} from './constants'\n\nexport default {\n    /**\n     *\n     * @param {DOM Object} input     Original input DOm element\n     * @param {Object}     settings  Tagify instance settings Object\n     */\n    wrapper(input, _s){\n        return `<tags class=\"${_s.classNames.namespace} ${_s.mode ? `${_s.classNames[_s.mode + \"Mode\"]}` : \"\"} ${input.className}\"\n                    ${_s.readonly ? 'readonly' : ''}\n                    ${_s.disabled ? 'disabled' : ''}\n                    ${_s.required ? 'required' : ''}\n                    ${_s.mode === 'select' ? \"spellcheck='false'\" : ''}\n                    tabIndex=\"-1\">\n                    ${this.settings.templates.input.call(this)}\n                ${ZERO_WIDTH_UNICODE_CHAR}\n        </tags>`\n    },\n\n    input() {\n        var _s = this.settings,\n            placeholder = _s.placeholder || ZERO_WIDTH_UNICODE_CHAR;\n\n        return `<span ${!_s.readonly && _s.userInput ? 'contenteditable' : ''} tabIndex=\"0\" data-placeholder=\"${placeholder}\" aria-placeholder=\"${_s.placeholder || ''}\"\n                    class=\"${_s.classNames.input}\"\n                    role=\"textbox\"\n                    autocapitalize=\"false\"\n                    autocorrect=\"off\"\n                    aria-autocomplete=\"both\"\n                    aria-multiline=\"${_s.mode=='mix'?true:false}\"></span>`\n    },\n\n    tag(tagData, {settings: _s}){\n        return `<tag title=\"${(tagData.title || tagData.value)}\"\n                    contenteditable='false'\n                    tabIndex=\"${_s.a11y.focusableTags ? 0 : -1}\"\n                    class=\"${_s.classNames.tag} ${tagData.class || \"\"}\"\n                    ${this.getAttributes(tagData)}>\n            <x title='' tabIndex=\"${_s.a11y.focusableTags ? 0 : -1}\" class=\"${_s.classNames.tagX}\" role='button' aria-label='remove tag'></x>\n            <div>\n                <span ${_s.mode === 'select' && _s.userInput ? \"contenteditable='true'\" : ''} autocapitalize=\"false\" autocorrect=\"off\" spellcheck='false' class=\"${_s.classNames.tagText}\">${tagData[_s.tagTextProp] || tagData.value}</span>\n            </div>\n        </tag>`\n    },\n\n    dropdown(settings){\n        var _sd = settings.dropdown,\n            isManual = _sd.position == 'manual';\n\n        return `<div class=\"${isManual ? '' : settings.classNames.dropdown } ${_sd.classname}\" role=\"listbox\" aria-labelledby=\"dropdown\" dir=\"${_sd.RTL ? 'rtl' : ''}\">\n                    <div data-selector='tagify-suggestions-wrapper' class=\"${settings.classNames.dropdownWrapper}\"></div>\n                </div>`\n    },\n\n    dropdownContent(HTMLContent) {\n        var _t = this.settings.templates,\n            suggestions = this.state.dropdown.suggestions;\n\n        return `\n            ${_t.dropdownHeader.call(this, suggestions)}\n            ${HTMLContent}\n            ${_t.dropdownFooter.call(this, suggestions)}\n        `\n    },\n\n    dropdownItem(item){\n        return `<div ${this.getAttributes(item)}\n                    class='${this.settings.classNames.dropdownItem} ${this.isTagDuplicate(item.value) ? this.settings.classNames.dropdownItemSelected: \"\"} ${item.class || \"\"}'\n                    tabindex=\"0\"\n                    role=\"option\">${item.mappedValue || item.value}</div>`\n    },\n\n    /**\n     * @param {Array} suggestions An array of all the matched suggested items, including those which were sliced away due to the \"dropdown.maxItems\" setting\n     */\n    dropdownHeader(suggestions){\n        return `<header data-selector='tagify-suggestions-header' class=\"${this.settings.classNames.dropdownHeader}\"></header>`\n    },\n\n    dropdownFooter(suggestions){\n        var hasMore = suggestions.length - this.settings.dropdown.maxItems;\n\n        return hasMore > 0\n            ? `<footer data-selector='tagify-suggestions-footer' class=\"${this.settings.classNames.dropdownFooter}\">\n                ${hasMore} more items. Refine your search.\n            </footer>`\n            : '';\n    },\n\n    dropdownItemNoMatch: null\n}\n", "import { decode, extend, getfirstTextNode, isChromeAndroidBrowser, isNodeTag, isWithinNodeTag, injectAtCaret, getSetTagData, fixCaretBetweenTags, placeCaretAfterNode } from './helpers'\nimport {ZERO_WIDTH_CHAR} from './constants'\n\nexport function triggerChangeEvent(){\n    if( this.settings.mixMode.integrated ) return;\n\n    var inputElm = this.DOM.originalInput,\n        changed = this.state.lastOriginalValueReported !== inputElm.value,\n        event = new CustomEvent(\"change\", {bubbles: true}); // must use \"CustomEvent\" and not \"Event\" to support IE\n\n    if( !changed ) return;\n\n    // must apply this BEFORE triggering the simulated event\n    this.state.lastOriginalValueReported = inputElm.value\n\n    // React hack: https://github.com/facebook/react/issues/11488\n    event.simulated = true\n    if (inputElm._valueTracker)\n        inputElm._valueTracker.setValue(Math.random())\n\n    inputElm.dispatchEvent(event)\n\n    // also trigger a Tagify event\n    this.trigger(\"change\", this.state.lastOriginalValueReported)\n\n    // React, for some reason, clears the input's value after \"dispatchEvent\" is fired\n    inputElm.value = this.state.lastOriginalValueReported\n}\n\nexport default {\n    // bind custom events which were passed in the settings\n    customBinding(){\n        this.customEventsList.forEach(name => {\n            this.on(name, this.settings.callbacks[name])\n        })\n    },\n\n    binding( bindUnbind = true ){\n        var _s = this.settings,\n            _CB = this.events.callbacks,\n            _CBR,\n            action = bindUnbind ? 'addEventListener' : 'removeEventListener';\n\n        // do not allow the main events to be bound more than once\n        if( this.state.mainEvents && bindUnbind )\n            return;\n\n        // set the binding state of the main events, so they will not be bound more than once\n        this.state.mainEvents = bindUnbind;\n\n        // everything inside gets executed only once-per instance\n        if( bindUnbind && !this.listeners.main ){\n            this.events.bindGlobal.call(this);\n\n            if( this.settings.isJQueryPlugin )\n                jQuery(this.DOM.originalInput).on('tagify.removeAllTags', this.removeAllTags.bind(this))\n        }\n\n        // setup callback references so events could be removed later\n        _CBR = (this.listeners.main = this.listeners.main || {\n            keydown          : ['input', _CB.onKeydown.bind(this)],\n            click            : ['scope', _CB.onClickScope.bind(this)],\n            dblclick         : _s.mode != 'select' && ['scope', _CB.onDoubleClickScope.bind(this)],\n            paste            : ['input', _CB.onPaste.bind(this)],\n            drop             : ['input', _CB.onDrop.bind(this)],\n            compositionstart : ['input', _CB.onCompositionStart.bind(this)],\n            compositionend   : ['input', _CB.onCompositionEnd.bind(this)]\n        })\n\n        for( var eventName in _CBR ){\n            _CBR[eventName] && this.DOM[_CBR[eventName][0]][action](eventName, _CBR[eventName][1]);\n        }\n\n        // observers\n        var inputMutationObserver = this.listeners.main.inputMutationObserver || new MutationObserver(_CB.onInputDOMChange.bind(this));\n\n        // cleaup just-in-case\n        inputMutationObserver.disconnect()\n\n        // observe stuff\n        if( _s.mode == 'mix' ) {\n            inputMutationObserver.observe(this.DOM.input, {childList:true})\n        }\n\n        this.events.bindOriginaInputListener.call(this)\n    },\n\n    bindOriginaInputListener(delay) {\n        const DELAY = (delay||0) + 500\n\n        if(!this.listeners.main) return\n        // listen to original input changes (unfortunetly this is the best way...)\n        // https://stackoverflow.com/a/1949416/104380\n        clearInterval(this.listeners.main.originalInputValueObserverInterval)\n        this.listeners.main.originalInputValueObserverInterval = setInterval(this.events.callbacks.observeOriginalInputValue.bind(this), DELAY)\n    },\n\n    bindGlobal( unbind ) {\n        var _CB = this.events.callbacks,\n            action = unbind ? 'removeEventListener' : 'addEventListener',\n            e;\n\n        if( !this.listeners || (!unbind  && this.listeners.global) ) return; // do not re-bind\n\n        // these events are global and should never be unbinded, unless the instance is destroyed:\n        this.listeners.global = this.listeners.global || [\n            {\n                type: this.isIE ? 'keydown' : 'input',  // IE cannot register \"input\" events on contenteditable elements, so the \"keydown\" should be used instead..\n                target: this.DOM.input,\n                cb: _CB[this.isIE ? 'onInputIE' : 'onInput'].bind(this)\n            },\n            {\n                type: 'keydown',\n                target: window,\n                cb: _CB.onWindowKeyDown.bind(this)\n            },\n            {\n                type: 'focusin',\n                target: this.DOM.scope,\n                cb: _CB.onFocusBlur.bind(this)\n            },\n            {\n                type: 'focusout',\n                target: this.DOM.scope,\n                cb: _CB.onFocusBlur.bind(this)\n            },\n            {\n                type: 'click',\n                target: document,\n                cb: _CB.onClickAnywhere.bind(this),\n                useCapture: true\n            },\n        ]\n\n        for( e of this.listeners.global )\n            e.target[action](e.type, e.cb, !!e.useCapture);\n    },\n\n    unbindGlobal() {\n        this.events.bindGlobal.call(this, true);\n    },\n\n    /**\n     * DOM events callbacks\n     */\n    callbacks : {\n        onFocusBlur(e){\n            // when focusing within a tag which is in edit-mode\n            var _s = this.settings,\n                nodeTag = isWithinNodeTag.call(this, e.relatedTarget),\n                targetIsTagNode = isNodeTag.call(this, e.relatedTarget),\n                isTargetXBtn = e.target.classList.contains(_s.classNames.tagX),\n                isFocused = e.type == 'focusin',\n                lostFocus = e.type == 'focusout';\n\n            // when focusing within a tag which is in edit-mode, only and specifically on the text-part of the tag node\n            // and not the X button or any other custom element thatmight be there\n            // var tagTextNode = e.target?.closest(this.settings.classNames.tagTextSelector)\n\n            if(isTargetXBtn && _s.mode != 'mix') {\n                this.DOM.input.focus()\n            }\n\n            if( nodeTag && isFocused && (!targetIsTagNode) && !isTargetXBtn) {\n                this.toggleFocusClass(this.state.hasFocus = +new Date())\n\n                // only if focused within a tag's text node should the `onEditTagFocus` function be called.\n                // if clicked anywhere else inside a tag, which had triggered an `focusin` event,\n                // the onFocusBlur should be aborted. This part was spcifically written for `select` mode.\n                // tagTextNode && this.events.callbacks.onEditTagFocus.call(this, nodeTag)\n            }\n\n            var text = e.target ? this.trim(this.DOM.input.textContent) : '', // a string\n                currentDisplayValue = this.value?.[0]?.[_s.tagTextProp],\n                ddEnabled = _s.dropdown.enabled >= 0,\n                eventData = {relatedTarget:e.relatedTarget},\n                isTargetSelectOption = this.state.actions.selectOption && (ddEnabled || !_s.dropdown.closeOnSelect),\n                isTargetAddNewBtn = this.state.actions.addNew && ddEnabled,\n                shouldAddTags;\n\n            if( lostFocus ){\n                if( e.relatedTarget === this.DOM.scope ){\n                    this.dropdown.hide()\n                    this.DOM.input.focus()\n                    return\n                }\n\n                this.postUpdate()\n                _s.onChangeAfterBlur && this.triggerChangeEvent()\n            }\n\n            if( isTargetSelectOption || isTargetAddNewBtn || isTargetXBtn ) {\n                return;\n            }\n\n            // should only loose focus at this point if the event was not generated from within a tag\n            if( isFocused || nodeTag ) {\n                this.state.hasFocus = +new Date()\n            }\n            else {\n                this.state.hasFocus = false;\n            }\n\n            this.toggleFocusClass(this.state.hasFocus)\n\n            if( _s.mode == 'mix' ){\n                if( isFocused ){\n                    this.trigger(\"focus\", eventData)\n                }\n\n                else if( lostFocus ){\n                    this.trigger(\"blur\", eventData)\n                    this.loading(false)\n                    this.dropdown.hide()\n                    // reset state which needs reseting\n                    this.state.dropdown.visible = undefined\n                    this.setStateSelection()\n                }\n\n                return\n            }\n\n            if( isFocused ){\n                if( !_s.focusable ) return;\n\n                var dropdownCanBeShown = _s.dropdown.enabled === 0 && !this.state.dropdown.visible,\n                    condition2 = !targetIsTagNode || _s.mode === 'select',\n                    tagText = this.DOM.scope.querySelector(this.settings.classNames.tagTextSelector)\n\n                this.trigger(\"focus\", eventData)\n                //  e.target.classList.remove('placeholder');\n                if( dropdownCanBeShown && condition2 ){  // && _s.mode != \"select\"\n                    this.dropdown.show(this.value.length ? '' : undefined)\n\n                    this.events.callbacks.onDoubleClickScope.call(this, e)\n                    this.setRangeAtStartEnd(false, tagText)\n                }\n\n                return\n            }\n\n            else if( lostFocus ){\n                this.trigger(\"blur\", eventData)\n                this.loading(false)\n\n                // when clicking the X button of a selected tag, it is unwanted for it to be added back\n                // again in a few more lines of code (shouldAddTags && addTags)\n                if( _s.mode == 'select' ) {\n                    if( this.value.length ) {\n                        let firstTagNode = this.getTagElms()[0];\n                        text = this.trim(firstTagNode.textContent)\n                    }\n\n                    // if nothing has changed (same display value), do not add a tag\n                    if( currentDisplayValue === text )\n                        text = ''\n                }\n\n                shouldAddTags = text && !this.state.actions.selectOption && _s.addTagOnBlur && _s.addTagOn.includes('blur');\n                // do not add a tag if \"selectOption\" action was just fired (this means a tag was just added from the dropdown)\n                shouldAddTags && this.addTags(text, true)\n            }\n\n            // when clicking a tag, do not consider this is a \"blur\" event\n            if ( !nodeTag )  {\n                this.DOM.input.removeAttribute('style')\n                this.dropdown.hide()\n            }\n        },\n\n        onCompositionStart(e){\n            this.state.composing = true\n        },\n\n        onCompositionEnd(e){\n            this.state.composing = false\n        },\n\n        onWindowKeyDown(e){\n            var _s = this.settings,\n                focusedElm = document.activeElement,\n                withinTag = isWithinNodeTag.call(this, focusedElm),\n                isBelong = withinTag && this.DOM.scope.contains(focusedElm),\n                isInputNode = focusedElm === this.DOM.input,\n                isReadyOnlyTag = isBelong && focusedElm.hasAttribute('readonly'),\n                tagText = this.DOM.scope.querySelector(this.settings.classNames.tagTextSelector),\n                isDropdownVisible = this.state.dropdown.visible,\n                nextTag;\n\n            if( !(e.key === 'Tab' && isDropdownVisible) && !this.state.hasFocus && (!isBelong || isReadyOnlyTag) || isInputNode ) return;\n\n            nextTag = focusedElm.nextElementSibling;\n\n            var targetIsRemoveBtn = e.target.classList.contains(_s.classNames.tagX);\n\n            switch( e.key ){\n                // remove tag if has focus\n                case 'Backspace': {\n                    if( !_s.readonly && !this.state.editing ) {\n                        this.removeTags(focusedElm);\n                        (nextTag ? nextTag : this.DOM.input).focus()\n                    }\n\n                    break;\n                }\n\n                case 'Enter': {\n                    if( targetIsRemoveBtn ) {\n                        this.removeTags( e.target.parentNode )\n                        return\n                    }\n\n                    if( _s.a11y.focusableTags && isNodeTag.call(this, focusedElm) )\n                        setTimeout(this.editTag.bind(this), 0, focusedElm)\n\n                    break;\n                }\n\n                case 'ArrowDown' : {\n                    // if( _s.mode == 'select' ) // issue #333\n                    if( !this.state.dropdown.visible && _s.mode != 'mix' )\n                        this.dropdown.show()\n                    break;\n                }\n\n                case 'Tab': {\n                    tagText?.focus();\n                    break;\n                }\n            }\n        },\n\n        onKeydown(e){\n            var _s = this.settings;\n\n            // ignore keys during IME composition or when user input is not allowed\n            if( this.state.composing || !_s.userInput )\n                return\n\n            if( _s.mode == 'select' && _s.enforceWhitelist && this.value.length && e.key != 'Tab' ){\n                e.preventDefault()\n            }\n\n            var s = this.trim(e.target.textContent);\n\n            this.trigger(\"keydown\", {event:e})\n\n            _s.hooks.beforeKeyDown(e, {tagify:this})\n                .then(result => {\n                    /**\n                     * ONLY FOR MIX-MODE:\n                     */\n                    if( _s.mode == 'mix' ){\n                        switch( e.key ){\n                            case 'Left' :\n                            case 'ArrowLeft' : {\n                                // when left arrow was pressed, set a flag so when the dropdown is shown, right-arrow will be ignored\n                                // because it seems likely the user wishes to use the arrows to move the caret\n                                this.state.actions.ArrowLeft = true\n                                break\n                            }\n\n                            case 'Delete':\n                            case 'Backspace' : {\n                                if( this.state.editing ) return\n\n                                var sel = document.getSelection(),\n                                    deleteKeyTagDetected = e.key == 'Delete' && sel.anchorOffset == (sel.anchorNode.length || 0),\n                                    prevAnchorSibling = sel.anchorNode.previousSibling,\n                                    isCaretAfterTag = sel.anchorNode.nodeType == 1 || !sel.anchorOffset && prevAnchorSibling && prevAnchorSibling.nodeType == 1 && sel.anchorNode.previousSibling,\n                                    lastInputValue = decode(this.DOM.input.innerHTML),\n                                    lastTagElems = this.getTagElms(),\n                                    isZWS = sel.anchorNode.length === 1 && sel.anchorNode.nodeValue == String.fromCharCode(8203),\n                                    //  isCaretInsideTag = sel.anchorNode.parentNode('.' + _s.classNames.tag),\n                                    tagBeforeCaret,\n                                    tagElmToBeDeleted,\n                                    firstTextNodeBeforeTag;\n\n                                if( _s.backspace == 'edit' && isCaretAfterTag ){\n                                    tagBeforeCaret = sel.anchorNode.nodeType == 1 ? null : sel.anchorNode.previousElementSibling;\n                                    setTimeout(this.editTag.bind(this), 0, tagBeforeCaret); // timeout is needed to the last cahacrter in the edited tag won't get deleted\n                                    e.preventDefault() // needed so the tag elm won't get deleted\n                                    return;\n                                }\n\n                                if( isChromeAndroidBrowser() && isCaretAfterTag instanceof Element ){\n                                    firstTextNodeBeforeTag = getfirstTextNode(isCaretAfterTag)\n\n                                    if( !isCaretAfterTag.hasAttribute('readonly') )\n                                        isCaretAfterTag.remove() // since this is Chrome, can safetly use this \"new\" DOM API\n\n                                    // Android-Chrome wrongly hides the keyboard, and loses focus,\n                                    // so this hack below is needed to regain focus at the correct place:\n                                    this.DOM.input.focus()\n                                    setTimeout(() => {\n                                        placeCaretAfterNode(firstTextNodeBeforeTag)\n                                        this.DOM.input.click()\n\n                                    })\n\n                                    return\n                                }\n\n                                if( sel.anchorNode.nodeName == 'BR')\n                                    return\n\n                                if( (deleteKeyTagDetected || isCaretAfterTag) && sel.anchorNode.nodeType == 1 )\n                                    if( sel.anchorOffset == 0 ) // caret is at the very begining, before a tag\n                                        tagElmToBeDeleted = deleteKeyTagDetected // delete key pressed\n                                            ? lastTagElems[0]\n                                            : null;\n                                    else\n                                        tagElmToBeDeleted = lastTagElems[Math.min(lastTagElems.length, sel.anchorOffset) - 1]\n\n                                // find out if a tag *might* be a candidate for deletion, and if so, which\n                                else if( deleteKeyTagDetected )\n                                    tagElmToBeDeleted = sel.anchorNode.nextElementSibling;\n\n                                else if( isCaretAfterTag instanceof Element )\n                                    tagElmToBeDeleted = isCaretAfterTag;\n\n                                // tagElm.hasAttribute('readonly')\n                                if( sel.anchorNode.nodeType == 3 &&   // node at caret location is a Text node\n                                    !sel.anchorNode.nodeValue    &&   // has some text\n                                    sel.anchorNode.previousElementSibling )  // text node has a Tag node before it\n                                    e.preventDefault()\n\n                                // if backspace not allowed, do nothing\n                                // TODO: a better way to detect if nodes were deleted is to simply check the \"this.value\" before & after\n                                if( (isCaretAfterTag || deleteKeyTagDetected) && !_s.backspace ){\n                                    e.preventDefault()\n                                    return\n                                }\n\n                                if( sel.type != 'Range' && !sel.anchorOffset && sel.anchorNode == this.DOM.input && e.key != 'Delete' ){\n                                    e.preventDefault()\n                                    return\n                                }\n\n                                if( sel.type != 'Range' && tagElmToBeDeleted && tagElmToBeDeleted.hasAttribute('readonly') ){\n                                    // allows the continuation of deletion by placing the caret on the first previous textNode.\n                                    // since a few readonly-tags might be one after the other, iteration is needed:\n\n                                    placeCaretAfterNode( getfirstTextNode(tagElmToBeDeleted) )\n                                    return\n                                }\n\n                                if ( e.key == 'Delete' && isZWS && getSetTagData(sel.anchorNode.nextSibling) ) {\n                                    this.removeTags(sel.anchorNode.nextSibling)\n                                }\n\n                                // update regarding https://github.com/yairEO/tagify/issues/762#issuecomment-786464317:\n                                // the bug described is more severe than the fix below, therefore I disable the fix until a solution\n                                // is found which work well for both cases.\n                                // -------\n                                // nodeType is \"1\" only when the caret is at the end after last tag (no text after), or before first first (no text before)\n                                /*\n                                if( this.isFirefox && sel.anchorNode.nodeType == 1 && sel.anchorOffset != 0 ){\n                                    this.removeTags() // removes last tag by default if no parameter supplied\n                                    // place caret inside last textNode, if exist. it's an annoying bug only in FF,\n                                    // if the last tag is removed, and there is a textNode before it, the caret is not placed at its end\n                                    placeCaretAfterNode( setRangeAtStartEnd(false, this.DOM.input) )\n                                }\n                                */\n\n                                break;\n                            }\n                            // currently commented to allow new lines in mixed-mode\n                            // case 'Enter' :\n                            //     // e.preventDefault(); // solves Chrome bug - http://stackoverflow.com/a/20398191/104380\n                        }\n\n                        return true\n                    }\n\n                    var isManualDropdown = _s.dropdown.position == 'manual';\n\n                    switch( e.key ){\n                        case 'Backspace' :\n                            if( _s.mode == 'select' && _s.enforceWhitelist && this.value.length)\n                                this.removeTags()\n\n                            else if( !this.state.dropdown.visible || _s.dropdown.position == 'manual' ){\n                                if( e.target.textContent == \"\" || s.charCodeAt(0) == 8203 ){  // 8203: ZERO WIDTH SPACE unicode\n                                    if( _s.backspace === true )\n                                        this.removeTags()\n                                    else if( _s.backspace == 'edit' )\n                                        setTimeout(this.editTag.bind(this), 0) // timeout reason: when edited tag gets focused and the caret is placed at the end, the last character gets deletec (because of backspace)\n                                }\n                            }\n                            break;\n\n                        case 'Esc' :\n                        case 'Escape' :\n                            if( this.state.dropdown.visible ) return\n                            e.target.blur()\n                            break;\n\n                        case 'Down' :\n                        case 'ArrowDown' :\n                            // if( _s.mode == 'select' ) // issue #333\n                            if( !this.state.dropdown.visible )\n                                this.dropdown.show()\n                            break;\n\n                        case 'ArrowRight' : {\n                            let tagData = this.state.inputSuggestion || this.state.ddItemData\n                            if( tagData && _s.autoComplete.rightKey ){\n                                this.addTags([tagData], true)\n                                return;\n                            }\n                            break\n                        }\n\n                        case 'Tab' : {\n                            return true;\n                        }\n\n                        case 'Enter' :\n                            // manual suggestion boxes are assumed to always be visible\n                            if( this.state.dropdown.visible && !isManualDropdown ) return\n                            e.preventDefault(); // solves Chrome bug - http://stackoverflow.com/a/20398191/104380\n                            // because the main \"keydown\" event is bound before the dropdown events, this will fire first and will not *yet*\n                            // know if an option was just selected from the dropdown menu. If an option was selected,\n                            // the dropdown events should handle adding the tag\n\n                            var thingToAdd = this.state.autoCompleteData || s;\n\n                            setTimeout(()=>{\n                                if( (!this.state.dropdown.visible || isManualDropdown) && !this.state.actions.selectOption && _s.addTagOn.includes(e.key.toLowerCase()) ) {\n                                    this.addTags([thingToAdd], true)\n                                    this.state.autoCompleteData = null\n                                }\n                            })\n                    }\n                })\n                .catch(err => err)\n        },\n\n        onInput(e){\n            this.postUpdate() // toggles \"tagify--empty\" class\n\n            var _s = this.settings;\n\n            if( _s.mode == 'mix' )\n                return this.events.callbacks.onMixTagsInput.call(this, e);\n\n            var value = this.input.normalize.call(this, undefined, {trim: false}),\n                showSuggestions = value.length >= _s.dropdown.enabled,\n                eventData = {value, inputElm:this.DOM.input},\n                validation = this.validateTag({value});\n\n            if( _s.mode == 'select' ) {\n                this.toggleScopeValidation(validation)\n            }\n\n            eventData.isValid = validation;\n\n            // for IE; since IE doesn't have an \"input\" event so \"keyDown\" is used instead to trigger the \"onInput\" callback,\n            // and so many keys do not change the input, and for those do not continue.\n            if( this.state.inputText == value ) return;\n\n            // save the value on the input's State object\n            this.input.set.call(this, value, false); // update the input with the normalized value and run validations\n            // this.setRangeAtStartEnd(false, this.DOM.input); // fix caret position\n\n            // if delimiters detected, add tags\n            if( value.search(_s.delimiters) != -1 ){\n                if( this.addTags( value ) ){\n                    this.input.set.call(this); // clear the input field's value\n                }\n            }\n\n            else if( _s.dropdown.enabled >= 0 ){\n                this.dropdown[showSuggestions ? \"show\" : \"hide\"](value);\n            }\n\n            this.trigger('input', eventData) // \"input\" event must be triggered at this point, before the dropdown is shown\n        },\n\n        onMixTagsInput( e ){\n            var rangeText, match, matchedPatternCount, tag, showSuggestions, selection,\n                _s = this.settings,\n                lastTagsCount = this.value.length,\n                matchFlaggedTag,\n                matchDelimiters,\n                tagsElems = this.getTagElms(),\n                fragment = document.createDocumentFragment(),\n                range = window.getSelection().getRangeAt(0),\n                remainingTagsValues = [].map.call(tagsElems, node => getSetTagData(node).value);\n\n            // Android Chrome \"keydown\" event argument does not report the correct \"key\".\n            // this workaround is needed to manually call \"onKeydown\" method with a synthesized event object\n            if( e.inputType == \"deleteContentBackward\" && isChromeAndroidBrowser() ){\n                this.events.callbacks.onKeydown.call(this, {\n                    target: e.target,\n                    key: \"Backspace\",\n                })\n            }\n\n            // if there's a tag as the first child of the input, always make sure it has a zero-width character before it\n            // or if two tags are next to each-other, add a zero-space width character (For the caret to appear)\n            fixCaretBetweenTags(this.getTagElms())\n\n            // re-add \"readonly\" tags which might have been removed\n            this.value.slice().forEach(item => {\n                if( item.readonly && !remainingTagsValues.includes(item.value) )\n                    fragment.appendChild( this.createTagElem(item) )\n            })\n\n            if( fragment.childNodes.length ){\n                range.insertNode(fragment)\n                this.setRangeAtStartEnd(false, fragment.lastChild)\n            }\n\n            // check if tags were \"magically\" added/removed (browser redo/undo or CTRL-A -> delete)\n            if( tagsElems.length != lastTagsCount ){\n                this.value = [].map.call(this.getTagElms(), node => getSetTagData(node))\n                this.update({ withoutChangeEvent:true })\n                return\n            }\n\n            if( this.hasMaxTags() )\n                return true\n\n            if( window.getSelection ){\n                selection = window.getSelection()\n\n                // only detect tags if selection is inside a textNode (not somehow on already-existing tag)\n                if( selection.rangeCount > 0 && selection.anchorNode.nodeType == 3 ){\n                    range = selection.getRangeAt(0).cloneRange()\n                    range.collapse(true)\n                    range.setStart(selection.focusNode, 0)\n\n                    rangeText = range.toString().slice(0, range.endOffset)  // slice the range so everything AFTER the caret will be trimmed\n                    // split = range.toString().split(_s.mixTagsAllowedAfter)  // [\"foo\", \"bar\", \"@baz\"]\n                    matchedPatternCount = rangeText.split(_s.pattern).length - 1;\n\n                    match = rangeText.match( _s.pattern )\n\n                    if( match )\n                        // tag string, example: \"@aaa ccc\"\n                        tag = rangeText.slice( rangeText.lastIndexOf(match[match.length-1]) )\n\n                    if( tag ){\n                        this.state.actions.ArrowLeft = false // start fresh, assuming the user did not (yet) used any arrow to move the caret\n                        this.state.tag = {\n                            prefix : tag.match(_s.pattern)[0],\n                            value  : tag.replace(_s.pattern, ''), // get rid of the prefix\n                        }\n                        this.state.tag.baseOffset = selection.baseOffset - this.state.tag.value.length\n\n                        matchDelimiters = this.state.tag.value.match(_s.delimiters)\n                        // if a delimeter exists, add the value as tag (exluding the delimiter)\n                        if( matchDelimiters ){\n                            this.state.tag.value = this.state.tag.value.replace(_s.delimiters, '')\n                            this.state.tag.delimiters = matchDelimiters[0]\n                            this.addTags(this.state.tag.value, _s.dropdown.clearOnSelect)\n                            this.dropdown.hide()\n                            return\n                        }\n\n                        showSuggestions = this.state.tag.value.length >= _s.dropdown.enabled\n\n                        // When writing something that might look like a tag (an email address) but isn't one - it is unwanted\n                        // the suggestions dropdown be shown, so the user can close it (in any way), and while continue typing,\n                        // dropdown should stay closed until another tag is typed.\n                        // if( this.state.tag.value.length && this.state.dropdown.visible === false )\n                        //     showSuggestions = false\n\n                        // test for similar flagged tags to the current tag\n\n                        try{\n                            matchFlaggedTag = this.state.flaggedTags[this.state.tag.baseOffset]\n                            matchFlaggedTag = matchFlaggedTag.prefix   == this.state.tag.prefix &&\n                                              matchFlaggedTag.value[0] == this.state.tag.value[0]\n\n                            // reset\n                            if( this.state.flaggedTags[this.state.tag.baseOffset] && !this.state.tag.value )\n                                delete this.state.flaggedTags[this.state.tag.baseOffset];\n                        }\n                        catch(err){}\n\n                        // scenario: (do not show suggestions of another matched tag, if more than one detected)\n                        // (2 tags exist)                          \" a@a.com and @\"\n                        // (second tag is removed by backspace)    \" a@a.com and \"\n                        if( matchFlaggedTag || matchedPatternCount < this.state.mixMode.matchedPatternCount )\n                            showSuggestions = false\n                    }\n                    // no (potential) tag found\n                    else{\n                        this.state.flaggedTags = {}\n                    }\n\n                    this.state.mixMode.matchedPatternCount = matchedPatternCount\n                }\n            }\n\n\n            // wait until the \"this.value\" has been updated (see \"onKeydown\" method for \"mix-mode\")\n            // the dropdown must be shown only after this event has been triggered, so an implementer could\n            // dynamically change the whitelist.\n            setTimeout(()=>{\n                this.update({withoutChangeEvent:true})\n                this.trigger('input', extend({}, this.state.tag, {textContent:this.DOM.input.textContent}))\n\n                if( this.state.tag )\n                    this.dropdown[showSuggestions ? \"show\" : \"hide\"](this.state.tag.value);\n            }, 10)\n        },\n\n        onInputIE(e){\n            var _this = this;\n            // for the \"e.target.textContent\" to be changed, the browser requires a small delay\n            setTimeout(function(){\n                _this.events.callbacks.onInput.call(_this, e)\n            })\n        },\n\n        observeOriginalInputValue(){\n            // if, for some reason, the Tagified element is no longer in the DOM,\n            // call the \"destroy\" method to kill all references to timeouts/intervals\n            if( !this.DOM.originalInput.parentNode ) this.destroy()\n\n            // if original input value changed for some reason (for exmaple a form reset)\n            if( this.DOM.originalInput.value != this.DOM.originalInput.tagifyValue )\n                this.loadOriginalValues()\n        },\n\n        onClickAnywhere(e){\n            if (e.target != this.DOM.scope && !this.DOM.scope.contains(e.target)) {\n                this.toggleFocusClass(false)\n                this.state.hasFocus = false\n\n                let closestTagifyDropdownElem = e.target.closest(this.settings.classNames.dropdownSelector);\n\n                // do not hide the dropdown if a click was initiated within it and that dropdown belongs to this Tagify instance\n                if( closestTagifyDropdownElem?.__tagify != this )\n                    this.dropdown.hide()\n            }\n        },\n\n        onClickScope(e){\n            var _s = this.settings,\n                tagElm = e.target.closest('.' + _s.classNames.tag),\n                isScope = e.target === this.DOM.scope,\n                timeDiffFocus = +new Date() - this.state.hasFocus;\n\n            if( isScope && _s.mode != 'select' ){\n                // if( !this.state.hasFocus )\n                    this.DOM.input.focus()\n                return\n            }\n\n            else if( e.target.classList.contains(_s.classNames.tagX) ){\n                this.removeTags( e.target.parentNode )\n                return\n            }\n\n            else if( tagElm && !this.state.editing ){\n                this.trigger(\"click\", { tag:tagElm, index:this.getNodeIndex(tagElm), data:getSetTagData(tagElm), event:e })\n\n                if( _s.editTags === 1 || _s.editTags.clicks === 1 || _s.mode == 'select' )\n                    this.events.callbacks.onDoubleClickScope.call(this, e)\n\n                return\n            }\n\n            // when clicking on the input itself\n            else if( e.target == this.DOM.input ){\n                if( _s.mode == 'mix' ){\n                    // firefox won't show caret if last element is a tag (and not a textNode),\n                    // so an empty textnode should be added\n                    this.fixFirefoxLastTagNoCaret()\n                }\n\n                if( timeDiffFocus > 500 || !_s.focusable ){\n                    if( this.state.dropdown.visible )\n                        this.dropdown.hide()\n                    else if( _s.dropdown.enabled === 0 && _s.mode != 'mix' )\n                        this.dropdown.show(this.value.length ? '' : undefined)\n                    return\n                }\n            }\n\n            if( _s.mode == 'select' && _s.dropdown.enabled === 0 && !this.state.dropdown.visible) {\n                this.events.callbacks.onDoubleClickScope.call(this, {...e, target: this.getTagElms()[0]})\n\n                !_s.userInput && this.dropdown.show()\n            }\n        },\n\n        // special proccess is needed for pasted content in order to \"clean\" it\n        onPaste(e){\n            e.preventDefault()\n\n            var tagsElems,\n                _s = this.settings,\n                selectModeWithoutInput =_s.mode == 'select' && _s.enforceWhitelist;\n\n            if( selectModeWithoutInput || !_s.userInput ){\n                return false;\n            }\n\n            var clipboardData, pastedText;\n\n            if( _s.readonly ) return\n\n            // Get pasted data via clipboard API\n            clipboardData = e.clipboardData || window.clipboardData\n            pastedText = clipboardData.getData('Text')\n\n            _s.hooks.beforePaste(e, {tagify:this, pastedText, clipboardData})\n                .then(result => {\n                    if( result === undefined )\n                        result = pastedText;\n\n                    if( result ){\n                        this.injectAtCaret(result, window.getSelection().getRangeAt(0))\n\n                        if( this.settings.mode == 'mix' ){\n                            this.events.callbacks.onMixTagsInput.call(this, e);\n                        }\n\n                        else if( this.settings.pasteAsTags ){\n                            tagsElems = this.addTags(this.state.inputText + result, true)\n                        }\n\n                        else {\n                            this.state.inputText = result\n                            this.dropdown.show(result)\n                        }\n                    }\n\n                    this.trigger('paste', {event: e, pastedText, clipboardData, tagsElems})\n                })\n                .catch(err => err)\n        },\n\n        onDrop(e){\n            e.preventDefault()\n        },\n\n        onEditTagInput( editableElm, e ){\n            var tagElm = editableElm.closest('.' + this.settings.classNames.tag),\n                tagElmIdx = this.getNodeIndex(tagElm),\n                tagData = getSetTagData(tagElm),\n                textValue = this.input.normalize.call(this, editableElm),\n                dataForChangedProp = {[this.settings.tagTextProp]: textValue, __tagId: tagData.__tagId}, // \"__tagId\" is needed so validation will skip current tag when checking for dups\n                isValid = this.validateTag(dataForChangedProp), // the value could have been invalid in the first-place so make sure to re-validate it (via \"addEmptyTag\" method)\n                hasChanged = this.editTagChangeDetected(extend(tagData, dataForChangedProp));\n\n            // if the value is same as before-editing and the tag was valid before as well, ignore the  current \"isValid\" result, which is false-positive\n            if( !hasChanged && editableElm.originalIsValid === true )\n                isValid = true\n\n            tagElm.classList.toggle(this.settings.classNames.tagInvalid, isValid !== true)\n            tagData.__isValid = isValid\n\n            tagElm.title = isValid === true\n                ? tagData.title || tagData.value\n                : isValid // change the tag's title to indicate why is the tag invalid (if it's so)\n\n            // show dropdown if typed text is equal or more than the \"enabled\" dropdown setting\n            if( textValue.length >= this.settings.dropdown.enabled ){\n                // this check is needed apparently because doing browser \"undo\" will fire\n                //  \"onEditTagInput\" but \"this.state.editing\" will be \"false\"\n                if( this.state.editing )\n                    this.state.editing.value = textValue\n                this.dropdown.show(textValue)\n            }\n\n            this.trigger(\"edit:input\", {\n                tag  : tagElm,\n                index: tagElmIdx,\n                data : extend({}, this.value[tagElmIdx], {newValue:textValue}),\n                event: e\n            })\n        },\n\n        onEditTagPaste( tagElm, e ){\n            // Get pasted data via clipboard API\n            var clipboardData = e.clipboardData || window.clipboardData,\n                pastedText = clipboardData.getData('Text');\n\n            e.preventDefault()\n\n            var newNode = injectAtCaret(pastedText)\n            this.setRangeAtStartEnd(false, newNode)\n        },\n\n        onEditTagClick( tagElm, e) {\n            this.events.callbacks.onClickScope.call(this, e)\n        },\n\n        onEditTagFocus( tagElm ){\n            this.state.editing = {\n                scope: tagElm,\n                input: tagElm.querySelector(\"[contenteditable]\")\n            }\n        },\n\n        onEditTagBlur( editableElm, e ){\n            // if \"relatedTarget\" is the tag then do not continue as this should not be considered a \"blur\" event\n            var isRelatedTargetNodeTag = isNodeTag.call(this, e.relatedTarget)\n\n            // in \"select-mode\" when editing the tag's template to include more nodes other than the editable \"span\",\n            // clicking those elements should not be considered a blur event\n            if( this.settings.mode == 'select' && isRelatedTargetNodeTag && e.relatedTarget.contains(e.target) ) {\n                this.dropdown.hide()\n                return\n            }\n\n            // if \"ESC\" key was pressed then the \"editing\" state should be `false` and if so, logic should not continue\n            // because \"ESC\" reverts the edited tag back to how it was (replace the node) before editing\n            if( !this.state.editing )\n                return;\n\n            if( !this.state.hasFocus )\n                this.toggleFocusClass()\n\n            if(!this.DOM.scope.contains(document.activeElement)) {\n                this.trigger(\"blur\", {})\n            }\n\n            // one scenario is when selecting a suggestion from the dropdown, when editing, and by selecting it\n            // the \"onEditTagDone\" is called directly, already replacing the tag, so the argument \"editableElm\"\n            // node isn't in the DOM anynmore because it has been replaced.\n            if( !this.DOM.scope.contains(editableElm) ) return;\n\n            var _s           = this.settings,\n                tagElm       = editableElm.closest('.' + _s.classNames.tag),\n                tagData      = getSetTagData(tagElm),\n                textValue    = this.input.normalize.call(this, editableElm),\n                dataForChangedProp = {[_s.tagTextProp]: textValue, __tagId: tagData.__tagId}, // \"__tagId\" is needed so validation will skip current tag when checking for dups\n                originalData = tagData.__originalData, // pre-edit data\n                hasChanged   = this.editTagChangeDetected(extend(tagData, dataForChangedProp)),\n                isValid      = this.validateTag(dataForChangedProp), // \"__tagId\" is needed so validation will skip current tag when checking for dups\n                hasMaxTags,\n                newTagData;\n\n            if( !textValue ){\n                this.onEditTagDone(tagElm)\n                return\n            }\n\n            // if nothing changed revert back to how it was before editing\n            if( !hasChanged ){\n                this.onEditTagDone(tagElm, originalData)\n                return\n            }\n\n            // need to know this because if \"keepInvalidTags\" setting is \"true\" and an invalid tag is edited as a valid one,\n            // but the maximum number of tags have alreay been reached, so it should not allow saving the new valid value.\n            // only if the tag was already valid before editing, ignore this check (see a few lines below)\n            hasMaxTags = this.hasMaxTags()\n\n            newTagData = extend(\n                {},\n                originalData,\n                {\n                    [_s.tagTextProp]: this.trim(textValue),\n                    __isValid: isValid\n                }\n            )\n\n            // pass through optional transformer defined in settings\n            _s.transformTag.call(this, newTagData, originalData)\n\n            // MUST re-validate after tag transformation\n            // only validate the \"tagTextProp\" because is the only thing that metters for validating an edited tag.\n            // -- Scenarios: --\n            // 1. max 3 tags allowd. there are 4 tags, one has invalid input and is edited to a valid one, and now should be marked as \"not allowed\" because limit of tags has reached\n            // 2. max 3 tags allowed. there are 3 tags, one is edited, and so max-tags vaildation should be OK\n            isValid = (!hasMaxTags || originalData.__isValid === true) && this.validateTag(newTagData)\n\n            if( isValid !== true ){\n                this.trigger(\"invalid\", { data:newTagData, tag:tagElm, message:isValid })\n\n                // do nothing if invalid, stay in edit-mode until corrected or reverted by presssing esc\n                if( _s.editTags.keepInvalid ) return\n\n                if( _s.keepInvalidTags )\n                    newTagData.__isValid = isValid\n                else\n                    // revert back if not specified to keep\n                    newTagData = originalData\n            }\n\n            else if( _s.keepInvalidTags ){\n                // cleaup any previous leftovers if the tag was invalid\n                delete newTagData.title\n                delete newTagData[\"aria-invalid\"]\n                delete newTagData.class\n            }\n\n            // tagElm.classList.toggle(_s.classNames.tagInvalid, true)\n\n            this.onEditTagDone(tagElm, newTagData)\n        },\n\n        onEditTagkeydown(e, tagElm){\n            // ignore keys during IME composition\n            if( this.state.composing )\n                return\n\n            this.trigger(\"edit:keydown\", {event:e})\n\n            switch( e.key ){\n                case 'Esc' :\n                case 'Escape' : {\n                    this.state.editing = false\n                    var hasValueToRevertTo = !!tagElm.__tagifyTagData.__originalData.value\n\n                    if( hasValueToRevertTo )\n                        // revert the tag to how it was before editing\n                        // replace current tag with original one (pre-edited one)\n                        tagElm.parentNode.replaceChild(tagElm.__tagifyTagData.__originalHTML, tagElm)\n                    else\n                        tagElm.remove()\n\n                    break\n                }\n                case 'Enter' :\n                case 'Tab' : {\n                    e.preventDefault()\n\n                    var EDITED_TAG_BLUR_DELAY = 0;\n\n                    // a setTimeout is used so when editing (in \"select\" mode) while the dropdown is shown and a suggestion is highlighted\n                    // and ENTER key is pressed down - the `dropdown.hide` method won't be invoked immediately and unbind the dropdown's\n                    // KEYDOWN \"ENTER\" before it has time to call the handler and select the suggestion.\n                    setTimeout(() => e.target.blur(), EDITED_TAG_BLUR_DELAY)\n                }\n            }\n        },\n\n        onDoubleClickScope(e){\n            var tagElm = e.target.closest('.' + this.settings.classNames.tag),\n                tagData = getSetTagData(tagElm),\n                _s = this.settings,\n                isEditingTag,\n                isReadyOnlyTag;\n\n            if( !tagElm || tagData.editable === false ) return\n\n            isEditingTag = tagElm.classList.contains(this.settings.classNames.tagEditing)\n            isReadyOnlyTag = tagElm.hasAttribute('readonly')\n\n            if( !_s.readonly && !isEditingTag && !isReadyOnlyTag && this.settings.editTags && _s.userInput ) {\n                this.events.callbacks.onEditTagFocus.call(this, tagElm)\n                this.editTag(tagElm)\n            }\n\n            this.toggleFocusClass(true)\n\n            if( _s.mode != 'select' )\n                this.trigger('dblclick', { tag:tagElm, index:this.getNodeIndex(tagElm), data:getSetTagData(tagElm) })\n        },\n\n        /**\n         *\n         * @param {Object} m an object representing the observed DOM changes\n         */\n        onInputDOMChange(m){\n            // iterate all DOM mutation\n            m.forEach(record => {\n                // only the ADDED nodes\n                record.addedNodes.forEach(addedNode => {\n                    // fix chrome's placing '<div><br></div>' everytime ENTER key is pressed, and replace with just `<br'\n                    if( addedNode.outerHTML == '<div><br></div>' ){\n                        addedNode.replaceWith(document.createElement('br'))\n                    }\n\n                    // if the added element is a div containing a tag within it (chrome does this when pressing ENTER before a tag)\n                    else if( addedNode.nodeType == 1 && addedNode.querySelector(this.settings.classNames.tagSelector) ){\n                        let newlineText = document.createTextNode('')\n\n                        if( addedNode.childNodes[0].nodeType == 3 && addedNode.previousSibling.nodeName != 'BR' )\n                            newlineText  = document.createTextNode('\\n')\n\n                        // unwrap the useless div\n                        // chrome adds a BR at the end which should be removed\n                        addedNode.replaceWith(...[newlineText, ...[...addedNode.childNodes].slice(0,-1)])\n                        placeCaretAfterNode(newlineText)\n                    }\n\n                    // if this is a tag\n                    else if( isNodeTag.call(this, addedNode) ){\n                        if( addedNode.previousSibling?.nodeType == 3 && !addedNode.previousSibling.textContent )\n                            addedNode.previousSibling.remove()\n\n                        // and it is the first node in a new line\n                        if( addedNode.previousSibling && addedNode.previousSibling.nodeName == 'BR' ){\n                            // allows placing the caret just before the tag, when the tag is the first node in that line\n                            addedNode.previousSibling.replaceWith('\\n' + ZERO_WIDTH_CHAR)\n\n                            let nextNode = addedNode.nextSibling, anythingAfterNode = '';\n\n                            while (nextNode) {\n                                anythingAfterNode += nextNode.textContent\n                                nextNode = nextNode.nextSibling;\n                            }\n\n                            // when hitting ENTER for new line just before an existing tag, but skip below logic when a tag has been addded\n                            anythingAfterNode.trim() && placeCaretAfterNode(addedNode.previousSibling)\n                        }\n\n                        // if previous sibling does not exists (meanning the addedNode is the first node in this.DOM.input)\n                        // or, if the previous sibling is also a tag, add a zero-space character before (to allow showing the caret in Chrome)\n                        else if( !addedNode.previousSibling || getSetTagData(addedNode.previousSibling) ){\n                            addedNode.before(ZERO_WIDTH_CHAR)\n                        }\n                    }\n                })\n\n                record.removedNodes.forEach(removedNode => {\n                    // when trying to delete a tag which is in a new line and there's nothing else there (caret is after the tag)\n                    if( removedNode && removedNode.nodeName == 'BR' && isNodeTag.call(this, lastInputChild)){\n                        this.removeTags(lastInputChild)\n                        this.fixFirefoxLastTagNoCaret()\n                    }\n                })\n            })\n\n            // get the last child only after the above DOM modifications\n            // check these scenarios:\n            // 1. after a single line, press ENTER once - should add only 1 BR\n            // 2. presss ENTER right before a tag\n            // 3. press enter within a text node before a tag\n            var lastInputChild = this.DOM.input.lastChild;\n\n            if( lastInputChild && lastInputChild.nodeValue == '' )\n                lastInputChild.remove()\n\n            // make sure the last element is always a BR\n            if( !lastInputChild || lastInputChild.nodeName != 'BR' ){\n                this.DOM.input.appendChild(document.createElement('br'))\n            }\n        },\n    }\n}\n\n", "import { sameStr, removeCollectionProp, omit, isObject, parseHTML, removeTextChildNodes, escapeHTML, extend, concatWithoutDups, getUID, isNodeTag, injectAtCaret, placeCaretAfterNode, getSetTagData, fixCaretBetweenTags, logger } from './parts/helpers'\nimport DEFAULTS from './parts/defaults'\nimport _dropdown, { initDropdown } from './parts/dropdown'\nimport { getPersistedData, setPersistedData, clearPersistedData } from './parts/persist'\nimport TEXTS from './parts/texts'\nimport templates from './parts/templates'\nimport EventDispatcher from './parts/EventDispatcher'\nimport events, { triggerChangeEvent } from './parts/events'\n\n/**\n * @constructor\n * @param {Object} input    DOM element\n * @param {Object} settings settings object\n */\nfunction Tagify( input, settings ){\n    if( !input ){\n        logger.warn('input element not found', input)\n        // return an empty mock of all methods, so the code using tagify will not break\n        // because it might be calling methods even though the input element does not exist\n        const mockInstance = new Proxy(this, { get(){ return () => mockInstance } })\n        return mockInstance\n    }\n\n    if( input.__tagify ){\n        logger.warn('input element is already Tagified - Same instance is returned.', input)\n        return input.__tagify\n    }\n\n    extend(this, EventDispatcher(this))\n    this.isFirefox = (/firefox|fxios/i).test(navigator.userAgent) && !(/seamonkey/i).test(navigator.userAgent)\n    this.isIE = window.document.documentMode; // https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode#Browser_compatibility\n\n    settings = settings || {};\n    this.getPersistedData = getPersistedData(settings.id)\n    this.setPersistedData = setPersistedData(settings.id)\n    this.clearPersistedData = clearPersistedData(settings.id)\n    this.applySettings(input, settings)\n\n    this.state = {\n        inputText: '',\n        editing : false,\n        composing: false,\n        actions : {},   // UI actions for state-locking\n        mixMode : {},\n        dropdown: {},\n        flaggedTags: {} // in mix-mode, when a string is detetced as potential tag, and the user has chocen to close the suggestions dropdown, keep the record of the tasg here\n    }\n\n    this.value = [] // tags' data\n\n    // events' callbacks references will be stores here, so events could be unbinded\n    this.listeners = {}\n\n    this.DOM = {} // Store all relevant DOM elements in an Object\n\n    this.build(input)\n    initDropdown.call(this)\n\n    this.getCSSVars()\n    this.loadOriginalValues()\n\n    this.events.customBinding.call(this)\n    this.events.binding.call(this)\n    input.autofocus && this.DOM.input.focus()\n    input.__tagify = this\n}\n\nTagify.prototype = {\n    _dropdown,\n    placeCaretAfterNode,\n    getSetTagData,\n    helpers: {sameStr, removeCollectionProp, omit, isObject, parseHTML, escapeHTML, extend, concatWithoutDups, getUID, isNodeTag},\n\n    customEventsList : ['change', 'add', 'remove', 'invalid', 'input', 'paste', 'click', 'keydown', 'focus', 'blur', 'edit:input', 'edit:beforeUpdate', 'edit:updated', 'edit:start', 'edit:keydown', 'dropdown:show', 'dropdown:hide', 'dropdown:select', 'dropdown:updated', 'dropdown:noMatch', 'dropdown:scroll'],\n    dataProps: ['__isValid', '__removed', '__originalData', '__originalHTML', '__tagId'], // internal-uasge props\n\n    trim(text){\n        return this.settings.trim && text && typeof text == \"string\" ? text.trim() : text\n    },\n\n    // expose this handy utility function\n    parseHTML,\n\n    templates,\n\n    parseTemplate(template, data){\n        template = this.settings.templates[template] || template;\n        return parseHTML( template.apply(this, data) )\n    },\n\n    set whitelist( arr ){\n        const isArray = arr && Array.isArray(arr)\n        this.settings.whitelist = isArray ? arr : []\n        this.setPersistedData(isArray ? arr : [], 'whitelist')\n    },\n\n    get whitelist(){\n        return this.settings.whitelist\n    },\n\n    set userInput( state ){\n        this.settings.userInput = !!state\n        this.setContentEditable(!!state)\n    },\n\n    get userInput(){\n        return this.settings.userInput\n    },\n\n    generateClassSelectors(classNames){\n        for( let name in classNames ) {\n            let currentName = name;\n            Object.defineProperty(classNames, currentName + \"Selector\" , {\n                get(){ return \".\" + this[currentName].split(\" \")[0] }\n            })\n        }\n    },\n\n    applySettings( input, settings ){\n        DEFAULTS.templates = this.templates\n\n        var mixModeDefaults = {\n            dropdown: {\n                position: \"text\"\n            }\n        }\n\n        var mergedDefaults = extend({}, DEFAULTS, (settings.mode == 'mix' ? mixModeDefaults : {}));\n        var _s = this.settings = extend({}, mergedDefaults, settings)\n\n        _s.disabled = input.hasAttribute('disabled')\n        _s.readonly = _s.readonly || input.hasAttribute('readonly')\n        _s.placeholder = escapeHTML(input.getAttribute('placeholder') || _s.placeholder || \"\")\n        _s.required = input.hasAttribute('required')\n\n        this.generateClassSelectors(_s.classNames)\n\n        if( this.isIE )\n            _s.autoComplete = false; // IE goes crazy if this isn't false\n\n        [\"whitelist\", \"blacklist\"].forEach(name => {\n            var attrVal = input.getAttribute('data-' + name)\n            if( attrVal ){\n                attrVal = attrVal.split(_s.delimiters)\n                if( attrVal instanceof Array )\n                    _s[name] = attrVal\n            }\n        })\n\n        // backward-compatibility for old version of \"autoComplete\" setting:\n        if( \"autoComplete\" in settings && !isObject(settings.autoComplete) ){\n            _s.autoComplete = DEFAULTS.autoComplete\n            _s.autoComplete.enabled = settings.autoComplete\n        }\n\n        if( _s.mode == 'mix' ){\n            _s.pattern = _s.pattern || /@/;\n            _s.autoComplete.rightKey = true\n            _s.delimiters = settings.delimiters || null // default dlimiters in mix-mode must be NULL\n\n            // needed for \"filterListItems\". This assumes the user might have forgotten to manually\n            // define the same term in \"dropdown.searchKeys\" as defined in \"tagTextProp\" setting, so\n            // by automatically adding it, tagify is \"helping\" out, guessing the intesntions of the developer.\n            if( _s.tagTextProp && !_s.dropdown.searchKeys.includes(_s.tagTextProp) )\n                _s.dropdown.searchKeys.push(_s.tagTextProp)\n        }\n\n        if( input.pattern )\n            try { _s.pattern = new RegExp(input.pattern)  }\n            catch(e){}\n\n        // Convert the \"delimiters\" setting into a REGEX object\n        if( _s.delimiters ){\n            _s._delimiters = _s.delimiters;\n            try { _s.delimiters = new RegExp(this.settings.delimiters, \"g\") }\n            catch(e){}\n        }\n\n        if( _s.disabled )\n            _s.userInput = false;\n\n        this.TEXTS = {...TEXTS, ...(_s.texts || {})}\n\n        // it makes sense to enable \"includeSelectedTags\" in \"select-mode\"\n        if( _s.mode == 'select' ){\n            _s.dropdown.includeSelectedTags = true\n        }\n\n        // make sure the dropdown will be shown on \"focus\" and not only after typing something (in \"select\" mode)\n        if( (_s.mode == 'select' && !settings.dropdown?.enabled) || !_s.userInput ){\n            _s.dropdown.enabled = 0\n        }\n\n        _s.dropdown.appendTarget = settings.dropdown?.appendTarget || document.body;\n\n        if ( _s.dropdown.includeSelectedTags === undefined )\n            _s.dropdown.includeSelectedTags = _s.duplicates;\n\n        // get & merge persisted data with current data\n        let persistedWhitelist = this.getPersistedData('whitelist');\n\n        if( Array.isArray(persistedWhitelist))\n            this.whitelist = Array.isArray(_s.whitelist)\n                ? concatWithoutDups(_s.whitelist, persistedWhitelist)\n                : persistedWhitelist;\n    },\n\n    /**\n     * Returns a string of HTML element attributes\n     * @param {Object} data [Tag data]\n     */\n    getAttributes( data ){\n        var attrs = this.getCustomAttributes(data), s = '', k;\n\n        for( k in attrs )\n            s += \" \" + k + (data[k] !== undefined ? `=\"${attrs[k]}\"` : \"\");\n\n        return s;\n    },\n\n    /**\n     * Returns an object of attributes to be used for the templates\n     */\n    getCustomAttributes( data ){\n        // only items which are objects have properties which can be used as attributes\n        if( !isObject(data) )\n            return '';\n\n        var output = {}, propName;\n\n        for( propName in data ){\n            if( propName.slice(0,2) != '__' && propName != 'class' && data.hasOwnProperty(propName) && data[propName] !== undefined )\n                output[propName] = escapeHTML(data[propName])\n        }\n        return output\n    },\n\n    setStateSelection(){\n        var selection = window.getSelection()\n\n        // save last selection place to be able to inject anything from outside to that specific place\n        var sel = {\n            anchorOffset: selection.anchorOffset,\n            anchorNode  : selection.anchorNode,\n            range       : selection.getRangeAt && selection.rangeCount && selection.getRangeAt(0)\n        }\n\n        this.state.selection = sel\n        return sel\n    },\n\n    /**\n     * Get specific CSS variables which are relevant to this script and parse them as needed.\n     * The result is saved on the instance in \"this.CSSVars\"\n     */\n    getCSSVars(){\n        var compStyle = getComputedStyle(this.DOM.scope, null)\n\n        const getProp = name => compStyle.getPropertyValue('--'+name)\n\n        function seprateUnitFromValue(a){\n            if( !a ) return {}\n            a = a.trim().split(' ')[0]\n            var unit  = a.split(/\\d+/g).filter(n=>n).pop().trim(),\n                value = +a.split(unit).filter(n=>n)[0].trim()\n            return {value, unit}\n        }\n\n        this.CSSVars = {\n            tagHideTransition: (({value, unit}) => unit=='s' ? value * 1000 : value)(seprateUnitFromValue(getProp('tag-hide-transition')))\n        }\n    },\n\n    /**\n     * builds the HTML of this component\n     * @param  {Object} input [DOM element which would be \"transformed\" into \"Tags\"]\n     */\n    build( input ){\n        var DOM  = this.DOM,\n            labelWrapper = input.closest('label');\n\n        if( this.settings.mixMode.integrated ){\n            DOM.originalInput = null;\n            DOM.scope = input;\n            DOM.input = input;\n        }\n\n        else {\n            DOM.originalInput = input\n            DOM.originalInput_tabIndex = input.tabIndex\n            DOM.scope = this.parseTemplate('wrapper', [input, this.settings])\n            DOM.input = DOM.scope.querySelector(this.settings.classNames.inputSelector)\n            input.parentNode.insertBefore(DOM.scope, input)\n            input.tabIndex = -1; // do not allow focus or typing directly, once tagified\n        }\n\n        // fixes tagify nested inside a <label> tag from getting focus when clicked on\n        if( labelWrapper )\n            labelWrapper.setAttribute('for', '')\n    },\n\n    /**\n     * revert any changes made by this component\n     */\n    destroy(){\n        this.events.unbindGlobal.call(this)\n        this.DOM.scope.parentNode?.removeChild(this.DOM.scope)\n        this.DOM.originalInput.tabIndex = this.DOM.originalInput_tabIndex\n        delete this.DOM.originalInput.__tagify\n        this.dropdown.hide(true)\n        this.removeAllCustomListeners()\n        clearTimeout(this.dropdownHide__bindEventsTimeout)\n        clearInterval(this.listeners.main.originalInputValueObserverInterval)\n    },\n\n    /**\n     * if the original input has any values, add them as tags\n     */\n    loadOriginalValues( value ){\n        var lastChild,\n            _s = this.settings\n\n        // temporarily block firing the \"change\" event on the original input until\n        // this method finish removing current value and adding a new one\n        this.state.blockChangeEvent = true\n\n        if( value === undefined ){\n            const persistedOriginalValue = this.getPersistedData('value')\n\n            // if the field already has a field, trust its the desired\n            // one to be rendered and do not use the persisted one\n            if( persistedOriginalValue && !this.DOM.originalInput.value )\n                value = persistedOriginalValue\n            else\n                value = _s.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value\n        }\n\n        this.removeAllTags()\n\n        if( value ){\n            if( _s.mode == 'mix' ){\n                this.parseMixTags(value)\n\n                lastChild = this.DOM.input.lastChild\n\n                // fixes a Chrome bug, when the last node in `mix-mode` is a tag, the caret appears at the far-top-top, outside the field\n                if( !lastChild || lastChild.tagName != 'BR' )\n                    this.DOM.input.insertAdjacentHTML('beforeend', '<br>')\n            }\n\n            else{\n                try{\n                    if( JSON.parse(value) instanceof Array )\n                        value = JSON.parse(value)\n                }\n                catch(err){}\n                this.addTags(value, true).forEach(tag => tag && tag.classList.add(_s.classNames.tagNoAnimation))\n            }\n        }\n\n        else\n            this.postUpdate()\n\n        this.state.lastOriginalValueReported = _s.mixMode.integrated ? '' : this.DOM.originalInput.value\n    },\n\n    cloneEvent(e){\n        var clonedEvent = {}\n        for( var v in e )\n            if( v != 'path' )\n                clonedEvent[v] = e[v]\n        return clonedEvent\n    },\n\n    /**\n     * Toogle global loading state on/off\n     * Useful when fetching async whitelist while user is typing\n     * @param {Boolean} isLoading\n     */\n    loading( isLoading ){\n        this.state.isLoading = isLoading\n        // IE11 doesn't support toggle with second parameter\n        this.DOM.scope.classList[isLoading ? \"add\" : \"remove\"](this.settings.classNames.scopeLoading)\n        return this\n    },\n\n    /**\n     * Toogle a tag loading state on/off\n     * @param {Boolean} isLoading\n     */\n    tagLoading( tagElm, isLoading ){\n        if( tagElm )\n            // IE11 doesn't support toggle with second parameter\n            tagElm.classList[isLoading ? \"add\" : \"remove\"](this.settings.classNames.tagLoading)\n        return this\n    },\n\n    /**\n     * Toggles class on the main tagify container (\"scope\")\n     * @param {String} className\n     * @param {Boolean} force\n     */\n    toggleClass( className, force ){\n        if( typeof className == 'string' )\n            this.DOM.scope.classList.toggle(className, force)\n    },\n\n    toggleScopeValidation( validation ){\n        var isValid = validation === true || validation === undefined; // initially it is undefined\n\n        if( !this.settings.required && validation && validation === this.TEXTS.empty)\n            isValid = true\n\n        this.toggleClass(this.settings.classNames.tagInvalid, !isValid)\n        this.DOM.scope.title = isValid ? '' : validation\n    },\n\n    toggleFocusClass( force ){\n        this.toggleClass(this.settings.classNames.focus, !!force)\n    },\n\n    /**\n     * Sets the templates placeholder after initialization\n     * @param {String} str\n     */\n    setPlaceholder(str) {\n        ['data', 'aria'].forEach(p => this.DOM.input.setAttribute(`${p}-placeholder`, str))\n    },\n\n    triggerChangeEvent,\n\n    events,\n\n    fixFirefoxLastTagNoCaret(){\n        return // seems to be fixed in newer version of FF, so retiring below code (for now)\n        // var inputElm = this.DOM.input\n\n        // if( this.isFirefox && inputElm.childNodes.length && inputElm.lastChild.nodeType == 1 ){\n        //     inputElm.appendChild(document.createTextNode(\"\\u200b\"))\n        //     this.setRangeAtStartEnd(true, inputElm)\n        //     return true\n        // }\n    },\n\n    /** https://stackoverflow.com/a/59156872/104380\n     * @param {Boolean} start indicating where to place it (start or end of the node)\n     * @param {Object}  node  DOM node to place the caret at\n     */\n    setRangeAtStartEnd( start, node ){\n        if( !node ) return;\n\n        start = typeof start == 'number' ? start : !!start\n        node = node.lastChild || node;\n        var sel = document.getSelection()\n\n        // do not force caret placement if the current selection (focus) is on another element (not this tagify instance)\n        if( sel.focusNode instanceof Element && !this.DOM.input.contains(sel.focusNode) ) {\n            return true\n        }\n\n        try{\n            if( sel.rangeCount >= 1 ){\n                ['Start', 'End'].forEach(pos =>\n                    sel.getRangeAt(0)[\"set\" + pos](node, start ? start : node.length)\n                )\n            }\n        } catch(err){\n            console.warn(err)\n        }\n    },\n\n    insertAfterTag( tagElm, newNode ){\n        newNode = newNode || this.settings.mixMode.insertAfterTag;\n\n        if( !tagElm || !tagElm.parentNode || !newNode ) return\n\n        newNode = typeof newNode == 'string'\n            ? document.createTextNode(newNode)\n            : newNode\n\n        tagElm.parentNode.insertBefore(newNode, tagElm.nextSibling)\n        return newNode\n    },\n\n    // compares all \"__originalData\" property values with the current \"tagData\" properties\n    // and returns \"true\" if something changed.\n    editTagChangeDetected(tagData) {\n        var originalData = tagData.__originalData;\n\n        for( var prop in originalData )\n            if( !this.dataProps.includes(prop) && tagData[prop] != originalData[prop] )\n                return true\n\n        return false; // not changed\n    },\n\n    // returns the node which has the actual tag's content\n    getTagTextNode(tagElm){\n        return tagElm.querySelector(this.settings.classNames.tagTextSelector)\n    },\n\n    // sets the text of a tag\n    setTagTextNode(tagElm, HTML){\n        this.getTagTextNode(tagElm).innerHTML = escapeHTML(HTML)\n    },\n\n    /**\n     * Enters a tag into \"edit\" mode\n     * @param {Node} tagElm the tag element to edit. if nothing specified, use last last\n     */\n    editTag( tagElm, opts ){\n        tagElm = tagElm || this.getLastTag()\n        opts = opts || {}\n\n        var _s = this.settings,\n            editableElm = this.getTagTextNode(tagElm),\n            tagIdx = this.getNodeIndex(tagElm),\n            tagData = getSetTagData(tagElm),\n            _CB = this.events.callbacks,\n            isValid = true,\n            isSelectMode = _s.mode == 'select'\n\n        // select mode is a bit different as clicking the tagify's content once will get into edit-mode if a value\n        // is already selected, and there cannot be a dropdown already open at this point.\n        !isSelectMode && this.dropdown.hide()\n\n        if( !editableElm ){\n            logger.warn('Cannot find element in Tag template: .', _s.classNames.tagTextSelector);\n            return;\n        }\n\n        if( tagData instanceof Object && \"editable\" in tagData && !tagData.editable )\n            return\n\n        // cache the original data, on the DOM node, before any modification ocurs, for possible revert\n        tagData = getSetTagData(tagElm, {\n            __originalData: extend({}, tagData),\n            __originalHTML: tagElm.cloneNode(true)\n        })\n        // re-set the tagify custom-prop on the clones element (because cloning removed it)\n        getSetTagData(tagData.__originalHTML, tagData.__originalData)\n\n        editableElm.setAttribute('contenteditable', true)\n        tagElm.classList.add( _s.classNames.tagEditing )\n\n        // because \"editTag\" method can be called manually, make sure that \"state.editing\" is set correctly\n        this.events.callbacks.onEditTagFocus.call(this, tagElm)\n\n        editableElm.addEventListener('click'            , _CB.onEditTagClick.bind(this, tagElm))\n        editableElm.addEventListener('blur'             , _CB.onEditTagBlur.bind(this, this.getTagTextNode(tagElm)))\n        editableElm.addEventListener('input'            , _CB.onEditTagInput.bind(this, editableElm))\n        editableElm.addEventListener('paste'            , _CB.onEditTagPaste.bind(this, editableElm))\n        editableElm.addEventListener('keydown'          , e => _CB.onEditTagkeydown.call(this, e, tagElm))\n        editableElm.addEventListener('compositionstart' , _CB.onCompositionStart.bind(this))\n        editableElm.addEventListener('compositionend'   , _CB.onCompositionEnd.bind(this))\n\n        if( !opts.skipValidation )\n            isValid = this.editTagToggleValidity(tagElm)\n\n        editableElm.originalIsValid = isValid\n\n        this.trigger(\"edit:start\", { tag:tagElm, index:tagIdx, data:tagData, isValid })\n\n        editableElm.focus()\n        !isSelectMode && this.setRangeAtStartEnd(false, editableElm) // place the caret at the END of the editable tag text\n\n        _s.dropdown.enabled === 0 && !isSelectMode && this.dropdown.show()\n        this.state.hasFocus = true\n\n        return this\n    },\n\n    /**\n     * If a tag is invalid, for any reason, set its class to \"not allowed\" (see defaults file)\n     * @param {Node} tagElm required\n     * @param {Object} tagData optional\n     * @returns true if valid, a string (reason) if not\n     */\n    editTagToggleValidity( tagElm, tagData ){\n        var tagData = tagData || getSetTagData(tagElm),\n            isValid;\n\n        if( !tagData ){\n            logger.warn(\"tag has no data: \", tagElm, tagData)\n            return;\n        }\n\n        isValid = !(\"__isValid\" in tagData) || tagData.__isValid === true\n\n        if( !isValid ){\n            this.removeTagsFromValue(tagElm)\n        }\n\n        this.update()\n\n        //this.validateTag(tagData);\n\n        tagElm.classList.toggle(this.settings.classNames.tagNotAllowed, !isValid)\n        tagData.__isValid = isValid;\n\n        return tagData.__isValid\n    },\n\n    onEditTagDone(tagElm, tagData){\n        tagElm = tagElm || this.state.editing.scope\n        tagData = tagData || {}\n\n        var _s = this.settings,\n            eventData = {\n                tag         : tagElm,\n                index       : this.getNodeIndex(tagElm),\n                previousData: getSetTagData(tagElm),\n                data        : tagData\n            }\n\n        this.trigger(\"edit:beforeUpdate\", eventData, {cloneData:false})\n\n        this.state.editing = false;\n\n        delete tagData.__originalData\n        delete tagData.__originalHTML\n\n        // some scenarrios like in the one in the demos page with textarea that has 2 whitelists, one of the whitelist might be\n        // an array of objects with a property defined the same as the `tagTextProp` setting (if used) but another whitelist\n        // might be simpler - just an array of primitives.\n        function veryfyTagTextProp() {\n            var tagTextProp = tagData[_s.tagTextProp];\n\n            // 'tagTextProp' might also be the number 0 so checking for `undefined` here:\n            if( tagTextProp !== undefined ) {\n                tagTextProp += ''; // cast possible number into a string\n                return !!tagTextProp.trim?.()\n            }\n\n            if( !(_s.tagTextProp in tagData) )\n                return !!tagData.value\n        }\n\n        if( tagElm && tagElm.parentNode ){\n            if( veryfyTagTextProp() ){\n                tagElm = this.replaceTag(tagElm, tagData)\n                this.editTagToggleValidity(tagElm, tagData)\n\n                if( _s.a11y.focusableTags )\n                    tagElm.focus()\n                else if( _s.mode != 'select' )\n                    // place caret after edited tag\n                    placeCaretAfterNode(tagElm)\n            }\n\n            else\n                this.removeTags(tagElm)\n        }\n\n        this.trigger(\"edit:updated\", eventData)\n        _s.dropdown.closeOnSelect && this.dropdown.hide()\n\n        // check if any of the current tags which might have been marked as \"duplicate\" should be now un-marked\n        if( this.settings.keepInvalidTags )\n            this.reCheckInvalidTags()\n    },\n\n    /**\n     * Replaces an exisitng tag with a new one. Used for updating a tag's data\n     * @param {Object} tagElm  [DOM node to replace]\n     * @param {Object} tagData [data to create new tag from]\n     */\n    replaceTag(tagElm, tagData){\n        if( !tagData || tagData.value === '' || tagData.value === undefined )\n            tagData = tagElm.__tagifyTagData\n\n        // if tag is invalid, make the according changes in the newly created element\n        if( tagData.__isValid && tagData.__isValid != true )\n            extend( tagData, this.getInvalidTagAttrs(tagData, tagData.__isValid) )\n\n        var newTagElm = this.createTagElem(tagData)\n\n        // update DOM\n        tagElm.parentNode.replaceChild(newTagElm, tagElm)\n        this.updateValueByDOMTags()\n        return newTagElm\n    },\n\n    /**\n     * update \"value\" (Array of Objects) by traversing all valid tags\n     */\n    updateValueByDOMTags(){\n        this.value.length = 0;\n\n        var clsNames = this.settings.classNames,\n            tagNotAllowedClassName = clsNames.tagNotAllowed.split(' ')[0],\n            skipNodesWithClassNames = [tagNotAllowedClassName, clsNames.tagHide];\n\n        [].forEach.call(this.getTagElms(), node => {\n            if ([...node.classList].some(cls => skipNodesWithClassNames.includes(cls))) return;\n            this.value.push( getSetTagData(node) )\n        })\n\n        this.update()\n        this.dropdown.refilter()\n    },\n\n    /**\n     * injects nodes/text at caret position, which is saved on the \"state\" when \"blur\" event gets triggered\n     * @param {Node} injectedNode [the node to inject at the caret position]\n     * @param {Object} selection [optional range Object. must have \"anchorNode\" & \"anchorOffset\"]\n     */\n    injectAtCaret( injectedNode, range ){\n        range = range || this.state.selection?.range\n\n        if(typeof injectedNode === 'string')\n            injectedNode = document.createTextNode(injectedNode)\n\n        if( !range && injectedNode ) {\n            this.appendMixTags(injectedNode)\n            return this;\n        }\n\n        let node = injectAtCaret(injectedNode, range)\n        this.setRangeAtStartEnd(false, node)\n\n        this.updateValueByDOMTags() // updates internal \"this.value\"\n        this.update() // updates original input/textarea\n\n        return this\n    },\n\n    /**\n     * input bridge for accessing & setting\n     * @type {Object}\n     */\n    input : {\n        set( value = '', updateDOM = true ){\n            var _s = this.settings,\n                hideDropdown = _s.dropdown.closeOnSelect\n\n            this.state.inputText = value\n\n            if( updateDOM ) {\n                this.DOM.input.innerHTML = escapeHTML(\"\"+value);\n                value && this.toggleClass(_s.classNames.empty, !this.DOM.input.innerHTML) // remove the \"empty\" (is exists) class only if a value was added\n            }\n\n            if( !value && hideDropdown )\n                this.dropdown.hide.bind(this)\n\n            this.input.autocomplete.suggest.call(this);\n            this.input.validate.call(this);\n\n        },\n\n        raw(){\n            return this.DOM.input.textContent\n        },\n\n        /**\n         * Marks the tagify's input as \"invalid\" if the value did not pass \"validateTag()\"\n         */\n        validate(){\n            var isValid = !this.state.inputText || this.validateTag({value:this.state.inputText}) === true;\n\n            this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid, !isValid)\n\n            return isValid\n        },\n\n        // remove any child DOM elements that aren't of type TEXT (like <br>)\n        normalize( node, options ){\n            var clone = node || this.DOM.input, //.cloneNode(true),\n                v = [];\n\n            // when a text was pasted in FF, the \"this.DOM.input\" element will have <br> but no newline symbols (\\n), and this will\n            // result in tags not being properly created if one wishes to create a separate tag per newline.\n            clone.childNodes.forEach(n => n.nodeType==3 && v.push(n.nodeValue))\n            v = v.join(\"\\n\")\n\n            try{\n                // \"delimiters\" might be of a non-regex value, where this will fail (\"Tags With Properties\" example in demo page):\n                v = v.replace(/(?:\\r\\n|\\r|\\n)/g, this.settings.delimiters.source.charAt(0))\n            }\n            catch(err){}\n\n            v = v.replace(/\\s/g, ' ')  // replace NBSPs with spaces characters\n\n            return options?.trim ? this.trim(v) : v\n        },\n\n        /**\n         * suggest the rest of the input's value (via CSS \"::after\" using \"content:attr(...)\")\n         * @param  {String} s [description]\n         */\n        autocomplete : {\n            suggest( data ){\n                if( !this.settings.autoComplete.enabled ) return;\n\n                data = data || {value:''}\n                if (typeof data !== 'object') data = { value: data };\n\n                var suggestedText = this.dropdown.getMappedValue(data);\n\n                if( typeof suggestedText === 'number' ) return\n\n                var inputText = this.state.inputText.toLowerCase(),\n                    suggestionStart = suggestedText.substr(0, this.state.inputText.length).toLowerCase(),\n                    suggestionTrimmed = suggestedText.substring(this.state.inputText.length);\n\n                if( !suggestedText || !this.state.inputText || suggestionStart != inputText ){\n                    this.DOM.input.removeAttribute(\"data-suggest\");\n                    delete this.state.inputSuggestion\n                }\n                else{\n                    this.DOM.input.setAttribute(\"data-suggest\", suggestionTrimmed);\n                    this.state.inputSuggestion = data\n                }\n            },\n\n            /**\n             * sets the suggested text as the input's value & cleanup the suggestion autocomplete.\n             * @param {String} s [text]\n             */\n            set( s ){\n                var dataSuggest = this.DOM.input.getAttribute('data-suggest'),\n                    suggestion = s || (dataSuggest ? this.state.inputText + dataSuggest : null);\n\n                if( suggestion ){\n                    if( this.settings.mode == 'mix' ){\n                        this.replaceTextWithNode( document.createTextNode(this.state.tag.prefix + suggestion) )\n                    }\n                    else{\n                        this.input.set.call(this, suggestion);\n                        this.setRangeAtStartEnd(false, this.DOM.input)\n                    }\n\n                    this.input.autocomplete.suggest.call(this);\n                    this.dropdown.hide();\n\n                    return true;\n                }\n\n                return false;\n            }\n        }\n    },\n\n    /**\n     * returns the index of the the tagData within the \"this.value\" array collection.\n     * since values should be unique, it is suffice to only search by \"value\" property\n     * @param {Object} tagData\n     */\n    getTagIdx( tagData ){\n        return this.value.findIndex(item => item.__tagId == (tagData||{}).__tagId )\n    },\n\n    getNodeIndex( node ){\n        var index = 0;\n\n        if( node )\n            while( (node = node.previousElementSibling) )\n                index++;\n\n        return index;\n    },\n\n    getTagElms( ...classess ){\n        var classname = '.' + [...this.settings.classNames.tag.split(' '), ...classess].join('.')\n        return [].slice.call(this.DOM.scope.querySelectorAll(classname)) // convert nodeList to Array - https://stackoverflow.com/a/3199627/104380\n    },\n\n    /**\n     * gets the last non-readonly, not-in-the-proccess-of-removal tag\n     */\n    getLastTag(){\n        var _sc = this.settings.classNames,\n            tagNodes = this.DOM.scope.querySelectorAll(`${_sc.tagSelector}:not(.${_sc.tagHide}):not([readonly])`);\n        return tagNodes[tagNodes.length - 1];\n    },\n\n    /**\n     * Searches if any tag with a certain value already exis\n     * @param  {String/Object} value [text value / tag data object]\n     * @param  {Boolean} caseSensitive\n     * @return {Number}\n     */\n    isTagDuplicate( value, caseSensitive, tagId ){\n        var dupsCount = 0;\n\n        for( let item of this.value ) {\n            let isSameStr = sameStr( this.trim(\"\"+value), item.value, caseSensitive );\n            if( isSameStr && tagId != item.__tagId )\n                dupsCount++;\n        }\n\n        return dupsCount\n    },\n\n    getTagIndexByValue( value ){\n        var indices = [],\n            isCaseSensitive = this.settings.dropdown.caseSensitive;\n\n        this.getTagElms().forEach((tagElm, i) => {\n            if(  tagElm.__tagifyTagData && sameStr( this.trim(tagElm.__tagifyTagData.value), value, isCaseSensitive )  )\n                indices.push(i)\n        })\n\n        return indices;\n    },\n\n    getTagElmByValue( value ){\n        var tagIdx = this.getTagIndexByValue(value)[0]\n        return this.getTagElms()[tagIdx]\n    },\n\n    /**\n     * Temporarily marks a tag element (by value or Node argument)\n     * @param  {Object} tagElm [a specific \"tag\" element to compare to the other tag elements siblings]\n     */\n    flashTag( tagElm ){\n        if( tagElm ){\n            tagElm.classList.add(this.settings.classNames.tagFlash)\n            setTimeout(() => { tagElm.classList.remove(this.settings.classNames.tagFlash) }, 100)\n        }\n    },\n\n    /**\n     * checks if text is in the blacklist\n     */\n    isTagBlacklisted( v ){\n        v = this.trim(v.toLowerCase());\n        return this.settings.blacklist.filter(x => (\"\"+x).toLowerCase() == v).length;\n    },\n\n    /**\n     * checks if text is in the whitelist\n     */\n    isTagWhitelisted( v ){\n        return !!this.getWhitelistItem(v)\n        /*\n        return this.settings.whitelist.some(item =>\n            typeof v == 'string'\n                ? sameStr(this.trim(v), (item.value || item))\n                : sameStr(JSON.stringify(item), JSON.stringify(v))\n        )\n        */\n    },\n\n    /**\n     * Returns the first whitelist item matched, by value (if match found)\n     * @param {String} value [text to match by]\n     */\n    getWhitelistItem( value, prop, whitelist ){\n        var result,\n            prop = prop || 'value',\n            _s = this.settings,\n            whitelist = whitelist || _s.whitelist;\n\n        whitelist.some(_wi => {\n            // whitelist item value. Can be either a String, Number or an Object (with a `value` property)\n            var _wiv = typeof _wi == 'object' ? (_wi[prop] || _wi.value) : _wi,\n                isSameStr = sameStr(_wiv, value, _s.dropdown.caseSensitive, _s.trim)\n\n            if( isSameStr ){\n                result = typeof _wi == 'object' ? _wi : {value:_wi}\n                return true\n            }\n        })\n\n        // first iterate the whitelist, try find matches by \"value\" and if that fails\n        // and a \"tagTextProp\" is set to be other than \"value\", try that also\n        if( !result && prop == 'value' && _s.tagTextProp != 'value' ){\n            // if found, adds the first which matches\n            result = this.getWhitelistItem(value, _s.tagTextProp, whitelist)\n        }\n\n        return result\n    },\n\n    /**\n     * validate a tag object BEFORE the actual tag will be created & appeneded\n     * @param  {String} s\n     * @param  {String} uid      [unique ID, to not inclue own tag when cheking for duplicates]\n     * @return {Boolean/String}  [\"true\" if validation has passed, String for a fail]\n     */\n    validateTag( tagData ){\n        var _s = this.settings,\n            // when validating a tag in edit-mode, need to take \"tagTextProp\" into consideration\n            prop = \"value\" in tagData ? \"value\" : _s.tagTextProp,\n            v = this.trim(tagData[prop] + \"\");\n\n        // check for definitive empty value\n        if( !(tagData[prop]+\"\").trim() )\n            return this.TEXTS.empty;\n\n        // check if pattern should be used and if so, use it to test the value\n        if( _s.mode != 'mix' && _s.pattern && _s.pattern instanceof RegExp && !(_s.pattern.test(v)) )\n            return this.TEXTS.pattern;\n\n        // check for duplicates\n        if( !_s.duplicates && this.isTagDuplicate(v, _s.dropdown.caseSensitive, tagData.__tagId) )\n            return this.TEXTS.duplicate;\n\n        if( this.isTagBlacklisted(v) || (_s.enforceWhitelist && !this.isTagWhitelisted(v)) )\n            return this.TEXTS.notAllowed;\n\n        if( _s.validate )\n            return _s.validate(tagData)\n\n        return true\n    },\n\n    getInvalidTagAttrs(tagData, validation){\n        return {\n            \"aria-invalid\" : true,\n            \"class\": `${tagData.class || ''} ${this.settings.classNames.tagNotAllowed}`.trim(),\n            \"title\": validation\n        }\n    },\n\n    hasMaxTags(){\n        return this.value.length >= this.settings.maxTags\n            ? this.TEXTS.exceed\n            : false\n    },\n\n    setReadonly( toggle, attrribute ){\n        var _s = this.settings\n\n        this.DOM.scope.contains(document.activeElement) && document.activeElement.blur() // exit possible edit-mode\n        _s[attrribute || 'readonly'] = toggle\n        this.DOM.scope[(toggle ? 'set' : 'remove') + 'Attribute'](attrribute || 'readonly', true)\n\n        this.settings.userInput = true;\n        this.setContentEditable(!toggle)\n    },\n\n    setContentEditable(state){\n        this.DOM.input.contentEditable = state\n        this.DOM.input.tabIndex = !!state ? 0 : -1;\n    },\n\n    setDisabled( isDisabled ){\n        this.setReadonly(isDisabled, 'disabled')\n    },\n\n    /**\n     * pre-proccess the tagsItems, which can be a complex tagsItems like an Array of Objects or a string comprised of multiple words\n     * so each item should be iterated on and a tag created for.\n     * @return {Array} [Array of Objects]\n     */\n    normalizeTags( tagsItems ){\n        var {whitelist, delimiters, mode, tagTextProp} = this.settings,\n            whitelistMatches = [],\n            whitelistWithProps = whitelist ? whitelist[0] instanceof Object : false,\n            // checks if this is a \"collection\", meanning an Array of Objects\n            isArray = Array.isArray(tagsItems),\n            isCollection = isArray && tagsItems[0].value,\n            mapStringToCollection = s => (s+\"\").split(delimiters).reduce((acc, v) => {\n                const trimmed = this.trim(v)\n                trimmed && acc.push({ [tagTextProp]:trimmed, value:trimmed })\n                return acc\n            }, [])\n\n        if( typeof tagsItems == 'number' )\n            tagsItems = tagsItems.toString()\n\n        // if the argument is a \"simple\" String, ex: \"aaa, bbb, ccc\"\n        if( typeof tagsItems == 'string' ){\n            if( !tagsItems.trim() ) return [];\n\n            // go over each tag and add it (if there were multiple ones)\n            tagsItems = mapStringToCollection(tagsItems)\n        }\n\n        // if is an Array of Strings, convert to an Array of Objects\n        else if( isArray ){\n            // flatten the 2D array\n            tagsItems = tagsItems.reduce((acc, item) => {\n                if( isObject(item) ) {\n                    var itemCopy = extend({}, item)\n\n                    // if 'tagTextProp' property does not exist in the item, use `value` instead\n                    if(!(tagTextProp in itemCopy))\n                        tagTextProp = 'value'\n\n                    itemCopy[tagTextProp] = this.trim(itemCopy[tagTextProp])\n\n                    // discard empty tags but allow `0` as a valid value\n                    if( itemCopy[tagTextProp] || itemCopy[tagTextProp] === 0 )\n                        acc.push(itemCopy) // mapStringToCollection(item.value).map(newItem => ({...item,...newItem}))\n                }\n\n                else if(item != null && item !== '' && item !== undefined) {\n                    acc.push( ...mapStringToCollection(item) )\n                }\n\n                return acc\n            }, [])\n        }\n\n        // search if the tag exists in the whitelist as an Object (has props),\n        // to be able to use its properties.\n        // skip matching collections with whitelist items as they are considered \"whole\"\n        if( whitelistWithProps && !isCollection ){\n            tagsItems.forEach(item => {\n                var whitelistMatchesValues = whitelistMatches.map(a=>a.value)\n\n                // if suggestions are shown, they are already filtered, so it's easier to use them,\n                // because the whitelist might also include items which have already been added\n                var filteredList = this.dropdown.filterListItems.call(this, item[tagTextProp], { exact:true })\n\n                if( !this.settings.duplicates )\n                    // also filter out items which have already been matched in previous iterations\n                    filteredList = filteredList.filter(filteredItem => !whitelistMatchesValues.includes(filteredItem.value))\n\n                // get the best match out of list of possible matches.\n                // if there was a single item in the filtered list, use that one\n                var matchObj = filteredList.length > 1\n                    ? this.getWhitelistItem(item[tagTextProp], tagTextProp, filteredList)\n                    : filteredList[0]\n\n                if( matchObj && matchObj instanceof Object ){\n                    whitelistMatches.push( matchObj ) // set the Array (with the found Object) as the new value\n                }\n                else if( mode != 'mix' ){\n                    if( item.value == undefined )\n                        item.value = item[tagTextProp]\n                    whitelistMatches.push(item)\n                }\n            })\n\n            if( whitelistMatches.length )\n                tagsItems = whitelistMatches\n        }\n\n        return tagsItems;\n    },\n\n    /**\n     * Parse the initial value of a textarea (or input) element and generate mixed text w/ tags\n     * https://stackoverflow.com/a/57598892/104380\n     * @param {String} s\n     */\n    parseMixTags( s ){\n        var {mixTagsInterpolator, duplicates, transformTag, enforceWhitelist, maxTags, tagTextProp} = this.settings,\n            tagsDataSet = [];\n\n        s = s.split(mixTagsInterpolator[0]).map((s1, i) => {\n            var s2 = s1.split(mixTagsInterpolator[1]),\n                preInterpolated = s2[0],\n                maxTagsReached = tagsDataSet.length == maxTags,\n                textProp,\n                tagData,\n                tagElm;\n\n            try{\n                // skip numbers and go straight to the \"catch\" statement\n                if( preInterpolated == +preInterpolated )\n                    throw Error\n                tagData = JSON.parse(preInterpolated)\n            } catch(err){\n                tagData = this.normalizeTags(preInterpolated)[0] || {value:preInterpolated}\n            }\n\n            transformTag.call(this, tagData)\n\n            if( !maxTagsReached   &&\n                s2.length > 1   &&\n                (!enforceWhitelist || this.isTagWhitelisted(tagData.value))   &&\n                !(!duplicates && this.isTagDuplicate(tagData.value)) ){\n\n                // in case \"tagTextProp\" setting is set to other than \"value\" and this tag does not have this prop\n                textProp = tagData[tagTextProp] ? tagTextProp : 'value'\n                tagData[textProp] = this.trim(tagData[textProp])\n\n                tagElm = this.createTagElem(tagData)\n                tagsDataSet.push( tagData )\n                tagElm.classList.add(this.settings.classNames.tagNoAnimation)\n\n                s2[0] = tagElm.outerHTML //+ \"&#8288;\"  // put a zero-space at the end so the caret won't jump back to the start (when the last input's child element is a tag)\n                this.value.push(tagData)\n            }\n            else if(s1)\n                return i ? mixTagsInterpolator[0] + s1 : s1\n\n            return s2.join('')\n        }).join('')\n\n        this.DOM.input.innerHTML = s\n        this.DOM.input.appendChild(document.createTextNode(''))\n        this.DOM.input.normalize()\n\n        var tagNodes = this.getTagElms()\n\n        tagNodes.forEach((elm, idx) => getSetTagData(elm,  tagsDataSet[idx]))\n        this.update({withoutChangeEvent:true})\n\n        fixCaretBetweenTags(tagNodes, this.state.hasFocus)\n        return s\n    },\n\n    /**\n     * For mixed-mode: replaces a text starting with a prefix with a wrapper element (tag or something)\n     * First there *has* to be a \"this.state.tag\" which is a string that was just typed and is staring with a prefix\n     */\n    replaceTextWithNode( newWrapperNode, strToReplace ){\n        if( !this.state.tag && !strToReplace ) return;\n\n        strToReplace = strToReplace || this.state.tag.prefix + this.state.tag.value;\n        var idx, nodeToReplace,\n            selection = this.state.selection || window.getSelection(),\n            nodeAtCaret = selection.anchorNode,\n            firstSplitOffset = this.state.tag.delimiters ? this.state.tag.delimiters.length : 0;\n\n        // STEP 1: ex. replace #ba with the tag \"bart\" where \"|\" is where the caret is:\n        // CURRENT STATE: \"foo #ba #ba| #ba\"\n\n        // split the text node at the index of the caret\n        nodeAtCaret.splitText(selection.anchorOffset - firstSplitOffset)\n\n        // node 0: \"foo #ba #ba|\"\n        // node 1: \" #ba\"\n\n        // get index of LAST occurence of \"#ba\"\n        idx = nodeAtCaret.nodeValue.lastIndexOf(strToReplace)\n\n        if( idx == -1 ) return true;\n\n        nodeToReplace = nodeAtCaret.splitText(idx)\n\n        // node 0: \"foo #ba \"\n        // node 1: \"#ba\"    <- nodeToReplace\n\n        newWrapperNode && nodeAtCaret.parentNode.replaceChild(newWrapperNode, nodeToReplace)\n\n        // must NOT normalize contenteditable or it will cause unwanted issues:\n        // https://monosnap.com/file/ZDVmRvq5upYkidiFedvrwzSswegWk7\n        // nodeAtCaret.parentNode.normalize()\n\n        return true;\n    },\n\n    /**\n     * Validate a tag's data and create a new tag node\n     * @param {*} tagData\n     * @param {*} options\n     * @returns Object\n     */\n    prepareNewTagNode(tagData, options) {\n        options = options || {}\n\n        var tagElm,\n            _s = this.settings,\n            aggregatedInvalidInput = [],\n            tagElmParams = {},\n            originalData = Object.assign({}, tagData, {value:tagData.value+\"\"});\n\n        // shallow-clone tagData so later modifications will not apply to the source\n        tagData = Object.assign({}, originalData)\n        _s.transformTag.call(this, tagData)\n\n        tagData.__isValid = this.hasMaxTags() || this.validateTag(tagData)\n\n        if( tagData.__isValid !== true ){\n            if( options.skipInvalid )\n                return\n\n            // originalData is kept because it might be that this tag is invalid because it is a duplicate of another,\n            // and if that other tags is edited/deleted, this one should be re-validated and if is no more a duplicate - restored\n            extend(tagElmParams, this.getInvalidTagAttrs(tagData, tagData.__isValid), {__preInvalidData:originalData})\n\n            if( tagData.__isValid == this.TEXTS.duplicate )\n                // mark, for a brief moment, the tag (this this one) which THIS CURRENT tag is a duplcate of\n                this.flashTag( this.getTagElmByValue(tagData.value) )\n\n            if( !_s.createInvalidTags ){\n                aggregatedInvalidInput.push(tagData.value)\n                return\n            }\n        }\n\n        if( 'readonly' in tagData ){\n            if( tagData.readonly )\n                tagElmParams[\"aria-readonly\"] = true\n            // if \"readonly\" is \"false\", remove it from the tagData so it won't be added as an attribute in the template\n            else\n                delete tagData.readonly\n        }\n\n        // Create tag HTML element\n        tagElm = this.createTagElem(tagData, tagElmParams)\n\n        return {tagElm, tagData, aggregatedInvalidInput}\n    },\n\n    /**\n     * Logic to happen once a tag has just been injected into the DOM\n     * @param {Node} tagElm\n     * @param {Object} tagData\n     */\n    postProcessNewTagNode(tagElm, tagData) {\n        var _s = this.settings,\n            isValid = tagData.__isValid;\n\n        if( isValid && isValid === true ){\n            // update state\n            this.value.push(tagData)\n        }\n        else{\n            this.trigger('invalid', {data:tagData, index:this.value.length, tag:tagElm, message:isValid})\n            if( !_s.keepInvalidTags )\n                // remove invalid tags (if \"keepInvalidTags\" is set to \"false\")\n                setTimeout(() => this.removeTags(tagElm, true), 1000)\n        }\n\n        this.dropdown.position() // reposition the dropdown because the just-added tag might cause a new-line\n    },\n\n    /**\n     * For selecting a single option (not used for multiple tags, but for \"mode:select\" only)\n     * @param {Object} tagElm   Tag DOM node\n     * @param {Object} tagData  Tag data\n     */\n    selectTag( tagElm, tagData ){\n        var _s = this.settings\n\n        if( _s.enforceWhitelist && !this.isTagWhitelisted(tagData.value) )\n            return\n\n        // this.input.set.call(this, tagData[_s.tagTextProp] || tagData.value, true)\n\n        // place the caret at the end of the input, only if a dropdown option was selected (and not by manually typing another value and clicking \"TAB\")\n        if( this.state.actions.selectOption )\n            setTimeout(() => this.setRangeAtStartEnd(false, this.DOM.input))\n\n        var lastTagElm = this.getLastTag()\n\n        if( lastTagElm )\n            this.replaceTag(lastTagElm, tagData)\n        else\n            this.appendTag(tagElm)\n\n        // if( _s.enforceWhitelist )\n        //     this.setContentEditable(false);\n\n        this.value[0] = tagData\n        this.update()\n        this.trigger('add', { tag:tagElm, data:tagData })\n\n        return [tagElm]\n    },\n\n    /**\n     * add an empty \"tag\" element in an editable state\n     */\n    addEmptyTag( initialData ){\n        var tagData = extend({ value:\"\" }, initialData || {}),\n            tagElm = this.createTagElem(tagData)\n\n        getSetTagData(tagElm, tagData)\n\n        // add the tag to the component's DOM\n        this.appendTag(tagElm)\n        this.editTag(tagElm, {skipValidation:true})\n        this.toggleFocusClass(true)\n    },\n\n    /**\n     * add a \"tag\" element to the \"tags\" component\n     * @param {String/Array} tagsItems   [A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings]\n     * @param {Boolean}      clearInput  [flag if the input's value should be cleared after adding tags]\n     * @param {Boolean}      skipInvalid [do not add, mark & remove invalid tags]\n     * @return {Array} Array of DOM elements (tags)\n     */\n    addTags( tagsItems, clearInput, skipInvalid ){\n        var tagElems = [],\n            _s = this.settings,\n            aggregatedInvalidInput = [],\n            frag = document.createDocumentFragment(),\n            addedTags = []; // all tags, also invalid. this is used for firing the `add` event\n\n        if( !tagsItems || tagsItems.length == 0 ){\n            return tagElems\n        }\n\n        // converts Array/String/Object to an Array of Objects\n        tagsItems = this.normalizeTags(tagsItems)\n\n        switch( _s.mode ){\n            case 'mix': return this.addMixTags(tagsItems)\n            case 'select': {\n                clearInput = false\n                this.removeAllTags()\n            }\n        }\n\n        this.DOM.input.removeAttribute('style')\n\n        tagsItems.forEach(tagData => {\n            const newTagNode = this.prepareNewTagNode(tagData, {skipInvalid: skipInvalid || _s.skipInvalid});\n\n            if( !newTagNode) return;\n\n            const tagElm = newTagNode.tagElm;\n\n            tagData = newTagNode.tagData\n            aggregatedInvalidInput = newTagNode.aggregatedInvalidInput\n\n            tagElems.push(tagElm)\n\n            // mode-select overrides\n            if( _s.mode == 'select' ){\n                return this.selectTag(tagElm, tagData)\n            }\n\n            // add the tag to the component's DOM\n            // this.appendTag(tagElm)\n            frag.appendChild(tagElm)\n            this.postProcessNewTagNode(tagElm, tagData)\n            addedTags.push({tagElm, tagData})\n        })\n\n        this.appendTag(frag)\n\n        addedTags.forEach(({tagElm, tagData}) =>\n            this.trigger('add', {tag:tagElm, index:this.getTagIdx(tagData), data:tagData})\n        )\n\n        this.update()\n\n\n        if( tagsItems.length && clearInput ){\n            this.input.set.call(this, _s.createInvalidTags ? '' : aggregatedInvalidInput.join(_s._delimiters))\n            this.setRangeAtStartEnd(false, this.DOM.input)\n        }\n\n        // hydrate the suggestions list\n        this.dropdown.refilter()\n        return tagElems\n    },\n\n    /**\n     * Adds a mix-content tag\n     * @param {String/Array} tagData    A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings\n     */\n    addMixTags( tagsData ){\n        tagsData = this.normalizeTags(tagsData);\n\n        // flow for creating custom tags which aren't a part of the whitelist\n        if( tagsData[0].prefix || this.state.tag ){\n            return this.prefixedTextToTag(tagsData[0])\n        }\n\n        var frag = document.createDocumentFragment()\n\n        tagsData.forEach(tagData => {\n            const newTagNode = this.prepareNewTagNode(tagData)\n            frag.appendChild(newTagNode.tagElm)\n            this.insertAfterTag(newTagNode.tagElm)\n            this.postProcessNewTagNode(newTagNode.tagElm, newTagNode.tagData)\n        })\n\n        this.appendMixTags(frag)\n\n        return frag.children\n    },\n\n    appendMixTags( node ) {\n        var selection = !!this.state.selection;\n\n        // if \"selection\" exists, assumes intention of inecting the new tag at the last\n        // saved location of the caret inside \"this.DOM.input\"\n        if( selection ){\n            this.injectAtCaret(node)\n        }\n        // else, create a range and inject the new tag as the last child of \"this.DOM.input\"\n        else{\n            this.DOM.input.focus()\n            selection = this.setStateSelection()\n            selection.range.setStart(this.DOM.input, selection.range.endOffset)\n            selection.range.setEnd(this.DOM.input, selection.range.endOffset)\n            this.DOM.input.appendChild(node)\n\n            this.updateValueByDOMTags() // updates internal \"this.value\"\n            this.update() // updates original input/textarea\n        }\n    },\n\n    /**\n     * Adds a tag which was activly typed by the user\n     * @param {String/Array} tagData   [A string (single or multiple values with a delimiter), or an Array of Objects or just Array of Strings]\n     */\n    prefixedTextToTag( tagData ){\n        var _s = this.settings,\n            tagElm,\n            newTag,\n            createdFromDelimiters = this.state.tag?.delimiters;\n\n        tagData.prefix = tagData.prefix || this.state.tag ? this.state.tag.prefix : (_s.pattern.source||_s.pattern)[0];\n\n        newTag = this.prepareNewTagNode(tagData)\n        tagElm = newTag.tagElm\n\n        // tries to replace a taged textNode with a tagElm, and if not able,\n        // insert the new tag to the END if \"addTags\" was called from outside\n        if( !this.replaceTextWithNode(tagElm) ){\n            this.DOM.input.appendChild(tagElm)\n        }\n\n        setTimeout(()=> tagElm.classList.add(this.settings.classNames.tagNoAnimation), 300)\n\n        this.update()\n\n        if( !createdFromDelimiters ) {\n            var elm = this.insertAfterTag(tagElm) || tagElm;\n            // a timeout is needed when selecting a tag from the suggestions via mouse.\n            // Without it, it seems the caret is placed right after the tag and not after the\n            // node which was inserted after the tag (whitespace by default)\n            setTimeout(placeCaretAfterNode, 0, elm);\n        }\n\n        this.state.tag = null\n\n        this.postProcessNewTagNode(tagElm, newTag.tagData)\n\n        return tagElm\n    },\n\n    /**\n     * appened (validated) tag to the component's DOM scope\n     */\n    appendTag(tagElm){\n        var DOM = this.DOM,\n            insertBeforeNode = DOM.input;\n\n        //if( insertBeforeNode === DOM.input )\n            DOM.scope.insertBefore(tagElm, insertBeforeNode)\n        //else\n        //    DOM.scope.appendChild(tagElm)\n    },\n\n    /**\n     * creates a DOM tag element and injects it into the component (this.DOM.scope)\n     * @param  {Object}  tagData [text value & properties for the created tag]\n     * @param  {Object}  extraData [properties which are for the HTML template only]\n     * @return {Object} [DOM element]\n     */\n    createTagElem( tagData, extraData ){\n        tagData.__tagId = getUID()\n\n        var tagElm,\n            templateData = extend({}, tagData, { value:escapeHTML(tagData.value+\"\"), ...extraData });\n\n        // if( this.settings.readonly )\n        //     tagData.readonly = true\n\n        tagElm = this.parseTemplate('tag', [templateData, this])\n\n        // crucial for proper caret placement when deleting content. if textNodes are allowed as children of a tag element,\n        // a browser bug casues the caret to be misplaced inside the tag element (especially affects \"readonly\" tags)\n        removeTextChildNodes(tagElm)\n        // while( tagElm.lastChild.nodeType == 3 )\n        //     tagElm.lastChild.parentNode.removeChild(tagElm.lastChild)\n\n        getSetTagData(tagElm, tagData)\n        return tagElm\n    },\n\n    /**\n     * re-check all invalid tags.\n     * called after a tag was edited or removed\n     */\n    reCheckInvalidTags(){\n        var _s = this.settings\n\n        this.getTagElms(_s.classNames.tagNotAllowed).forEach((tagElm, i) => {\n            var tagData = getSetTagData(tagElm),\n                hasMaxTags = this.hasMaxTags(),\n                tagValidation = this.validateTag(tagData),\n                isValid = tagValidation === true && !hasMaxTags;\n\n            if( _s.mode == 'select' )\n                this.toggleScopeValidation(tagValidation)\n\n            // if the tag has become valid\n            if( isValid ){\n                tagData = tagData.__preInvalidData\n                    ? tagData.__preInvalidData\n                    : { value:tagData.value }\n\n                return this.replaceTag(tagElm, tagData)\n            }\n\n            // if the tag is still invaild, set its title as such (reson of invalid might have changed)\n            tagElm.title = hasMaxTags || tagValidation\n        })\n    },\n\n    /**\n     * Removes a tag\n     * @param  {Array|Node|String}  tagElms         [DOM element(s) or a String value. if undefined or null, remove last added tag]\n     * @param  {Boolean}            silent          [A flag, which when turned on, does not remove any value and does not update the original input value but simply removes the tag from tagify]\n     * @param  {Number}             tranDuration    [Transition duration in MS]\n     * TODO: Allow multiple tags to be removed at-once\n     */\n    removeTags( tagElms, silent, tranDuration ){\n        var tagsToRemove,\n            _s = this.settings;\n\n        tagElms = tagElms && tagElms instanceof HTMLElement\n            ? [tagElms]\n            : tagElms instanceof Array\n                ? tagElms\n                : tagElms\n                    ? [tagElms]\n                    : [this.getLastTag()].filter(n => n)   // must filter because \"this.getLastTag()\" might be `undefined` if there are not tags\n\n        // normalize tagElms array values:\n        // 1. removing invalid items\n        // 2, if an item is String try to get the matching Tag HTML node\n        // 3. get the tag data\n        // 4. return a collection of Objects\n        tagsToRemove = tagElms.reduce((elms, tagElm) => {\n            if( tagElm && typeof tagElm == 'string')\n                tagElm = this.getTagElmByValue(tagElm)\n\n            var tagData = getSetTagData(tagElm);\n\n            if( tagElm && tagData && !tagData.readonly ) // make sure it's a tag and not some other node\n                // because the DOM node might be removed by async animation, the state will be updated while\n                // the node might still be in the DOM, so the \"update\" method should know which nodes to ignore\n                elms.push({\n                    node: tagElm,\n                    idx: this.getTagIdx(tagData), // this.getNodeIndex(tagElm); // this.getTagIndexByValue(tagElm.textContent)\n                    data: getSetTagData(tagElm, {'__removed':true})\n                })\n\n            return elms\n        }, [])\n\n        tranDuration = typeof tranDuration == \"number\" ? tranDuration : this.CSSVars.tagHideTransition\n\n        if( _s.mode == 'select' ){\n            tranDuration = 0;\n            this.input.set.call(this)\n        }\n\n        // if only a single tag is to be removed.\n        // skip \"select\" mode because invalid tags are actually set to `this.value`\n        if( tagsToRemove.length == 1 && _s.mode != 'select' ){\n            if( tagsToRemove[0].node.classList.contains(_s.classNames.tagNotAllowed) )\n                silent = true\n        }\n\n        if( !tagsToRemove.length )\n            return;\n\n        return _s.hooks.beforeRemoveTag(tagsToRemove, {tagify:this})\n            .then(() => {\n                function removeNode( tag ){\n                    if( !tag.node.parentNode ) return\n\n                    tag.node.parentNode.removeChild(tag.node)\n\n                    if( !silent ){\n                        // this.removeValueById(tagData.__uid)\n                        this.trigger('remove', { tag:tag.node, index:tag.idx, data:tag.data })\n                        this.dropdown.refilter()\n                        this.dropdown.position()\n                        this.DOM.input.normalize() // best-practice when in mix-mode (safe to do always anyways)\n\n                        // check if any of the current tags which might have been marked as \"duplicate\" should be un-marked\n                        if( _s.keepInvalidTags )\n                            this.reCheckInvalidTags()\n\n                        // below code is unfinished. it should iterate all currently invalid edited tags, which their edits have not\n                        // changed the value yet, and should re-trigger the check, but since nothing has changed, it does not work...\n                        // this.getTagElms(_s.classNames.tagEditing).forEach( this.events.callbacks.onEditTagBlur.bind )\n                    }\n                    else if( _s.keepInvalidTags )\n                        this.trigger('remove', { tag:tag.node, index:tag.idx })\n                }\n\n                function animation( tag ){\n                    tag.node.style.width = parseFloat(window.getComputedStyle(tag.node).width) + 'px'\n                    document.body.clientTop // force repaint for the width to take affect before the \"hide\" class below\n                    tag.node.classList.add(_s.classNames.tagHide)\n\n                    // manual timeout (hack, since transitionend cannot be used because of hover)\n                    setTimeout(removeNode.bind(this), tranDuration, tag)\n                }\n\n                if( tranDuration && tranDuration > 10 && tagsToRemove.length == 1 )\n                    animation.call(this, tagsToRemove[0])\n                else\n                    tagsToRemove.forEach(removeNode.bind(this))\n\n                // update state regardless of animation\n                if( !silent ){\n                    this.removeTagsFromValue(tagsToRemove.map(tag => tag.node))\n                    this.update() // update the original input with the current value\n\n                    if( _s.mode == 'select' && _s.userInput )\n                        this.setContentEditable(true);\n                }\n            })\n            .catch(reason => {})\n    },\n\n    removeTagsFromDOM(){\n        this.getTagElms().forEach(node => node.remove())\n    },\n\n    /**\n     * @param {Array/Node} tags to be removed from the this.value array\n     */\n    removeTagsFromValue( tags ){\n        tags = Array.isArray(tags) ? tags : [tags];\n\n        tags.forEach(tag => {\n            var tagData = getSetTagData(tag),\n                tagIdx = this.getTagIdx(tagData)\n\n            //  delete tagData.__removed\n\n            if( tagIdx > -1 )\n                this.value.splice(tagIdx, 1)\n        })\n    },\n\n    removeAllTags( opts ){\n        opts = opts || {}\n        this.value = []\n\n        if( this.settings.mode == 'mix' )\n            this.DOM.input.innerHTML = ''\n        else\n            this.removeTagsFromDOM()\n\n        this.dropdown.refilter()\n        this.dropdown.position()\n\n        if( this.state.dropdown.visible )\n            setTimeout(() => {\n                this.DOM.input.focus()\n            })\n\n        if( this.settings.mode == 'select' ){\n            this.input.set.call(this)\n            this.settings.userInput && this.setContentEditable(true)\n        }\n\n        // technically for now only \"withoutChangeEvent\" exists in the opts.\n        // if more properties will be added later, only pass what's needed to \"update\"\n        this.update(opts)\n    },\n\n    postUpdate(){\n        this.state.blockChangeEvent = false\n\n        var _s = this.settings,\n            classNames = _s.classNames,\n            hasValue = _s.mode == 'mix'\n                ? _s.mixMode.integrated\n                    ? this.DOM.input.textContent\n                    : this.DOM.originalInput.value.trim()\n                : this.value.length + this.input.raw.call(this).length;\n\n        this.toggleClass(classNames.hasMaxTags, this.value.length >= _s.maxTags)\n        this.toggleClass(classNames.hasNoTags, !this.value.length)\n        this.toggleClass(classNames.empty, !hasValue)\n\n        // specifically the \"select mode\" might have the \"invalid\" classname set when the field is changed, so it must be toggled on add/remove/edit\n        if( _s.mode == 'select' ){\n            this.toggleScopeValidation(this.value?.[0]?.__isValid)\n        }\n    },\n\n    setOriginalInputValue( v ){\n        var inputElm = this.DOM.originalInput;\n\n        if( !this.settings.mixMode.integrated ){\n            inputElm.value = v\n            inputElm.tagifyValue = inputElm.value // must set to \"inputElm.value\" and not again to \"inputValue\" because for some reason the browser changes the string afterwards a bit.\n            this.setPersistedData(v, 'value')\n        }\n    },\n\n    /**\n     * update the origianl (hidden) input field's value\n     * see - https://stackoverflow.com/q/50957841/104380\n     */\n    update( args ){\n        const UPDATE_DELAY = 100\n        clearTimeout(this.debouncedUpdateTimeout)\n        this.debouncedUpdateTimeout = setTimeout(reallyUpdate.bind(this), UPDATE_DELAY)\n        this.events.bindOriginaInputListener.call(this, UPDATE_DELAY)\n\n        function reallyUpdate() {\n            var inputValue = this.getInputValue();\n\n            this.setOriginalInputValue(inputValue)\n\n            if( (!this.settings.onChangeAfterBlur || !(args||{}).withoutChangeEvent) && !this.state.blockChangeEvent )\n                this.triggerChangeEvent()\n\n            this.postUpdate()\n        }\n    },\n\n    getInputValue(){\n        var value = this.getCleanValue();\n\n        return this.settings.mode == 'mix'\n            ? this.getMixedTagsAsString(value)\n            : value.length\n                ? this.settings.originalInputValueFormat\n                    ? this.settings.originalInputValueFormat(value)\n                    : JSON.stringify(value)\n                : \"\"\n    },\n\n    /**\n     * removes properties from `this.value` which are only used internally\n     */\n    getCleanValue(v){\n        return removeCollectionProp(v || this.value, this.dataProps);\n    },\n\n    getMixedTagsAsString(){\n        var result = \"\",\n            that = this,\n            _s = this.settings,\n            originalInputValueFormat = _s.originalInputValueFormat || JSON.stringify,\n            _interpolator = _s.mixTagsInterpolator;\n\n        function iterateChildren(rootNode){\n            rootNode.childNodes.forEach((node) => {\n                if( node.nodeType == 1 ){\n                    const tagData = getSetTagData(node);\n\n                    if( node.tagName == 'BR'  ){\n                        result += \"\\r\\n\";\n                    }\n\n                    if( tagData && isNodeTag.call(that, node) ){\n                        if( tagData.__removed )\n                            return;\n                        else\n                            result += _interpolator[0] + originalInputValueFormat( omit(tagData, that.dataProps) ) + _interpolator[1]\n                    }\n                    else if( node.getAttribute('style') || ['B', 'I', 'U'].includes(node.tagName)  )\n                        result += node.textContent;\n\n                    else if( node.tagName == 'DIV' || node.tagName == 'P' ){\n                        result += \"\\r\\n\";\n                        //  if( !node.children.length && node.textContent )\n                        //  result += node.textContent;\n                        iterateChildren(node)\n                    }\n                }\n                else\n                    result += node.textContent;\n            })\n        }\n\n        iterateChildren(this.DOM.input)\n\n        return result;\n    }\n}\n\n// legacy support for changed methods names\nTagify.prototype.removeTag = Tagify.prototype.removeTags\n\nexport default Tagify\n", "import { extend, logger } from './helpers'\r\n\r\nexport default function EventDispatcher( instance ){\r\n    // Create a DOM EventTarget object\r\n    var target = document.createTextNode(''),\r\n        // keep track of all binded events & their callbacks to be able to completely remove all listeners of a speicific type\r\n        callbacksPerType = {}\r\n\r\n    function addRemove(op, events, cb){\r\n        if( cb )\r\n            events.split(/\\s+/g).forEach(ev => target[op + 'EventListener'].call(target, ev, cb))\r\n    }\r\n\r\n    // Pass EventTarget interface calls to DOM EventTarget object\r\n    return {\r\n        // unbinds all events\r\n        removeAllCustomListeners(){\r\n            Object.entries(callbacksPerType).forEach(([ev, cbArr]) => {\r\n                cbArr.forEach(cb => addRemove('remove', ev, cb))\r\n            })\r\n\r\n            callbacksPerType = {}\r\n        },\r\n\r\n        off(events, cb){\r\n            if( events ) {\r\n                if( cb )\r\n                    addRemove('remove', events, cb)\r\n                else\r\n                    // if `cb` argument was not specified then remove all listeners for the given event(s) types\r\n                    events.split(/\\s+/g).forEach(ev => {\r\n                        callbacksPerType[ev]?.forEach(cb => addRemove('remove', ev, cb))\r\n                        delete callbacksPerType[ev]\r\n                    })\r\n            }\r\n\r\n            return this\r\n        },\r\n\r\n        on(events, cb){\r\n            if(cb && typeof cb == 'function') {\r\n                //track events callbacks to be able to remove them altogehter\r\n                events.split(/\\s+/g).forEach(ev => {\r\n                    if (Array.isArray(callbacksPerType[ev]) )\r\n                        callbacksPerType[ev].push(cb)\r\n                    else\r\n                        callbacksPerType[ev] = [cb]\r\n                })\r\n\r\n                addRemove('add', events, cb)\r\n            }\r\n\r\n            return this\r\n        },\r\n\r\n        trigger(eventName, data, opts){\r\n            var e;\r\n\r\n            opts = opts || {\r\n                cloneData:true\r\n            }\r\n\r\n            if( !eventName ) return;\r\n\r\n            if( instance.settings.isJQueryPlugin ){\r\n                if( eventName == 'remove' ) eventName = 'removeTag' // issue #222\r\n                jQuery(instance.DOM.originalInput).triggerHandler(eventName, [data])\r\n            }\r\n            else{\r\n                try {\r\n                    var eventData = typeof data === 'object'\r\n                        ? data\r\n                        : {value:data};\r\n\r\n                    eventData = opts.cloneData ? extend({}, eventData) : eventData\r\n                    eventData.tagify = this\r\n\r\n                    if( data.event )\r\n                        eventData.event = this.cloneEvent(data.event)\r\n\r\n                    // TODO: move the below to the \"extend\" function\r\n                    if( data instanceof Object )\r\n                        for( var prop in data )\r\n                            if(data[prop] instanceof HTMLElement)\r\n                                eventData[prop] = data[prop]\r\n\r\n                    e = new CustomEvent(eventName, {\"detail\":eventData})\r\n                }\r\n                catch(err){ logger.warn(err) }\r\n\r\n                target.dispatchEvent(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n", "/**\n * Utils used in DocumentSheet classes\n */\n\nimport Tagify from '@yaireo/tagify';\nimport { SR6ActiveEffect } from '../effect/SR6ActiveEffect';\nimport { SYSTEM_NAME } from '../constants';\nimport { Translation } from './strings';\n\n// A single whitelist / dropdown / tag element\ninterface TagData {\n    // Identification value\n    id: string\n    // Display information for id\n    value: string\n}\n\ninterface TagifyOptions {\n    // Allowed tag inputs / dropdown content for selection\n    whitelist?: TagData[]\n    // tagify.dropdown.maxItems => max items shown on dropdown\n    maxItems?: number\n    // Tags to be pre-applied\n    tags?: TagData[]\n    // Should only tags in whitelist be allowed?\n    enforceWhitelist?: boolean\n}\n\n/**\n * Create a tagify instance for a given DOM element.\n *\n * For tagify information, check this: https://github.com/yairEO/tagify\n *\n * @param input The dom input element for a tagify element to be created onto.\n */\nexport function createTagify(input: HTMLInputElement|HTMLTextAreaElement|null, options: TagifyOptions = {}) {\n    const tagify = new Tagify(input, {\n        enforceWhitelist: options.enforceWhitelist ?? true,\n        editTags: false,\n        skipInvalid: true,\n        dropdown: {\n            maxItems: options.maxItems,\n            fuzzySearch: true,\n            enabled: 0,\n            searchKeys: [\"id\", \"value\"]\n        }\n    });\n\n\n    tagify.whitelist = options.whitelist ?? [];\n    tagify.addTags(options.tags ?? []);\n\n    return tagify;\n}\n\ninterface TagifyValue {\n    label: Translation\n    id: string\n}\ninterface TagifyTag {\n    value: string\n    id: string\n}\n\nexport type TagifyValues = TagifyValue[]\nexport type TagifyTags = TagifyTag[]\nexport type OnEventCallback = (event: Event) => void\n\n/**\n * Create a tagify from a given input element.\n *\n * TODO: This function is horrific and in need of a refactor for clarity.\n *\n * @param element\n * @param values\n * @param maxItems\n * @param tags\n * @param onChangeCallback\n * @param options\n */\nexport function createTagifyOnInput(element: HTMLInputElement, values: TagifyValues, maxItems: number, tags: TagifyTags, onChangeCallback?: OnEventCallback, options?: TagifyOptions): Tagify {\n    options = options ?? {};\n\n    const whitelist = values.map(value => ({value: game.i18n.localize(value.label), id: value.id}));\n    // const tags = selected.map(value => ({value: game.i18n.localize(value), id: value}));\n    const tagify = createTagify(element, {whitelist, maxItems, tags, ...options});\n\n    if (onChangeCallback) $(element).on('change', onChangeCallback);\n\n    return tagify;\n}\n\nconst tagsToIds = (tags: TagifyTags) => tags.map(tag => tag.id);\nexport const tagifyFlagsToIds = (effect: SR6ActiveEffect, flag: string): string[] => {\n    const value = effect.getFlag(SYSTEM_NAME, flag);\n    if (!value) return [];\n    const tags = JSON.parse(value as string);\n    return tagsToIds(tags);\n}\n\n/**\n * Helper to parse FoundryVTT DropData directly from it's source event\n *\n * This is a legacy handler for earlier FoundryVTT versions, however it's good\n * practice to not trust faulty input and inform about.\n *\n * @param event\n * @returns undefined when an DropData couldn't be parsed from it's JSON.\n */\nexport function parseDropData(event): any | undefined {\n    try {\n        return JSON.parse(event.dataTransfer.getData('text/plain'));\n    } catch (error) {\n        return console.log('Shadowrun 6e | Dropping a document onto an item sheet caused this error', error);\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { Helpers } from \"../helpers\";\nimport { EffectChangeData, EffectChangeDataSource } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/effectChangeData\";\nimport { SYSTEM_NAME } from \"../constants\";\nimport { SR6Item } from \"../item/SR6Item\";\nimport { TagifyTags, tagifyFlagsToIds } from \"../utils/sheets\";\n\n\n\n/**\n * Shadowrun Active Effects implement additional ways of altering document data.\n *\n * The main difference to the base implementation is the ability to modify Value structures without the need to define\n * sub-keys. Instead of active effects adding on top of a numerical they'll be included in the mod array of the Value.\n *\n * Overriding a value is also altered for Values to allow for a more dynamic approach. The original values are still available\n * but during calculation the override value will be used instead.\n *\n * Effects can also define the type of target data to be applied to. Default effects only apply to actor data, system effects\n * can apply to actors, tests and also only to actors targeted by tests.\n */\nexport class SR6ActiveEffect extends ActiveEffect {\n    // Foundry Core typing missing... TODO: foundry-vtt-types v10\n    public active: boolean;\n    public origin: string | null;\n    public changes: EffectChangeData[];\n\n    /**\n     * Can be used to determine if the origin of the effect is a document owned by another document.\n     *\n     * A use case would be to check if the effect is applied by an actor owned item.\n     *\n     * The current approach is a bit simple, due to the limited effect use. Should there be a time of effects applied to\n     * items, this would need change.\n     */\n    public get isOriginOwned(): boolean {\n        if (!this.origin) return false;\n        const path = this.origin.split('.');\n\n        if (path[0] === 'Scene' && path.length === 6) return true;\n        if (path[0] === 'Actor' && path.length === 4) return true;\n\n        return false;\n    }\n\n    public get source(): SR6Actor | SR6Item | null {\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return this.origin ? fromUuidSync(this.origin) : null;\n    }\n\n    get isActorOwned(): boolean {\n        return this.parent instanceof SR6Actor;\n    }\n\n    get isItemOwned(): boolean {\n        return this.parent instanceof SR6Item;\n    }\n\n    /**\n     * Always returns the parent actor of the effect, even if the effect is applied to an item.\n     */\n    get actor(): SR6Actor | null {\n        if (this.parent instanceof SR6Actor) return this.parent;\n        if (this.parent instanceof SR6Item) return this.parent?.parent;\n        return null;\n    }\n\n    /**\n     * Use to display this effect on sheet, including a possible parent item structure.\n     */\n    public get sheetName(): string | null {\n        if (this.parent instanceof SR6Actor) return this.name;\n        return `${this.parent?.name} \u00BB ${this.name}`;\n    }\n\n    /**\n     * Render the sheet of the active effect source\n     */\n    public renderSourceSheet() {\n        return this.source?.sheet?.render(true);\n    }\n\n    async toggleDisabled() {\n        // @ts-expect-error  TODO: foundry-vtt-types v10\n        return this.update({ disabled: !this.disabled });\n    }\n\n    async disable(disabled) {\n        return this.update({ disabled });\n    }\n\n    //@ts-expect-error // TODO: foundry-vtt-types\n    protected _applyCustom(actor: SR6Actor, change: EffectChangeData, current, delta, changes) {\n        return this._applyModify(actor, change, current, delta, changes);\n    }\n\n    /**\n     * Apply a modification to a ModifiableValue.\n     * Both direct key matches to the whole value and indirect matches to a value property are supported.\n     *\n     * @protected\n     */\n    protected _applyModify(actor: SR6Actor, change: EffectChangeData, current, delta, changes) {\n        const value = foundry.utils.getProperty(actor, change.key);\n        // Check direct key.\n        if (this._isKeyModifiableValue(actor, change.key)) {\n            value.mod.push({ name: this.name, value: Number(change.value) });\n\n            return null;\n        }\n\n        // Check indirect key.\n        const nodes = change.key.split('.');\n        nodes.pop();\n        const indirectKey = nodes.join('.');\n\n        // Don't apply any changes if it's also not a indirect match.\n        if (this._isKeyModifiableValue(actor, indirectKey)) {\n            const value = foundry.utils.getProperty(actor, indirectKey);\n            value.mod.push({ name: this.name, value: Number(change.value) });\n\n            return null;\n        }\n\n        // Don't apply any changes if there is NO matching value.\n        if (value === undefined) return null;\n\n        // If both indirect or direct didn't provide a match, assume the user want's to add to whatever value chosen\n        //@ts-expect-error // TODO: foundry-vtt-types\n        return super._applyAdd(actor, change, current, delta, changes);\n    }\n\n    /**\n     * Overriding can be tricky if the overwritten value is a ModifiableValue with derived values.\n     *\n     * To keep the ActiveEffect workflow simple and still allow to override values that aren't a ModifiableValue,\n     * check for such values and give the ActorDataPreparation flow some hints.\n     *\n     * To complicate things, there are some use cases when overwriting an actual property of a ValueField\n     * is needed. The SR5 uneducated quality needs to override the canDefault field of a skill.\n     *\n     * @protected\n     */\n    //@ts-expect-error // TODO: foundry-vtt-types\n    protected _applyOverride(actor: SR6Actor, change: EffectChangeData, current, delta, changes) {\n        // Check direct key.\n        if (this._isKeyModifiableValue(actor, change.key)) {\n            const value = foundry.utils.getProperty(actor, change.key);\n            value.override = { name: this.name, value: Number(change.value) };\n            value.value = change.value;\n\n            return null;\n        }\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return super._applyOverride(actor, change, current, delta, changes);\n    }\n\n    _isKeyModifiableValue(actor: SR6Actor, key: string): boolean {\n        const possibleValue = foundry.utils.getProperty(actor, key);\n        const possibleValueType = foundry.utils.getType(possibleValue);\n\n        return possibleValue && possibleValueType === 'Object' && Helpers.objectHasKeys(possibleValue, this.minValueKeys);\n    }\n\n    /**\n     * Match against these keys, as the exact ModifiableValue layout might be different from time to time.\n     */\n    get minValueKeys(): string[] {\n        return ['value', 'mod'];\n    }\n\n    /**\n     * Apply to target configured for this effect.\n     *\n     * @returns Either the configured value or 'actor' as a default.\n     */\n    get applyTo() {\n        return this.getFlag(SYSTEM_NAME, 'applyTo') as Shadowrun.EffectApplyTo || 'actor';\n    }\n\n    /**\n     * Some effects should only be applied depending on their parent items wireless status.\n     *\n     * When this flag is set, the parent item wireless status is taken into account.\n     */\n    get onlyForWireless(): boolean {\n        return this.getFlag(SYSTEM_NAME, 'onlyForWireless') as boolean || false;\n    }\n\n    /**\n     * Some effects should only be applied depending on their parent items enabled status.\n     *\n     * When this flag is set, the parent item enabled status is taken into account.\n     */\n    get onlyForEquipped(): boolean {\n        return this.getFlag(SYSTEM_NAME, 'onlyForEquipped') as boolean || false;\n    }\n\n    /**\n     * Some modifier effects should only be applied if they're applied for their parent items test.\n     *\n     * When this flag is set, this effect shouldn't apply always.\n     */\n    get onlyForItemTest(): boolean {\n        return this.getFlag(SYSTEM_NAME, 'onlyForItemTest') as boolean || false;\n    }\n\n    /**\n     * Determine if this effect has been created using the test effect application flow\n     * typically reserved for targeted_actor effects.\n     *\n     * @returns true, when the effect has been applied by a test.\n     */\n    get appliedByTest(): boolean {\n        return this.getFlag(SYSTEM_NAME, 'appliedByTest') as boolean || false;\n    }\n\n    get selectionTests(): string[] {\n        return tagifyFlagsToIds(this, 'selection_tests');\n    }\n\n    get selectionCategories() {\n        return tagifyFlagsToIds(this, 'selection_categories') as Shadowrun.ActionCategories[];\n    }\n\n    get selectionSkills(): string[] {\n        return tagifyFlagsToIds(this, 'selection_skills');\n    }\n\n    get selectionAttributes(): string[] {\n        return tagifyFlagsToIds(this, 'selection_attributes');\n    }\n\n    get selectionLimits(): string[] {\n        return tagifyFlagsToIds(this, 'selection_limits');\n    }\n\n    override get isSuppressed(): boolean {\n        if (!(this.parent instanceof SR6Item)) return false;\n\n        if (this.onlyForEquipped && !this.parent.isEquipped()) return true;\n        if (this.onlyForWireless && !this.parent.isWireless()) return true;\n\n        return false;\n    }\n\n    /**\n     * Determine if this effect is meant to be applied to the actor it's existing on.\n     *\n     * Some effects are meant to be applied to other actors, and those shouldn't apply or show\n     * on the actor that will cause them.\n     *\n     * Especially targeted_actor effects are meant to be applied to another actor acted upon but not the one acting.\n     *\n     * @return true, when the effect is meant to be applied to the actor it's existing on.\n     */\n    get appliesToLocalActor(): boolean {\n        const actor = this.actor;\n        if (!actor) return false;\n\n        if (this.applyTo === 'targeted_actor') {\n            return this.appliedByTest;\n        }\n\n        return true;\n    }\n\n    /**\n     * Inject features into default FoundryVTT ActiveEffect implementation.\n     *\n     * - dynamic source properties as change values\n     * - apply to non-Actor objects\n     *\n     * @param object\n     * @param change\n     */\n    override apply(object: any, change) {\n        // @ts-expect-error\n        // legacyTransferal has item effects created with their items as owner/source.\n        // modern transferal has item effects directly on owned items.\n        const source = CONFIG.ActiveEffect.legacyTransferral ? this.source : this.parent;\n\n        SR6ActiveEffect.resolveDynamicChangeValue(source, change);\n\n        // Foundry can be used to apply to actors.\n        if (object instanceof SR6Actor) {\n            return super.apply(object, change);\n        }\n\n        // Custom handling to apply to other object types.\n        this._applyToObject(object, change);\n    }\n\n    /**\n     * Resolve a dynamic change value to the actual numerical value.\n     *\n     * A dynamic change value follows the same rules as a Foundry roll formula (including dice pools).\n     *\n     * So a change could have the key of 'system.attributes.body' with the mode Modify and a dynamic value of\n     * '@system.technology.rating * 3'. The dynamic property path would be taken from either the source or parent\n     * document of the effect before the resolved value would be applied onto the target document / object.\n     *\n     * @param source Any object style value, either a Foundry document or a plain object\n     * @param change A singular EffectChangeData object\n     */\n    static resolveDynamicChangeValue(source: any, change: EffectChangeData) {\n        // Dynamic value present?\n        if (foundry.utils.getType(change.value) !== 'string') return;\n        if (change.value.length === 0) return;\n\n        // Use Foundry Roll Term parser to both resolve dynamic values and resolve calculations.\n        const expression = Roll.replaceFormulaData(change.value, source);\n        const value = Roll.validate(expression) ? Roll.safeEval(expression) : change.value;\n\n        // Overwrite change value with graceful default, to avoid NaN errors during change application.\n        // Adhere to FoundryVTT expectation of receiving string values.\n        if (value === undefined) change.value = '0';\n        else change.value = value.toString();\n    }\n\n    /**\n     * Handle application for none-Document objects\n     * @param object\n     * @param change\n     * @returns\n     */\n    _applyToObject(object, change) {\n        // Determine the data type of the target field\n        const current = foundry.utils.getProperty(object, change.key) ?? null;\n        // let target = current;\n        // if ( current === null ) {\n        //   const model = game.model.Actor[test.type] || {};\n        //   target = foundry.utils.getProperty(model, change.key) ?? null;\n        // }\n\n        const target = foundry.utils.getProperty(object, change.key) ?? null;\n        let targetType = foundry.utils.getType(target);\n\n        // Cast the effect change value to the correct type\n        let delta;\n        try {\n            if (targetType === \"Array\") {\n                const innerType = target.length ? foundry.utils.getType(target[0]) : \"string\";\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                delta = this._castArray(change.value, innerType);\n            }\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            else delta = this._castDelta(change.value, targetType);\n        } catch (err) {\n            console.warn(`Test [${object.constructor.name}] | Unable to parse active effect change for ${change.key}: \"${change.value}\"`);\n            return;\n        }\n\n        // Apply the change depending on the application mode\n        const modes = CONST.ACTIVE_EFFECT_MODES;\n        const changes = {};\n        switch (change.mode) {\n            case modes.ADD:\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                this._applyAdd(object, change, current, delta, changes);\n                break;\n            case modes.MULTIPLY:\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                this._applyMultiply(object, change, current, delta, changes);\n                break;\n            case modes.OVERRIDE:\n                this._applyOverride(object, change, current, delta, changes);\n                break;\n            case modes.UPGRADE:\n            case modes.DOWNGRADE:\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                this._applyUpgrade(object, change, current, delta, changes);\n                break;\n            default:\n                this._applyCustom(object, change, current, delta, changes);\n                break;\n        }\n\n        // Apply all changes to the Actor data\n        foundry.utils.mergeObject(object, changes);\n\n        return changes;\n    }\n\n    /**\n     * Override Foundry effect data migration to avoid data => system migration.\n     *\n     * Since the system provides autocomplete-inline-properties as a relationship and\n     * has it configured to provide system as the default key, the Foundry migration\n     * shouldn't be necessary. The migration hinders effects with apply-to test.\n     *\n     * All migrations here are taken from FoundryVtt common.js BaseActiveEffect#migrateData\n     * for v11.315\n     */\n    // @ts-expect-error foundry-vtt-types v10\n    static override migrateData(data: any) {\n        /**\n         * label -> name\n         * @deprecated since v11\n         */\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        this._addDataFieldMigration(data, \"label\", \"name\", d => d.label || \"Unnamed Effect\");\n\n        return data;\n    }\n}\n", "//@ts-nocheck // This is JavaScript code.\n/**\n * All functions have been taken from : https://gitlab.com/foundrynet/dnd5e/-/blob/master/module/effects.js\n *\n * There have been some alterations made to fit the shadowrun6-elysium system.\n */\n\nimport {SR6Actor} from \"./actor/SR6Actor\";\nimport {SR6Item} from \"./item/SR6Item\";\nimport {Helpers} from \"./helpers\";\nimport EffectsSheetData = Shadowrun.EffectsSheetData;\nimport { SR6ActiveEffect } from \"./effect/SR6ActiveEffect\";\n\n/**\n * Manage Active Effect instances through the Actor Sheet via effect control buttons.\n * @param {MouseEvent} event      The left-click event on the effect control\n * @param {Actor|Item} owner      The owning entity which manages this effect\n */\nexport async function onManageActiveEffect(event, owner: SR6Actor|SR6Item) {\n    // NOTE: This here is temporary until FoundryVTT has built-in support for nested item updates.\n    // if ( owner.isOwned )\n    //     return ui.notifications.warn(\"Managing Active Effects within an Owned Item is not currently supported and will be added in a subsequent update.\");\n\n    event.preventDefault();\n    // These element grabs rely heavily on HTML structure within the templates.\n    const icon = event.currentTarget;\n    const item = event.currentTarget.closest('.list-item-effect');\n    const effect = item.dataset.itemId ? owner.effects.get(item.dataset.itemId) : null;\n    // The HTML dataset must be defined\n    switch (icon.dataset.action) {\n        case \"create\":\n            return owner.createEmbeddedDocuments('ActiveEffect', [{\n                label: game.i18n.localize(\"SR6.ActiveEffect.New\"),\n                // icon: \"icons/svg/aura.svg\",\n                origin: owner.uuid\n            }]);\n\n        case \"edit\":\n            return effect.sheet.render(true);\n\n        case \"delete\":\n            const userConsented = await Helpers.confirmDeletion();\n            if (!userConsented) return;\n\n            return effect.delete();\n\n        case \"toggle\":\n            return effect.toggleDisabled();\n        case \"open-origin\":\n            return effect.renderSourceSheet();\n        default:\n            return;\n    }\n}\n\n/**\n * Manage Active Effect instances of an actors item or nested item based effects.\n *\n * @param event The left-click event on the list-item-effect control\n */\nexport async function onManageItemActiveEffect(event: MouseEvent) {\n    event.preventDefault();\n\n    const icon = event.currentTarget;\n    const listItem = event.currentTarget.closest('.list-item-effect');\n    const uuid = listItem.dataset.itemId;\n    // Foundry doesn't support direct update on nested item effects.\n    // Instead of implementing a custom solution, we just show an error message.\n    // In the future NestedItems should be replaced by a linked items approach.\n    if (effectUuidIsNestedItem(uuid)) return ui.notifications.error(\"Effects on nested items can't be managed. Move the item to the sidebar to manage.\");\n    const effect = await fromUuid(uuid) as SR6ActiveEffect;\n    if (!effect) return;\n\n    switch (icon.dataset.action) {\n        case \"edit\":\n            return effect.sheet.render(true);\n        case \"toggle\":\n            return effect.toggleDisabled();\n        case \"open-origin\":\n            return effect.parent?.sheet?.render(true);\n        default:\n            return;\n    }\n}\n\n/**\n * Determine if a uuid points to a effect within a nested item.\n *\n * These can't be managed with Foundry v11.\n * @param uuid\n * @returns true, when the uuid points to a nested item effect.\n */\nexport function effectUuidIsNestedItem(uuid: string) {\n    return (uuid.match(/Item./g) || []).length >= 2;\n}\n\n/**\n * Sort effects by their name.\n * @param effects The effects to be sorted by name\n * @returns Instance of the given effects, not a copy.\n */\nexport function prepareSortedEffects(effects: SR6ActiveEffect[], byKey: string = \"name\") {\n    return effects.sort((a, b) => a[byKey].localeCompare(b[byKey]));\n}\n\n/**\n * Collect all enabled Active Effects which are present on any owned or nested Item.\n *\n * TODO: Move into data preparation phase, similar to how actor.effects works.\n * @param document The document to collect item effects from.\n * @param options See allApplicableItemEffects documentation\n * @returns A data object containing all enabled effects with their name as key and sorted alphabetically.\n */\nexport function prepareSortedItemEffects(document: SR6Actor|SR6Item, options: ApplicableItemEffectOptions = {}): Shadowrun.AllEnabledEffectsSheetData {\n    const enabledEffects: Shadowrun.AllEnabledEffectsSheetData = [];\n\n    for (const effect of allApplicableItemsEffects(document, options)) {\n        enabledEffects.push(effect);\n    }\n\n    return prepareSortedEffects(enabledEffects, 'sheetName');\n}\n\ninterface ApplicableItemEffectOptions {\n    applyTo?: string[]\n    nestedItems?: boolean\n}\n\ninterface ApplicableDocumentEffectOptions {\n    applyTo?: string[]\n}\n\n/**\n * Collect all local effects from a given document.\n *\n * To collect effects of embedded items, use allApplicableItemEffects.\n *\n * @param document Either an actor or item document.\n * @param options.applyTo A iterable of apply-to target values\n */\nexport function *allApplicableDocumentEffects(document: SR6Actor|SR6Item, options: ApplicableDocumentEffectOptions = {}) {\n    const applyTo = options.applyTo ?? [];\n\n    for (const effect of document.effects) {\n        if (applyTo.length > 0 && !applyTo.includes(effect.applyTo)) continue;\n        yield effect;\n    }\n}\n\n/**\n * Collect all effects from a documents items and nested items.\n *\n * @param document Either a actor or item document.\n * @param options.applyTo A iterable of apply-to target values\n * @param options.nestedItems Whether to include nested items\n * @returns An iterator effect\n */\nexport function *allApplicableItemsEffects(document: SR6Actor|SR6Item, options: ApplicableItemEffectOptions = {}) {\n    const applyTo = options.applyTo ?? [];\n    const nestedItems = options.nestedItems ?? true;\n\n    for (const item of document.items) {\n        for (const effect of item.effects) {\n            if (applyTo.length > 0 && !applyTo.includes(effect.applyTo)) continue ;\n            yield effect;\n        }\n\n        if (!nestedItems) continue;\n        if (document instanceof SR6Item) continue;\n\n        for (const nestedItem of item.items) {\n            for (const effect of nestedItem.effects) {\n                if (applyTo.length > 0 && !applyTo.includes(effect.applyTo)) continue;\n                yield effect;\n            }\n        }\n    }\n}\n", "import { SR6ActiveEffect } from \"../SR6ActiveEffect\";\nimport { SuccessTest } from \"../../tests/SuccessTest\";\nimport { ActiveEffectData } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/module.mjs\";\nimport { SR6Actor } from \"../../actor/SR6Actor\";\nimport { OpposedTest } from \"../../tests/OpposedTest\";\nimport { SR6Item } from \"../../item/SR6Item\";\nimport { allApplicableDocumentEffects, allApplicableItemsEffects } from \"../../effects\";\nimport { SocketMessage } from \"../../sockets\";\nimport { FLAGS } from \"../../constants\";\n\n/**\n * Handle the SR5ActiveEffects flow for a SuccessTest.\n *\n * The flow pattern follows the composite pattern.\n */\nexport class SuccessTestEffectsFlow<T extends SuccessTest> {\n    // The test this flow is applied to.\n    test: T;\n\n    /**\n     * Create a test flow for a given test.\n     *\n     * @param test This flow will be applied to this test given. It's up to the test to call the apply method.\n     */\n    constructor(test: T) {\n        this.test = test;\n    }\n\n    /**\n     * Duplicate Foundry apply logic, but with custom handling for SR5ActiveEffects within a SuccessTest context.\n     *\n     * NOTE: Since effects are applied as none unique modifiers, applying them multiple times is possible.\n     *       Changes can't be applied as unique modifiers as they're names are not unique.\n     */\n    applyAllEffects() {\n        // Extended tests have their effects applied on first run.\n        // As soon as a test is extended, it's effects are already applied and shouldn't be applied again\n        if (this.test.extendedRoll) return;\n\n        // Since we're extending EffectChangeData by a effect field only locally, I don't care enough to resolve the typing issue.\n        const changes: any[] = [];\n\n        for (const effect of this.allApplicableEffects()) {\n            // Organize non-disabled effects by their application priority\n            if (!effect.active) continue;\n\n            if (this._skipEffectForTestLimitations(effect)) continue;\n\n            // Collect all changes of effect left.\n            changes.push(...effect.changes.map(change => {\n                const c = foundry.utils.deepClone(change) as any;\n                // Make sure FoundryVTT key migration doesn't affect us here.\n                c.key = c.key.replace('system.', 'data.');\n                c.effect = effect;\n                c.priority = c.priority ?? (c.mode * 10);\n                return c;\n            }));\n            // TODO: What's with the statuses?\n            // for (const statusId of effect.statuses) this.statuses.add(statusId);\n        }\n\n        changes.sort((a, b) => a.priority - b.priority);\n\n        // Apply all changes\n        for (const change of changes) {\n            if (!change.key) continue;\n            change.effect.apply(this.test, change);\n        }\n    }\n\n    /**\n     * Should this effect be skipped for this test?\n     *\n     * Check all limitations of the effect against the test.\n     *\n     * There is a few special cases to consider:\n     * - effects limit a category (skill, attribute), but the test doesn't use that category.\n     *   in that case the effect shouldn't apply.\n     * - effects that don't limit the test type, shouldn't apply to opposed tests\n     *   however, if a test limitation is used, it should still apply.\n     *\n     * @param effect An apply-to 'test_all' effect with possible test limitations.\n     * @returns\n     */\n    _skipEffectForTestLimitations(effect: SR6ActiveEffect) {\n        // Filter effects that don't apply to this test.\n        const tests = effect.selectionTests;\n        // Opposed tests use the same item as the success test but normally don't apply effects from it.\n        // However if an effect defines a test, it should apply to it.\n        if (tests.length === 0 && this.test.opposing) return true;\n        if (tests.length > 0 && !tests.includes(this.test.type)) return true;\n\n        // Check for action categories\n        // Both the effect and test can both define multiple categories.\n        // One match is enough.\n        const categories = effect.selectionCategories;\n        const testCategories = this.test.data.categories;\n        if (categories.length > 0 && !categories.find(category => testCategories.includes(category))) return true;\n\n        // Check for test skill.\n        const skills = effect.selectionSkills;\n        const skillId = this.test.data.action.skill;\n        const skillName = this.test.actor?.getSkill(skillId)?.name || skillId;\n        if (skills.length > 0 && !skills.includes(skillName)) return true;\n\n        // Check for test attributes used.\n        const attributes = effect.selectionAttributes;\n        const attribute = this.test.data.action.attribute;\n        const attribute2 = this.test.data.action.attribute2;\n        if (attributes.length > 0 && attribute && !attributes.includes(attribute)) return true;\n        if (attributes.length > 0 && attribute2 && !attributes.includes(attribute2)) return true;\n        if (attributes.length > 0 && !attribute && !attribute2) return true;\n\n        // Check for test limits used.\n        const limits = effect.selectionLimits;\n        const limit = this.test.data.action.limit.attribute;\n        if (limits.length > 0 && !limits.includes(limit)) return true;\n\n        return false;\n    }\n\n    /**\n     * Create Effects of applyTo 'test_all' after a success test has finished.\n     *\n     * This only applies for SuccessTest that aren't opposed.\n     * Opposed tests have their own flow of creating effects on the target actor.\n     *\n     * Before creating effects onto the target actor, resolve the dynamic values from the source context\n     * of the opposed test causing the effects. When created on the target actor, the values can't be resolved\n     * as there is no good reference to the causing test anymore.\n     *\n     * Therefore effects on the original item can have dynamic values, while the created effects are copies with\n     *\n     * @param actor The actor to create the effects on.\n     */\n    async createTargetActorEffects(actor: SR6Actor) {\n        const effectsData = this._collectTargetActorEffectsData();\n        if (!effectsData || effectsData.length === 0) return;\n\n        // Inject a flag to mark the effect as applied by a test.\n        // This is necessary so we can differentiate between effects created and applied.\n        for (const effectData of effectsData) {\n            effectData['flags.shadowrun6-elysium.appliedByTest'] = true;\n        }\n\n        if (!game.user?.isGM) {\n            await this._sendCreateTargetedEffectsSocketMessage(actor, effectsData);\n        } else {\n            await SuccessTestEffectsFlow._createTargetedEffectsAsGM(actor, effectsData);\n        }\n    }\n\n    _collectTargetActorEffectsData() {\n        const actor = this.test.actor;\n\n        if (actor === undefined || this.test.item === undefined) return;\n\n        const effectsData: ActiveEffectData[] = [];\n        for (const effect of allApplicableDocumentEffects(this.test.item, { applyTo: ['targeted_actor'] })) {\n            const effectData = effect.toObject() as ActiveEffectData;\n\n            // Transform all dynamic values to static values.\n            effectData.changes = effectData.changes.map(change => {\n                SR6ActiveEffect.resolveDynamicChangeValue(this.test, change);\n                return change;\n            });\n\n            effectsData.push(effectData);\n        }\n\n        for (const effect of allApplicableItemsEffects(this.test.item, { applyTo: ['targeted_actor'], nestedItems: false })) {\n            const effectData = effect.toObject() as ActiveEffectData;\n\n            // Transform all dynamic values to static values.\n            effectData.changes = effectData.changes.map(change => {\n                SR6ActiveEffect.resolveDynamicChangeValue(this.test, change);\n                return change;\n            });\n\n            effectsData.push(effectData);\n        }\n\n        console.debug(`SR6: Elysium | To be created effects on target actor ${actor.name}`, effectsData);\n\n        return effectsData;\n    }\n\n    /**\n     * Create a set of effects on the targeted actor, user must have permissions.\n     * @param actor The actor to create the effects on.\n     * @param effectsData The effects data to be applied;\n     */\n    static async _createTargetedEffectsAsGM(actor: SR6Actor, effectsData: ActiveEffectData[]) {\n        const alias = game.user?.name;\n        const linkedTokens = actor.getActiveTokens(true) || [];\n        const token = linkedTokens.length === 1 ? linkedTokens[0].id : undefined;\n\n        // @ts-expect-error\n        const effects = await actor.createEmbeddedDocuments('ActiveEffect', effectsData) as SR6ActiveEffect[];\n\n        const templateData = {\n            effects,\n            speaker: {\n                actor,\n                alias,\n                token\n            }\n        };\n        const content = await renderTemplate('systems/shadowrun6-elysium/dist/templates/chat/test-effects-message.hbs', templateData);\n        const messageData = {\n            content\n        };\n        await ChatMessage.create(messageData);\n\n        return effects;\n    }\n\n    /**\n     * Send out a socket message to a connected GM to create actor effects.\n     * @param actor The actor to create the effects on.\n     * @param effectsData The effects data to be applied;\n     */\n    async _sendCreateTargetedEffectsSocketMessage(actor: SR6Actor, effectsData: ActiveEffectData[]) {\n        await SocketMessage.emitForGM(FLAGS.CreateTargetedEffects, { actorUuid: actor.uuid, effectsData });\n    }\n\n    /**\n     * Handle a sent socket message to create effects on a target actor.\n     * @param {string} message.actorUuid Must contain the uuid of the actor to create the effects on.\n     * @param {ActiveEffectData[]} message.effectsData Must contain a list of effects data to be applied.\n     * @returns\n     */\n    static async _handleCreateTargetedEffectsSocketMessage(message: Shadowrun.SocketMessageData) {\n        if (!message.data.hasOwnProperty('actorUuid') && !message.data.hasOwnProperty('effectsData')) {\n            console.error(`Shadowrun 6e | ${this.name} Socket Message is missing necessary properties`, message);\n            return;\n        }\n\n        if (!message.data.effectsData.length) return;\n\n        const actor = await fromUuid(message.data.actorUuid) as SR6Actor;\n\n        return await SuccessTestEffectsFlow._createTargetedEffectsAsGM(actor, message.data.effectsData);\n    }\n\n    /**\n     * Reduce effects on test actor and item to those applicable to this test.\n     *\n     * Since Foundry Core uses a generator, keep this pattern for consistency.\n     *\n     */\n    *allApplicableEffects(): Generator<SR6ActiveEffect> {\n        // Pool only tests will don't have actors attached.\n        if (!this.test.actor) return;\n\n        for (const effect of allApplicableDocumentEffects(this.test.actor, { applyTo: ['test_all'] })) {\n            yield effect;\n        }\n\n        for (const effect of allApplicableItemsEffects(this.test.actor, { applyTo: ['test_all'] })) {\n            yield effect;\n        }\n\n        // Skip tests without an item for apply-to test_item effects.\n        if (!this.test.item) return;\n\n        for (const effect of allApplicableDocumentEffects(this.test.item, { applyTo: ['test_item'] })) {\n            yield effect;\n        }\n\n        for (const effect of allApplicableItemsEffects(this.test.item, { applyTo: ['test_item'] })) {\n            yield effect;\n        }\n    }\n\n    /**\n     * Reduce all item effects to those applicable to target actors as part of a success vs opposed test flow.\n     */\n    *allApplicableEffectsToTargetActor(): Generator<SR6ActiveEffect> {\n        if (!this.test.item) return;\n\n        for (const effect of this.test.item.effects as unknown as SR6ActiveEffect[]) {\n            if (effect.applyTo === 'targeted_actor') yield effect;\n        }\n    }\n}\n", "import { SR6Actor } from '../SR6Actor';\nimport { FLAGS, SYSTEM_NAME } from \"../../constants\";\nimport { TestCreator } from '../../tests/TestCreator';\n\n/**\n * Handle display of chat message content for GM public messages for users with and without owner permissions\n * for the actor used in that test.\n *\n * This is reliant on the gm content only setting being set.\n *\n * If the settings is active, a public GM test chat message will be marked as having 'gm only content'.\n * During rendering of that chat message on each users client, the content marked as 'gm only content' will be\n * hidden, if they don't owned the used actor for that test.\n */\nexport const GmOnlyMessageContentFlow = {\n    /**\n     * Add chat listener for GM only content.\n     */\n    async chatMessageListeners(message: ChatMessage, html: JQuery, data: any) {\n        await GmOnlyMessageContentFlow.showGmOnlyContent(message, html, data);\n    },\n    /**\n     * Should GMOnly content be applied or not?\n     *\n     * With no actor given, only general user and settings will influence the result.\n     *\n     * @param actor A optional actor reference\n     * @returns true, when GMOnlyContent is to be used for chat message.\n     */\n    applyGmOnlyContent(actor?: SR6Actor): boolean {\n        // Enable GM only content only when the global setting is set.\n        const enableFeature = game.settings.get(SYSTEM_NAME, FLAGS.HideGMOnlyChatContent) as boolean;\n\n        return enableFeature && !!game.user && game.user.isGM && !!actor;\n    },\n\n    /**\n     * Callback handler for the Foundry 'renderChatMessage' hook.\n     *\n     * Looks for chat messages containing success test data and show or hide\n     * any GM only content within their html depending on the user.\n     *\n     * @param message The message to show gm-only-content for\n     * @param html The DOM elements of the chat message contents\n     * @param data The message data used to render the chat message\n     */\n    async showGmOnlyContent(message: ChatMessage, html, data) {\n        // Directly access test data to avoid unnecessary test creation.\n        const testData = TestCreator.getTestDataFromMessage(message.id as string);\n        if (!testData?.data) return;\n        const actorUuid = testData.data.sourceActorUuid as string;\n        const actor = await fromUuid(actorUuid) as SR6Actor | null;\n\n        // SuccessTest doesn't NEED an actor, if one is cast that way: show gm-only-content\n        if (!actor || !game.user) {\n            html.find('.gm-only-content').removeClass('gm-only-content');\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            ui.chat.scrollBottom();\n        }\n        else if (game.user.isGM || game.user.isTrusted || actor.isOwner) {\n            html.find('.gm-only-content').removeClass('gm-only-content');\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            ui.chat.scrollBottom();\n        }\n    }\n};\n", "import { TestDialogListener } from '../apps/dialogs/TestDialog';\nimport { DamageApplicationFlow } from '../actor/flows/DamageApplicationFlow';\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport {CORE_FLAGS, CORE_NAME, FLAGS, SR, SYSTEM_NAME} from \"../constants\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {Helpers} from \"../helpers\";\nimport {SR6Item} from \"../item/SR6Item\";\nimport {SR6Roll} from \"../rolls/SR6Roll\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {TestDialog} from \"../apps/dialogs/TestDialog\";\nimport {SR6} from \"../config\";\nimport {ActionFlow} from \"../item/flows/ActionFlow\";\nimport ValueField = Shadowrun.ValueField;\nimport DamageData = Shadowrun.DamageData;\nimport OpposedTestData = Shadowrun.OpposedTestData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ActionResultData = Shadowrun.ActionResultData;\nimport ResultActionData = Shadowrun.ResultActionData;\nimport { TestCreator } from \"./TestCreator\";\nimport Template from \"../template\";\nimport { TestRules } from \"../rules/TestRules\";\nimport { MatrixRules } from \"../rules/MatrixRules\";\n\nimport { ActionResultFlow } from \"../item/flows/ActionResultFlow\";\nimport { SuccessTestEffectsFlow } from '../effect/flows/SuccessTestEffectsFlow';\nimport { SR6ActiveEffect } from '../effect/SR6ActiveEffect';\nimport { Translation } from '../utils/strings';\nimport { GmOnlyMessageContentFlow } from '../actor/flows/GmOnlyMessageContentFlow';\n\nexport interface TestDocuments {\n    actor?: SR6Actor\n    item?: SR6Item\n    rolls?: SR6Roll[]\n}\n\nexport interface TestValues {\n    [name: string]: ValueField | DamageData\n}\n\nexport interface SuccessTestValues extends TestValues {\n    hits: ValueField\n    netHits: ValueField\n    glitches: ValueField\n    extendedHits: ValueField\n}\n\nexport interface IconWithTooltip {\n    icon: string;\n    tooltip: Translation;\n}\n\n/**\n * Contain all data necessary to handle an action based test.\n */\nexport interface TestData {\n    // How to label this test.\n    title?: string\n    // Determine the kind of test; defaults to the class constructor name.\n    type?: string\n\n    // Shadowrun 5 related test values.\n    pool: ValueField\n    threshold: ValueField\n    limit: ValueField\n\n    // Hits as reported by an external dice roll.\n    manualHits: ValueField\n    manualGlitches: ValueField\n\n    hitsIcon?: IconWithTooltip\n    autoSuccess?: boolean\n\n    // Internal test values.\n    values: TestValues\n\n    damage: DamageData\n\n    // A list of modifier descriptions to be used for this test.\n    // These are designed to work with SR6Actor.getModifier()\n    // modifiers: Record<ModifierTypes, TestModifier>\n    modifiers: ValueField\n\n    // A list of test categories to be used for this test.\n    // Check typing documentation for more information.\n    categories: Shadowrun.ActionCategories[]\n\n    // Edge related triggers\n    pushTheLimit: boolean\n    secondChance: boolean\n\n    // When true this test is an extended test\n    extended: boolean\n    // When false, this test is on it's first roll. When true, it's on an extended roll.\n    extendedRoll: boolean\n\n    // The source action this test is derived from.\n    action: ActionRollData\n\n    // Documents the test might has been derived from.\n    sourceItemUuid?: string\n    sourceActorUuid?: string\n\n    // Message the test has been represented with.\n    messageUuid?: string\n\n    // Options the test was created with.\n    options?: TestOptions\n\n    // Has this test been cast before\n    evaluated: boolean\n}\n\nexport interface SuccessTestData extends TestData {\n    opposed: OpposedTestData\n    values: SuccessTestValues\n    // Scene Token Ids marked as targets of this test.\n    targetActorsUuid: string[]\n    // Track if failures have been rerolled\n    rerolledFailures?: boolean\n    // Store the rerolled failures rolls\n    rerolledFailuresRolls?: SR6Roll[]\n    // Store the number of failures rerolled\n    rerolledFailuresCount?: number\n}\n\nexport interface TestOptions {\n    showDialog?: boolean // Show dialog when defined as true.\n    showMessage?: boolean // Show message when defined as true.\n    rollMode?: keyof typeof CONFIG.Dice.rollModes\n}\n\nexport interface SuccessTestMessageData {\n    data: SuccessTestData,\n    rolls: SR6Roll[]\n}\n\n/**\n * General handling of Shadowrun 5e success tests as well as their FoundryVTT representation.\n *\n * SuccessTest implementation will handle\n * - general flow of a FoundryVTT Shadowrun 5e success test\n * - shadowrun 5e rules\n * - FoundryVTT dialog creation for user input\n * - FoundryVTT chat message creation\n *\n * Usage:\n * > const test = new SuccessTest({pool: 6});\n * > await test.execute();\n *\n * The user facing point for a success test is the execute() method.\n * It's up to the caller to decide what parameters to give.\n *\n * Check the TestCreator helper for more convenient ways to create tests from\n * - actions (data)\n * - items\n * - existing chat messages\n * - ...\n *\n * Create a test from an item:\n * > const test = await TestCreator.fromItem(item);\n * > test.execute();\n *\n * Typically the system will create a test from an action. Each action contains a reference\n * for the active, opposed, resist and follow up test to use. That test will be taken by the\n * TestCreate._getTestClass() function. Whenever a user trigger test is to be executed, it should\n * be an action configuration that is used to retrieve and create the test.\n *\n * The test registry is a simple key value store mapping names to classes underneath\n * game['shadowrun6-elysium'].tests\n *\n * For the default SuccessTest class the registry entry would look like this:\n * > game['shadowrun6-elysium'].tests['SuccessTest'] = SuccessTest;\n * and it would be retrieved by the TestCreator like this:\n * > const SuccessTest = TestCreate._getTestClass('SuccessTest');\n */\nexport class SuccessTest<T extends SuccessTestData = SuccessTestData> {\n    public data: T;\n    public actor: SR6Actor | undefined;\n    public item: SR6Item | undefined;\n    public rolls: SR6Roll[];\n    public targets: TokenDocument[];\n\n    // Flows to handle different aspects of a Success Test that are not directly related to the test itself.\n    public effects: SuccessTestEffectsFlow<this>;\n\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\n        // Store given documents to avoid later fetching.\n        this.actor = documents?.actor;\n        this.item = documents?.item;\n        this.rolls = documents?.rolls || [];\n\n        // User selected targets of this test.\n        this.targets = [];\n\n        options = options || {}\n\n        this.data = this._prepareData(data, options);\n\n        this.effects = new SuccessTestEffectsFlow<this>(this);\n\n        this.calculateBaseValues();\n\n        console.debug(`Shadowrun 6e | Created ${this.constructor.name} Test`, this);\n    }\n\n    /**\n     * Make sure a test has a complete data structure, even if supplied data doesn't fully provide that.\n     *\n     * Any Test should be usable simply by instantiating it with empty TestData\n     *\n     * @param data\n     * @param options\n     */\n    _prepareData(data, options: TestOptions) {\n        data.type = data.type || this.type;\n\n        // Store the current users targeted token ids for later use.\n        data.targetActorsUuid = data.targetActorsUuid || Helpers.getUserTargets().map(token => token.actor?.uuid).filter(uuid => !!uuid);\n\n        // Store given document uuids to be fetched during evaluation.\n        data.sourceActorUuid = data.sourceActorUuid || this.actor?.uuid;\n        data.sourceItemUuid = data.sourceItemUuid || this.item?.uuid;\n\n        // @ts-expect-error // Prepare general test information.\n        data.title = data.title || this.constructor.label;\n\n        options.rollMode = this._prepareRollMode(data, options);\n        options.showDialog = options.showDialog !== undefined ? options.showDialog : true;\n        options.showMessage = options.showMessage !== undefined ? options.showMessage : true;\n\n        // Options will be used when a test is reused further on.\n        data.options = options;\n\n        // Keep previous evaluation state.\n        data.evaluated = data.evaluated ?? false;\n\n        data.pushTheLimit = data.pushTheLimit !== undefined ? data.pushTheLimit : false;\n        data.secondChance = data.secondChance !== undefined ? data.secondChance : false;\n\n        // Set possible missing values.\n        data.pool = data.pool || DataDefaults.valueData({ label: 'SR6.DicePool' });\n        data.threshold = data.threshold || DataDefaults.valueData({ label: 'SR6.Threshold' });\n        data.limit = data.limit || DataDefaults.valueData({ label: 'SR6.Limit' });\n\n        data.values = data.values || {};\n\n        // Prepare basic value structure to allow an opposed tests to access derived values before execution with placeholder\n        // active tests.\n        data.values.hits = data.values.hits || DataDefaults.valueData({ label: \"SR6.Hits\" });\n        data.values.extendedHits = data.values.extendedHits || DataDefaults.valueData({ label: \"SR6.ExtendedHits\" });\n        data.values.netHits = data.values.netHits || DataDefaults.valueData({ label: \"SR6.NetHits\" });\n        data.values.glitches = data.values.glitches || DataDefaults.valueData({ label: \"SR6.Glitches\" });\n\n        // User reported manual hits.\n        data.manualHits = data.manualHits || DataDefaults.valueData({ label: \"SR6.ManualHits\" });\n        data.manualGlitches = data.manualGlitches || DataDefaults.valueData({ label: \"SR6.ManualGlitches\" });\n\n        data.opposed = data.opposed || undefined;\n        data.modifiers = this._prepareModifiersData(data.modifiers);\n\n        data.damage = data.damage || DataDefaults.damageData();\n\n        data.extendedRoll = data.extendedRoll || false;\n\n        console.debug('Shadowrun 6e | Prepared test data', data);\n\n        return data;\n    }\n\n    /**\n     * The tests roll mode can be given by specific option, action setting or global configuration.\n     * @param options The test options for the whole test\n     */\n    _prepareRollMode(data, options: TestOptions): Shadowrun.FoundryRollMode {\n        if (options.rollMode !== undefined) return options.rollMode;\n        if (data.action && data.action.roll_mode) return data.action.roll_mode;\n        else return game.settings.get(CORE_NAME, CORE_FLAGS.RollMode) as Shadowrun.FoundryRollMode;\n    }\n\n    /**\n     * Prepare a default modifier object.\n     *\n     * This should be used for whenever a Test doesn't modifiers specified externally.\n     */\n    _prepareModifiersData(modifiers?: ValueField) {\n        return modifiers || DataDefaults.valueData({ label: 'SR6.Labels.Action.Modifiers' });\n    }\n\n    /**\n     * Overwrite this method to alter the title of test dialogs and messages.\n     */\n    get title(): string {\n        // @ts-expect-error\n        return `${game.i18n.localize(this.constructor.label)}`;\n    }\n\n    /**\n     * Determine the type of success test for this implementation.\n     *\n     * By default this will be the class constructor name.\n     * NOTE: This breaks for a build pipeline using minification. This is due to\n     * , currently, the test registry using the runtime constructor name vs the compile time\n     * class name.\n     */\n    get type(): string {\n        return this.constructor.name;\n    }\n\n    /**\n     * Get the label for this test type used for i18n.\n     */\n    static get label(): string {\n        return `SR6.Tests.${this.name}`;\n    }\n\n    /**\n     * Helper to determine if this test has been fully evaluated at least once.\n     */\n    get evaluated(): boolean {\n        return this.data.evaluated;\n    }\n\n    /**\n     * FoundryVTT serializer method to embed this test into a document (ChatMessage).\n     *\n     * Foundry expects Roll data to serialize into rolls.\n     * The system expects Test data to serialize into data.\n     * @returns\n     */\n    toJSON() {\n        return {\n            data: this.data,\n            // Use Roll.toJSON() to inject 'class' property. Foundry relies on this to build it's classes.\n            rolls: this.rolls.map(roll => roll.toJSON())\n        };\n    }\n\n    /**\n     * Get the lowest side for a Shadowrun 5 die to count as a success\n     */\n    static get lowestSuccessSide(): number {\n        return Math.min(...SR.die.success);\n    }\n\n    /**\n     * Get the lowest side for a Shadowrun 5 die to count as a glitch.\n     */\n    static get lowestGlitchSide(): number {\n        return Math.min(...SR.die.glitch);\n    }\n\n    /**\n     * Get a possible globally defined default action set for this test class.\n     */\n    static _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {};\n    }\n\n    /**\n     * Get a document defined action set for this test class.\n     *\n     * Subclasses can use this to provide actor or item based action configurations that aren't\n     * directly part of the action template.\n     *\n     * @param item The item holding the action configuration.\n     * @param actor The actor used for value calculation.\n     */\n    static async _getDocumentTestAction(item: SR6Item, actor: SR6Actor): Promise<Partial<MinimalActionData>> {\n        return {};\n    }\n\n    static async _prepareActionTestData(action: ActionRollData, actor: SR6Actor, data) {\n        return TestCreator._prepareTestDataWithAction(action, actor, data);\n    }\n\n    /**\n     * Create test data from an opposed message action.\n     *\n     * This method is meant to be overridden if this testing class supports\n     * testing against an opposed message action.\n     *\n     * If this test class doesn't support this opposed message actions it will\n     * return undefined.\n     *\n     * @param testData The original test that's opposed.\n     * @param actor The actor for this opposing test.\n     * @param previousMessageId The id this message action is sourced from.\n     */\n    static async _getOpposedActionTestData(testData, actor: SR6Actor, previousMessageId: string): Promise<SuccessTestData | undefined> {\n        console.error(`Shadowrun 6e | Testing Class ${this.name} doesn't support opposed message actions`);\n        return;\n    }\n\n    /**\n     * Determine if this test has any kind of modifier types active\n     */\n    get hasModifiers(): boolean {\n        return this.data.modifiers.mod.length > 0;\n    }\n\n    /**\n     * Create the default formula for this test based on it's pool\n     *\n     * FoundryVTT documentation:\n     * shadowrun6-elysium: SR6#44\n     *\n     */\n    get formula(): string {\n        const pool = Helpers.calcTotal(this.data.pool, { min: 0 });\n        return this.buildFormula(pool, this.hasPushTheLimit);\n    }\n\n    /**\n     * Build a Foundry Roll formula string\n     *\n     * Dice:       https://foundryvtt.com/article/dice-advanced/\n     * Modifiers:  https://foundryvtt.com/article/dice-modifiers/\n     *\n     * @param dice Amount of d6 to use.\n     * @param explode Should the d6 be exploded.\n     * @returns The complete formula string.\n     */\n    buildFormula(dice: number, explode: boolean): string {\n        // Apply dice explosion, removing the limit is done outside the roll.\n        const explodeFormula = explode ? 'x6' : '';\n        return `(${dice})d6cs>=${SuccessTest.lowestSuccessSide}${explodeFormula}`;\n    }\n\n    /**\n     * Give a representation of this success test in the common Shadowrun 5 description style.\n     * The code given is meant to provide information about value sources. Should a user overwrite\n     * these values during dialog review, keep those hidden.\n     *\n     * Automatics + Agility + 3 (3) [2 + Physical]\n     */\n    get code(): string {\n        // Add action dynamic value sources as labels.\n        let pool = this.pool.mod.filter(mod => mod.value !== 0).map(mod => `${game.i18n.localize(mod.name as Translation)} ${mod.value}`); // Dev code for pool display. This should be replaced by attribute style value calculation info popup\n        // let pool = this.pool.mod.map(mod => `${game.i18n.localize(mod.name)} (${mod.value})`);\n\n        // Threshold and Limit are values that can be overwritten.\n        let threshold = this.threshold.override\n            ? [game.i18n.localize(this.threshold.override.name as Translation)]\n            : this.threshold.mod.map(mod => game.i18n.localize(mod.name as Translation));\n        let limit = this.limit.override\n            ? [game.i18n.localize(this.limit.override.name as Translation)]\n            : this.limit.mod.map(mod => game.i18n.localize(mod.name as Translation));\n\n\n        // Add action static value modifiers as numbers.\n        if (this.pool.base > 0 && !this.pool.override) pool.push(String(this.pool.base));\n        if (this.threshold.base > 0 && !this.threshold.override) threshold.push(String(this.threshold.base));\n        if (this.limit.base > 0 && !this.limit.override) limit.push(String(this.limit.base));\n\n        // Pool portion can be dynamic or static.\n        let code = pool.join(' + ').trim() || `${this.pool.value}`;\n\n        // Only add threshold / limit portions when appropriate.\n        if (threshold.length > 0 && this.threshold.value > 0) code = `${code} (${threshold.join(' + ').trim()})`;\n        if (limit.length > 0 && this.limit.value > 0) code = `${code} [${limit.join(' + ').trim()}]`;\n\n        return code;\n    }\n\n    /**\n     * Determine if this test can have a human-readable shadowrun test code representation.\n     *\n     * All parts of the test code can be dynamic, any will do.\n     */\n    get hasCode(): boolean {\n        return this.pool.mod.length > 0 || this.threshold.mod.length > 0 || this.limit.mod.length > 0;\n    }\n\n    /**\n     * Helper method to create the main SR6Roll.\n     */\n    createRoll(): SR6Roll {\n        const roll = new SR6Roll(this.formula) as unknown as SR6Roll;\n        this.rolls.push(roll);\n        return roll;\n    }\n\n    /**\n     * Allow other implementations to override what TestDialog template to use.\n     */\n    get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/success-test-dialog.html';\n    }\n\n    /**\n     * Allow other implementations to override what ChatMessage template to use.\n     */\n    get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/success-test-message.html';\n    }\n\n    /**\n     * What TestDialog class to use for this test type?\n     *\n     * If you only need to display differing data you can also only define a different _dialogTemplate\n     * @override This method if you want to use a different TestDialog.\n     */\n    _createTestDialog() {\n        return new TestDialog({ test: this, templatePath: this._dialogTemplate }, undefined, this._testDialogListeners());\n    }\n\n    /**\n     * Allow other implementations to add listeners to the TestDialog HTML, changing\n     * it's behavior without the need to sub-class TestDialog.\n     */\n    _testDialogListeners() {\n        return [] as TestDialogListener[]\n    }\n\n    /**\n     * Suppress dialog during execution\n     */\n    hideDialog() {\n        if (!this.data.options) this.data.options = {};\n        this.data.options.showDialog = false;\n    }\n\n    /**\n     * Show the dialog class for this test type and alter test according to user selection.\n     */\n    async showDialog(): Promise<boolean> {\n        if (!this.data.options?.showDialog) return true;\n\n        const dialog = this._createTestDialog();\n\n        const data = await dialog.select();\n        if (dialog.canceled) {\n            await this.cleanupAfterExecutionCancel();\n            return false\n        }\n\n        // Overwrite current test state with whatever the dialog gives.\n        this.data = data;\n        await this.saveUserSelectionAfterDialog();\n\n        // Second base value preparation will show changes due to user input.\n        this.prepareBaseValues();\n        this.calculateBaseValues();\n\n        return true;\n    }\n\n    /**\n     * Override this method if there needs to be some cleanup after a user has canceled a dialog\n     * but before the tests actual execution.\n     */\n    async cleanupAfterExecutionCancel() { }\n\n    /**\n     * Override this method if you want to save any document data after a user has selected values\n     * during user facing dialog.\n     */\n    async saveUserSelectionAfterDialog() { }\n\n    /**\n     * The general base value preparation. This will be re applied at multiple points before execution.\n     */\n    prepareBaseValues() {\n        // Re-apply document modifiers first, as those might have changed in between calculations.\n        this.prepareDocumentModifiers();\n        this.prepareTestModifiers();\n\n        // Only then apply values and collected modifiers.\n        this.applyPushTheLimit();\n        this.applyPoolModifiers();\n    }\n\n    /**\n     * Handle chosen modifier types and apply them to the pool modifiers.\n     *\n     * NOTE: To keep this.pool.mod and this.modifiers.mod in sync, never remove\n     *       a modifier. Rather set it to zero, causing it to not be shown.\n     */\n    applyPoolModifiers() {\n        const pool = new PartsList(this.pool.mod);\n\n        // Remove override modifier from pool.\n        pool.removePart('SR6.Labels.Action.Modifiers');\n\n        // If applicable apply only override to pool. (User interaction)\n        if (this.data.modifiers.override) {\n            // Remove all modifiers and only apply override.\n            for (const modifier of this.data.modifiers.mod) {\n                pool.removePart(modifier.name);\n            }\n\n            pool.addUniquePart('SR6.Labels.Action.Modifiers', this.data.modifiers.override.value)\n            return;\n        }\n\n        // Otherwise apply automated modifiers to pool.\n        for (const modifier of this.data.modifiers.mod) {\n            // A modifier might have been asked for, but not given by the actor.\n            pool.addUniquePart(modifier.name, modifier.value);\n        }\n    }\n\n    /**\n     * To assure all test values are full integers, round all value parts.\n     * Don't round the total as this will lead to some values shown as decimals and some as\n     * integers.\n     *\n     * Instead Shadowrun 5e rules expect all individual values to be rounded before use.\n     * We use the 'Note on Rounding' on SR5#48 as a guideline.\n     */\n    roundBaseValueParts() {\n        const roundAllMods = (value: Shadowrun.ValueField) => {\n            value.base = Math.ceil(value.base);\n            if (value.override) value.override.value = Math.ceil(value.override.value);\n            value.mod.forEach(mod => mod.value = Math.ceil(mod.value));\n        }\n\n        roundAllMods(this.data.modifiers);\n        roundAllMods(this.data.pool);\n        roundAllMods(this.data.threshold);\n        roundAllMods(this.data.limit);\n    }\n\n    /**\n     * Calculate only the base test that can be calculated before the test has been evaluated.\n     *\n     * This will be re applied at multiple points before execution.\n     */\n    calculateBaseValues() {\n        this.roundBaseValueParts();\n\n        this.data.modifiers.value = Helpers.calcTotal(this.data.modifiers);\n\n        this.data.pool.value = Helpers.calcTotal(this.data.pool, { min: 0 });\n        this.data.threshold.value = Helpers.calcTotal(this.data.threshold, { min: 0 });\n        this.data.limit.value = Helpers.calcTotal(this.data.limit, { min: 0 });\n\n        this.data.manualHits.value = Helpers.calcTotal(this.data.manualHits, { min: 0 });\n        this.data.manualGlitches.value = Helpers.calcTotal(this.data.manualGlitches, { min: 0 });\n\n        // Shows AP on incoming attacks\n        this.data.damage.ap.value = Helpers.calcTotal(this.data.damage.ap);\n\n        console.debug(`Shadowrun 6e | Calculated base values for ${this.constructor.name}`, this.data);\n    }\n\n    /**\n     * Allow implementations to validate values before execution.\n     */\n    validateBaseValues() { }\n\n    /**\n     * Helper method to evaluate the internal SR6Roll and SuccessTest values.\n     */\n    async evaluate(): Promise<this> {\n        if (!this.usingManualRoll) {\n            // Evaluate all rolls.\n            for (const roll of this.rolls) {\n                // @ts-expect-error // foundry-vtt-types is missing evaluated.\n                if (!roll._evaluated)\n                    await roll.evaluate();\n            }\n        }\n\n        this.data.evaluated = true;\n        this.calculateDerivedValues();\n\n        return this;\n    }\n\n    /**\n     * Allow subclasses to populate a test before execution and any other steps.\n     */\n    async populateTests() { }\n\n    /**\n     * Rehydrate this test with Documents, should they be missing.\n     * This can happen when a test is created from a ChatMessage.\n     */\n    async populateDocuments() {\n        // Populate the actor document.\n        if (!this.actor && this.data.sourceActorUuid) {\n            // SR6Actor.uuid will return an actor id for linked actors but its token id for unlinked actors\n            const document = await fromUuid(this.data.sourceActorUuid) || undefined;\n            // @ts-expect-error\n            this.actor = document instanceof TokenDocument ?\n                document.actor :\n                document as SR6Actor;\n        }\n\n        // Populate the item document.\n        if (!this.item && this.data.sourceItemUuid)\n            this.item = await fromUuid(this.data.sourceItemUuid) as SR6Item || undefined;\n\n        // Populate targeted token documents.\n        if (this.targets.length === 0 && this.data.targetActorsUuid) {\n            this.targets = [];\n            for (const uuid of this.data.targetActorsUuid) {\n                const document = await fromUuid(uuid);\n                if (!document) continue;\n\n                const token = document instanceof SR6Actor ? document.getToken() : document;\n                if (!(token instanceof TokenDocument)) continue;\n\n                this.targets.push(token as TokenDocument);\n            }\n        }\n    }\n\n    /**\n     * Prepare missing data based on tests Documents before anything else is done.\n     */\n    async prepareDocumentData() {\n        // Calculate damage here to have access to actor AND item used.\n        this.data.damage = ActionFlow.calcDamageData(this.data.damage, this.actor, this.item);\n    }\n\n    /**\n     * What Action Categories should be used for this test by default.\n     *\n     * NOTE: These categories can be overwritten by the source action used to create a test instance.\n     * Override this method if you test implementation needs to define different default categories.\n     */\n    get testCategories(): Shadowrun.ActionCategories[] {\n        return [];\n    }\n\n    /**\n     * What modifiers should be used for this test type by default.\n     *\n     * NOTE: These modifiers are routed through ModifierFlow.totalFor()\n     */\n    get testModifiers(): ModifierTypes[] {\n        return ['global', 'wounds'];\n    }\n\n    /**\n     * Prepare this tests categories.\n     *\n     * By default categories are taken from the test implementation but can be overwritten by the source action.\n     *\n     * Test categories must be ready before active effects are applied as they rely on this data to be present.\n     */\n    prepareTestCategories() {\n        this.data.categories = this.data.action.categories || this.testCategories;\n    }\n\n    /**\n     * Prepare modifiers based on connected documents.\n     *\n     * Documents MUST've been be populated before hand.\n     *\n     * Main purpose is to populate the configured modifiers for this test based on actor / items used.\n     */\n    prepareDocumentModifiers() {\n        this.prepareActorModifiers();\n        this.prepareItemModifiers();\n    }\n\n    /**\n     * Allow implementations to overwrite default modifiers after document modifiers have been applied to influence\n     * pool calculation.\n     */\n    prepareTestModifiers() { }\n\n    /**\n     * Prepare general modifiers based on the actor, as defined within the action or test implementation.\n     */\n    prepareActorModifiers() {\n        if (!this.actor) return;\n        // Don't use default test actions when source action provides modifiers.\n        if (this.data.action.modifiers.length > 0) return;\n\n        for (const type of this.testModifiers) {\n            const { name, value } = this.prepareActorModifier(this.actor, type);\n            PartsList.AddUniquePart(this.data.modifiers.mod, name, value, true);\n        }\n    }\n\n    /**\n     * Prepare a single modifier.\n     *\n     * Extend this method should you want to alter a single modifiers application.\n     *\n     * @param actor The actor to fetch modifier information for.\n     * @param type The modifier type to be prepared.\n     */\n    prepareActorModifier(actor: SR6Actor, type: ModifierTypes): { name: string, value: number } {\n        const options = { test: this, reapply: true };\n        const value = actor.modifiers.totalFor(type, options);\n        const name = this._getModifierTypeLabel(type);\n\n        return { name, value };\n    }\n\n    _getModifierTypeLabel(type: ModifierTypes): string {\n        return SR6.modifierTypes[type];\n    }\n\n    /**\n     * Allow subclasses to alter test modifiers based on the item used for casting.\n     */\n    prepareItemModifiers() { }\n\n    /**\n     * Calculate the total of all values.\n     */\n    calculateDerivedValues() {\n        // Calculate all derived / static values. Order is important.\n        this.data.values.hits = this.calculateHits();\n        this.data.values.extendedHits = this.calculateExtendedHits();\n        this.data.values.netHits = this.calculateNetHits();\n        this.data.values.glitches = this.calculateGlitches();\n\n        console.debug(`Shadowrun 6e | Calculated derived values for ${this.constructor.name}`, this.data);\n    }\n\n    /**\n     * Helper to get the pool value for this success test.\n     */\n    get pool(): ValueField {\n        return this.data.pool;\n    }\n\n    /**\n     * Helper to get the total limit value for this success test.\n     */\n    get limit(): ValueField {\n        return this.data.limit;\n    }\n\n    /**\n     * Helper to determine if this success test uses a limit.\n     *\n     * NOTE: Limits will NEVER apply when the ApplyLimit setting is set accordingly.\n     */\n    get hasLimit(): boolean {\n        const applyLimit = game.settings.get(SYSTEM_NAME, FLAGS.ApplyLimits) as boolean;\n        return applyLimit && !this.hasPushTheLimit && this.limit.value > 0;\n    }\n\n    /**\n     * Helper to determine if the hits have been lowered by the limit.\n     *\n     * This will compare actual roll hits, without applied limit.\n     */\n    get hasReducedHits(): boolean {\n        return this.hits.value > this.limit.value;\n    }\n\n    /**\n     * Helper to get the total threshold value for this success test.\n     */\n    get threshold(): ValueField {\n        return this.data.threshold;\n    }\n\n    /**\n     * Helper to determine if this success test uses a threshold.\n     */\n    get hasThreshold(): boolean {\n        return this.threshold.value > 0;\n    }\n\n    /**\n     * Helper to determine if this success test has a damage value.\n     */\n    get hasDamage(): boolean {\n        // check that we don't have a damage value of 0 and a damage type that isn't empty\n        return this.data.action.damage.value !== 0 && this.data.action.damage.type.value !== '';\n    }\n\n    /**\n     * Helper to get the net hits value for this success test with a possible threshold.\n     */\n    calculateNetHits(): ValueField {\n        // An extended test will use summed up extended hit, while a normal test will use its own hits.\n        const hits = this.extended ? this.extendedHits : this.hits;\n\n        // Maybe lower hits by threshold to get the actual net hits.\n        const base = this.hasThreshold ?\n            Math.max(hits.value - this.threshold.value, 0) :\n            hits.value;\n\n        // Calculate a ValueField for standardization.\n        const netHits = DataDefaults.valueData({\n            label: \"SR6.NetHits\",\n            base\n        });\n        netHits.value = Helpers.calcTotal(netHits, { min: 0 });\n\n        return netHits;\n    }\n\n    get netHits(): ValueField {\n        return this.data.values.netHits;\n    }\n\n    /**\n     * Helper to get the hits value for this success test with a possible limit.\n     */\n    calculateHits(): ValueField {\n        // Use manual or automated roll for hits.\n        const rollHits = this.usingManualRoll ?\n            this.manualHits.value :\n            this.rolls.reduce((hits, roll) => hits + roll.hits, 0);\n\n        console.log('Shadowrun 6e | Calculating hits from rolls:', this.rolls);\n        console.log('Shadowrun 6e | Roll hits calculated:', rollHits);\n\n        // Sum of all rolls!\n        this.hits.base = rollHits;\n\n        // First, calculate hits based on roll and modifiers.\n        this.hits.value = Helpers.calcTotal(this.hits, { min: 0 });\n        console.log('Shadowrun 6e | Hits after modifiers:', this.hits.value);\n\n        // Second, reduce hits by limit.\n        this.hits.value = this.hasLimit ? Math.min(this.limit.value, this.hits.value) : this.hits.value;\n        console.log('Shadowrun 6e | Final hits value after limit:', this.hits.value);\n\n        return this.hits;\n    }\n\n    get hits(): ValueField {\n        return this.data.values.hits;\n    }\n\n    get extendedHits(): ValueField {\n        // Return a default value field, for when no extended hits have been derived yet (or ever).\n        return this.data.values.extendedHits || DataDefaults.valueData({ label: 'SR6.ExtendedHits' });\n    }\n\n    get manualHits(): ValueField {\n        return this.data.manualHits;\n    }\n\n    get manualGlitches(): ValueField {\n        return this.data.manualGlitches;\n    }\n\n    get hitsIcon(): IconWithTooltip | undefined {\n        return this.data.hitsIcon;\n    }\n\n    get appendedHits(): number | undefined {\n        return this.hits.mod.find((mod) => mod.name === \"SR6.AppendedHits\")?.value;\n    }\n\n    // In the case we've added appended hits, we want to separately display the hits value and the appended hits (ie. \"7 + 5\" instead of \"12\")\n    get displayHits(): number | undefined {\n        console.log('Shadowrun 6e | Getting displayHits');\n        console.log('Shadowrun 6e | hits.value:', this.hits.value);\n        console.log('Shadowrun 6e | hits.base:', this.hits.base);\n        console.log('Shadowrun 6e | appendedHits:', this.appendedHits);\n\n        // Make sure we're returning the actual number of hits from the roll\n        // For spellcasting tests, we want to show the actual number of hits\n        const result = this.hits.base;\n        console.log('Shadowrun 6e | displayHits result:', result);\n        return result;\n    }\n\n    // Hide dice pool and roll results as they are not relevant to the success of the test\n    get autoSuccess(): boolean {\n        return !!this.data.autoSuccess;\n    }\n\n    /**\n     * Depending on system settings allow manual hits to skip automated roll.\n     */\n    get allowManualHits(): boolean {\n        return game.settings.get(SYSTEM_NAME, FLAGS.ManualRollOnSuccessTest) as boolean;\n    }\n\n    /**\n     * Determine if this success test must automated roll or can use a manual roll given by user.\n     */\n    get usingManualRoll(): boolean {\n        return this.allowManualHits && (Boolean(this.data.manualHits.override) || Boolean(this.data.manualGlitches.override))\n    }\n\n    /**\n     * Helper to get the glitches values for this success test.\n     */\n    calculateGlitches(): ValueField {\n        // When using a manual roll, don't derive glitches from automated rolls.\n        const rollGlitches = this.usingManualRoll ?\n            this.manualGlitches.value :\n            this.rolls.reduce((glitches, roll) => glitches + roll.glitches, 0);\n\n        const glitches = DataDefaults.valueData({\n            label: \"SR6.Glitches\",\n            base: rollGlitches\n        })\n        glitches.value = Helpers.calcTotal(glitches, { min: 0 });\n\n        return glitches;\n    }\n\n    /**\n     * Gather hits across multiple extended test executions.\n     */\n    calculateExtendedHits(): ValueField {\n        if (!this.extended) return DataDefaults.valueData({ label: 'SR6.ExtendedHits' });\n\n        const extendedHits = this.extendedHits;\n        extendedHits.mod = PartsList.AddPart(extendedHits.mod, 'SR6.Hits', this.hits.value);\n\n        Helpers.calcTotal(extendedHits, { min: 0 });\n\n        return extendedHits;\n    }\n\n    /**\n     * Check if this test is currently being extended.\n     */\n    get extended(): boolean {\n        return this.canBeExtended && this.data.extended;\n    }\n\n    /**\n     * Check if this test is on it's first or an extended roll.\n     */\n    get extendedRoll(): boolean {\n        return this.data.extendedRoll;\n    }\n\n    /**\n     * Can this test type be extended or not?\n     *\n     * If false, will hide extended dialog settings.\n     */\n    get canBeExtended(): boolean {\n        return true;\n    }\n\n    get glitches(): ValueField {\n        return this.data.values.glitches;\n    }\n\n    /**\n     * Helper to check if the current test state is glitched.\n     */\n    get glitched(): boolean {\n        return TestRules.glitched(this.glitches.value, this.pool.value);\n    }\n\n    /**\n     * Helper to check if the current test state is critically glitched.\n     */\n    get criticalGlitched(): boolean {\n        return TestRules.criticalGlitched(this.hits.value, this.glitched);\n    }\n\n    /**\n     * Check if the current test state is successful.\n     *\n     * @returns true on a successful test\n     */\n    get success(): boolean {\n        // Extended tests use the sum of all extended hits.\n        const hits = this.extended ? this.extendedHits : this.hits;\n        return TestRules.success(hits.value, this.threshold.value);\n    }\n\n    /**\n     * Check if the current test state is unsuccessful.\n     *\n     * @returns true on a failed test\n     */\n    get failure(): boolean {\n        // Allow extended tests without a threshold and avoid 'failure' confusion.\n        if (this.extended && this.threshold.value === 0) return true;\n        // When extendedHits have been collected, check against threshold.\n        if (this.extendedHits.value > 0 && this.threshold.value > 0) return this.extendedHits.value < this.threshold.value;\n        // Otherwise fall back to 'whatever is not a success.\n        return !this.success;\n    }\n\n    /**\n     * Use this method for subclasses which can't reasonably be successful.\n     */\n    get canSucceed(): boolean {\n        // Not extended tests can succeed normally.\n        if (!this.extended) return true;\n\n        // Extended tests can only succeed when a threshold is set.\n        return this.extended && this.hasThreshold;\n    }\n\n    /**\n     * Use this method for subclasses which can't reasonably fail.\n     */\n    get canFail(): boolean {\n        return true;\n    }\n\n    /**\n     * While a test might be successful with a zero threshold, it's\n     * unclear if it's meant to be a success.\n     *\n     * Tests that don't know their threshold, either by GM secrecy or\n     * following opposed tests not yet thrown, shouldn't show user\n     * their successful.\n     */\n    get showSuccessLabel(): boolean {\n        return this.success && this.hasThreshold;\n    }\n\n    /**\n     * How to call a successful test of this type.\n     */\n    get successLabel(): Translation {\n        return 'SR6.TestResults.Success';\n    }\n\n    /**\n     * How to call a failed test of this type.\n     */\n    get failureLabel(): Translation {\n        if (this.extended) return 'SR6.TestResults.Results';\n        return 'SR6.TestResults.Failure';\n    }\n\n    /**\n     * Helper to check if opposing tests exist for this test.\n     */\n    get opposed(): boolean {\n        return !!this.data.opposed && this.data.opposed.test !== undefined && this.data.opposed.test !== '';\n    }\n\n    /**\n     * Determine if this test is opposing another test.\n     */\n    get opposing(): boolean {\n        return false;\n    }\n\n    /**\n     * Helper to get an items action result information.\n     */\n    get results(): ActionResultData | undefined {\n        if (!this.item) return;\n        return this.item.getActionResult();\n    }\n\n    /**\n     * Determine if this test has any targets selected using FoundryVTT targeting.\n     */\n    get hasTargets(): boolean {\n        return this.targets.length > 0;\n    }\n\n    /**\n     * Has this test been derived from an action?\n     *\n     * This can either be from an items action or a pre-configured action.\n     */\n    get hasAction(): boolean {\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return !foundry.utils.isEmpty(this.data.action);\n    }\n\n    /**\n     * TODO: This method results in an ugly description.\n     *\n     */\n    get description(): string {\n        const poolPart = this.pool.value;\n        const thresholdPart = this.hasThreshold ? `(${this.threshold.value})` : '';\n        const limitPart = this.hasLimit ? `[${this.limit.value}]` : '';\n        return `${poolPart} ${thresholdPart} ${limitPart}`\n    }\n\n    get hasPushTheLimit(): boolean {\n        return this.data.pushTheLimit;\n    }\n\n    get hasSecondChance(): boolean {\n        return this.data.secondChance;\n    }\n\n    /**\n     * Determine if this test can use second chance rules.\n     *\n     * Use this property to check if a existing test can use this edge rule.\n     *\n     * SR5#56.\n     */\n    get canSecondChance(): boolean {\n        if (!this.evaluated) {\n            console.error('SR6: Elysium | Second chance edge rules should not be applicable on initial cast');\n            return false;\n        }\n        // According to rules, second chance can't be used on glitched tests.\n        if (this.glitched) {\n            ui.notifications?.warn('SR6.Warnings.CantSecondChanceAGlitch', { localize: true });\n            return false;\n        }\n\n        if (this.hasPushTheLimit || this.hasSecondChance) {\n            ui.notifications?.warn('SR6.Warnings.CantSpendMulitplePointsOfEdge', { localize: true });\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Determine if this test can use push the limit rules\n     *\n     * Use this property to check if a existing test can use this edge rule.\n     *\n     * SR5#56.\n     */\n    get canPushTheLimit(): boolean {\n        if (this.hasPushTheLimit || this.hasSecondChance) {\n            ui.notifications?.warn('SR6.Warnings.CantSpendMulitplePointsOfEdge', { localize: true });\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle Edge rule 'push the limit', either adding edge before or after casting\n     * and exploding sixes for either all dice or only edge dice.\n     *\n     * Check edge rules on SR5#56.\n     *\n     * If called without push the limit, all modifiers for it will be removed.\n     */\n    applyPushTheLimit() {\n        if (!this.actor) return;\n\n        const parts = new PartsList(this.pool.mod);\n\n        // During the lifetime of a test (dialog/recasting) the user might want to remove push the limit again.\n        if (!this.hasPushTheLimit) {\n            parts.removePart('SR6.PushTheLimit');\n            return;\n        }\n\n        // Edge will be applied differently for when the test has been already been cast or not.\n        // Exploding dice will be handled during normal roll creation.\n        const edge = this.actor.getEdge().value;\n        parts.addUniquePart('SR6.PushTheLimit', edge, true);\n\n        // Before casting edge will be part of the whole dice pool and that pool will explode.\n        if (!this.evaluated) return;\n\n        // After casting use a separate roll, as only those will be rolled again and explode.\n        const explodeDice = true;\n        const formula = this.buildFormula(edge, explodeDice);\n        const roll = new SR6Roll(formula);\n        this.rolls.push(roll);\n    }\n\n    /**\n     * Handle Edge rules for 'second chance'.\n     *\n     * If called without second chance, all modifiers for it will be removed.\n     */\n    applySecondChance() {\n        if (!this.actor) return;\n\n        const parts = new PartsList(this.pool.mod);\n\n        // During test lifetime (dialog/recasting) the user might want to remove second chance again.\n        if (!this.hasSecondChance) {\n            parts.removePart('SR6.SecondChance');\n            return;\n        }\n\n        // Since only ONE edge can be spent on a test, last roll will either be a\n        // - the original dice pool\n        // - an extending dice pool\n        const lastRoll = this.rolls[this.rolls.length - 1];\n        const dice = lastRoll.poolThrown - lastRoll.hits;\n        if (dice <= 0) {\n            ui.notifications?.warn('SR6.Warnings.CantSecondChanceWithoutNoneHits', { localize: true });\n            return this;\n        }\n\n        // Apply second chance modifiers.\n        // Overwrite existing, as only ONE edge per test is allowed, therefore stacking is not possible.\n        parts.addUniquePart('SR6.SecondChance', dice, true);\n\n        // Add new dice as fully separate Roll.\n        const formula = `${dice}d6`;\n        const roll = new SR6Roll(formula);\n        this.rolls.push(roll);\n    }\n\n    /**\n     * Make sure ALL resources needed are available.\n     *\n     * This is checked before any resources are consumed.\n     *\n     * @returns true when enough resources are available to consume\n     */\n    canConsumeDocumentResources(): boolean {\n        // No actor present? Nothing to consume...\n        if (!this.actor) return true;\n\n        // Edge consumption.\n        if (this.hasPushTheLimit || this.hasSecondChance) {\n            if (this.actor.getEdge().uses <= 0) {\n                ui.notifications?.error(game.i18n.localize('SR6.MissingRessource.Edge'));\n                return false;\n            }\n        }\n\n        // Check if this is a major or minor action and if the actor has enough actions\n        if (this.data.action && this.data.action.type) {\n            // Only proceed if the actor has initiative\n            if (!this.actor.system.initiative) {\n                console.log(`Shadowrun 6e | Actor ${this.actor.name} has no initiative data`);\n                return true; // Allow the test to proceed, but it won't spend an action\n            }\n\n            const actions = this.actor.system.initiative.actions;\n            if (!actions) return true; // Allow the test to proceed, but it won't spend an action\n\n            if (this.data.action.type === 'major') {\n                // Check if the actor has at least 1 major action\n                if (actions.major < 1) {\n                    ui.notifications?.warn(game.i18n.format('SR6.NoMajorActionsLeft', {\n                        name: this.actor.name\n                    }));\n                    return false;\n                }\n            } else if (this.data.action.type === 'minor') {\n                // Check if the actor has at least 1 minor action\n                if (actions.minor < 1) {\n                    ui.notifications?.warn(game.i18n.format('SR6.NoMinorActionsLeft', {\n                        name: this.actor.name\n                    }));\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Handle resulting resource consumption caused by this test.\n     *\n     * @return true when the resources could be consumed in appropriate amounts.\n     */\n    async consumeDocumentRessources(): Promise<boolean> {\n        if (!this.actor) return true;\n\n        // Edge consumption.\n        if (this.hasPushTheLimit || this.hasSecondChance) {\n            await this.actor.useEdge();\n        }\n\n        // Check if this is a major or minor action and spend it if needed\n        if (this.data.action && this.data.action.type) {\n            if (this.data.action.type === 'major') {\n                console.log(`Shadowrun 6e | Test is a major action, attempting to spend a major action for ${this.actor.name}`);\n                // Attempt to spend a major action\n                const success = await this.actor.spendMajorAction();\n\n                // If the actor has no major actions left, don't proceed with the test\n                if (!success) {\n                    console.log(`Shadowrun 6e | ${this.actor.name} has no major actions left, canceling test`);\n                    return false;\n                }\n                console.log(`Shadowrun 6e | Successfully spent a major action for ${this.actor.name}`);\n            } else if (this.data.action.type === 'minor') {\n                console.log(`Shadowrun 6e | Test is a minor action, attempting to spend a minor action for ${this.actor.name}`);\n                // Attempt to spend a minor action\n                const success = await this.actor.spendMinorAction();\n\n                // If the actor has no minor actions left, don't proceed with the test\n                if (!success) {\n                    console.log(`Shadowrun 6e | ${this.actor.name} has no minor actions left, canceling test`);\n                    return false;\n                }\n                console.log(`Shadowrun 6e | Successfully spent a minor action for ${this.actor.name}`);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n    * Consume resources according to whats configured for this world.\n    * @returns true when the test can process\n    */\n    async consumeDocumentRessoucesWhenNeeded(): Promise<boolean> {\n        const mustHaveRessouces = game.settings.get(SYSTEM_NAME, FLAGS.MustHaveRessourcesOnTest);\n        // Make sure to nest canConsume to avoid unnecessary warnings.\n        if (mustHaveRessouces) {\n            if (!this.canConsumeDocumentResources()) return false;\n        }\n\n        return await this.consumeDocumentRessources();\n    }\n\n    /**\n     * Executing a test will start all behaviors necessary to:\n     * - Calculate its values\n     * - Show and handle a user facing test dialog\n     * - Render and show a resulting test message\n     * - Evaluate all it's roles and consumption of items used\n     * - Trigger resulting methods for all results, including success and failure\n     *\n     * Implementing classes should seek to change out methods used here, or within those methods, to alter test\n     * behavior to their needs.\n     *\n     * When execute methods promise resolves this test and its chain is completed.\n     *\n     * NOTE: Currently none of these methods trigger Foundry hooks.\n     */\n    async execute(): Promise<this> {\n        await this.populateTests();\n        await this.populateDocuments();\n\n        this.prepareTestCategories();\n\n        // Effects need to be applied before any values are calculated.\n        this.effects.applyAllEffects();\n\n        await this.prepareDocumentData();\n\n        // Initial base value preparation will show default result without any user input.\n        this.prepareBaseValues();\n        this.calculateBaseValues();\n        this.validateBaseValues();\n\n        // Allow user to change details.\n        const userConsented = await this.showDialog();\n        if (!userConsented) return this;\n\n        // Check if actor has all needed resources to even test.\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\n        if (!actorConsumedResources) return this;\n\n        this.createRoll();\n\n        await this.evaluate();\n        await this.processResults();\n        await this.toMessage();\n        await this.afterTestComplete();\n\n        return this;\n    }\n\n    /**\n     * Handle Edge rule 'second chance' within this test according to SR5#56\n     *\n     * This is a execute method alternative.\n     */\n    async executeWithSecondChance(): Promise<this> {\n        console.debug(`Shadowrun 6e | ${this.constructor.name} will apply second chance rules`);\n\n        if (!this.data.sourceActorUuid) {\n            ui.notifications?.warn('SR6.Warnings.EdgeRulesCantBeAppliedOnTestsWithoutAnActor', { localize: true });\n            return this;\n        }\n        if (!this.canSecondChance) return this;\n\n        // Fetch documents.\n        await this.populateDocuments();\n\n        //  Trigger edge consumption.\n        this.data.secondChance = true;\n        this.applySecondChance();\n\n        // Can't use normal #execute as not all general testing flow are needed.\n        this.calculateBaseValues();\n        this.validateBaseValues();\n\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\n        if (!actorConsumedResources) return this;\n\n        // Remove second chance to avoid edge consumption on any kind of re-rolls.\n        this.data.secondChance = false;\n\n        await this.evaluate();\n        await this.processResults();\n        await this.toMessage();\n        await this.afterTestComplete();\n\n        return this;\n    }\n\n    /**\n     * A execute method alternative to handle Edge rule 'push the limit' within this test.\n     */\n    async executeWithPushTheLimit(): Promise<this> {\n        console.debug(`Shadowrun 6e | ${this.constructor.name} will push the limit rules`);\n\n        if (!this.data.sourceActorUuid) {\n            ui.notifications?.warn('SR6.Warnings.EdgeRulesCantBeAppliedOnTestsWithoutAnActor', { localize: true });\n            return this;\n        }\n        if (!this.canPushTheLimit) return this;\n\n        // Fetch documents.\n        await this.populateDocuments();\n\n        this.data.pushTheLimit = true;\n        this.applyPushTheLimit();\n\n        // Can't use normal #execute as not all general testing flow are needed.\n        this.calculateBaseValues();\n        this.validateBaseValues();\n\n        const actorConsumedResources = await this.consumeDocumentRessoucesWhenNeeded();\n        if (!actorConsumedResources) return this;\n\n        // Keep push the limit active, to have remove limit during derived value calculation.\n        await this.evaluate();\n        await this.processResults();\n\n        // Remove push the limit to avoid edge consumption on any kind of re-rolls.\n        this.data.pushTheLimit = false;\n\n        await this.toMessage();\n        await this.afterTestComplete();\n\n        return this;\n    }\n\n\n    /**\n     * Allow subclasses to override behavior after a test has finished.\n     *\n     * This can be used to alter values after a test is over.\n     */\n    async processResults() {\n        if (this.success) {\n            await this.processSuccess();\n        } else {\n            await this.processFailure();\n        }\n    }\n\n    /**\n     * Allow subclasses to override behavior after a successful test result.\n     *\n     * This can be used to alter values after a test succeeded.\n     * @override\n     */\n    async processSuccess() { }\n\n    /**\n     * Allow subclasses to override behavior after a failure test result\n     *\n     * This can be used to alter values after a test failed.\n     * @override\n     */\n    async processFailure() { }\n\n    /**\n     * Allow subclasses to override behavior after a test is fully done. This will be called after processResults\n     * and allows for additional processes to be triggered that don't affect this test itself.\n     *\n     * This can be used to trigger other processes like followup tests or saving values.\n     */\n    async afterTestComplete() {\n        console.debug(`SR6: Elysium | Test ${this.constructor.name} completed.`, this);\n\n        if (this.success) {\n            await this.afterSuccess();\n        } else {\n            await this.afterFailure();\n        }\n\n        // Check if this is a matrix action and if the actor has an active hacking program\n        await this.checkMatrixActionOverwatch();\n\n        if (this.autoExecuteFollowupTest) {\n            await this.executeFollowUpTest();\n        }\n\n        if (this.extended) {\n            await this.executeAsExtended();\n        }\n    }\n\n    /**\n     * Check if this is a matrix action and if the actor has an active hacking program\n     * If both conditions are met, increment the overwatch score by 1\n     * Also check if this is an illegal matrix action and add overwatch equal to hits scored against the actor\n     */\n    async checkMatrixActionOverwatch() {\n        // Only proceed if we have an actor\n        if (!this.actor) return;\n\n        // Check if this is a matrix action\n        const isMatrixAction = this.data.action?.categories &&\n                              MatrixRules.isMatrixAction(this.data.action.categories);\n        if (!isMatrixAction) return;\n\n        let totalOverwatchAdded = 0;\n        let overwatchReasons = [];\n\n        // Check if the actor has an active hacking program\n        if (this.actor.hasActiveHackingProgram()) {\n            // Increment overwatch score by 1\n            totalOverwatchAdded += 1;\n            overwatchReasons.push(game.i18n.localize('SR6.MatrixAction.HackingProgramReason'));\n        }\n\n        // Check if this is an illegal matrix action\n        const isIllegalAction = this.data.action &&\n                               MatrixRules.isIllegalMatrixAction(this.data.action);\n\n        // If this is an illegal action and it's an opposed test, add overwatch equal to hits scored against the actor\n        if (isIllegalAction && this.opposed) {\n            // For opposed tests, we need to wait for the opposed test to complete to get the hits against\n            // This will be handled in the OpposedTest class\n        } else if (isIllegalAction) {\n            // For non-opposed illegal matrix actions, add 1 overwatch point\n            totalOverwatchAdded += 1;\n            overwatchReasons.push(game.i18n.localize('SR6.MatrixAction.IllegalActionReason'));\n        }\n\n        // Apply the total overwatch if any was accrued\n        if (totalOverwatchAdded > 0) {\n            const currentOS = this.actor.getOverwatchScore();\n            await this.actor.setOverwatchScore(currentOS + totalOverwatchAdded);\n\n            // Notify the user\n            ui.notifications?.info(game.i18n.format('SR6.MatrixAction.OverwatchAccrued', {\n                name: this.actor.name,\n                amount: totalOverwatchAdded,\n                reasons: overwatchReasons.join(', ')\n            }));\n\n            console.debug(`Shadowrun 6e | Added ${totalOverwatchAdded} Overwatch Score to ${this.actor.name} for matrix action`);\n        }\n    }\n\n    /**\n     * Allow subclasses to override followup behavior after a successful test result\n     * @override\n     */\n    async afterSuccess() {\n\n        // When an unopposed test succeeds, the test documents targeted effects can be applied\n        if (this.opposing) return;\n        if (this.opposed) return;\n\n        for (const target of this.targets) {\n            if (target.actor === null) continue;\n            await this.effects.createTargetActorEffects(target.actor);\n        }\n    }\n\n    /**\n     * Allow subclasses to override followup behavior after a failed test result\n     * @override\n     */\n    async afterFailure() { }\n\n    /**\n     * Reroll a specified number of failures\n     * @param failuresToReroll The number of failures to reroll\n     */\n    async rerollFailures(failuresToReroll: number): Promise<this> {\n        console.log(`Shadowrun 6e | Rerolling ${failuresToReroll} failures for ${this.actor?.name || 'unknown actor'}`);\n        console.log('Shadowrun 6e | Test data before reroll:', this.data);\n        console.log('Shadowrun 6e | Original rolls:', this.rolls);\n\n        // We'll allow rerolling even if there's no actor\n        if (!this.actor) {\n            console.warn('Shadowrun 6e | No actor found, but continuing with reroll');\n        }\n        if (this.data.rerolledFailures) {\n            console.warn('Shadowrun 6e | Cannot reroll failures: Already rerolled');\n            return this;\n        } // Prevent multiple rerolls\n\n        // Count the total number of failures across all rolls\n        const totalFailures = this.rolls.reduce((failures, roll) => {\n            // Count dice that are not successes (not 5 or 6)\n            const rollFailures = roll.sides.filter(side => !SR.die.success.includes(side)).length;\n            console.log(`Shadowrun 6e | Roll ${roll.formula} has ${rollFailures} failures:`, roll.sides);\n            return failures + rollFailures;\n        }, 0);\n\n        console.log(`Shadowrun 6e | Total failures found: ${totalFailures}`);\n\n        // Limit the number of failures to reroll to the total number of failures\n        const actualFailuresToReroll = Math.min(failuresToReroll, totalFailures);\n        console.log(`Shadowrun 6e | Actual failures to reroll: ${actualFailuresToReroll}`);\n\n        if (actualFailuresToReroll <= 0) {\n            console.warn('Shadowrun 6e | No failures to reroll');\n            ui.notifications?.warn(game.i18n.localize('SR6.NoFailuresToReroll'));\n            return this;\n        }\n\n        // Create a new roll for the rerolled failures\n        const formula = this.buildFormula(actualFailuresToReroll, false);\n        console.log(`Shadowrun 6e | Creating new roll with formula: ${formula}`);\n        const roll = new SR6Roll(formula);\n\n        // Store the rerolled failures roll\n        this.data.rerolledFailuresRolls = [roll];\n        this.data.rerolledFailuresCount = actualFailuresToReroll;\n        this.data.rerolledFailures = true;\n        console.log('Shadowrun 6e | Stored rerolled failures in test data');\n\n        // Add these properties to the test object itself for template access\n        this.rerolledFailuresRolls = [roll];\n        this.rerolledFailures = true;\n        this.rerolledFailuresCount = actualFailuresToReroll;\n        console.log('Shadowrun 6e | Added rerolled failures properties to test object');\n\n        // Make sure the test has a messageUuid for saving later\n        if (!this.data.messageUuid && this.data.previousMessageId) {\n            this.data.messageUuid = this.data.previousMessageId;\n            console.log(`Shadowrun 6e | Using previousMessageId as messageUuid: ${this.data.messageUuid}`);\n        }\n\n        // Evaluate the roll\n        console.log('Shadowrun 6e | Evaluating rerolled failures roll...');\n        await roll.evaluate({async: true});\n        console.log('Shadowrun 6e | Rerolled failures roll results:', roll.sides);\n        console.log('Shadowrun 6e | Rerolled failures roll hits:', roll.hits);\n        console.log('Shadowrun 6e | Rerolled failures roll total:', roll.total);\n\n        // Show dice animation if DiceSoNice is enabled\n        try {\n            // @ts-ignore\n            if (game.dice3d) {\n                console.log('Shadowrun 6e | Showing DiceSoNice animation for rerolled failures');\n                // @ts-ignore\n                await game.dice3d.showForRoll(roll, game.user, true, null, false);\n            }\n        } catch (error) {\n            console.error('Shadowrun 6e | Error showing DiceSoNice animation:', error);\n        }\n\n        // Calculate the number of hits from the rerolled failures\n        const rerolledHits = roll.total;\n        this.rerolledFailuresHits = rerolledHits;\n        this.data.rerolledFailuresHits = rerolledHits;\n        console.log(`Shadowrun 6e | Rerolled failures produced ${rerolledHits} hits`);\n\n        // Add the new roll to the rolls array\n        this.rolls.push(roll);\n        console.log('Shadowrun 6e | Added rerolled failures roll to rolls array:', this.rolls);\n\n        // Recalculate hits\n        this.calculateDerivedValues();\n        console.log('Shadowrun 6e | Recalculated derived values:', this.data.values);\n\n        // Make sure the rerolled failures rolls are properly set in the data\n        // This is important for the template to access them\n        this.data.rerolledFailuresRolls = [roll];\n        console.log('Shadowrun 6e | Ensured rerolledFailuresRolls is set in data:', this.data.rerolledFailuresRolls);\n\n        // Update the message\n        console.log('Shadowrun 6e | Saving rerolled failures to message:', this.data.messageUuid);\n        await this.saveToMessage();\n\n        // Force a re-render of the message\n        if (this.data.messageUuid) {\n            const message = await fromUuid(this.data.messageUuid);\n            if (message) {\n                console.log('Shadowrun 6e | Re-rendering message:', message.id);\n                await message.render(true);\n            }\n        }\n\n        return this;\n    }\n\n\n\n    /**\n     * Allow a test to determine if it's follow up tests should auto cast after test completion.\n     *\n     * This could be set to false to allow for tests to NOT have an immediate auto cast, due to\n     * current user casting and the user casting the follow differing.\n     */\n    get autoExecuteFollowupTest() {\n        return true;\n    }\n\n    /**\n     * Depending on the action configuration execute a followup test.\n     */\n    async executeFollowUpTest() {\n        const test = await TestCreator.fromFollowupTest(this, this.data.options);\n        if (!test) return;\n        await test.execute();\n    }\n\n    /**\n     * Should this test be an extended test, re-execute it until it can't be anymore.\n     *\n     * The first roll of extended test will use normal #execute, while the extended rolls\n     * will pass through this, both for the action and chat message extension flow.\n     */\n    async executeAsExtended() {\n        if (!this.canBeExtended) return;\n\n        const data = foundry.utils.duplicate(this.data);\n\n        // No extension possible, if test type / class is unknown.\n        if (!data.type) return;\n\n        // Apply the extended modifier according the current iteration\n        const pool = new PartsList(data.pool.mod);\n\n        const currentModifierValue = pool.getPartValue('SR6.ExtendedTest') || 0;\n        const nextModifierValue = TestRules.calcNextExtendedModifier(currentModifierValue);\n\n        // A pool could be overwritten or not.\n        if (data.pool.override) {\n            data.pool.override.value = Math.max(data.pool.override.value - 1, 0);\n        } else {\n            pool.addUniquePart('SR6.ExtendedTest', nextModifierValue);\n        }\n\n        Helpers.calcTotal(data.pool, { min: 0 });\n\n        if (!TestRules.canExtendTest(data.pool.value, this.threshold.value, this.extendedHits.value)) {\n            return ui.notifications?.warn('SR6.Warnings.CantExtendTestFurther', { localize: true });\n        }\n\n        // Fetch original tests documents.\n        await this.populateDocuments();\n\n        // Create a new test instance of the same type.\n        const testCls = TestCreator._getTestClass(data.type);\n        if (!testCls) return;\n        // The new test will be incomplete.\n        data.evaluated = false;\n        const test = new testCls(data, { actor: this.actor, item: this.item }, this.data.options);\n\n        // Remove previous edge usage.\n        test.data.pushTheLimit = false;\n        test.applyPushTheLimit();\n        test.data.secondChance = false;\n        test.applySecondChance();\n\n        // Mark test as extended to get iterative execution.\n        if (!test.extended) {\n            test.data.extended = true;\n            test.calculateExtendedHits();\n        }\n\n        // Mark this roll as an extended roll.\n        // This allows execution to determine if data needs to be prepared for the first roll or not.\n        test.data.extendedRoll = true;\n\n        await test.execute();\n\n        return test;\n    }\n\n    /**\n     * DiceSoNice must be implemented locally to avoid showing dice on gmOnlyContent throws while also using\n     * FoundryVTT ChatMessage of type roll for their content visibility behavior.\n     *\n     * https://gitlab.com/riccisi/foundryvtt-dice-so-nice/-/wikis/Integration\n     */\n    async rollDiceSoNice() {\n        // @ts-expect-error\n        if (!game.dice3d || !game.user || !game.users) return;\n\n        console.debug('SR6: Elysium | Initiating DiceSoNice throw');\n\n        // Only roll the last dice rolled.\n        // This necessary when a test has been recast with second chance, and should only the re-rolled dice instead\n        // of all.\n        const roll = this.rolls[this.rolls.length - 1];\n\n        // Limit users to show dice to...\n        let whisper: User[] | null = null;\n        // ...for gmOnlyContent check permissions\n        if (this.actor && GmOnlyMessageContentFlow.applyGmOnlyContent(this.actor)) {\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            whisper = game.users.filter(user => this.actor?.testUserPermission(user, 'OWNER'));\n        }\n        // ...for rollMode include GM when GM roll\n        if (this.data.options?.rollMode === 'gmroll' || this.data.options?.rollMode === \"blindroll\") {\n            whisper = whisper || [];\n            whisper = [...game.users.filter(user => user.isGM), ...whisper];\n        }\n\n        // Don't show dice to a user casting blind.\n        const blind = this.data.options?.rollMode === 'blindroll';\n        const synchronize = this.data.options?.rollMode === 'publicroll';\n\n        // @ts-expect-error\n        game.dice3d.showForRoll(roll, game.user, synchronize, whisper, blind, this.data.messageUuid);\n    }\n\n    /**\n     * Post this success test as a message to the chat log.\n     */\n    async toMessage(): Promise<ChatMessage | undefined> {\n        if (!this.data.options?.showMessage) return;\n\n        // Prepare message content.\n        const templateData = await this._prepareMessageTemplateData();\n        const content = await renderTemplate(this._chatMessageTemplate, templateData);\n        // Prepare the actual message.\n        const messageData = await this._prepareMessageData(content);\n        const options = { rollMode: this._rollMode };\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const message = await ChatMessage.create(messageData, options);\n\n        if (!message) return;\n\n        // Store message id for future use.\n        this.data.messageUuid = message.uuid;\n        await this.saveToMessage();\n\n        await this.rollDiceSoNice();\n\n        return message;\n    }\n\n    /**\n     * Prepare chat message content data for this success test card.\n     *\n     * @returns Chat Message template data.\n     *\n     * TODO: Add template data typing.\n     */\n    async _prepareMessageTemplateData() {\n        // Either get the linked token by collection or synthetic actor.\n        // Unlinked collection actors will return multiple tokens and can't be resolved to a token.\n        const linkedTokens = this.actor?.getActiveTokens(true) || [];\n        const token = linkedTokens.length >= 1 ? linkedTokens[0] : undefined;\n\n        // Get action type and initiative timing information if available\n        let actionType = '';\n        let initiativeTiming = '';\n\n        if (this.data.action && this.data.action.type) {\n            actionType = this.data.action.type;\n            initiativeTiming = this.data.action.initiative_timing || 'none';\n        }\n\n        // Debug rerolled failures data\n        if (this.data.rerolledFailures) {\n            console.log('Shadowrun 6e | Preparing message template data with rerolled failures');\n            console.log('Shadowrun 6e | rerolledFailures:', this.data.rerolledFailures);\n            console.log('Shadowrun 6e | rerolledFailuresRolls:', this.data.rerolledFailuresRolls);\n            console.log('Shadowrun 6e | rerolledFailuresCount:', this.data.rerolledFailuresCount);\n            console.log('Shadowrun 6e | rerolledFailuresHits:', this.data.rerolledFailuresHits);\n        }\n\n        // Get the message ID if available\n        const message = this.data.messageUuid ? await fromUuid(this.data.messageUuid) : null;\n\n        // Debug rerolled failures data\n        if (this.data.rerolledFailures) {\n            console.log('Shadowrun 6e | Preparing message template data with rerolled failures');\n            console.log('Shadowrun 6e | rerolledFailures:', this.data.rerolledFailures);\n            console.log('Shadowrun 6e | rerolledFailuresRolls:', this.data.rerolledFailuresRolls);\n            console.log('Shadowrun 6e | rerolledFailuresCount:', this.data.rerolledFailuresCount);\n            console.log('Shadowrun 6e | rerolledFailuresHits:', this.data.rerolledFailuresHits);\n            console.log('Shadowrun 6e | this.rerolledFailures:', this.rerolledFailures);\n            console.log('Shadowrun 6e | this.rerolledFailuresRolls:', this.rerolledFailuresRolls);\n        }\n\n        // Debug the rolls to see what's in them\n        console.log('Shadowrun 6e | Rolls in _prepareMessageTemplateData:', this.rolls);\n        if (this.data.rerolledFailuresRolls) {\n            console.log('Shadowrun 6e | Rerolled failures rolls:', this.data.rerolledFailuresRolls);\n        }\n\n        // Debug the test data before creating the test object\n        console.log('Shadowrun 6e | Test data in _prepareMessageTemplateData:', this.data);\n\n        // Create a test object with all the necessary properties for the template\n        const testObject = {\n            ...this.data,\n            // Add properties from the test instance\n            rolls: this.rolls,\n            rerolledFailures: this.data.rerolledFailures,\n            rerolledFailuresRolls: this.data.rerolledFailuresRolls ? this.data.rerolledFailuresRolls.map(roll => ({\n                sides: roll.sides,\n                formula: roll.formula,\n                total: roll.total,\n                hits: roll.hits\n            })) : [],\n            rerolledFailuresCount: this.data.rerolledFailuresCount,\n            rerolledFailuresHits: this.data.rerolledFailuresHits,\n            // Add computed properties\n            displayHits: this.displayHits,\n            // Add raw hits from the roll for debugging\n            rawHits: this.hits.base,\n\n            // Debug the test data\n            debug_data: JSON.stringify(this.data),\n            pool: this.pool,\n            hits: this.hits,\n            threshold: this.threshold,\n            limit: this.limit,\n            netHits: this.netHits,\n            extendedHits: this.extendedHits,\n            glitches: this.glitches,\n            hasThreshold: this.hasThreshold,\n            hasLimit: this.hasLimit,\n            canSucceed: this.canSucceed,\n            canFail: this.canFail,\n            success: this.success,\n            failure: this.failure,\n            glitched: this.glitched,\n            criticalGlitched: this.criticalGlitched,\n            showSuccessLabel: this.showSuccessLabel,\n            successLabel: this.successLabel,\n            failureLabel: this.failureLabel,\n            usingManualRoll: this.usingManualRoll,\n            hasAction: this.hasAction,\n            code: this.code,\n            extended: this.extended,\n            opposing: this.opposing,\n            opposed: this.opposed,\n            autoSuccess: this.autoSuccess\n        };\n\n        return {\n            title: this.data.title,\n            test: testObject,\n            // Add isGM flag to control visibility of dice pools and rolls\n            isGM: game.user.isGM,\n            // Note: While ChatData uses ids, this uses full documents.\n            speaker: {\n                actor: this.actor,\n                token: token\n            },\n            item: this.item,\n            // Add the message for the reroll button\n            message: message,\n            // Add action type and initiative timing information\n            actionType: actionType,\n            actionTypeLabel: actionType ? game.i18n.localize(SR6.actionTypes[actionType]) : '',\n            initiativeTiming: initiativeTiming,\n            initiativeTimingLabel: initiativeTiming ? game.i18n.localize(SR6.initiativeTiming[initiativeTiming]) : '',\n            opposedActions: this._prepareOpposedActionsTemplateData(),\n            followupActions: this._prepareFollowupActionsTemplateData(),\n            resultActions: this._prepareResultActionsTemplateData(),\n            previewTemplate: this._canPlaceBlastTemplate,\n            showDescription: this._canShowDescription,\n            description: await this.item?.getChatData() || '',\n            // Some message segments are only meant for the gm, when the gm is the one creating the message.\n            // When this test doesn't use an actor, don't worry about hiding anything.\n            applyGmOnlyContent: GmOnlyMessageContentFlow.applyGmOnlyContent(this.actor),\n\n            // Effects that should be shown in this tests message for manual drag & drop application.\n            effects: [] as SR6ActiveEffect[]\n        }\n    }\n\n    /**\n     * Indicate if this test can be used to show the item description.\n     */\n    get _canShowDescription(): boolean {\n        return true;\n    }\n\n    /**\n     * Indicate if this test can be used to place a blast template using the shown chat message.\n     *\n     * This is indicated by the source items ability to cause an area of effect blast and which kind\n     * of test is used.\n     */\n    get _canPlaceBlastTemplate(): boolean {\n        return this.item?.hasBlastTemplate || false;\n    }\n\n    /**\n     * This class should be used for the opposing test implementation.\n     */\n    get _opposedTestClass(): any | undefined {\n        if (!this.data.opposed || !this.data.opposed.test) return;\n        return TestCreator._getTestClass(this.data.opposed.test);\n    }\n\n    /**\n     * Prepare opposed test action buttons.\n     *\n     * Currently, one opposed action is supported, however the template\n     * is prepared to support multiple action buttons.\n     */\n    _prepareOpposedActionsTemplateData() {\n        const testCls = this._opposedTestClass;\n        // No opposing test configured. Nothing to build.\n        if (!testCls) return [];\n\n        const action = {\n            // Store the test implementation registration name.\n            test: testCls.name,\n            label: testCls.label\n        };\n\n        // Show the flat dice pool modifier on the chat action.\n        if (this.data.opposed.mod) {\n            action.label += ` ${this.data.opposed.mod}`;\n        }\n\n        return [action]\n    }\n\n    /**\n     * Prepare followup actions a test allows. These are actions\n     * meant to be taken following completion of this test.\n     */\n    _prepareFollowupActionsTemplateData(): Shadowrun.FollowupAction[] {\n        const testCls = TestCreator._getTestClass(this.data.action.followed.test);\n        if (!testCls) return [];\n        return [{ label: testCls.label }]\n    }\n\n    /**\n     * Prepare result action buttons\n     */\n    _prepareResultActionsTemplateData(): ResultActionData[] {\n        const actions: ResultActionData[] = [];\n        const actionResultData = this.results;\n        if (!actionResultData) return actions;\n\n        if (actionResultData.success.matrix.placeMarks) {\n            actions.push({\n                action: 'placeMarks',\n                label: 'SR6.PlaceMarks',\n                value: ''\n            });\n        }\n\n        return actions;\n    }\n\n    /**\n     * What ChatMessage rollMode is this test supposed to use?\n     */\n    get _rollMode(): string {\n        return this.data.options?.rollMode as string ?? game.settings.get('core', 'rollmode');\n    }\n\n    /**\n     * Prepare chat message data for this success test card.\n     *\n     * @param content Pre rendered template content.\n     */\n    async _prepareMessageData(content: string) {\n        // Either get the linked token by collection or synthetic actor.\n        // Unlinked collection actors will return multiple tokens and can't be resolved to a token.\n        const linkedTokens = this.actor?.getActiveTokens(true) || [];\n        const token = linkedTokens.length === 1 ? linkedTokens[0].id : undefined;\n\n        const actor = this.actor?.id;\n        const alias = game.user?.name;\n\n        const formula = `0d6`;\n        const roll = new SR6Roll(formula);\n        // evaluation is necessary for Roll DataModel validation.\n        await roll.evaluate();\n\n        const messageData = {\n            user: game.user?.id,\n            // Use type roll, for Foundry built in content visibility.\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            speaker: {\n                actor,\n                alias,\n                token\n            },\n            roll,\n            content,\n            // Manually build flag data to give renderChatMessage hook flag access.\n            // This test data is needed for all subsequent testing based on this chat messages.\n            flags: {\n                // Add test data to message to allow ChatMessage hooks to access it.\n                [SYSTEM_NAME]: {[FLAGS.Test]: this.toJSON()},\n                'core.canPopout': true\n            },\n            sound: CONFIG.sounds.dice,\n        }\n\n        // Instead of manually applying whisper ids, let Foundry do it.\n        // @ts-expect-error TODO: Types Provide proper SuccessTestData and SuccessTestOptions\n        ChatMessage.applyRollMode(messageData, this._rollMode);\n\n        return messageData;\n    }\n\n    /**\n     * Save this test to the given message uuid\n     * @param uuid\n     */\n    async saveToMessage(uuid: string | undefined = this.data.messageUuid) {\n        if (!uuid) {\n            console.warn('Shadowrun 6e | Cannot save to message: No message UUID');\n\n            // Try to get the message ID from the chat message element\n            const chatMessage = $('.chat-message.selected');\n            if (chatMessage.length > 0) {\n                const messageId = chatMessage.data('messageId');\n                if (messageId) {\n                    uuid = `ChatMessage.${messageId}`;\n                    console.log(`Shadowrun 6e | Found message ID from selected chat message: ${messageId}`);\n                    this.data.messageUuid = uuid;\n                }\n            }\n\n            if (!uuid) return;\n        }\n\n        console.log(`Shadowrun 6e | Saving test to message: ${uuid}`);\n        const message = await fromUuid(uuid);\n\n        if (!message) {\n            console.warn(`Shadowrun 6e | Cannot save to message: Message not found for UUID ${uuid}`);\n            return;\n        }\n\n        // Log the test data before saving\n        if (this.data.rerolledFailures) {\n            console.log('Shadowrun 6e | Test data before saving to message:');\n            console.log('Shadowrun 6e | rerolledFailures:', this.data.rerolledFailures);\n            console.log('Shadowrun 6e | rerolledFailuresRolls:', this.data.rerolledFailuresRolls);\n            console.log('Shadowrun 6e | rerolledFailuresCount:', this.data.rerolledFailuresCount);\n            console.log('Shadowrun 6e | rerolledFailuresHits:', this.data.rerolledFailuresHits);\n        }\n\n        const testData = this.toJSON();\n        console.log('Shadowrun 6e | Test data to save:', testData);\n\n        await message.setFlag(SYSTEM_NAME, FLAGS.Test, testData);\n        console.log('Shadowrun 6e | Test saved to message');\n\n        // Force a re-render of the message\n        message.render(true);\n    }\n\n    /**\n     * Register listeners for ChatMessage html created by a SuccessTest.\n     *\n     * This listener needs to be registered to the 'renderChatMessage' FoundryVTT hook.\n     *\n     * @param message\n     * @param html\n     * @param data\n     */\n    static async chatMessageListeners(message: ChatMessage, html, data) {\n        html.find('.show-roll').on('click', this._chatToggleCardRolls);\n        html.find('.show-description').on('click', this._chatToggleCardDescription);\n        html.find('.chat-document-link').on('click', Helpers.renderEntityLinkSheet);\n        html.find('.place-template').on('click', this._placeItemBlastZoneTemplate);\n        html.find('.result-action').on('click', this._castResultAction);\n        html.find('.chat-select-link').on('click', this._selectSceneToken);\n        html.find('.test-action').on('click', this._castTestAction);\n        html.find('.reroll-failures').on('click', this._rerollFailures);\n\n        DamageApplicationFlow.handleRenderChatMessage(message, html, data);\n\n        await GmOnlyMessageContentFlow.chatMessageListeners(message, html, data);\n    }\n\n\n    /**\n     * Select a Token on the current scene based on the link id.\n     * @params event Any user PointerEvent\n    */\n    static async _selectSceneToken(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!game || !game.ready || !canvas || !canvas.ready) return;\n\n        const selectLink = $(event.currentTarget);\n        const tokenId = selectLink.data('tokenId');\n        const token = canvas.tokens?.get(tokenId);\n\n        if (token && token instanceof Token) {\n            token.control();\n        } else {\n            ui.notifications?.warn(game.i18n.localize('SR6.NoSelectableToken'))\n        }\n    }\n\n    /**\n     * Cast a item action from a chat message.\n     *\n     * @param event Any pointer event\n     */\n    static async _castTestAction(event) {\n        event.preventDefault();\n\n        const element = $(event.currentTarget);\n        // Grab item uuid or fallback to empty string for foundry\n        const uuid = element.data('uuid') ?? '';\n        const item = await fromUuid(uuid) as SR6Item;\n\n        if (!item) return console.error(\"Shadowrun 6e | Item doesn't exist for uuid\", uuid);\n\n        item.castAction(event);\n    }\n\n    /**\n     * Handle the reroll failures button click\n     * @param event The click event\n     */\n    static async _rerollFailures(event) {\n        event.preventDefault();\n        console.log('Shadowrun 6e | Reroll failures button clicked');\n\n        const button = $(event.currentTarget);\n        const chatMessage = button.closest('.chat-message');\n        console.log('Shadowrun 6e | Chat message element:', chatMessage);\n        const messageId = chatMessage.data('messageId');\n        console.log(`Shadowrun 6e | Message ID: ${messageId}`);\n\n        if (!messageId) {\n            console.error('Shadowrun 6e | No message ID found');\n            ui.notifications?.error(game.i18n.localize('SR6.Errors.NoMessageId'));\n            return;\n        }\n\n        // Get the test from the message\n        console.log(`Shadowrun 6e | Getting test from message: ${messageId}`);\n        const test = await TestCreator.fromMessage(messageId);\n        console.log('Shadowrun 6e | Test from message:', test);\n\n        if (!test) {\n            console.error('Shadowrun 6e | No test found in message');\n            ui.notifications?.error(game.i18n.localize('SR6.Errors.NoTestFound'));\n            return;\n        }\n\n        // Count the total number of failures across all rolls\n        console.log('Shadowrun 6e | Counting failures in rolls:', test.rolls);\n        const totalFailures = test.rolls.reduce((failures, roll) => {\n            // Count dice that are not successes (not 5 or 6)\n            const rollFailures = roll.sides.filter(side => !SR.die.success.includes(side)).length;\n            console.log(`Shadowrun 6e | Roll ${roll.formula} has ${rollFailures} failures:`, roll.sides);\n            return failures + rollFailures;\n        }, 0);\n        console.log(`Shadowrun 6e | Total failures found: ${totalFailures}`);\n\n        if (totalFailures <= 0) {\n            console.warn('Shadowrun 6e | No failures to reroll');\n            ui.notifications?.warn(game.i18n.localize('SR6.NoFailuresToReroll'));\n            return;\n        }\n\n        // Prompt the user for the number of failures to reroll\n        const content = `\n            <p>${game.i18n.localize('SR6.EnterNumberOfFailuresToReroll')}</p>\n            <div class=\"form-group\">\n                <label>${game.i18n.localize('SR6.NumberOfFailuresToReroll')}</label>\n                <input type=\"number\" name=\"failures\" value=\"${totalFailures}\" min=\"1\" max=\"${totalFailures}\" />\n            </div>\n            <p class=\"note\">${game.i18n.format('SR6.TotalFailuresFound', {count: totalFailures})}</p>\n        `;\n\n        const dialog = new Dialog({\n            title: game.i18n.localize('SR6.RerollFailures'),\n            content,\n            buttons: {\n                reroll: {\n                    label: game.i18n.localize('SR6.Reroll'),\n                    callback: async (html) => {\n                        const input = html.find('input[name=\"failures\"]');\n                        const inputValue = input.val() as string;\n                        console.log(`Shadowrun 6e | Input value: ${inputValue}`);\n                        const failures = parseInt(inputValue) || 0;\n                        console.log(`Shadowrun 6e | Parsed failures: ${failures}`);\n\n                        if (failures <= 0) {\n                            console.warn('Shadowrun 6e | No failures to reroll from input');\n                            ui.notifications?.warn(game.i18n.localize('SR6.NoFailuresToReroll'));\n                            return;\n                        }\n\n                        // Reroll the failures\n                        console.log(`Shadowrun 6e | Calling rerollFailures with ${failures} failures`);\n                        await test.rerollFailures(failures);\n                        console.log('Shadowrun 6e | Reroll complete');\n                    }\n                },\n                cancel: {\n                    label: game.i18n.localize('SR6.Cancel')\n                }\n            },\n            default: 'reroll'\n        });\n\n        dialog.render(true);\n    }\n\n    static async chatLogListeners(chatLog: ChatLog, html, data) {\n        // setup chat listener messages for each message as some need the message context instead of ChatLog context.\n        html.find('.chat-message').each(async (index, element) => {\n            element = $(element);\n            const id = element.data('messageId');\n            const message = game.messages?.get(id);\n            if (!message) return;\n\n            await this.chatMessageListeners(message, element, message.toObject())\n        });\n    }\n\n    /**\n     * Items with an area of effect will allow users to place a measuring template matching the items blast values.\n     *\n     * @param event A PointerEvent triggered from anywhere within the chat-card\n     */\n    static async _placeItemBlastZoneTemplate(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Get test data from message.\n        const element = $(event.currentTarget);\n        const card = element.closest('.chat-message');\n        const messageId = card.data('messageId');\n        const test = await TestCreator.fromMessage(messageId);\n        if (!test) return;\n\n        // Get item used in test\n        await test.populateDocuments();\n\n        // Place template based on last used spell force for the item.\n        if (!test.item) return;\n        const template = Template.fromItem(test.item);\n        if (!template) return;\n        await template.drawPreview();\n    }\n\n    /**\n     * Foundry ChatMessage context options (right click) used for all test types.\n     * @param html\n     * @param options\n     */\n    static chatMessageContextOptions(html, options) {\n        const pushTheLimit = async (li) => {\n            const messageId = li.data().messageId;\n            const test = await TestCreator.fromMessage(messageId);\n            if (!test) return console.error('Shadowrun 6e | Could not restore test from message');\n\n            await test.executeWithPushTheLimit();\n        }\n\n        const secondChance = async (li) => {\n            const messageId = li.data().messageId;\n            const test = await TestCreator.fromMessage(messageId);\n            if (!test) return console.error('Shadowrun 6e | Could not restore test from message');\n\n            await test.executeWithSecondChance();\n        };\n\n        const extendTest = async (li) => {\n            const messageId = li.data().messageId;\n            const test = await TestCreator.fromMessage(messageId);\n            if (!test) return console.error('Shadowrun 6e | Could not restore test from message');\n\n            if (!test.canBeExtended) {\n                return ui.notifications?.warn('SR6.Warnings.CantExtendTest', { localize: true });\n            }\n\n            await test.executeAsExtended();\n        };\n\n        // Keep Foundry delete option at the context menus bottom.\n        const deleteOption = options.pop();\n\n        options.push({\n            name: game.i18n.localize('SR6.PushTheLimit'),\n            callback: pushTheLimit,\n            condition: true,\n            icon: '<i class=\"fas fa-meteor\"></i>'\n        })\n\n        options.push({\n            name: game.i18n.localize('SR6.SecondChance'),\n            callback: secondChance,\n            condition: true,\n            icon: '<i class=\"fas fa-meteor\"></i>'\n        });\n\n        options.push({\n            name: game.i18n.localize('SR6.Extend'),\n            callback: extendTest,\n            condition: true,\n            icon: '<i class=\"fas fa-clock\"></i>'\n        })\n\n        // Reinsert Foundry delete option last.\n        options.push(deleteOption);\n\n        return options;\n    }\n\n    /**\n     * By default, roll results are hidden in a chat card.\n     *\n     * This will hide / show them, when called with a card event.\n     *\n     * @param event Called from within a card html element.\n     */\n    static async _chatToggleCardRolls(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const card = $(event.currentTarget).closest('.chat-card');\n        const element = card.find('.dice-rolls');\n        if (element.is(':visible')) element.slideUp(200);\n        else element.slideDown(200);\n    }\n\n    /**\n     * By default, item descriptions are hidden in a chat card.\n     *\n     * This will hide / show them, when called with a card event.\n     * @param event A PointerEvent triggered anywhere from within a chat-card\n     */\n    static async _chatToggleCardDescription(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const card = $(event.currentTarget).closest('.chat-card');\n        const element = card.find('.card-description');\n        if (element.is(':visible')) element.slideUp(200);\n        else element.slideDown(200);\n    }\n\n    /**\n     * A test message initiated an action for a test result, extract information from message and execute action.\n     *\n     * @param event A PointerEvent by user-interaction\n     */\n    static async _castResultAction(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const element = $(event.currentTarget)\n        const resultAction = element.data('action');\n\n        const messageId = element.closest('.chat-message').data('messageId');\n        const test = await TestCreator.fromMessage(messageId);\n\n        if (!test) return console.error(`SR6: Elysium | Couldn't find both a result action ('${resultAction}') and extract test from message ('${messageId}')`);\n\n        await test.populateDocuments();\n        await ActionResultFlow.executeResult(resultAction, test);\n    }\n}\n", "import {SuccessTest, SuccessTestData, SuccessTestValues, TestData, TestDocuments, TestOptions} from \"./SuccessTest\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {TestCreator} from \"./TestCreator\";\nimport {SR6Item} from \"../item/SR6Item\";\nimport {PartsList} from \"../parts/PartsList\";\nimport { Helpers } from \"../helpers\";\n\n\nexport interface OpposedTestValues extends SuccessTestValues {\n    // The calculated overall netHits of the active vs opposed test pair.\n    againstNetHits: Shadowrun.ValueField\n}\n\nexport interface OpposedTestData extends\n    TestData,\n    // Remove unnecessary data points.\n    Omit<SuccessTestData, 'opposed'>,\n    Omit<SuccessTestData, 'targetTokensUuid'> {\n\n    // The message id of the opposed test.\n    previousMessageId: string\n    values: OpposedTestValues\n    against: SuccessTestData\n}\n/**\n * An opposed test results from a normal success test as an opposed action.\n */\nexport class OpposedTest<T extends OpposedTestData = OpposedTestData> extends SuccessTest<T> {\n    public against: SuccessTest;\n\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\n        super(data, documents, options);\n\n        // Use the supplied original active test to create a reference.\n        // If nothing was given create a default placeholder\n        // Feed original / active test data into the class originally used for ease of access.\n        const AgainstCls = data.against ? TestCreator._getTestClass(data.against.type) : SuccessTest;\n        this.against = new AgainstCls(data.against || {});\n    }\n\n    override _prepareData(data, options?): any {\n        data = super._prepareData(data, options);\n\n        // TODO: this isn't needed if opposed is always taken from data.action.opposed\n        delete data.opposed;\n        delete data.targetActorsUuid;\n\n        data.values = data.values || {};\n        data.values.againstNetHits = DataDefaults.valueData({label: 'SR6.NetHits'});\n\n        return data;\n    }\n\n    /**\n     * Before populating any documents for THIS test, populate the opposed tests documents first.\n     */\n    override async populateTests() {\n        await this.against.populateDocuments();\n    }\n\n    override calculateDerivedValues() {\n        super.calculateDerivedValues();\n\n        // Reflect overall netHits of active vs opposed test.\n        this.data.values.againstNetHits = this.calculateAgainstNetHits();\n    }\n\n    /**\n     * To have proper net hits values for the original test, we calculate it's netHits values after the opposed test\n     * is finished.\n     *\n     * We don't change the original netHits to not interfere with the original test and allow it to still\n     * report correct netHits against it's own (possible) threshold.\n     */\n    calculateAgainstNetHits() {\n        const base = Math.max(this.against.hits.value - this.hits.value, 0);\n        const againstNetHits = DataDefaults.valueData({label: 'SR6.NetHits', base});\n        againstNetHits.value = Helpers.calcTotal(againstNetHits, {min: 0});\n        return againstNetHits;\n    }\n\n    static override async _getOpposedActionTestData(againstData: SuccessTestData, actor, previousMessageId: string): Promise<OpposedTestData | undefined> {\n        if (!againstData.opposed) {\n            console.error(`Shadowrun 6e | Supplied test data doesn't contain an opposed action`, againstData, this);\n            return;\n        }\n        if (againstData.opposed.type !== '') {\n            console.warn(`Shadowrun 6e | Supplied test defines a opposed test type ${againstData.opposed.type} but only type '' is supported`, this);\n        }\n        if (!actor) {\n            console.error(`Shadowrun 6e | Can't resolve opposed test values due to missing actor`, this);\n            return;\n        }\n\n        // Prepare testing data.\n        const data: SuccessTestData = {\n            // While not visible, when there is a description set, use it.\n            title: againstData.opposed.description || undefined,\n\n            previousMessageId,\n\n            pool: DataDefaults.valueData({label: 'SR6.DicePool'}),\n            limit: DataDefaults.valueData({label: 'SR6.Limit'}),\n            threshold: DataDefaults.valueData({label: 'SR6.Threshold'}),\n            //@ts-expect-error\n            values: {},\n\n            sourceItemUuid: againstData.sourceItemUuid,\n            against: againstData\n        }\n\n        // An opposing test will oppose net hits of the original / success test.\n        // Register these as a threshold, which will trigger success/failure status\n        // and calculate netHits accordingly.\n        data.threshold.base = againstData.values.netHits.value;\n\n        // Casting an opposed action doesn't give as complete ActionData from the original.\n        // Therefore we must create an empty dummy action.\n        let action = DataDefaults.actionRollData();\n\n        // Allow the OpposedTest to overwrite action data using its class default action.\n        action = TestCreator._mergeMinimalActionDataInOrder(action,\n            // Use action data from the original action at first.\n            againstData.opposed,\n            // Overwrite with the OpposedTest class default action, if any.\n            this._getDefaultTestAction()\n        );\n\n        // Allow the OpposedTest to overwrite action data dynamically based on item data.\n        if (againstData.sourceItemUuid) {\n            const item = await fromUuid(againstData.sourceItemUuid) as SR6Item;\n            if (item) {\n                const itemAction = await this._getDocumentTestAction(item, actor);\n                action = TestCreator._mergeMinimalActionDataInOrder(action, itemAction);\n            }\n        }\n\n        //@ts-expect-error\n        return await this._prepareActionTestData(action, actor, data);\n    }\n\n    /**\n     * Overwrite SuccessTest#opposed behavior as an OpposedTest can't have another opposed test.\n     */\n    override get opposed() {\n        return false;\n    }\n\n    /**\n     * Overwrite SuccessTest#opposing behavior as an OpposedTest is opposing another test.\n     */\n    override get opposing() {\n        return true;\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    /**\n     * Opposed tests shouldn't show item description from the active tests source item.\n     */\n    override get _canShowDescription(): boolean {\n        return false;\n    }\n\n    /**\n     * Opposed tests can't cause any blast template.\n     */\n    override get _canPlaceBlastTemplate(): boolean {\n        return false;\n    }\n\n    /**\n     * Derived net hits of the active vs opposed test pair.\n     */\n    get againstNetHits(): Shadowrun.ValueField {\n        return this.data.values.againstNetHits;\n    }\n\n    /**\n     * Apply opposed test modifiers based on the item implementation\n     */\n    override prepareItemModifiers() {\n        if (!this.item) return;\n\n        // NOTE: This is a legacy method for applying item data based modifiers, but it will do.\n        const opposedMod = this.item.getOpposedTestMod();\n\n        // Do not simply concat list to avoid double applying an otherwise unique test modifier.\n        for (const modifier of opposedMod.list) {\n            PartsList.AddUniquePart(this.data.modifiers.mod, modifier.name, modifier.value, true);\n        }\n    }\n\n    /**\n     * Using a message action cast an opposed test to that messages active test.\n     *\n     * @param event A PointerEvent by user interaction to trigger the test action.\n     */\n    static async _castOpposedAction(event) {\n        event.preventDefault();\n\n        const button = $(event.currentTarget);\n        const card = button.closest('.chat-message');\n\n        // Collect information needed to create the opposed action test.\n        const messageId = card.data('messageId');\n        const opposedActionTest = button.data('action');\n\n        const showDialog = !TestCreator.shouldHideDialog(event);\n        await TestCreator.fromMessageAction(messageId, opposedActionTest, {showDialog});\n    }\n\n    static override async chatMessageListeners(message: ChatMessage, html, data) {\n        html.find('.opposed-action').on('click', OpposedTest._castOpposedAction);\n    }\n\n    /**\n     * Inject effects taken from the active original test and inject them into the opposed chat message.\n     */\n    override async _prepareMessageTemplateData() {\n        const templateData = await super._prepareMessageTemplateData();\n\n        if (!this.against) return templateData;\n\n        for (const effect of this.against.effects.allApplicableEffectsToTargetActor()) {\n            templateData.effects.push(effect);\n        }\n\n        return templateData;\n    }\n\n    override async afterFailure() {\n        await super.afterFailure();\n\n        // When an opposed test fails, the original test documents targeted actor effects can be applied\n        const against = this.against;\n        const actor = this.actor;\n        if (against === undefined && !this.opposing) return;\n        if (actor === undefined) return;\n\n        await this.effects.createTargetActorEffects(actor);\n    }\n\n    /**\n     * After the test is complete, check if this is an opposed test against an illegal matrix action\n     * If so, add overwatch equal to the hits scored against the actor\n     */\n    override async afterTestComplete() {\n        await super.afterTestComplete();\n\n        // Only proceed if we have the original test and it has action data\n        if (!this.against || !this.against.data.action) return;\n\n        // Check if the original test was an illegal matrix action\n        const isIllegalMatrixAction = MatrixRules.isIllegalMatrixAction(this.against.data.action);\n        if (!isIllegalMatrixAction) return;\n\n        // Get the actor from the original test\n        const originalActor = this.against.actor;\n        if (!originalActor) return;\n\n        // Get the hits scored against the actor (our hits)\n        const hitsAgainst = this.hits.value;\n        if (hitsAgainst <= 0) return;\n\n        // Add overwatch equal to the hits scored against the actor\n        const currentOS = originalActor.getOverwatchScore();\n        await originalActor.setOverwatchScore(currentOS + hitsAgainst);\n\n        // Notify the user\n        ui.notifications?.info(game.i18n.format('SR6.MatrixAction.IllegalActionOpposedOverwatch', {\n            name: originalActor.name,\n            amount: hitsAgainst\n        }));\n\n        console.debug(`Shadowrun 6e | Added ${hitsAgainst} Overwatch Score to ${originalActor.name} for opposed hits against illegal matrix action`);\n    }\n}\n", "import {OpposedTest, OpposedTestData} from \"./OpposedTest\";\nimport DamageData = Shadowrun.DamageData;\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport { Translation } from '../utils/strings';\n\n\nexport interface DefenseTestData extends OpposedTestData {\n    // Damage value of the attack\n    incomingDamage: DamageData\n    // Modified damage value of the attack after this defense (success or failure)\n    modifiedDamage: DamageData\n\n    // Should this defense test cause an initiative modifier to be applied, use this value\n    // It's also used for display in chat.\n    iniMod: number|undefined\n}\n\n\n/**\n * A semi abstract class to be used by other classes as a common extension interface.\n *\n * Handle general damage data as well as general defense rules.\n */\nexport class DefenseTest<T extends DefenseTestData = DefenseTestData> extends OpposedTest<T> {\n\n    override _prepareData(data, options?) {\n        data = super._prepareData(data, options);\n\n        const damage = data.against ? data.against.damage : DataDefaults.damageData();\n\n        data.incomingDamage = foundry.utils.duplicate(damage);\n        data.modifiedDamage = foundry.utils.duplicate(damage);\n\n        return data;\n    }\n\n    override get _chatMessageTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/defense-test-message.html'\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.AttackDodged';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.AttackHits';\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['defense'];\n    }\n\n    /**\n     * This test has changed the initiative score of its caster.\n     */\n    get hasChangedInitiative(): boolean {\n        return this.data.iniMod !== undefined;\n    }\n\n    get initiativeModifier(): number {\n        return this.data.iniMod || 0;\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR6Item } from \"../item/SR6Item\";\nimport { Translation } from \"../utils/strings\";\n\n/**\n * Everything around SR5#190 'Active Defenses'\n */\nexport type ActiveDefenseData = Record<string, { label: Translation, value: number|undefined, initMod: number, weapon?: string, disabled?: boolean }>\n\nexport const ActiveDefenseRules = {\n    /**\n     * What active defenses are available for the given item? Based on SR5#190 'Active Defenses'\n     * @param weapon The equipped weapon used for the attack.\n     * @param actor The actor performing the attack.\n     */\n    availableActiveDefenses: (weapon: SR6Item, actor: SR6Actor): ActiveDefenseData => {\n        // General purpose active defenses. ()\n        const activeDefenses: ActiveDefenseData  = {\n            full_defense: {\n                label: 'SR6.FullDefense',\n                value: actor.getFullDefenseAttribute()?.value,\n                initMod: -10,\n            },\n        };\n\n        if (!weapon.isMeleeWeapon) return activeDefenses;\n\n        // Melee weapon specific active defenses.\n        activeDefenses['dodge'] = {\n            label: 'SR6.Dodge',\n            value: actor.findActiveSkill('gymnastics')?.value,\n            initMod: -5,\n        };\n        activeDefenses['block'] = {\n            label: 'SR6.Block',\n            value: actor.findActiveSkill('unarmed_combat')?.value,\n            initMod: -5,\n        };\n        activeDefenses['parry'] = {\n            label: 'SR6.Parry',\n            weapon: weapon.name || '',\n            value: actor.findActiveSkill(weapon.getActionSkill())?.value,\n            initMod: -5,\n        };\n\n        return activeDefenses;\n    }\n};\n", "import {PartsList} from \"../parts/PartsList\";\nimport {CombatRules} from \"../rules/CombatRules\";\nimport {MeleeRules} from \"../rules/MeleeRules\";\nimport {MeleeAttackData} from \"./MeleeAttackTest\";\nimport {TestCreator} from \"./TestCreator\";\nimport {DefenseTest, DefenseTestData} from \"./DefenseTest\";\nimport { SR6Combat } from \"../combat/SR6Combat\";\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nimport { FLAGS, SYSTEM_NAME } from \"../constants\";\nimport { Translation } from '../utils/strings';\nimport { ActiveDefenseRules } from \"../rules/ActiveDefenseRules\";\n\nexport interface PhysicalDefenseTestData extends DefenseTestData {\n    // Dialog input for cover modifier\n    cover: number\n    // Dialog input for active defense modifier\n    activeDefense: string\n    activeDefenses: Record<string, { label: Translation, value: number|undefined, initMod: number, weapon?: string, disabled?: boolean }>\n    // Melee weapon reach modification.\n    isMeleeAttack: boolean\n    defenseReach: number\n}\n\nexport type PhysicalDefenseNoDamageCondition = {\n    test: () => boolean,\n    label: Translation,\n}\n\nexport class PhysicalDefenseTest<T extends PhysicalDefenseTestData = PhysicalDefenseTestData> extends DefenseTest<T> {\n\n    override _prepareData(data, options?): any {\n        data = super._prepareData(data, options);\n\n        data.cover = 0;\n        data.activeDefense = '';\n        data.activeDefenses = {};\n        data.isMeleeAttack = false;\n        data.defenseReach = 0;\n\n        return data;\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/physical-defense-test-dialog.html';\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            'attribute': 'reaction',\n            'attribute2': 'intuition'\n        };\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['defense']\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'wounds', 'defense', 'multi_defense'];\n    }\n\n    override async prepareDocumentData() {\n        this.prepareActiveDefense();\n        this.prepareMeleeReach();\n        await super.prepareDocumentData();\n    }\n\n    /**\n     * Depending on the weapon used for attack different active defenses are available.\n     */\n    prepareActiveDefense() {\n        if (!this.actor) return;\n        const actor = this.actor;\n\n        const weapon = this.against.item;\n        if (weapon === undefined) return;\n\n        this.data.activeDefenses = ActiveDefenseRules.availableActiveDefenses(weapon, actor);\n\n        // Filter available active defenses by available ini score.\n        this._filterActiveDefenses();\n    }\n\n    prepareMeleeReach() {\n        if (!this.against.item) return;\n        this.data.isMeleeAttack = this.against.item.isMeleeWeapon;\n        if (!this.data.isMeleeAttack) return;\n\n        if (!this.actor) return;\n\n        // Take the highest equipped melee reach to defend with...\n        // NOTE: ... this should be a choice of the player\n        // TODO: This is a legacy selection approach as there wasn't a way to access to used item in the original attack test.\n        //       Instead this might be replaced with a direct reference with this.against.item.system.defenseReach?\n        const equippedMeleeWeapons = this.actor.getEquippedWeapons().filter((weapon) => weapon.isMeleeWeapon);\n        equippedMeleeWeapons.forEach(weapon => {\n            this.data.defenseReach = Math.max(this.data.defenseReach, weapon.getReach());\n        });\n\n        const attackData = this.against.data as MeleeAttackData;\n        const incomingReach = attackData.reach || 0;\n        const defenseReach = this.data.defenseReach;\n        this.data.defenseReach = MeleeRules.defenseReachModifier(incomingReach, defenseReach);\n    }\n\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n        this.applyIniModFromActiveDefense();\n    }\n\n    override applyPoolModifiers() {\n        this.applyPoolCoverModifier();\n        this.applyPoolActiveDefenseModifier();\n        this.applyPoolMeleeReachModifier();\n        this.applyPoolRangedFireModModifier();\n        super.applyPoolModifiers();\n    }\n\n    applyPoolCoverModifier() {\n        // Cast dialog selection to number, when necessary.\n        this.data.cover = foundry.utils.getType(this.data.cover) === 'string' ?\n            Number(this.data.cover) :\n            this.data.cover;\n\n        // Apply zero modifier also, to sync pool.mod and modifiers.mod\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR6.Cover', this.data.cover);\n    }\n\n    applyPoolActiveDefenseModifier() {\n        const defense = this.data.activeDefenses[this.data.activeDefense] || {label: 'SR6.ActiveDefense', value: 0, init: 0};\n\n        // Apply zero modifier also, to sync pool.mod and modifiers.mod\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR6.ActiveDefense', defense.value);\n    }\n\n    applyPoolMeleeReachModifier() {\n        if (!this.data.isMeleeAttack) return;\n\n        PartsList.AddUniquePart(this.data.modifiers.mod, 'SR6.Weapon.Reach', this.data.defenseReach);\n    }\n\n    /**\n     * When defending against a ranged attack, see if any fire mode defense modifiers must be applied\n     */\n    applyPoolRangedFireModModifier() {\n        if (!this.against.item) return;\n        if (!this.against.item.isRangedWeapon) return;\n\n        const fireMode = this.against.item.getLastFireMode();\n\n        if (!fireMode.defense) return;\n\n        PartsList.AddUniquePart(this.data.modifiers.mod, fireMode.label, Number(fireMode.defense));\n    }\n\n    override get success() {\n        return CombatRules.attackMisses(this.against.hits.value, this.hits.value);\n    }\n\n    override get failure() {\n        return CombatRules.attackHits(this.against.hits.value, this.hits.value);\n    }\n\n\n    // Order is important in this array to determine which label is shown, determined by the first test whose function returns a truthy value\n    private noDamageConditions: PhysicalDefenseNoDamageCondition[] = [\n        {\n            test: () => this.actor !== undefined && CombatRules.doesNoPhysicalDamageToVehicle(this.data.incomingDamage, this.actor),\n            label: \"SR6.TestResults.AttackDoesNoPhysicalDamageToVehicle\",\n        },\n        {\n            test: () => this.actor !== undefined && CombatRules.isBlockedByVehicleArmor(this.data.incomingDamage, this.against.hits.value, this.hits.value, this.actor),\n            label: \"SR6.TestResults.AttackBlockedByVehicleArmor\",\n        },\n        {\n            test: () => this.actor !== undefined && CombatRules.isBlockedByHardenedArmor(this.data.incomingDamage, this.against.hits.value, this.hits.value, this.actor),\n            label: \"SR6.TestResults.AttackBlockedByHardenedArmor\",\n        }\n    ];\n\n    private getNoDamageCondition(): PhysicalDefenseNoDamageCondition|undefined {\n        return this.noDamageConditions.find(({ test }) => test());\n    }\n\n    override get failureLabel(): Translation {\n        return this.getNoDamageCondition()?.label || super.failureLabel;\n    }\n\n    override async processResults() {\n        await super.processResults();\n\n        await this.applyActorEffectsForDefense();\n    }\n\n    override async processSuccess() {\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterMiss(this.data.incomingDamage);\n\n        await super.processSuccess();\n    }\n\n    override async processFailure() {\n        if (!this.actor) return;\n\n        if(this.getNoDamageCondition()) {\n            this.data.modifiedDamage = CombatRules.modifyDamageAfterMiss(this.data.incomingDamage, true);\n        } else {\n            this.data.modifiedDamage = CombatRules.modifyDamageAfterHit(this.actor, this.against.hits.value, this.hits.value, this.data.incomingDamage);\n        }\n\n        await super.processFailure();\n    }\n\n    override async afterFailure() {\n        await super.afterFailure();\n\n        // If attack hits but does no damage, don't perform the follow-up physical resist test\n        if(this.getNoDamageCondition()) {\n            return;\n        }\n\n        const test = await TestCreator.fromOpposedTestResistTest(this, this.data.options);\n        if (!test) return;\n        await test.execute();\n    }\n\n    override canConsumeDocumentResources() {\n        // Check if the actor is in active combat situation and has enough initiative score left.\n        if (this.actor && this.data.iniMod && game.combat) {\n            const combat: SR6Combat = game.combat as unknown as SR6Combat;\n            const combatant = combat.getActorCombatant(this.actor);\n            if (!combatant || !combatant.initiative) return true;\n\n            if (combatant && combatant.initiative + this.data.iniMod < 0) {\n                ui.notifications?.warn('SR6.MissingRessource.Initiative', {localize: true});\n                return false;\n            }\n        }\n\n        return super.canConsumeDocumentResources();\n    }\n\n    /**\n     * Should an active defense be selected apply the initiative modifier to the defenders combat initiative.\n     */\n    applyIniModFromActiveDefense() {\n        if (!this.actor) return;\n        if (!this.data.activeDefense) return;\n\n        const activeDefense = this.data.activeDefenses[this.data.activeDefense];\n        if (!activeDefense) return;\n\n        // Use DefenseTest general iniMod behaviour.\n        this.data.iniMod = activeDefense.initMod;\n    }\n\n    override _prepareResultActionsTemplateData() {\n        const actions = super._prepareResultActionsTemplateData();\n\n        // Don't add an action if no active defense was selected.\n        if (!this.data.activeDefense) return actions;\n\n        const activeDefense = this.data.activeDefenses[this.data.activeDefense];\n        if (!activeDefense) return actions;\n\n        actions.push({\n            action: 'modifyCombatantInit',\n            label: 'SR6.Initiative',\n            value: String(activeDefense.initMod)\n        });\n\n        return actions;\n    }\n\n    /**\n     * Increase the actors multi defense modifier.\n     */\n    async applyActorEffectsForDefense() {\n        if (!this.actor) return;\n\n        this.actor.calculateNextDefenseMultiModifier();\n    }\n\n    /**\n     * Based in combatants ini score, pre-filter available active defense modes.\n     *\n     * This behaviour can be disabled using the must have ressources setting.\n     */\n    _filterActiveDefenses() {\n        if (!this.actor) return;\n\n        // Don't validate ini costs when costs are to be ignored.\n        const mustHaveRessouces = game.settings.get(SYSTEM_NAME, FLAGS.MustHaveRessourcesOnTest);\n        if (!mustHaveRessouces) return;\n\n        // TODO: Check ressource setting.\n        const iniScore = this.actor.combatInitiativeScore;\n        Object.values(this.data.activeDefenses).forEach(mode =>\n            mode.disabled = CombatRules.canUseActiveDefense(iniScore, mode.initMod)\n        )\n    }\n}\n", "import {MatrixRules} from \"../../rules/MatrixRules\";\nimport {SR6Actor} from \"../../actor/SR6Actor\";\nimport {SuccessTest} from \"../../tests/SuccessTest\";\nimport { PhysicalDefenseTest } from \"../../tests/PhysicalDefenseTest\";\nimport ResultActions = Shadowrun.ResultActions;\n\n\n/**\n * Whenever any action or test implementation can cause a result that needs\n * to be manually applied, use this handler\n */\nexport class ActionResultFlow {\n    /**\n         * The handlers registered for specific result action.\n         *\n         * @returns A Map mapping action name to function handler\n         */\n    static get _handlersResultAction(): Map<ResultActions, Function> {\n        const handlers = new Map();\n        handlers.set('placeMarks', () => ui.notifications?.error('Placing marks currently isnt suported. Sorry!'));\n        handlers.set('modifyCombatantInit', ActionResultFlow._castInitModifierAction);\n\n        return handlers;\n    }\n\n    /**\n     * Handle execution of any action result action. :)\n     *\n     * NOTE: This is a horrible system and likely to be replaced someday...\n     *\n     * @param resultAction The action descriptor based on SuccessTest#_prepareResultActionsTemplateData.\n     * @param test The SuccessTest subclass the action has been emitted from.\n     */\n    static async executeResult(resultAction: ResultActions, test: SuccessTest) {\n        const handler = ActionResultFlow._handlersResultAction.get(resultAction);\n\n        if (!handler)\n            return console.error(`Shadowrun 6e | Action result ${resultAction} has not handler registered`);\n\n        await handler(test);\n\n    }\n    /**\n     * Matrix Marks are placed on either actors (persona, ic) or items (device, host, technology).\n     */\n    static async placeMatrixMarks(active: SR6Actor, targets: Token[], marks: number) {\n        if (!MatrixRules.isValidMarksCount(marks)) {\n            return ui.notifications?.warn(game.i18n.localize(\"SR6.Warnings.InvalidMarksCount\"));\n        }\n\n        for (const target of targets) {\n            await active.setMarks(target, marks);\n        }\n    }\n\n    /**\n     * Modify the actors combatant according the test defined initiative modifier.\n     *\n     * @param test The test instance causing the initiative modification\n     */\n    static async _castInitModifierAction(test: PhysicalDefenseTest) {\n        if (!(test instanceof PhysicalDefenseTest)) return;\n\n        if (!test.data.iniMod) return;\n        await test.actor?.changeCombatInitiative(test.data.iniMod);\n    }\n}\n", "import { SR6Item } from \"../SR6Item\";\nimport { SR6 } from '../../config';\n\n/**\n * Handling of SR6Item.update changes around ActionRollData.\n */\nexport const UpdateActionFlow = {\n    /**\n     * Alter action data changes on update.\n     *\n     * @param changeData The _update changes given by the event\n     * @param item The item as context of what's being changed.\n     */\n    onUpdateAlterActionData(changeData: DeepPartial<Shadowrun.ShadowrunItemData>, item: SR6Item) {\n        UpdateActionFlow.onSkillUpdateAlterAttribute(changeData, item);\n        UpdateActionFlow.onSkillUpdateAlterAttribute2(changeData, item);\n    },\n\n    /**\n     * If a skill is selected, try to autofill the connect attribute of it.\n     *\n     * This differs for items on actors, as here we can access actual skill data.\n     * For item outside of actors we can only use default values.\n     * @param changeData  The _update changes given by the event\n     * @param item The item as context of what's being changed.\n     */\n    onSkillUpdateAlterAttribute(changeData: DeepPartial<Shadowrun.ShadowrunItemData>, item: SR6Item) {\n        // Only change to connected attribute when no attribute has already been chosen.\n        if (item.system.action?.attribute !== '') return;\n        const skillIdOrLabel = foundry.utils.getProperty(changeData, 'system.action.skill');\n        if (skillIdOrLabel === undefined || skillIdOrLabel === '') return;\n\n        // CASE - Sidebar item not owned by actor.\n        if (item.actor === null) {\n            const skill = game.model.Actor.character.skills.active[skillIdOrLabel];\n            if (skill === undefined) return;\n\n            changeData['system.action.attribute'] = skill.attribute;\n\n        // CASE - Owned Item on actor.\n        } else {\n            // Support both legacy and custom skills.\n            const skill = item.actor.getSkill(skillIdOrLabel) ?? item.actor.getSkillByLabel(skillIdOrLabel);\n            if (skill === undefined) return;\n\n            changeData['system.action.attribute'] = skill.attribute;\n        }\n    },\n\n    /**\n     * When a skill is changed, remove the second attribute, as it's not needed and might cause confusion\n     * at different places.\n     *\n     * @param changeData The _update changes given by the event\n     * @param item The item as context of what's being changed.\n     */\n    onSkillUpdateAlterAttribute2(changeData: DeepPartial<Shadowrun.ShadowrunItemData>, item: SR6Item) {\n        if (!foundry.utils.getProperty(changeData, 'system.action.skill')) return;\n\n        changeData['system.action.attribute2'] = '';\n    },\n\n    /**\n     * Inject action test data into any item\n     *\n     * This method is designed to be called on _preCreate/_preUpdate/_preCreateEmbeddedDocuments\n     *\n     * Make sure to not mix up changeData and itemData\n     *\n     * Depending on the caller whatever was applied to the applyData parameter must be handled differently.\n     * When called by _onCreate, it must be used as updateData using Document#update\n     * When called by _preUpdate, it must be applied directly to changeData\n     * When called before any DocumentData as been created, it can be applied directly to the source object before Document#create\n     *\n     * @param type The item type where operating on\n     * @param changeData The changeData (partial or complete) that's been transmitted.\n     * @param applyData An object to carry the altering data changes\n     * @param item Optional item reference. This can't be given during the Chummer Item Import flow.\n     */\n    injectActionTestsIntoChangeData(type: string, changeData: Partial<Shadowrun.ShadowrunItemData>, applyData, item?: SR6Item) {\n        if (!changeData) return;\n\n        const typeHandler = {\n            'weapon': UpdateActionFlow.injectWeaponTestIntoChangeData,\n            'spell': UpdateActionFlow.injectSpellTestIntoChangeData,\n            'complex_form': UpdateActionFlow.injectComplexFormTestIntoChangeData,\n            'call_in_action': UpdateActionFlow.injectCallInActionTestIntoChangeData\n        };\n\n        const handler = typeHandler[type];\n        if (!handler) return;\n\n        handler(type, changeData, applyData, item);\n    },\n\n\n    /**\n     * See injectActionTestsIntoChangeData for documentation.\n     */\n    injectWeaponTestIntoChangeData(type: string, changeData: Partial<Shadowrun.WeaponItemData>, applyData) {\n        // Abort when category isn't part of this change.\n        if (changeData?.system?.category === undefined) return;\n\n        // Remove test when user selects empty category.\n        if (changeData.system.category === '') {\n            foundry.utils.setProperty(applyData, 'system.action.test', '');\n            return;\n        }\n\n        const test = SR6.weaponCategoryActiveTests[changeData.system.category];\n        if (!test) {\n            console.error(`Shadowrun 5 | There is no active test configured for the weapon category ${changeData.system.category}.`, changeData);\n        }\n\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\n        foundry.utils.setProperty(applyData, 'system.action.opposed.test', 'PhysicalDefenseTest');\n        foundry.utils.setProperty(applyData, 'system.action.opposed.resist.test', 'PhysicalResistTest');\n    },\n\n    /**\n     * See injectActionTestsIntoChangeData for documentation.\n     */\n    injectSpellTestIntoChangeData(type: string, changeData: Partial<Shadowrun.SpellItemData>, applyData) {\n        // Abort when category isn't part of this change.\n        if (changeData?.system?.category === undefined) return;\n\n        // Remove test when user selects empty category.\n        if (changeData.system.category === '') {\n            foundry.utils.setProperty(applyData, 'system.action.test', '');\n            return;\n        }\n\n        // Based on category switch out active, opposed and resist test.\n        const test = SR6.activeTests[type];\n        const opposedTest = SR6.opposedTests[type][changeData.system.category] || 'OpposedTest';\n        const resistTest = SR6.opposedResistTests[type][changeData.system.category] || '';\n        const drainTest = SR6.followedTests[test] ?? '';\n\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\n        foundry.utils.setProperty(applyData, 'system.action.opposed.test', opposedTest);\n        foundry.utils.setProperty(applyData, 'system.action.opposed.resist.test', resistTest);\n        foundry.utils.setProperty(applyData, 'system.action.followed.test', drainTest);\n    },\n\n    /**\n     * See injectActionTestsIntoChangeData for documentation.\n     */\n    injectComplexFormTestIntoChangeData(type: string, changeData: Partial<Shadowrun.SpellItemData>, applyData) {\n        const test = SR6.activeTests[type];\n\n        foundry.utils.setProperty(applyData, 'system.action.test', test);\n    },\n\n\n    /**\n     * See injectActionTestsIntoChangeData for documentation.\n     */\n    injectCallInActionTestIntoChangeData(type: string, changeData: DeepPartial<Shadowrun.CallInActionItemData>, applyData) {\n        if (changeData.system?.actor_type === undefined) return;\n\n        if (changeData.system.actor_type === 'spirit') {\n            // Reconfigure to summoning tests workflow.\n            foundry.utils.setProperty(applyData, 'system.action.test', 'SummonSpiritTest');\n            foundry.utils.setProperty(applyData, 'system.action.opposed.test', 'OpposedSummonSpiritTest');\n            foundry.utils.setProperty(applyData, 'system.action.followed.test', 'DrainTest');\n        }\n        if (changeData.system.actor_type === 'sprite') {\n            // Reconfigure to compilation tests workflow.\n            foundry.utils.setProperty(applyData, 'system.action.test', 'CompileSpriteTest');\n            foundry.utils.setProperty(applyData, 'system.action.opposed.test', 'OpposedCompileSpriteTest');\n            foundry.utils.setProperty(applyData, 'system.action.followed.test', 'FadeTest');\n        }\n        if (changeData.system.actor_type.length === 0) {\n            // Reset to prohibit testing.\n            foundry.utils.setProperty(applyData, 'system.action.test', '');\n            foundry.utils.setProperty(applyData, 'system.action.opposed.test', '');\n            foundry.utils.setProperty(applyData, 'system.action.followed.test', '');\n        }\n    }\n}\n", "import FireModeData = Shadowrun.FireModeData;\nimport FiringModeData = Shadowrun.FiringModeData;\nimport { SR6} from \"../config\";\n\n\nexport const FireModeRules = {\n    /**\n     * Give a defense modifier according to rounds consumed and SR5#180.\n     *\n     * If given and not enough ammunition is available reduced defense modifier rules\n     * will be applied.\n     *\n     * @param fireMode The selected fireMode\n     * @param ammoLeft How many rounds can be fired\n     *\n     * @returns a negative defense modifier value\n     */\n    fireModeDefenseModifier: function(fireMode: FireModeData, ammoLeft: number=0): number {\n        // For negative rounds use a sane default.\n        const rounds = fireMode.value < 0 ? fireMode.value * -1 : fireMode.value;\n        // Due to legecy value, sometimes a string numerical sneaks in...\n        const modifier = Number(fireMode.defense);\n        // Zero modifier can't be further reduced by missing ammunition.\n        if (modifier === 0) return 0;\n\n        // Reduce modifier by avaiable ammunition.\n        if (ammoLeft <= 0) ammoLeft = rounds;\n        if (ammoLeft >= rounds) return modifier;\n\n        // Reduce negative modifier by one for each missing unit.\n        return Math.min(modifier + rounds - ammoLeft, 0);\n    },\n\n    /**\n     * Calculate the recoil attack modifier according to SR5#175\n     *\n     * NOTE: Reducing recoil compensation here is a bit unintuitive and might be easier to read\n     *       with its own rule function.\n     *\n     * @param fireMode The chosen fire mode for the attack\n     * @param compensation Actors recoil compensation\n     * @param recoil Accured progressive recoil of the actor before current attack\n     * @param ammoLeft Amount of ammunition available\n     *\n     * @return compensation Amount of compensation left.\n     * @return new recoil modifier.\n     */\n    recoilModifierAfterAttack: function(fireMode: FireModeData, compensation: number, recoil: number=0, ammoLeft: number = 0): number {\n        // Sanitze negative fire mode values by pretending not to shoot.\n        if (fireMode.value < 0) return 0;\n        // Sanitaze negative ammo values by pretending to have just enough.\n        if (ammoLeft <= 0) ammoLeft = fireMode.value;\n        // Only fire amount of rounds available.\n        const additionalRecoil = FireModeRules.additionalRecoil(fireMode, ammoLeft);\n        // Compensate recoil to get modifier.\n        return FireModeRules.recoilModifier(compensation, recoil, additionalRecoil);\n    },\n\n    /**\n     * Calculate the amount of additional recoil possible depending on recoil of the firemode and\n     * ammunition left.\n     *\n     * @param fireMode Choosen fire mode to attack with\n     * @param ammoLeft Ammunition left in the weapon\n     * @returns A positive number or zero, if no additional recoil will be caused.\n     */\n    additionalRecoil: function(fireMode: FireModeData, ammoLeft: number): number {\n        return fireMode.recoil ? Math.min(fireMode.value, ammoLeft) : 0;\n    },\n\n    /**\n     * Calculate the revoil modifier value according to SR5#175 'Recoil' and 'Progressive Recoil'\n     *\n     * @param compensation Amount of total recoil compensation available.\n     * @param recoil Current Amount of total progressive recoil.\n     * @param additionalRecoil Amount of additional fired ammunition.\n     *\n     * @returns a negative number or zero.\n     */\n    recoilModifier: function(compensation: number, recoil: number, additionalRecoil: number=0) {\n        return Math.min(compensation - (recoil + additionalRecoil), 0);\n    },\n\n    /**\n     * Determine what firemodes are available to a ranged weapon user.\n     *\n     * @param rangedWeaponModes The weapon modes on the actual gun\n     * @param ammoLeft The amount of rounds left. If not given, all firemodes will returned.\n     *\n     * @returns A list of firemodes sorted by weapon mode and rounds necessary.\n     */\n    availableFireModes: function (rangedWeaponModes: FiringModeData, ammoLeft?: number): FireModeData[] {\n        // Reduce all fire modes to what's available on weapon\n        // TODO: rounds check\n        return SR6.fireModes\n            .filter(fireMode => rangedWeaponModes[fireMode.mode])\n            .sort((modeA, modeB) => {\n            // Same modes, ascending spent rounds.\n            if (modeA.mode === modeB.mode) {\n                // Numerical values can be substracted to 1 / -1 aprox.\n                return modeA.value - modeB.value;\n            }\n\n            const modeAIndex = SR6.rangeWeaponMode.indexOf(modeA.mode);\n            const modeBIndex = SR6.rangeWeaponMode.indexOf(modeB.mode);\n            return modeAIndex > modeBIndex ? 1 : -1;\n        });\n    }\n}\n", "/**\n * These flows are used to apply environmental modifiers to a documents applied modifier selection before a total has ben calculated.\n * \n * Each function is a handler for a specific change key and value, defined by the caller of these methods.\n * \n * Each function handles rules from the SR5#165 Environmental Modifier Compensation table.\n * \n * TODO: Check rules on stacking of multiple environmental modifier compensations.\n */\nimport { SR } from \"../../constants\";\nimport { SuccessTest } from \"../../tests/SuccessTest\";\nimport { EnvironmentalModifier } from \"../../rules/modifiers/EnvironmentalModifier\";\n\n/**\n * Apply Low Light Rules to light modifiers. See SR5#175\n * @param modifier \n */\nexport const lowLightVision = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Low Light Effect', modifier);\n\n    if (!modifier.applied.active.light) return;\n    if (modifier.applied.active.light >= -3) modifier.applied.active.light = 0;\n\n    console.debug('Shadowrun 6e | Applied Low Light Effect', modifier);\n}\n\n/**\n * Apply Image Magnification to range modifiers. See SR5#175\n * @param modifier \n */\nexport const imageMagnification = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Image Magnification Effect', modifier);\n\n    if (modifier.applied.active.range) modifier.applied.active.range = _shiftUpByOneRow(modifier.applied.active.range);\n\n    console.debug('Shadowrun 6e | Applied Image Magnification Effect', modifier);\n}\n\n/**\n * Apply Thermographic Vision to light modifiers. See SR5#175\n * @param modifier \n */\nexport const thermographicVision = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Thermographic Vision Effect', modifier);\n\n    if (modifier.applied.active.light) modifier.applied.active.light = _shiftUpByOneRow(modifier.applied.active.light);\n    if (modifier.applied.active.visibility) modifier.applied.active.visibility = _shiftUpByOneRow(modifier.applied.active.visibility);\n\n    console.debug('Shadowrun 6e | Applied Thermographic Vision Effect', modifier);\n}\n\n/**\n * Apply Tracer Rounds to wind and range modifiers. See SR5#175\n * @param modifier \n */\nexport const tracerRounds = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Tracer Rounds Effect', modifier);\n\n    if (modifier.applied.active.wind && modifier.applied.active.wind < SR.combat.environmental.levels.light) {\n        modifier.applied.active.wind = _shiftUpByOneRow(modifier.applied.active.wind);\n    }\n\n    if (modifier.applied.active.range && modifier.applied.active.range < SR.combat.environmental.levels.light) {\n        modifier.applied.active.range = _shiftUpByOneRow(modifier.applied.active.range);\n    }\n\n    console.debug('Shadowrun 6e | Applied Tracer Rounds Effect', modifier);\n}\n\n/**\n * Apply Smartlink to wind modifiers. See SR5#175\n * @param modifier \n */\nexport const smartlink = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Smartlink Effect', modifier);\n\n    if (modifier.applied.active.wind) modifier.applied.active.wind = _shiftUpByOneRow(modifier.applied.active.wind);\n    \n}\n\n/**\n * Apply Sunglasses to light modifiers. See SR5#175\n * @param modifier \n */\nexport const sunglasses = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.error('Shadowrun 6e | Sunglasses not implemented yet', modifier);\n    // NOTE: I refuse to implement sunglasses, due to them differentiating between light and glare...\n}\n\nexport const ultrasound = (modifier: EnvironmentalModifier, test?: SuccessTest) => {\n    console.debug('Shadowrun 6e | Applying Ultrasound Effect', modifier);\n\n    if (modifier.applied.active.visibility) {\n        modifier.applied.active.visibility = _shiftUpByOneRow(modifier.applied.active.visibility);\n    }\n\n    // NOTE: This only uses distance, which at the moment is only set for targeted actor distances.\n    // TODO: When only the weapon range selection is used, no range distance is set.\n    if (!test) return;\n    const distance = test.data['distance'];\n    if (!distance) return;\n\n    if (Number(distance) <= 50) modifier.applied.active.light = 0;\n}\n\n/**\n * Local helper method to shift environmental modifiers up by one row.\n * \n * Row relates to the Environmental modifiers table. See SR5#175\n * \n * @param active The active modifier level.\n * @returns A new modifier level. Zero, for faulty inputs.\n */\nconst _shiftUpByOneRow = (active: number): number => {\n    // Using all levels reduce active level by one.\n    const levels = Object.values(SR.combat.environmental.levels);\n    const activeIndex = levels.findIndex(level => level === active);\n    \n    if (activeIndex === -1) {\n        console.error('Shadowrun 6e | Could not find matching active modifier level');\n        return 0;\n    };\n\n    if (active === 0) return 0;\n\n    return levels[activeIndex - 1];\n}\n", "import { SR6Actor } from \"../../actor/SR6Actor\";\nimport { SR6ActiveEffect } from \"../SR6ActiveEffect\";\nimport { SituationModifier } from \"../../rules/modifiers/SituationModifier\";\nimport { imageMagnification, lowLightVision, smartlink, thermographicVision, tracerRounds, ultrasound } from \"./EnvironmentalChangeFlow\";\nimport { SuccessTest } from \"../../tests/SuccessTest\";\nimport { allApplicableDocumentEffects, allApplicableItemsEffects } from \"../../effects\";\n\n/**\n * TODO: Documentation.\n *\n */\nexport class SituationModifierEffectsFlow<T extends SituationModifier> {\n    modifier: T;\n    applyHandlers: Record<string, Function> = {};\n\n    constructor(modifier: T) {\n        this.modifier = modifier;\n\n        // Configure handlers for effect change values.\n        this.applyHandlers = {\n            'low_light_vision': lowLightVision,\n            'image_magnification': imageMagnification,\n            'tracer_rounds': tracerRounds,\n            'smartlink': smartlink,\n            'ultrasound': ultrasound,\n            'thermographic_vision': thermographicVision\n        }\n    }\n\n    /**\n     * Copied version of SR6Actor.applyActiveEffects to apply effects to situation modifiers.\n     *\n     * @param test The test to use during application for context.\n     * @returns\n     */\n    applyAllEffects(test?: SuccessTest) {\n        console.debug('Shadowrun 6e | Applying Situation Modifier Effects', this);\n        const changes: any[] = [];\n        for (const effect of this.allApplicableEffects()) {\n            if (!effect.active) continue;\n            // Special case for modifier effects: Some only apply to tests of their parent item.\n            if (effect.onlyForItemTest && (test === undefined || effect.parent !== test?.item)) continue;\n\n            changes.push(...effect.changes.map(change => {\n                const c = foundry.utils.deepClone(change) as any;\n                c.effect = effect;\n                return c;\n            }));\n        }\n\n        changes.sort((a, b) => a.priority - b.priority);\n\n        console.debug('Shadowrun 6e | Applying Situation Modifier Effect changes', changes);\n        for (const change of changes) {\n            if (!change.key) continue;\n\n            // expect keys in format of <modifierType>.<modifierHandler>\n            const changeKeySplit = change.key.split('.') as [string, string];\n            if (changeKeySplit.length !== 2) return false;\n            const [modifierType, modifierHandler] = changeKeySplit;\n\n            if (modifierType !== this.modifier.type) continue;\n\n            const handler = this.applyHandlers[modifierHandler];\n            if (!handler) continue;\n\n            console.debug('Shadowrun 6e | ... applying modifier handler', this.modifier, handler, test);\n            handler(this.modifier, test);\n        }\n    }\n\n    /**\n     * Reduce all actor effects to those applicable to Situational Modifiers.\n     *\n     * Since Foundry Core uses a generator, keep this pattern for consistency.\n     * @param test An optional SuccessTest implementation to use for context.\n     */\n    *allApplicableEffects(): Generator<SR6ActiveEffect> {\n        if (this.modifier.sourceDocumentIsActor && this.modifier.modifiers?.document) {\n            const actor = this.modifier.modifiers.document as SR6Actor;\n\n            for (const effect of allApplicableDocumentEffects(actor, {applyTo: ['modifier']})) {\n                yield effect;\n            }\n\n            for (const effect of allApplicableItemsEffects(actor, {applyTo: ['modifier']})) {\n                yield effect;\n            }\n        }\n    }\n}\n", "import { SuccessTest } from './../../tests/SuccessTest';\nimport { SR6Actor } from '../../actor/SR6Actor';\nimport { DocumentSituationModifiers, ModifiableDocumentTypes } from '../DocumentSituationModifiers';\nimport Modifier = Shadowrun.ModifierData;\nimport SourceModifierData = Shadowrun.SourceModifierData;\nimport ActiveModifierValue = Shadowrun.ActiveModifierValue;\nimport { SituationModifierEffectsFlow } from '../../effect/flows/SituationModifierEffectsFlow';\nimport { SR6 } from '../../config';\n\n\nexport interface SituationalModifierApplyOptions {\n    // When set to true, applied will be regenerated always.\n    reapply?: boolean\n    // When new source data is given, internal source is overwritten.\n    source?: SourceModifierData\n    // When given will be used to ONLY use applied active selections of a modifier.\n    // keys should be included as applied.active.<applicable>\n    // <applicable> would be <light> or <wind> based on modifier 'environmental.light'/'.wind'.\n    applicable?: string[]\n    // Apply modifier within this tests context.\n    test?: SuccessTest\n}\n\nexport type ModifierTypes = Partial<keyof typeof SR6['modifierTypes']>;\n\n/**\n * Base class for handling a single modifier type that's applied to a document.\n *\n * Each situational modifier allows for generic handling of it's active selections, totals and manual\n * override values, while also allowing to apply custom rules to each.\n *\n * A modifier category would be: environmental, matrix, magic/astral, social, ...\n *\n * Each modifier works on the document level, which might have local source modifier data containing\n * selections for a scene, a position, an actor or else.\n *\n * A user/GM can select specific modifier values (so called active modifiers) via GUI.\n *\n * This allows users to have active selections for their character, while the GM has active selections\n * for a more global document (scene, token position, ...). All active selections will be merged\n * to an applied selection, which is used to calculate the total modifier value. The more specific\n * a document is, the higher it's priority in the merge order.\n *\n * Each SituationModifier only handles its own type, while the DocumentSituationModifiers handles\n * all types for a document.\n */\nexport class SituationModifier {\n    type: Shadowrun.SituationModifierType;\n    // A reference to the modifiers this handler is used within.\n    modifiers?: DocumentSituationModifiers\n    // The original source modifier data. This shouldn't be altered.\n    source: SourceModifierData\n    // The applied modifier data, originating from the original source data.\n    applied: Modifier\n\n    globalActivesApplied: boolean;\n\n    // The effects flow for this modifier.\n    effects: SituationModifierEffectsFlow<this>;\n\n    /**\n     *\n     * @param data The low level modifier data for this handler to work on.\n     * @param modifiers Modifiers instances this handler is used in.\n     */\n    constructor(data?: Partial<SourceModifierData>, modifiers?: DocumentSituationModifiers) {\n        this.source = this._prepareSourceData(data);\n        this.modifiers = modifiers;\n\n        this.effects = new SituationModifierEffectsFlow<typeof this>(this);\n    }\n\n    /**\n     * Prepare valid source modifier data.\n     *\n     * @param data A documents source modifier data\n     * @returns Either a documents source modifier data or a valid fallback.\n     */\n    _prepareSourceData(data: Partial<SourceModifierData>={}): SourceModifierData {\n        // Avoid incomplete source data from documents.\n        return {...{active: {}}, ...data};\n    }\n\n    /**\n     * Determine if any documents have been added to this instance.\n     */\n    get hasDocuments(): boolean {\n        return this.modifiers !== undefined;\n    }\n\n    /**\n     * Determine if the source document used is an actor.\n     */\n    get sourceDocumentIsActor(): boolean {\n        return this.modifiers !== undefined && this.modifiers.documentIsActor;\n    }\n\n    /**\n     * Determine if the source document used is a scene.\n     */\n    get sourceDocumentIsScene(): boolean {\n        return this.modifiers !== undefined && this.modifiers.documentIsScene;\n    }\n\n    /**\n     * Return the source active values for use during selection.\n     */\n    get active(): ActiveModifierValue {\n        return this.source.active;\n    }\n\n    /**\n     * Allow a situational modifier to NOT need any source data to apply it's modifiers.\n     *\n     * This can be used to implement a modifier that IS situational but doesn't need data structures for selection.\n     *\n     * @returns false, when a handler doesn't use any document source data.\n     */\n    static get hasSourceData(): boolean {\n        return true;\n    }\n\n    /**\n     * Determine if the source data has an active modifier set for this situational modifier.\n     */\n    get hasActive(): boolean {\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        return !foundry.utils.isEmpty(this.source.active);\n    }\n\n    /**\n     * Determine if a fixed value has been set.\n     */\n    get hasFixed(): boolean {\n        return this.applied.hasOwnProperty('fixed');\n    }\n\n    /**\n     * Determine if a fixed user selection has been made.\n     */\n    get hasFixedSelection(): boolean {\n        return this.applied.active.hasOwnProperty('value');\n    }\n\n    /**\n     * Determine if any user selection has been made.\n     */\n    get hasSelection(): boolean {\n        return this.hasActive || this.hasFixed;\n    }\n\n    /**\n     * Does the applied selection match?\n     *\n     * Use applied as source might not match, but applied might.\n     *\n     * In that case a matching applied might need to be altered in source.\n     *\n     * @param modifier The selection / active identifier\n     * @param level The modifier level\n     */\n    isMatching(modifier: string, level: number): boolean {\n        return this.applied.active[modifier] === level;\n    }\n\n    /**\n     * Set a active selection to a modifier level.\n     *\n     * @param modifier The selection / active identifier.\n     * @param level The modifier level\n     */\n    setActive(modifier: string, level: number) {\n        this.source.active[modifier] = level;\n        this._updateDocumentSourceModifiers();\n    }\n\n    /**\n     * Set a active selection as inactive.\n     *\n     * @param modifier The selection / active identivier.\n     */\n    setInactive(modifier: string) {\n        delete this.source.active[modifier];\n        this._updateDocumentSourceModifiers();\n    }\n\n    /**\n     * Determine if the given modifier is active\n     * @param modifier The possibly active modifier to check\n     */\n    isActive(modifier: string) {\n        return this.source.active.hasOwnProperty(modifier);\n    }\n\n    /**\n     * When using a selection this method will toggle an active modifier on and off.\n     *\n     * @param modifier The active modifier name\n     * @param value The value the modifier uses currently.\n     */\n    toggleSelection(modifier: string, value: number) {\n        if (this.isMatching(modifier, value)) {\n            this.setInactive(modifier)\n        } else {\n            this.setActive(modifier, value);\n        }\n    }\n\n    /**\n     * Using the local documents source modifier data apply all higher-level situational modifiers\n     * on top and apply to the actual modifiers.\n     *\n     * @params options An optional set of options.\n     * @params options.reapply When set to true, should cause a full re application.\n     */\n    apply(options: SituationalModifierApplyOptions={}) {\n        // Initial application or reapplication\n        if (!this.applied || options.reapply || options.source) {\n            // Clear current application.\n            this.applied = {\n                active: {},\n                total: 0\n            }\n        }\n\n        // Update source when given.\n        this.source = options.source ?? this.source;\n\n        // To filter active selections.\n        const applicable = options.applicable ?? null;\n\n        // Collected source to applied in order.\n        const sources: SourceModifierData[] = [];\n\n        // CASE 1 - Actor document class - apply all top level documents first.\n        // Note, instance against configured class to be change resistant.\n        if (Object.getPrototypeOf(this).constructor.hasSourceData && this.modifiers && this.sourceDocumentIsActor) {\n            // Using a document source, a category is necessary to extract the right source modifiers.\n            if (!this.type) return console.error(`Shadowrun 6e | ${this.constructor.name} can't interact with documents without a modifier category set.`)\n\n            const actor = this.modifiers.document as SR6Actor;\n            this._addSceneSourceDataFromActor(actor, sources);\n        }\n\n        // Add local source (last) into order.\n        sources.push(this.source);\n\n        // Apply each source in order.\n        sources.forEach(source => foundry.utils.mergeObject(this.applied, source));\n\n        // Remove not applicable active selections.\n        if (applicable && applicable.length > 0) {\n            Object.keys(this.applied.active).forEach((selection) => {\n                if (!applicable.includes(selection)) delete this.applied.active[selection];\n            });\n        }\n\n        // Apply effects applicable to situational modifiers.\n        this.effects.applyAllEffects(options.test);\n\n        // If a fixed value selection has been made, use that.\n        // NOTE: When a fixed selection is removed, the input will return null.\n        //       Make sure to always return a number.\n        if (!this.hasFixed && this.hasFixedSelection) this.applied.fixed = this.applied.active.value || 0;\n\n        // After merging active and fixed value, derive total.\n        if (this.hasFixed) this.applied.total = this.applied.fixed as number;\n        else this.applied.total = this._calcActiveTotal(options);\n\n        console.debug(`Shadowrun 6e | Totalled situational modifiers for ${this.modifiers?.document?.name} to be: ${this.applied.total}`, this.applied);\n    }\n\n    /**\n     * Add scene modifier sources into the applicable sources, when an actor is present on scene\n     *\n     * @param actor The actor to check for tokens\n     * @param sources The sources list, as used within #apply\n     */\n    _addSceneSourceDataFromActor(actor: SR6Actor, sources: SourceModifierData[]) {\n        const scene = actor.getToken()?.parent;\n\n        if (!scene) return;\n        const sceneSource = this._getDocumentsSourceData(scene);\n        if (!sceneSource) return;\n\n        // Add parent scene (top most) into order.\n        sources.push(sceneSource);\n    }\n\n    _getDocumentsSourceData(document: ModifiableDocumentTypes): SourceModifierData|undefined {\n        // To access another objects\n        if (!this.type) return;\n        // A placed token must apply it's scene modifiers first.\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(document);\n        // Select the modifier category only.\n        return modifiers.source[this.type];\n    }\n\n    /**\n     * Determine the total value of all active modifier values.\n     *\n     * Override this method if you want to apply different rules depending on the situational modifier category.\n     *\n     * By default the active modifiers will simply be sumed up.\n     *\n     * @param options.test The SuccessTest implementation used to access this modifier. Use if the modifier changes based on test configuration.\n     *\n     * @returns The total modifier value to be used for this situational modifier category.\n     */\n    _calcActiveTotal(options: SituationalModifierApplyOptions={}): number {\n        return Object.values(this.applied.active).reduce((sum, current) => sum + current, 0) || 0;\n    }\n\n    /**\n     * Give the total modifier value for this category.\n     *\n     * Should this modifier not yet been applied, this will apply it.\n     *\n     * NOTE: Always use this field to access resulting modifier values as some modifiers might have a total level applied vs a total modifer given.\n     */\n    get total(): number {\n        if (!this.applied) {\n            this.apply();\n        }\n        return this.applied.total;\n    }\n\n    /**\n     * Clear the source modifier data to a default state.\n     */\n    clear() {\n        this.source = this._prepareSourceData();\n        // With source default, reapply all values\n        this.apply({reapply: true});\n\n        this._updateDocumentModifiers();\n    }\n\n    _updateDocumentSourceModifiers() {\n        if (!this.type || !this.modifiers) return;\n        this.modifiers.source[this.type] = this.source;\n    }\n\n    _updateDocumentAppliedModifiers() {\n        if (!this.type || !this.modifiers) return;\n        this.modifiers.applied[this.type] = this.applied;\n    }\n\n    _updateDocumentModifiers() {\n        this._updateDocumentSourceModifiers();\n        this._updateDocumentAppliedModifiers();\n    }\n}\n", "import { RangedAttackTest } from './../../tests/RangedAttackTest';\nimport { FireModeRules } from './../FireModeRules';\nimport { SR6Actor } from '../../actor/SR6Actor';\nimport { SituationalModifierApplyOptions, SituationModifier } from './SituationModifier';\n\n/**\n * Calculate the situational recoil modifier, see SR5#175 'Recoil' and 'Progressive Recoil'\n *\n * NOTE: This is actor local modifier type that doesn't have a scene wide equivalent for all scene tokens.\n */\nexport class RecoilModifier extends SituationModifier  {\n    /**\n     * Recoil modifiers don't allow for any selection.\n     */\n    static override get hasSourceData() {\n        return false;\n    }\n\n    override _calcActiveTotal(options: SituationalModifierApplyOptions): number {\n        if (!this.modifiers || !this.modifiers.documentIsActor) return 0;\n\n        if (!options.test || options.test.type !== 'RangedAttackTest') return (this.modifiers.document as SR6Actor)?.recoil ?? 0;\n\n        // A recoil modifier in test context.\n        const rangedAttack = options.test as RangedAttackTest;\n        const testActor = options.test.actor;\n        const testItem = options.test.item;\n        const fireMode = rangedAttack.data.fireMode;\n        if (!testActor || !testItem) {\n            console.error(`Shadowrun 6e | ${this.constructor.name} calculated the recoil modifier within context of a ${options.test.constructor.name} which lacked either an actor or item document`, this, options.test);\n            return 0;\n        }\n\n        return FireModeRules.recoilModifierAfterAttack(fireMode, testItem.totalRecoilCompensation, testActor.recoil, testItem.ammoLeft);\n    }\n}\n", "import { SituationModifier } from './SituationModifier';\nimport BackgroundCountModifiersSourceData = Shadowrun.BackgroundCountModifiersSourceData;\nimport BackgroundCountModifiersData = Shadowrun.BackgroundCountModifiersData;\n\n/**\n * Rules application of situation modifieres for magic.\n */\nexport class BackgroundCountModifier extends SituationModifier {\n    override source: BackgroundCountModifiersSourceData\n    override applied: BackgroundCountModifiersData\n    override type: Shadowrun.SituationModifierType = 'background_count';\n}", "import { SituationModifier } from './SituationModifier';\nimport NoiseModifiersSourceData = Shadowrun.NoiseModifiersSourceData;\nimport NoiseModifiersData = Shadowrun.NoiseModifiersData;\n\n/**\n * Rules application of situation modifieres for matrix.\n */\nexport class NoiseModifier extends SituationModifier {\n    override source: NoiseModifiersSourceData\n    override applied: NoiseModifiersData\n    override type: Shadowrun.SituationModifierType = 'noise'\n}", "import { SR } from '../../constants';\nimport { SituationModifier } from './SituationModifier';\nimport EnvironmentalModifierLevels = Shadowrun.EnvironmentalModifierLevels;\nimport EnvironmentalModifiersSourceData = Shadowrun.EnvironmentalModifiersSourceData;\nimport EnvironmentalModifiersData = Shadowrun.EnvironmentalModifiersData;\n\n/**\n  * Rules application of situation modifieres for matrix.\n */\nexport class EnvironmentalModifier extends SituationModifier {\n    override source: EnvironmentalModifiersSourceData\n    override applied: EnvironmentalModifiersData\n    override type: Shadowrun.SituationModifierType = 'environmental';\n\n    \n    get levels(): EnvironmentalModifierLevels {\n        return SR.combat.environmental.levels;\n    }\n\n    /**\n     * How many selectios / modifiers are active per level of enviornmental modifiers.\n     * \n     * A level would be light and fitting modifiers would be 'Light Rain', 'Light Winds' or Medium Range.\n     * \n     * @param values Active modifier values to be matched to level values\n     * @returns A count per level of modifiers on that level\n     */\n    activeLevels(values: Number[]): Record<string, number> {\n        return {\n            light: values.reduce((count: number, value: number) => (value === this.levels.light ? count + 1 : count), 0) as number,\n            moderate: values.reduce((count: number, value: number) => (value === this.levels.moderate ? count + 1 : count), 0) as number,\n            heavy: values.reduce((count: number, value: number) => (value === this.levels.heavy ? count + 1 : count), 0) as number,\n            extreme: values.reduce((count: number, value: number) => (value === this.levels.extreme ? count + 1 : count), 0) as number\n        }\n    }\n\n    /**\n     * Apply rules for environmental modifier selection to calculate a total modifier value.\n     * \n     * SR5#173 'Environmental Modifiers'\n     */\n    override _calcActiveTotal(): number {\n        // A fixed value selection overrides other selections.\n        if (this.applied.active.value)\n            return this.applied.active.value;\n\n        // Calculation based on active modifier categories, excluding manual overwrite.\n        const activeCategories = Object.entries(this.applied.active);\n        // Should an active category miss a level set, ignore and fail gracefully.\n        const activeValues = activeCategories.map(([category, level]) => level ? level : 0);\n        // Calculate the amout of categor\n        const count = this.activeLevels(activeValues);\n\n        if (count.extreme > 0 || count.heavy >= 2) {\n            return this.levels.extreme;\n        }\n        else if (count.heavy === 1 || count.moderate >= 2) {\n            return this.levels.heavy;\n        }\n        else if (count.moderate === 1 || count.light >= 2) {\n            return this.levels.moderate;\n        }\n        else if (count.light === 1) {\n            return this.levels.light;\n        } \n\n        return this.levels.good;\n    }\n\n    override setInactive(modifier: string): void {\n        if (this.source.active[modifier] !== this.applied.active[modifier]) this.setActive(modifier, 0);\n        else delete this.source.active[modifier];\n    }\n}", "import { PhysicalDefenseTest } from './../../tests/PhysicalDefenseTest';\nimport { SR6Actor } from '../../actor/SR6Actor';\nimport { SituationalModifierApplyOptions, SituationModifier } from './SituationModifier';\n\n/**\n * Defense modifier differs based on situational selection while defending.\n *\n * Actor can provide different values based for general defense, 'parry' and others.\n */\nexport class DefenseModifier extends SituationModifier {\n    /**\n     * Defense modifier is a legacy modifier but can differ based set actor modifiers\n     */\n    static override get hasSourceData() {\n        return false;\n    }\n\n    /**\n     * Depending on the test context additional defense modifiers might apply\n     *\n     */\n    override _calcActiveTotal(options:SituationalModifierApplyOptions): number {\n        if (!this.modifiers || !this.modifiers.documentIsActor) return 0;\n\n        const actor = this.modifiers.document as SR6Actor;\n        if (!options.test || options.test.type !== 'PhysicalDefenseTest') return Number(actor.system.modifiers.defense);\n\n        const test = options.test as PhysicalDefenseTest;\n\n        let defense = Number(actor.system.modifiers.defense);\n\n        switch (test.data.activeDefense) {\n            case 'dodge': defense += actor.modifiers.totalFor('defense_dodge'); break;\n            case 'block': defense += actor.modifiers.totalFor('defense_block'); break;\n            case 'parry': defense += actor.modifiers.totalFor('defense_parry'); break;\n        }\n\n        // Based on opposed weapon category, add appropriate defense modifier.\n        if (test.against.item?.isRangedWeapon) defense += actor.modifiers.totalFor('defense_ranged');\n        if (test.against.item?.isMeleeWeapon) defense += actor.modifiers.totalFor('defense_melee');\n\n        return defense;\n    }\n}\n", "import { SuccessTest } from './../tests/SuccessTest';\nimport { RecoilModifier } from './modifiers/RecoilModifier';\nimport { BackgroundCountModifier } from './modifiers/BackgroundCountModifier';\nimport { NoiseModifier } from './modifiers/NoiseModifier';\nimport { SituationalModifierApplyOptions, } from './modifiers/SituationModifier';\nimport { EnvironmentalModifier } from './modifiers/EnvironmentalModifier';\nimport { SR6Actor } from \"../actor/SR6Actor\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\nimport SituationModifiersSourceData = Shadowrun.SituationModifiersSourceData;\nimport SituationModifiersData = Shadowrun.SituationModifiersData;\nimport { DefenseModifier } from './modifiers/DefenseModifier';\n\n\ninterface DocumentSituationModifiersTotalForOptions {\n    // Set true to always re-apply selections.\n    reapply?: boolean;\n    // Only apply these modifier categories.\n    applicable?: string[]\n    // Modifiers are calculated within this tests context.\n    test?: SuccessTest\n}\n\n/**\n * These documents can store situational modifiers\n */\nexport type ModifiableDocumentTypes = SR6Actor | Scene;\n\n/**\n * Handle all per document situation modifiers.\n *\n * Each situational modifier has a 'category' like 'environmental' or 'noise'.\n * Each category has a situation modifier handler to calculate it's total based on\n * user selection and rules for that category.\n *\n * A selection is based on Shadowrun modifier tables and can either result in a summed total\n * or rule specific rules based on what is selected (environmental).\n *\n * A category should be matched a top-level property to the documents source object.\n *\n * A DocumentSituationModifiers instance doesn't do any handling of values but delegates to\n * the respective handler of each category.\n *\n * Documents only store source data per document, while a document might have other\n * document source data applied first. The resulting applied data is what's actually used to\n * calculate a modifiers total.\n *\n * This allows for modifiers to be defined globally (scene), while also locally (actor) and, in theory,\n * add more other other modifier sources in that chain of application to reach the actual modifier.\n *\n * Usage Examples:\n *\n * Get modifiers for the current scene:\n * > const modifiers = DocumentSituationModifiers.fromDocument(canvas.scene);\n *\n * Get modifiers for a specific actor:\n * > const actor = game.actors.getName('John Doe');\n * > const modifiers = DocumentSituationModifiers.fromDocument(actor);\n * > // or\n * > // const modifiers = actor.getSituationModifiers();\n * > // NOTE: actor modifiers will take scene modifiers into account when it's a token actor.\n *\n * Access modifier total value for any modifier category:\n * > const modifiers = DocumentSituationModifiers.fromDocument(canvas.scene);\n * > const total = modifiers.getTotalFor('noise');\n * > // or\n * > // modifiers.noise.apply();\n * > // const total = modifiers.noise.total;\n *\n * Access any modifier total:\n * > const modifiers = DocumentSituationModifiers.fromDocument(canvas.scene);\n * > modifiers.applyAll();\n * > const total = modifiers.getTotalFor('background_count');\n *\n * Change modifiers for a document:\n * > const modifiers = DocumentSituationModifiers.fromDocument(canvas.scene);\n * > modifiers.environmental.set('light', -3);\n * > await modifiers.updateDocument();\n */\nexport class DocumentSituationModifiers {\n    // A reference to the original document holding modifier source data.\n    document: ModifiableDocumentTypes | undefined;\n    // The source data stored on the document.\n    source: SituationModifiersSourceData;\n    // The applied data from the document and it's apply chain.\n    applied: SituationModifiersData;\n    // Handlers for the different modifier categories.\n    _modifiers: {\n        noise: NoiseModifier,\n        background_count: BackgroundCountModifier,\n        environmental: EnvironmentalModifier,\n        recoil: RecoilModifier,\n        defense: DefenseModifier\n    };\n\n    /**\n     * Prepare a Modifiers instance for a and allow handling of the resulting modifiers.\n     *\n     * @param data situational modifiers taken from a Document.\n     * @param document The source document used to retrieve data.\n     */\n    constructor(data?: SituationModifiersSourceData, document?: ModifiableDocumentTypes) {\n        // Fail gracefully for no modifiers given.\n        // This can happen as Foundry returns empty objects for no flags set.\n        if (!data || foundry.utils.getType(data) !== 'Object') {\n            data = DocumentSituationModifiers._defaultModifiers;\n        }\n\n        this.source = this. _completeSourceData(data);\n        this.document = document;\n\n        // Map all modifier types to their respectiv implementation.\n        this._prepareModifiers();\n\n    }\n\n    /**\n     * Prepare modifier handlers and their source data.\n     */\n    _prepareModifiers() {\n        this._modifiers = {\n            noise: new NoiseModifier(this.source.noise, this),\n            background_count: new BackgroundCountModifier(this.source.background_count, this),\n            environmental: new EnvironmentalModifier(this.source.environmental, this),\n            recoil: new RecoilModifier({}, this),\n            defense: new DefenseModifier({}, this)\n        }\n    }\n\n    /**\n     * Does this document have a handle a situation modifier category\n     *\n     * @param category A category found within the handler registry\n     * @returns true, when a total modifier can be calculated by a handler.\n     */\n    handlesTotalFor(category: string) {\n        return this._modifiers.hasOwnProperty(category);\n    }\n\n    /**\n     * Access helper for the noise modifier handler.\n     */\n    get noise(): NoiseModifier {\n        return this._modifiers.noise;\n    }\n\n    /**\n     * Access helper for the background modifier handler.\n     */\n    get background_count(): BackgroundCountModifier {\n        return this._modifiers.background_count;\n    }\n\n    /**\n     * Access helper for the environmental modifier handler.\n     */\n    get environmental(): EnvironmentalModifier {\n        return this._modifiers.environmental;\n    }\n\n    /**\n     * Access helper for the recoilModifier handler.\n     */\n    get recoil(): RecoilModifier {\n        return this._modifiers.recoil;\n    }\n\n    /**\n     * Access helper for the defense modifier handler\n     */\n    get defense(): DefenseModifier {\n        return this._modifiers.defense;\n    }\n\n    /**\n     * Complete a partial modifier data object, making sure all modifier category fields are set.\n     *\n     * @param data An incomplete modifier data object.\n     * @returns A completed modifier data object.\n     */\n    _completeSourceData(data: Partial<SituationModifiersSourceData>): SituationModifiersSourceData {\n        // Duplicate data to avoid cross talk between different entities over different Modifier instances.\n        data = foundry.utils.duplicate(data);\n\n        for (const [category, modifiers] of Object.entries(DocumentSituationModifiers._defaultModifiers)) {\n            if (!data.hasOwnProperty(category)) data[category] = modifiers;\n        }\n\n        return data as SituationModifiersSourceData;\n    }\n\n    /**\n     * Return this total value for a modifiers category selection.\n     *\n     * @param category A string matching a situation modifiers category.\n     * @param options\n     */\n    getTotalFor(category: keyof SituationModifiersSourceData|string, options:DocumentSituationModifiersTotalForOptions={}): number {\n        const modifier = this._modifiers[category];\n\n        if (options.reapply || options.applicable) {\n            modifier.apply({applicable: options.applicable, test: options.test})\n        }\n\n        return modifier.total;\n    }\n\n    /**\n     * Re-apply all situational modifiers totals based on their active selections made.\n     *\n     * This will turn the source data per modifier category over to their matching handler\n     * and apply that categories total according to the rules for that category.\n     *\n     * The result will be stored in the applied modifiers, where a total and the applied\n     * selections can be found.\n     *\n     * @params options What options to pass onto the SituationModifier.apply method.\n     *                 The source property will be overriden.\n     */\n    applyAll(options: SituationalModifierApplyOptions={}) {\n        //@ts-expect-error // Rebuild applied data fully for all modifiers.\n        this.applied = {};\n\n        // Let all handlers apply their modifier rules on the documents source data.\n        Object.entries(this._modifiers).forEach(([category, handler]) => {\n            // Some situational modifiers might choose not to apply any source data.\n            if (Object.getPrototypeOf(handler).constructor.hasSourceData) {\n                // Befor application, remove invalid selections.\n                // This happens when a selection has been set with an empty input DOM element.\n                Object.entries(this.source[category].active).forEach(([modifier, value]) => {\n                    switch (value) {\n                        case null:\n                        case undefined:\n                            delete this.source[category].active[modifier];\n                    }\n                })\n            }\n\n            // Update category modifier source data and reapply.\n            options.reapply = options.reapply ?? true;\n            options.source = this.source[category];\n            handler.apply(options);\n\n            // Move the applied modifier data to the document space.\n            this.applied[category] = handler.applied;\n        });\n    }\n\n    /**\n     * Clear a given document from all situation modifiers selection.\n     *\n     * @param document The document to clear.\n     * @returns A new instance with the resulting modifiers structure\n     */\n    static async clearAllOn(document: ModifiableDocumentTypes) {\n        if (document instanceof SR6Actor) {\n            // Overwrite all selections with default values.\n            await document.update({'system.-=situation_modifiers': null}, {render: false});\n            await document.update({'system.situation_modifiers': DocumentSituationModifiers._defaultModifiers});\n        } else {\n            await document.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\n            await document.setFlag(SYSTEM_NAME, FLAGS.Modifier, DocumentSituationModifiers._defaultModifiers);\n        }\n    }\n\n    /**\n     * Clear a given modifiers categories selection from a document.\n     *\n     * @param document The document to clear.\n     * @param category Modifiers category to clear\n     * @returns A new instance with the resulting modifiers structure\n     */\n    static async clearTypeOn(document: ModifiableDocumentTypes, category: keyof SituationModifiersSourceData): Promise<DocumentSituationModifiers> {\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(document);\n\n        if (!modifiers.source.hasOwnProperty(category)) return modifiers;\n        modifiers.source[category] = DocumentSituationModifiers._defaultModifier;\n\n        await DocumentSituationModifiers.setDocumentModifiers(document, modifiers.source);\n        return modifiers;\n    }\n\n    /**\n     * Prepare complete default modifier structure for a single modifier category.\n     */\n    static get _defaultModifier()  {\n        return {\n            active: {}\n        }\n    }\n\n    /**\n     * Prepare complete default modifier data structure for a single document.\n     */\n    static get _defaultModifiers(): SituationModifiersSourceData {\n        return {\n            environmental: DocumentSituationModifiers._defaultModifier,\n            noise: DocumentSituationModifiers._defaultModifier,\n            background_count: DocumentSituationModifiers._defaultModifier\n        }\n    }\n\n    /**\n     * Determine if the current document is a scene.\n     */\n    get documentIsScene(): boolean {\n        return this.document instanceof CONFIG.Scene.documentClass\n    }\n\n    /**\n     * Determine if the current document is an actor.\n     */\n    get documentIsActor(): boolean {\n        return this.document instanceof CONFIG.Actor.documentClass;\n    }\n\n    /**\n     * Retrieve the situational modifiers data.\n     *\n     * @param document Any document with flags support.\n     * @returns The raw modifier data of a document\n     */\n    static getDocumentModifiersData(document: ModifiableDocumentTypes): SituationModifiersSourceData {\n        if (document instanceof SR6Actor) {\n            return document.system.situation_modifiers;\n        } else {\n            return document.getFlag(SYSTEM_NAME, FLAGS.Modifier) as SituationModifiersSourceData;\n        }\n    }\n\n    /**\n     * For a modifiable document return all situational modifiers.\n     *\n     * @param document The document containing modifiers or implementing a custom modifier retrieval system.\n     */\n    static fromDocument(document: ModifiableDocumentTypes): DocumentSituationModifiers {\n        // Actor targets might have no personal modifiers, but still see the scene modifiers then, and use those\n        // as a template for their local modifiers.\n        if (document instanceof SR6Actor) {\n            return document.getSituationModifiers();\n        }\n        // All other types are handled without special cases.\n        return DocumentSituationModifiers.getDocumentModifiers(document);\n    }\n\n    /**\n     * Build a full set of situational modifiers for a document.\n     *\n     * @param document Any document that may contain situational modifiers.\n     * @returns A full set of situational modifiers.\n     */\n    static getDocumentModifiers(document: ModifiableDocumentTypes): DocumentSituationModifiers {\n        const data = DocumentSituationModifiers.getDocumentModifiersData(document);\n        return new DocumentSituationModifiers(data, document);\n    }\n\n    /**\n     * Set the situation modifiers data on the given document.\n     *\n     * @param document Any document with flags support.\n     * @param modifiers Source data of all situation modifiers for this document.\n     */\n    static async setDocumentModifiers(document: ModifiableDocumentTypes, modifiers: SituationModifiersSourceData) {\n        if (document instanceof SR6Actor) {\n            // Disable diffing to overwrite the whole object.\n            await document.update({'system.situation_modifiers': modifiers}, {diff: false});\n        } else {\n            // Due to active selection merging by Foundry mergeObject, we need to delete first.\n            await document.unsetFlag(SYSTEM_NAME, FLAGS.Modifier);\n            await document.setFlag(SYSTEM_NAME, FLAGS.Modifier, modifiers);\n        }\n    }\n\n    /**\n     * Helper for instances to update modifiers on a document\n     */\n    async updateDocument() {\n        if (!this.document) return console.error(`'Shadowrun 6e | ${this.constructor.name} can't update without connected document'`);\n        await DocumentSituationModifiers.setDocumentModifiers(this.document, this.source);\n    }\n\n    /**\n     * Helper for instances to clear all modifiers on a document\n     */\n    async clearAll() {\n        if (!this.document) return console.error(`'Shadowrun 6e | ${this.constructor.name} can't clear without connected document'`);\n        await DocumentSituationModifiers.clearAllOn(this.document);\n        // Reset local source data.\n        this.source = DocumentSituationModifiers.getDocumentModifiersData(this.document);\n    }\n\n    /**\n     * Helper for scene modifier instances to clear all modifiers for all placed tokens\n     */\n    async clearAllTokensOnScene() {\n        if (!canvas.ready || !canvas.scene) return;\n        if (!this.documentIsScene) return;\n\n        // Validate that modifiers scene is same to current scene.\n        const scene = this.document as Scene;\n        if (canvas.scene.id !== scene.id) return;\n\n        // Use current scene for ease of access to tokens\n        canvas.scene.tokens.forEach(token => token.actor?.getSituationModifiers().clearAll());\n    }\n}\n", "import { LENGTH_UNIT, SR, SYSTEM_NAME } from '../constants';\nimport { Helpers } from '../helpers';\nimport { SR6 } from '../config';\nimport { RangedWeaponRules } from './RangedWeaponRules';\nimport { DataDefaults } from '../data/DataDefaults';\nimport { PartsList } from '../parts/PartsList';\nimport { DocumentSituationModifiers } from './DocumentSituationModifiers';\nimport { SuccessTest, SuccessTestData } from '../tests/SuccessTest';\nimport RangeData = Shadowrun.RangeData;\nimport WeaponItemData = Shadowrun.WeaponItemData;\nimport { Translation } from '../utils/strings';\n\nexport const RANGE_CATEGORIES = {\n    CLOSE: 'CLOSE',\n    NEAR: 'NEAR',\n    MEDIUM: 'MEDIUM',\n    FAR: 'FAR',\n    EXTREME: 'EXTREME'\n} as const;\n\nexport const RANGE_DISTANCES = {\n    [RANGE_CATEGORIES.CLOSE]: { min: 0, max: 3 },\n    [RANGE_CATEGORIES.NEAR]: { min: 4, max: 50 },\n    [RANGE_CATEGORIES.MEDIUM]: { min: 51, max: 250 },\n    [RANGE_CATEGORIES.FAR]: { min: 251, max: 500 },\n    [RANGE_CATEGORIES.EXTREME]: { min: 501, max: Infinity }\n} as const;\n\nexport const RANGE_MODIFIERS = {\n    [RANGE_CATEGORIES.CLOSE]: 0,\n    [RANGE_CATEGORIES.NEAR]: 0,\n    [RANGE_CATEGORIES.MEDIUM]: -2,\n    [RANGE_CATEGORIES.FAR]: -4,\n    [RANGE_CATEGORIES.EXTREME]: -6\n} as const;\n\nexport class WeaponRangeRules {\n    static getRangeCategory(distance: number): keyof typeof RANGE_CATEGORIES {\n        if (distance <= RANGE_DISTANCES[RANGE_CATEGORIES.CLOSE].max) return 'CLOSE';\n        if (distance <= RANGE_DISTANCES[RANGE_CATEGORIES.NEAR].max) return 'NEAR';\n        if (distance <= RANGE_DISTANCES[RANGE_CATEGORIES.MEDIUM].max) return 'MEDIUM';\n        if (distance <= RANGE_DISTANCES[RANGE_CATEGORIES.FAR].max) return 'FAR';\n        return 'EXTREME';\n    }\n\n    static getRangeModifier(distance: number): number {\n        const category = this.getRangeCategory(distance);\n        return RANGE_MODIFIERS[category];\n    }\n\n    static getTargetRangeDescription(distance: number): Shadowrun.RangeDescription {\n        const category = this.getRangeCategory(distance);\n        const modifier = RANGE_MODIFIERS[category];\n\n        return {\n            label: game.i18n.localize(`SR6.WeaponRange.${category.toLowerCase()}` as Translation),\n            distance,\n            modifier,\n            category\n        };\n    }\n}\n\nexport interface WeaponRangeTestDataFragment {\n    damage: Shadowrun.DamageData\n    ranges: Shadowrun.RangesTemplateData\n    range: number\n    targetRanges: Shadowrun.TargetRangeTemplateData[]\n    // index of selected target range in targetRanges\n    targetRangesSelected: number\n}\n\ntype WeaponRangeTest = SuccessTest<WeaponRangeTestDataFragment & SuccessTestData>\n\n// Experimental - the idea of a test behavior is that it can be applied to multiple different types of tests\n// without having to be a base class of both tests. This paradigm, if implemented correctly,\n// should help prevent duplication of common behaviors across different tests\nexport class WeaponRangeTestBehavior {\n    static prepareData(test: WeaponRangeTest, data: any) {\n        data.range = 0;\n        data.targetRanges = [];\n        data.targetRangesSelected = 0;\n        data.damage = data.damage || DataDefaults.damageData();\n        data.attackerAR = 5;\n        data.defenderDR = 5;\n    }\n\n    private static prepareTargetRanges(test: WeaponRangeTest) {\n        if (!test.actor) return;\n\n        // Get targets from current user instead of test.hasTargets\n        const targets = Helpers.getUserTargets(game.user);\n        if (targets.length === 0) return;\n\n        const attacker = test.actor.getToken();\n\n        if (!attacker) {\n            ui.notifications?.warn(game.i18n.localize('SR6.TargetingNeedsActorWithToken'));\n            return;\n        }\n\n        // Build target ranges for template display using the current user's targets\n        test.data.targetRanges = targets.map(token => {\n            const distance = Helpers.measureTokenDistance(attacker, token.document);\n            const rangeDescription = WeaponRangeRules.getTargetRangeDescription(distance);\n\n            return {\n                tokenUuid: token.document.uuid,\n                name: token.name || '',\n                unit: LENGTH_UNIT,\n                range: rangeDescription,\n                distance,\n            };\n        });\n\n        // Sort targets by ascending distance from attacker\n        test.data.targetRanges = test.data.targetRanges.sort((a, b) => a.distance - b.distance);\n\n        // Set initial range modifier\n        const modifiers = test.actor.getSituationModifiers();\n        modifiers.environmental.apply({test});\n        test.data.range = modifiers.environmental.applied.active.range ||\n            (test.data.targetRanges[0]?.range.modifier ?? 0);\n    }\n\n    static prepareDocumentData(test: WeaponRangeTest) {\n        WeaponRangeTestBehavior.prepareTargetRanges(test);\n    }\n\n    /**\n     * Save selections made back to documents.\n     * @returns\n     */\n    static async saveUserSelectionAfterDialog(test: WeaponRangeTest) {\n        if (!test.actor) return;\n        if (!test.item) return;\n\n        // Save range selection\n        const modifiers = test.actor.getSituationModifiers();\n        modifiers.environmental.setActive('range', test.data.range);\n        await test.actor.setSituationModifiers(modifiers);\n    }\n\n    /**\n     * Apply test selections made by user in dialog.\n     * @returns\n     */\n    static prepareBaseValues(test: WeaponRangeTest) {\n        if (!test.actor) return;\n        if (!test.item) return;\n\n        // Get targets from current user\n        const targets = Helpers.getUserTargets(game.user);\n        if (targets.length > 0) {\n            // Set all selected targets for display in chat message\n            test.targets = targets.map(token => token.document);\n\n            if (test.data.targetRanges.length > 0) {\n                // Cast select options string to integer index.\n                test.data.targetRangesSelected = Number(test.data.targetRangesSelected);\n\n                // Add safety check for valid index\n                if (test.data.targetRangesSelected >= 0 &&\n                    test.data.targetRangesSelected < test.data.targetRanges.length) {\n\n                    const target = test.data.targetRanges[test.data.targetRangesSelected];\n                    if (target && target.range) {\n                        test.data.range = target.range.modifier;\n\n                        // Set the specific target being fired upon\n                        const token = fromUuidSync(target.tokenUuid) as TokenDocument;\n                        if (!(token instanceof TokenDocument)) return console.error(`Shadowrun 6e | ${test.type} got a target that is no TokenDocument`, token);\n                        if (!token.actor) return console.error(`Shadowrun 6e | ${test.type} got a token that has no actor`, token);\n                        test.data.targetActorsUuid = [token.actor.uuid];\n                    }\n                }\n            }\n        }\n\n        // Alter test data for range.\n        test.data.range = Number(test.data.range);\n    }\n\n    /**\n     * Ranged attack tests allow for temporarily changing of modifiers without altering the document.\n     */\n    static prepareTestModifiers(test: WeaponRangeTest) {\n        WeaponRangeTestBehavior.prepareEnvironmentalModifier(test);\n    }\n\n    private static prepareEnvironmentalModifier(test: WeaponRangeTest) {\n        if (!test.actor) return;\n\n        const poolMods = new PartsList(test.data.modifiers.mod);\n        const modifiers = DocumentSituationModifiers.getDocumentModifiers(test.actor);\n\n        // Get targets from current user\n        const targets = Helpers.getUserTargets(game.user);\n        let range = 0;  // Default to 0 if no valid range is found\n\n        if (targets.length > 0 &&\n            test.data.targetRanges &&\n            test.data.targetRanges.length > 0 &&\n            test.data.targetRangesSelected >= 0 &&\n            test.data.targetRangesSelected < test.data.targetRanges.length) {\n\n            const selectedTarget = test.data.targetRanges[test.data.targetRangesSelected];\n            if (selectedTarget && selectedTarget.range && typeof selectedTarget.range.modifier === 'number') {\n                range = selectedTarget.range.modifier;\n            }\n        } else if (typeof test.data.range === 'number') {\n            range = test.data.range;\n        }\n\n        // Locally set env modifier temporarily.\n        modifiers.environmental.setActive('range', range);\n        modifiers.environmental.apply({reapply: true, test});\n\n        poolMods.addUniquePart(SR6.modifierTypes.environmental, modifiers.environmental.total);\n    }\n\n    static async processResults(test: WeaponRangeTest) {\n        await WeaponRangeTestBehavior.markActionPhaseAsAttackUsed(test);\n    }\n\n    private static async markActionPhaseAsAttackUsed(test: WeaponRangeTest) {\n        if (!test.actor! || !test.actor.combatActive) return;\n\n        const combatant = test.actor.combatant;\n        if (!combatant) return;\n\n        await combatant.setFlag(SYSTEM_NAME, 'turnsSinceLastAttack', 0);\n    }\n}\n", "import { RangedWeaponRules } from '../rules/RangedWeaponRules';\nimport { SR6Actor } from '../actor/SR6Actor';\nimport { createItemChatMessage } from '../chat';\nimport { DEFAULT_ROLL_NAME, FLAGS, SYSTEM_NAME } from '../constants';\nimport { DataDefaults } from \"../data/DataDefaults\";\nimport { SR6ItemDataWrapper } from '../data/SR6ItemDataWrapper';\nimport { Helpers } from '../helpers';\nimport { PartsList } from '../parts/PartsList';\nimport { MatrixRules } from \"../rules/MatrixRules\";\nimport { TestCreator } from \"../tests/TestCreator\";\nimport { ChatData } from './ChatData';\nimport { NetworkDeviceFlow } from \"./flows/NetworkDeviceFlow\";\nimport { HostDataPreparation } from \"./prep/HostPrep\";\nimport ModList = Shadowrun.ModList;\nimport AttackData = Shadowrun.AttackData;\nimport FireModeData = Shadowrun.FireModeData;\nimport SpellForceData = Shadowrun.SpellForceData;\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\nimport FireRangeData = Shadowrun.FireRangeData;\nimport BlastData = Shadowrun.BlastData;\nimport ConditionData = Shadowrun.ConditionData;\nimport ActionRollData = Shadowrun.ActionRollData;\nimport SpellData = Shadowrun.SpellData;\nimport WeaponData = Shadowrun.WeaponData;\nimport AmmoData = Shadowrun.AmmoData;\nimport TechnologyData = Shadowrun.TechnologyData;\nimport RangeWeaponData = Shadowrun.RangeWeaponData;\nimport SpellRange = Shadowrun.SpellRange;\nimport CritterPowerRange = Shadowrun.CritterPowerRange;\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\nimport ActionItemData = Shadowrun.ActionItemData;\nimport AdeptPowerItemData = Shadowrun.AdeptPowerItemData;\nimport AmmoItemData = Shadowrun.AmmoItemData;\nimport ArmorItemData = Shadowrun.ArmorItemData;\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\nimport ContactItemData = Shadowrun.ContactItemData;\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\nimport DeviceItemData = Shadowrun.DeviceItemData;\nimport EquipmentItemData = Shadowrun.EquipmentItemData;\nimport LifestyleItemData = Shadowrun.LifestyleItemData;\nimport ModificationItemData = Shadowrun.ModificationItemData;\nimport ProgramItemData = Shadowrun.ProgramItemData;\nimport QualityItemData = Shadowrun.QualityItemData;\nimport SinItemData = Shadowrun.SinItemData;\nimport SpellItemData = Shadowrun.SpellItemData;\nimport SpritePowerItemData = Shadowrun.SpritePowerItemData;\nimport HostItemData = Shadowrun.HostItemData;\nimport ActionResultData = Shadowrun.ActionResultData;\nimport ActionTestLabel = Shadowrun.ActionTestLabel;\nimport MatrixMarks = Shadowrun.MatrixMarks;\nimport RollEvent = Shadowrun.RollEvent;\nimport ShadowrunItemDataData = Shadowrun.ShadowrunItemDataData;\nimport { DocumentModificationOptions } from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/document.mjs\";\nimport { LinksHelpers } from '../utils/links';\nimport { TechnologyPrep } from './prep/functions/TechnologyPrep';\nimport { SinPrep } from './prep/SinPrep';\nimport { ActionPrep } from './prep/functions/ActionPrep';\nimport { RangePrep } from './prep/functions/RangePrep';\nimport { AdeptPowerPrep } from './prep/AdeptPowerPrep';\n\n/**\n * WARN: I don't know why, but removing the usage of ActionResultFlow from SR6Item\n * causes esbuild (I assume) to re-order import dependencies resulting in vastly different orders of execution within transpiled bundle.js code,\n * resulting OpposedTest not finding SuccessTest (undefined) when extending it.\n *\n * ... I'd love to remove this, or even just comment it, but tree-shaking will do it's job.\n *\n * Should you read this: Try it anyway and open any actor sheet. If it's not broken, the build issue must've been fixed somehow.\n *\n * An esbuild update might fix this, but caused other issues at the time... Didn't fix it with esbuild@0.15.14 (20.11.2022)\n * NOTE: still not fixed with esbuild@0.19.5\n */\nimport { ActionResultFlow } from './flows/ActionResultFlow';\nimport { UpdateActionFlow } from './flows/UpdateActionFlow';\nimport { WeaponRangeRules } from '../rules/WeaponRangeRules';\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nActionResultFlow; // DON'T TOUCH!\n\n/**\n * Implementation of shadowrun6-elysium items (owned, unowned and nested).\n *\n *       tamIf here: The current legacy nested items approach has been cleaned up a bit but is still causing some issues\n *       with typing and ease of use.\n *\n *       SR6Item.items currently overwrites foundries internal DocumentCollection mechanism of nested documents. Partially\n *       due to legacy reasons and since Foundry 0.8 SR6Item.update can't be used for nested items in items anymore.\n *\n *        At the moment this means, that this.actor can actually be an SR6Actor as well as an SR6Item, depending on who\n *       'owns' the nested item as they are created using Item.createOwned during the nested item prep phase.\n *\n *       For this reason SR6Item.actorOwner has been introduced to allow access to the actual owning actor, no matter\n *       how deep nested into other items an item is.\n *\n *       Be wary of SR6Item.actor for this reason!\n */\nexport class SR6Item extends Item {\n    // Item.items isn't the Foundry default ItemCollection but is overwritten within prepareNestedItems\n    // to allow for embedded items in items in actors.\n    items: SR6Item[];\n\n    // Item Sheet labels for quick info on an item dropdown.\n    labels: {} = {};\n\n    // Add v10 type helper\n    system: ShadowrunItemDataData; // TODO: foundry-vtt-types v10\n\n    /**\n     * Return the owner of this item, which can either be\n     * - an actor instance (Foundry default)\n     * - an item instance (shadowrun custom) for embedded items\n     *\n     * If you need the actual actor owner, no matter how deep into item embedding, this current item is use SR5item.actorOwner\n     */\n    override get actor(): SR6Actor {\n        return super.actor as unknown as SR6Actor;\n    }\n\n    /**\n     * Helper property to get an actual actor for an owned or embedded item. You'll need this for when you work with\n     * embeddedItems, as they have their .actor property set to the item they're embedded into.\n     *\n     * NOTE: This helper is necessary since we have setup embedded items with an item owner, due to the current embedding\n     *       workflow using item.update.isOwned condition within Item.update (foundry Item) to NOT trigger a global item\n     *       update within the ItemCollection but instead have this.actor.updateEmbeddedEntities actually trigger SR6Item.updateEmbeddedEntities\n     */\n    get actorOwner(): SR6Actor | undefined {\n        // An unowned item won't have an actor.\n        if (!this.actor) return;\n        // An owned item will have an actor.\n        if (this.actor instanceof SR6Actor) return this.actor;\n        // An embedded item will have an item as an actor, which might have an actor owner.\n        // NOTE: This is very likely wrong and should be fixed during embedded item prep / creation. this.actor will only\n        //       check what is set in the items options.actor during it's construction.\n        //@ts-expect-error\n        return this.actor.actorOwner;\n    }\n\n    private get wrapper(): SR6ItemDataWrapper {\n        // we need to cast here to unknown first to make ts happy\n        return new SR6ItemDataWrapper(this as unknown as ShadowrunItemData);\n    }\n\n    // Flag Functions\n    getLastFireMode(): FireModeData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireMode) as FireModeData || DataDefaults.fireModeData();\n    }\n    async setLastFireMode(fireMode: FireModeData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireMode, fireMode);\n    }\n    getLastSpellForce(): SpellForceData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastSpellForce) as SpellForceData || { value: 0 };\n    }\n    async setLastSpellForce(force: SpellForceData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastSpellForce, force);\n    }\n    getLastComplexFormLevel(): ComplexFormLevelData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel) as ComplexFormLevelData || { value: 0 };\n    }\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastComplexFormLevel, level);\n    }\n    getLastFireRangeMod(): FireRangeData {\n        return this.getFlag(SYSTEM_NAME, FLAGS.LastFireRange) as FireRangeData || { value: 0 };\n    }\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\n        return this.setFlag(SYSTEM_NAME, FLAGS.LastFireRange, environmentalMod);\n    }\n\n    /**\n     * Return an Array of the Embedded Item Data\n     */\n    getNestedItems(): any[] {\n        let items = this.getFlag(SYSTEM_NAME, FLAGS.EmbeddedItems) as any[];\n\n        items = items ? items : [];\n\n        // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\n        if (items && !Array.isArray(items)) {\n            items = Helpers.convertIndexedObjectToArray(items);\n        }\n\n        // Manually map wrongly converted array fields...\n        items = items.map(item => {\n            if (item.effects && !Array.isArray(item.effects)) {\n                item.effects = Helpers.convertIndexedObjectToArray(item.effects);\n            }\n            return item;\n        });\n\n        return items;\n    }\n\n    /**\n     * Set the embedded item data\n     * @param items\n     */\n    async setNestedItems(items: any[]) {\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\n        // await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\n        await this.setFlag(SYSTEM_NAME, FLAGS.EmbeddedItems, items);\n    }\n\n    async clearNestedItems() {\n        await this.unsetFlag(SYSTEM_NAME, FLAGS.EmbeddedItems);\n    }\n\n    get hasOpposedRoll(): boolean {\n        const action = this.getAction();\n        if (!action) return false;\n        return !!action.opposed.test;\n    }\n\n    get hasRoll(): boolean {\n        const action = this.getAction();\n        return !!(action && action.type !== '' && (action.skill || action.attribute || action.attribute2 || action.dice_pool_mod));\n    }\n\n    /**\n     * Determine if a blast area should be placed using FoundryVTT area templates.\n     */\n    get hasBlastTemplate(): boolean {\n        return this.isAreaOfEffect;\n    }\n\n    /**\n     * PREPARE DATA CANNOT PULL FROM this.actor at ALL\n     * - as of foundry v0.7.4, actor data isn't prepared by the time we prepare items\n     * - this caused issues with Actions that have a Limit or Damage attribute and so those were moved\n     */\n    override prepareData() {\n        super.prepareData();\n        this.prepareNestedItems();\n\n        // Description labels might have changed since last data prep.\n        // NOTE: this here is likely unused and heavily legacy.\n        this.labels = {};\n\n        // Collect the equipped modifying nested items.\n        const equippedMods = this.getEquippedMods();\n        const equippedAmmo = this.getEquippedAmmo();\n\n        const technology = this.getTechnologyData();\n        if (technology) {\n            TechnologyPrep.prepareConditionMonitor(technology);\n            TechnologyPrep.prepareConceal(technology, equippedMods);\n        }\n\n        const action = this.getAction();\n        if (action) {\n            ActionPrep.prepareData(action, this, equippedMods, equippedAmmo);\n        }\n\n        const range = this.getWeaponRange();\n        if (range && range.rc) {\n            RangePrep.prepareData(range, equippedMods);\n        }\n\n        // Switch item data preparation between types...\n        // ... this is ongoing work to clean up SR5item.prepareData\n        switch (this.type) {\n            case 'host':\n                HostDataPreparation(this.system as Shadowrun.HostData);\n                break;\n            case 'adept_power':\n                AdeptPowerPrep.prepareBaseData(this.system as unknown as Shadowrun.AdeptPowerData);\n                break;\n            case 'sin':\n                SinPrep.prepareBaseData(this.system as unknown as Shadowrun.SinData);\n                break;\n        }\n    }\n\n    async postItemCard() {\n        const options = {\n            actor: this.actor,\n            description: await this.getChatData(),\n            item: this,\n            previewTemplate: this.hasBlastTemplate,\n            tests: this.getActionTests()\n        };\n        return await createItemChatMessage(options);\n    }\n\n    /**\n     * Cast the action of this item as a Test.\n     *\n     * @param event A PointerEvent by user interaction.\n     */\n    async castAction(event?: RollEvent) {\n        // Only show the item's description by user intention or by lack of testability.\n        const dontRollTest = TestCreator.shouldPostItemDescription(event) || !this.hasRoll;\n        if (dontRollTest) return await this.postItemCard();\n\n        if (!this.actor) return;\n\n        // Log the action type but don't spend it yet - actions will be spent when the test is submitted\n        const action = this.getAction();\n        console.log(`Shadowrun 6e | castAction for ${this.name} - Action:`, action);\n\n        if (action) {\n            console.log(`Shadowrun 6e | ${this.name} is a ${action.type} action`);\n        } else {\n            console.log(`Shadowrun 6e | ${this.name} has no action data`);\n        }\n\n        const showDialog = !TestCreator.shouldHideDialog(event);\n        const test = await TestCreator.fromItem(this, this.actor, { showDialog });\n        if (!test) return;\n        await test.execute();\n    }\n\n    /**\n     * Create display only information for this item. Used on sheets, chat messages and more.\n     * Both actor and item sheets.\n     *\n     * The original naming leans on the dnd5e systems use of it for chat messages.\n     * NOTE: This is very legacy, difficult to read and should be improved upon.\n     *\n     * @param htmlOptions\n     * @returns\n     */\n    async getChatData(htmlOptions = {}) {\n        const system = foundry.utils.duplicate(this.system);\n        const { labels } = this;\n        if (!system.description) system.description = { chat: '', source: '', value: '' };\n        // TextEditor.enrichHTML will return null as a string, making later handling difficult.\n        if (!system.description.value) system.description.value = '';\n        system.description.value = await TextEditor.enrichHTML(system.description.value, { ...htmlOptions });\n\n        const props = [];\n        // Add additional chat data fields depending on item type.\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const chatDataForItemType = ChatData[this.type];\n        if (chatDataForItemType) chatDataForItemType(system, labels, props, this);\n\n        //@ts-expect-error // This is a hacky monkey patch solution to add a property to the item data\n        //              that's not actually defined in any SR6Item typing.\n        system.properties = props.filter((p) => !!p);\n\n        return system;\n    }\n\n    getActionTestName(): string {\n        const testName = this.getRollName();\n        return testName ? testName : game.i18n.localize('SR6.Action');\n    }\n\n    /**\n     * Any item implementation can define a set of modifiers to be applied when used within an opposed test.\n     *\n     * NOTE: This is a legacy method of applied modifiers to opposed tests but works fine for now.\n     */\n    getOpposedTestMod(): PartsList<number> {\n        const parts = new PartsList<number>();\n\n        if (this.hasOpposedTest()) {\n            if (this.isAreaOfEffect) {\n                parts.addUniquePart('SR6.Aoe', -2);\n            }\n        }\n\n        return parts;\n    }\n\n    getBlastData(actionTestData?: any): BlastData | undefined {\n        if (this.isSpell && this.isAreaOfEffect) {\n            const system = this.system as unknown as SpellData;\n\n            // By default spell distance is equal to it's Force.\n            let distance = this.getLastSpellForce().value;\n\n            // Except for predefined user test selection.\n            if (actionTestData?.spell) {\n                distance = actionTestData.spell.force;\n            }\n\n            // Extended spells have a longer range.\n            if (system.extended) distance *= 10;\n            const dropoff = 0;\n\n            return {\n                radius: distance,\n                dropoff\n            }\n\n        } else if (this.isGrenade) {\n            const system = this.system as WeaponData;\n\n            const distance = system.thrown.blast.radius;\n            const dropoff = system.thrown.blast.dropoff;\n\n            return {\n                radius: distance,\n                dropoff\n            }\n\n        } else if (this.hasExplosiveAmmo) {\n            const item = this.getEquippedAmmo();\n            const ammo = item.asAmmo;\n\n            if (!ammo) return { radius: 0, dropoff: 0 };\n\n            const distance = ammo.system.blast.radius;\n            const dropoff = ammo.system.blast.dropoff;\n\n            return {\n                radius: distance,\n                dropoff\n            };\n        }\n    }\n\n    getEquippedAmmo(): SR6Item {\n        const equippedAmmos = (this.items || []).filter((item) =>\n            item.isAmmo &&\n            item.isEquipped());\n\n        // Cast Typing isn't a mistake, so long as isAmmo is filtered.\n        return equippedAmmos[0];\n    }\n\n    getEquippedMods(): SR6Item[] {\n        return (this.items || []).filter((item) =>\n            item.isWeaponModification &&\n            item.isEquipped());\n    }\n\n    get hasExplosiveAmmo(): boolean {\n        const ammo = this.getEquippedAmmo();\n        if (!ammo) return false;\n        const system = ammo.system as AmmoData;\n        return system.blast.radius > 0;\n    }\n\n    /**\n     * Toggle equipment state of a single Modification item.\n     * @param iid Modification item id to be equip toggled\n     */\n    async equipWeaponMod(iid) {\n        await this.equipNestedItem(iid, 'modification', { unequipOthers: false, toggle: true });\n    }\n\n    /**\n     * Check if weapon has enough ammunition.\n     *\n     * @param rounds The amount of rounds to be fired\n     * @returns Either the weapon has no ammo at all or not enough.\n     */\n    hasAmmo(rounds: number = 0): boolean {\n        return this.ammoLeft >= rounds;\n    }\n\n    /**\n     * Amount of ammunition this weapon has currently available\n     */\n    get ammoLeft(): number {\n        const ammo = this.wrapper.getAmmo();\n        if (!ammo) return 0;\n\n        return ammo.current.value;\n    }\n\n    /**\n     * Use the weapons ammunition with the amount of bullets fired.\n     * @param fired Amount of bullets fired.\n     */\n    async useAmmo(fired) {\n        if (this.type !== 'weapon') return;\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const value = Math.max(0, this.system.ammo.current.value - fired);\n        return await this.update({ 'system.ammo.current.value': value });\n    }\n\n    /**\n     * Can this item (weapon, melee, ranged, whatever) use ammunition?\n     *\n     * @returns true, for weapons with ammunition.\n     */\n    get usesAmmo(): boolean {\n        return this.system.ammo?.current.max !== 0 && this.system.ammo?.current.max !== null;\n    }\n\n    /**\n     * Reload this weapon according to information in:\n     * - its current clips\n     * - its available spare clips (when given)\n     * - its equipped ammo\n     *\n     * This method will only reload the weapon to the max amount of ammo available.\n     *\n     * TODO: Currently only the minimal amount of bullets is reloaded. For weapons using ejectable clips, this should be full clip capacity.\n     */\n    async reloadAmmo(partialReload: boolean) {\n        const weapon = this.asWeapon;\n        if (!weapon) return;\n\n        // Reload this weapons ammunition to it's max capacity.\n        const updateData = {};\n\n        // Prepare reloading by getting ammunition information.\n        const ammo = this.getEquippedAmmo();\n        const ammoItems = this.items.filter(item => item.isAmmo).length;\n\n        const remainingBullets = Number(weapon.system.ammo.current.value);\n        // Don't adhere to clip sizes, only reload from the point of capacity left.\n        const missingBullets = Math.max(0, weapon.system.ammo.current.max - remainingBullets);\n        // This checks how many rounds are required for a partial reload.\n        const partialReloadBulletsNeeded = Math.min(weapon.system.ammo.current.max - remainingBullets, RangedWeaponRules.partialReload(weapon.system.ammo.clip_type, this.actor.getAttribute('agility').value));\n        // If there aren't ANY ammo items, just use weapon max as to not enforce ammo onto users without.\n        const availableBullets = ammoItems > 0 ? Number(ammo.system.technology?.quantity) : weapon.system.ammo.current.max;\n\n        // Validate ammunition and clip availability.\n        if (weapon.system.ammo.spare_clips.value === 0 && weapon.system.ammo.spare_clips.max > 0) {\n            // Should this ever be enforced, change info to warn.\n            ui.notifications?.info(\"SR6.Warnings.CantReloadWithoutSpareClip\", { localize: true });\n        }\n        if (ammo && Number(ammo.system.technology?.quantity) === 0) {\n            return ui.notifications?.warn('SR6.Warnings.CantReloadAtAllDueToAmmo', { localize: true });\n        }\n        if (ammo && Number(ammo.system.technology?.quantity) < missingBullets) {\n            if (partialReload && partialReloadBulletsNeeded !== -1 && Number(ammo.system.technology?.quantity) < partialReloadBulletsNeeded) {\n                ui.notifications?.info('SR6.Warnings.CantReloadPartialDueToAmmo', { localize: true });\n            } else {\n                ui.notifications?.info('SR6.Warnings.CantReloadFullyDueToAmmo', { localize: true });\n            }\n        }\n\n        // Prepare what can be reloaded.\n        const reloadedBullets = Math.min(missingBullets, availableBullets, partialReload ? partialReloadBulletsNeeded : Infinity);\n\n\n        if (weapon.system.ammo.spare_clips.max > 0) {\n            updateData['system.ammo.spare_clips.value'] = Math.max(0, weapon.system.ammo.spare_clips.value - 1);\n        }\n        updateData['system.ammo.current.value'] = remainingBullets + reloadedBullets;\n        await this.update(updateData);\n\n        if (!ammo) return;\n        await ammo.update({ 'system.technology.quantity': Math.max(0, Number(ammo.system.technology?.quantity) - reloadedBullets) });\n    }\n\n    async equipNestedItem(id: string, type: string, options: { unequipOthers?: boolean, toggle?: boolean } = {}) {\n        const unequipOthers = options.unequipOthers || false;\n        const toggle = options.toggle || false;\n\n        // Collect all item data and update at once.\n        const updateData: Record<any, any>[] = [];\n        const ammoItems = this.items.filter(item => item.type === type);\n\n        for (const item of ammoItems) {\n            if (!unequipOthers && item.id !== id) continue;\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            const equip = toggle ? !item.system.technology.equipped : id === item.id;\n\n            updateData.push({ _id: item.id, 'system.technology.equipped': equip });\n        }\n\n        if (updateData) await this.updateNestedItems(updateData);\n    }\n\n    /**\n     * Equip one ammo item exclusively.\n     *\n     * @param id Item id of the to be exclusively equipped ammo item.\n     */\n    async equipAmmo(id) {\n        await this.equipNestedItem(id, 'ammo', { unequipOthers: true });\n    }\n\n    async addNewLicense() {\n        if (this.type !== 'sin') return;\n\n        // NOTE: This might be related to Foundry data serialization sometimes returning arrays as ordered HashMaps...\n        const licenses = foundry.utils.getType(this.system.licenses) === 'Object' ?\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            Object.values(this.system.licenses) :\n            this.system.licenses;\n\n        if (!licenses) return;\n\n        // Add the new license to the list\n        licenses.push({\n            name: '',\n            rtg: '',\n            description: '',\n        });\n\n        await this.update({ 'system.licenses': licenses });\n    }\n\n    get isSin(): boolean {\n        return this.wrapper.isSin();\n    }\n\n    get asSin(): SinItemData | undefined {\n        if (this.isSin) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as SinItemData;\n        }\n    }\n\n    get isLifestyle(): boolean {\n        return this.wrapper.isLifestyle();\n    }\n\n    get asLifestyle(): LifestyleItemData | undefined {\n        if (this.isLifestyle) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as LifestyleItemData;\n        }\n    }\n\n    get isAmmo(): boolean {\n        return this.wrapper.isAmmo();\n    }\n\n    get isAoEAmmo(): boolean {\n        return this.wrapper.isAoEAmmo();\n    }\n\n    get asAmmo(): AmmoItemData | undefined {\n        if (this.isAmmo) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as AmmoItemData;\n        }\n    }\n\n    get isModification(): boolean {\n        return this.wrapper.isModification();\n    }\n\n    asModification(): ModificationItemData | undefined {\n        if (this.isModification) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as ModificationItemData;\n        }\n    }\n\n    get isWeaponModification(): boolean {\n        return this.wrapper.isWeaponModification();\n    }\n\n    get isArmorModification(): boolean {\n        return this.wrapper.isArmorModification();\n    }\n\n    get isProgram(): boolean {\n        return this.wrapper.isProgram();\n    }\n\n    get asProgram(): ProgramItemData | undefined {\n        if (this.isProgram) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as ProgramItemData;\n        }\n    }\n\n    get isQuality(): boolean {\n        return this.wrapper.isQuality();\n    }\n\n    get asQuality(): QualityItemData | undefined {\n        if (this.isQuality) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as QualityItemData;\n        }\n    }\n\n    get isAdeptPower(): boolean {\n        return this.type === 'adept_power';\n    }\n\n    asAdeptPower(): AdeptPowerItemData | undefined {\n        if (this.isAdeptPower)\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as AdeptPowerItemData;\n    }\n\n\n    get isHost(): boolean {\n        return this.type === 'host';\n    }\n\n    get asHost(): HostItemData | undefined {\n        if (this.isHost) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as HostItemData;\n        }\n    }\n\n    /**\n     * SIN Item - remove a single license within this SIN\n     *\n     * @param index The license list index\n     */\n    async removeLicense(index) {\n        if (this.type !== 'sin') return;\n\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        const licenses = this.system.licenses.splice(index, 1);\n        await this.update({ 'system.licenses': licenses });\n    }\n\n    isAction(): boolean {\n        return this.wrapper.isAction();\n    }\n\n    asAction(): ActionItemData | undefined {\n        if (this.isAction()) {\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            return this as ActionItemData;\n        }\n    }\n\n    async rollOpposedTest(target: SR6Actor, attack: AttackData, event): Promise<void> {\n        console.error(`SR6: Elysium | ${this.constructor.name}.rollOpposedTest is not supported anymore`);\n    }\n\n    async rollTestType(type: string, attack: AttackData, event, target: SR6Actor) {\n        if (type === 'opposed') {\n            await this.rollOpposedTest(target, attack, event);\n        }\n        if (type === 'action') {\n            await this.castAction(event);\n        }\n    }\n\n    /**\n     * The item can be stored on a token on the current or another, given, scene.\n     *\n     * The chat message must contain a data attribute containing a 'SceneId.TokenId' mapping.\n     * See chat.ts#getTokenSceneId for further context.\n     *\n     *\n     * @param html\n     */\n    static getItemFromMessage(html): SR6Item | undefined {\n        if (!game || !game.scenes || !game.ready || !canvas || !canvas.ready || !canvas.scene) return;\n\n        const card = html.find('.chat-card');\n        let actor;\n        const sceneTokenId = card.data('tokenId');\n        if (sceneTokenId) actor = Helpers.getSceneTokenActor(sceneTokenId);\n        else actor = game.actors?.get(card.data('actorId'));\n\n        if (!actor) return;\n        const itemId = card.data('itemId');\n        return actor.items.get(itemId);\n    }\n\n    static getTargets() {\n        if (!game.ready || !game.user) return;\n        const { character } = game.user;\n        // @ts-expect-error\n        const { controlled } = canvas.tokens;\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\n        if (character && controlled.length === 0) targets.push(character);\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\n        return targets;\n    }\n\n    getActionTests(): ActionTestLabel[] {\n        if (!this.hasRoll) return []\n\n        return [{\n            label: this.getActionTestName(),\n            uuid: this.uuid\n        }];\n    }\n\n    getActionResult(): ActionResultData | undefined {\n        if (!this.isAction()) return;\n\n        return this.wrapper.getActionResult();\n    }\n\n    /**\n     * Create an item in this item\n     * @param itemData\n     * @param options\n     *\n     * //@ts-expect-error TODO: foundry-vtt-types v10 Rework method...\n     */\n    async createNestedItem(itemData, options = {}) {\n        if (!Array.isArray(itemData)) itemData = [itemData];\n        // weapons accept items\n        if (this.type === 'weapon') {\n            const currentItems = foundry.utils.duplicate(this.getNestedItems());\n\n            itemData.forEach((ogItem) => {\n                const item = foundry.utils.duplicate(ogItem);\n                item._id = randomID(16);\n                if (item.type === 'ammo' || item.type === 'modification') {\n                    if (item?.system?.technology?.equipped) {\n                        item.system.technology.equipped = false;\n                    }\n                    currentItems.push(item);\n                }\n            });\n\n            await this.setNestedItems(currentItems);\n        }\n        this.prepareNestedItems();\n        this.prepareData();\n        this.render(false);\n\n        return true;\n    }\n\n    /**\n     * Prepare embeddedItems\n     */\n    prepareNestedItems() {\n        this.items = this.items || [];\n\n        const items = this.getNestedItems();\n        if (!items) return;\n\n        // Reduce items to id:item HashMap style\n        const loaded = this.items.reduce((object, item) => {\n            object[item.id as string] = item;\n            return object;\n        }, {});\n\n        // Merge and overwrite existing owned items with new changes.\n        const tempItems = items.map((item) => {\n            // Set user permissions to owner, to allow none-GM users to edit their own nested items.\n            //@ts-expect-error v10\n            const data = game.user ? { ownership: { [game.user.id]: CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER } } :\n                {};\n            item = foundry.utils.mergeObject(item, data);\n\n            // Case: MODIFY => Update existing item.\n            if (item._id in loaded) {\n                const currentItem = loaded[item._id];\n\n                // Update DocumentData directly, since we're not really having database items here.\n                currentItem.updateSource(item);\n                currentItem.prepareData();\n                return currentItem;\n\n                // Case: CREATE => Create new item.\n            } else {\n                // NOTE: It's important to deliver the item as the item parent document, even though this is meant for actor owners.\n                //       The legacy approach for embeddedItems (within another item) relies upon this.actor\n                //       returning an SR6Item instance to call .updateEmbeddedEntities, while Foundry expects an actor\n                return new SR6Item(item, { parent: this as unknown as SR6Actor });\n            }\n        });\n\n        this.items = tempItems;\n    }\n\n    // TODO: Rework to either use custom embeddedCollection or Map\n    getOwnedItem(itemId): SR6Item | undefined {\n        const items = this.items;\n        if (!items) return;\n        return items.find((item) => item.id === itemId);\n    }\n\n    // TODO: Rework this method. It's complicated and obvious optimizations can be made. (find vs findIndex)\n    async updateNestedItems(changes) {\n        const items = foundry.utils.duplicate(this.getNestedItems());\n        if (!items) return;\n        changes = Array.isArray(changes) ? changes : [changes];\n        if (!changes || changes.length === 0) return;\n        changes.forEach((itemChanges) => {\n            const index = items.findIndex((i) => i._id === itemChanges._id);\n            if (index === -1) return;\n            const item = items[index];\n\n            // TODO: The _id field has been added by the system. Even so, don't change the id to avoid any byproducts.\n            delete itemChanges._id;\n\n            if (item) {\n                itemChanges = expandObject(itemChanges);\n                foundry.utils.mergeObject(item, itemChanges);\n                items[index] = item;\n                // this.items[index].data = items[index];\n            }\n        });\n\n        await this.setNestedItems(items);\n        this.prepareNestedItems();\n        this.prepareData();\n        this.render(false);\n        return true;\n    }\n\n    /**\n     * This method hooks into the Foundry Item.update approach and is called using this<Item>.actor.updateEmbeddedEntity.\n     *\n     * @param embeddedName\n     * @param data\n     * @param options\n     */\n    async updateEmbeddedEntity(embeddedName, data, options?): Promise<any> {\n        await this.updateNestedItems(data);\n        return this;\n    }\n\n    /**\n     * Remove an owned item\n     * @param deleted\n     * @returns {Promise<boolean>}\n     */\n    async deleteOwnedItem(deleted) {\n        const items = foundry.utils.duplicate(this.getNestedItems());\n        if (!items) return;\n\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\n        if (idx === -1) throw new Error(`SR6: Elysium | Couldn't find owned item ${deleted}`);\n        items.splice(idx, 1);\n        // we need to clear the items when one is deleted or it won't actually be deleted\n        await this.clearNestedItems();\n        await this.setNestedItems(items);\n        await this.prepareNestedItems();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    /**\n     * Use the items source field and try different means of opening it.\n     */\n    async openSource() {\n        const source = this.getSource();\n        await LinksHelpers.openSource(source);\n    }\n\n    get sourceIsUrl(): boolean {\n        const source = this.getSource();\n        return LinksHelpers.isURL(source);\n    }\n\n    get sourceIsPDF(): boolean {\n        const source = this.getSource();\n        return LinksHelpers.isPDF(source);\n    }\n\n    get sourceIsUuid(): boolean {\n        const source = this.getSource();\n        return LinksHelpers.isUuid(source);\n    }\n\n    _canDealDamage(): boolean {\n        // NOTE: Double negation to force boolean comparison casting.\n        const action = this.getAction();\n        if (!action) return false;\n        return !!action.damage.type.base;\n    }\n\n    getAction(): ActionRollData | undefined {\n        return this.wrapper.getAction();\n    }\n\n    getExtended(): boolean {\n        const action = this.getAction();\n        if (!action) return false;\n        return action.extended;\n    }\n\n    getTechnologyData(): TechnologyData | undefined {\n        return this.wrapper.getTechnology();\n    }\n\n    getNetworkController(): string | undefined {\n        return this.getTechnologyData()?.networkController;\n    }\n\n    async setNetworkController(networkController: string | undefined): Promise<void> {\n        await this.update({ 'system.technology.networkController': networkController });\n    }\n\n    getRange(): CritterPowerRange | SpellRange | RangeWeaponData | undefined {\n        return this.wrapper.getRange();\n    }\n\n    getWeaponRange(): RangeWeaponData | undefined {\n        if (this.isRangedWeapon)\n            return this.getRange() as RangeWeaponData;\n    }\n\n    getRollName(): string {\n        if (this.isRangedWeapon) {\n            return game.i18n.localize('SR6.RangeWeaponAttack');\n        }\n        if (this.isMeleeWeapon) {\n            return game.i18n.localize('SR6.MeleeWeaponAttack');\n        }\n        if (this.isCombatSpell) {\n            return game.i18n.localize('SR6.Spell.Attack');\n        }\n        if (this.isSpell) {\n            return game.i18n.localize('SR6.Spell.Cast');\n        }\n        if (this.hasRoll) {\n            return this.name as string;\n        }\n\n        return DEFAULT_ROLL_NAME;\n    }\n\n    /**\n     * An attack with this weapon will create an area of effect / blast.\n     *\n     * There is a multitude of possibilities as to HOW an item can create an AoE,\n     * both directly connected to the item and / or some of it's nested items.\n     *\n     */\n    get isAreaOfEffect(): boolean {\n        return this.wrapper.isAreaOfEffect() || this.hasExplosiveAmmo;\n    }\n\n    get isArmor(): boolean {\n        return this.wrapper.isArmor();\n    }\n\n    get asArmor(): ArmorItemData | undefined {\n        if (this.isArmor) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as ArmorItemData;\n        }\n    }\n\n    get hasArmorBase(): boolean {\n        return this.wrapper.hasArmorBase();\n    }\n\n    get hasArmorAccessory(): boolean {\n        return this.wrapper.hasArmorAccessory();\n    }\n\n    get hasArmor(): boolean {\n        return this.wrapper.hasArmor();\n    }\n\n    get isGrenade(): boolean {\n        return this.wrapper.isGrenade();\n    }\n\n    get isWeapon(): boolean {\n        return this.wrapper.isWeapon();\n    }\n\n    get asWeapon(): WeaponItemData | undefined {\n        if (this.isWeapon) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as WeaponItemData;\n        }\n    }\n\n    get isRangedWeapon(): boolean {\n        return this.wrapper.isRangedWeapon();\n    }\n\n    get isMeleeWeapon(): boolean {\n        return this.wrapper.isMeleeWeapon();\n    }\n\n    get isCyberware(): boolean {\n        return this.wrapper.isCyberware();\n    }\n\n    get asCyberware(): CyberwareItemData | undefined {\n        if (this.isCyberware) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as CyberwareItemData;\n        }\n    }\n\n    get isCombatSpell(): boolean {\n        return this.wrapper.isCombatSpell();\n    }\n\n    get isDirectCombatSpell(): boolean {\n        return this.wrapper.isDirectCombatSpell();\n    }\n\n    get isIndirectCombatSpell(): boolean {\n        return this.wrapper.isIndirectCombatSpell();\n    }\n\n    get isManaSpell(): boolean {\n        return this.wrapper.isManaSpell();\n    }\n\n    get isPhysicalSpell(): boolean {\n        return this.wrapper.isPhysicalSpell();\n    }\n\n    get isSpell(): boolean {\n        return this.wrapper.isSpell();\n    }\n\n    get isUsingRangeCategory(): boolean {\n        return this.wrapper.isUsingRangeCategory();\n    }\n\n    get asSpell(): SpellItemData | undefined {\n        if (this.isSpell) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as SpellItemData;\n        }\n    }\n\n    get isCallInAction(): boolean {\n        return this.type === 'call_in_action';\n    }\n\n    get asCallInAction(): Shadowrun.CallInActionItemData | undefined {\n        if (this.isCallInAction) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as Shadowrun.CallInActionItemData;\n        }\n    }\n\n    get isSummoning(): boolean {\n        //@ts-expect-error\n        return this.type === 'call_in_action' && this.system.actor_type === 'spirit';\n    }\n\n    get isCompilation(): boolean {\n        //@ts-expect-error\n        return this.type === 'call_in_action' && this.system.actor_type === 'sprite';\n    }\n\n    get isSpritePower(): boolean {\n        return this.wrapper.isSpritePower();\n    }\n\n    get asSpritePower(): SpritePowerItemData | undefined {\n        if (this.isSpritePower) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as SpritePowerItemData;\n        }\n    }\n\n    get isBioware(): boolean {\n        return this.wrapper.isBioware();\n    }\n\n    get isComplexForm(): boolean {\n        return this.wrapper.isComplexForm();\n    }\n\n    get asComplexForm(): ComplexFormItemData | undefined {\n        if (this.isComplexForm) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as ComplexFormItemData;\n        }\n    }\n\n    get isContact(): boolean {\n        return this.wrapper.isContact();\n    }\n\n    get asContact(): ContactItemData | undefined {\n        if (this.isContact) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as ContactItemData;\n        }\n    }\n\n    /**\n    * Retrieve the actor document linked to this item.\n    * e.g.: Contact items provide linked actors\n    */\n    async getLinkedActor(): Promise<SR6Actor | undefined> {\n        const uuid = this.wrapper.getLinkedActorUuid();\n\n        // @ts-expect-error // parseUuid is not defined in the @league-of-foundry-developers/foundry-vtt-types package\n        if (uuid && this.asContact && foundry.utils.parseUuid(uuid).documentType === 'Actor') {\n            return await fromUuid(uuid) as SR6Actor;\n        }\n    }\n\n    get isCritterPower(): boolean {\n        return this.wrapper.isCritterPower();\n    }\n\n    get asCritterPower(): CritterPowerItemData | undefined {\n        if (this.isCritterPower) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as CritterPowerItemData;\n        }\n    }\n\n    get isDevice(): boolean {\n        return this.wrapper.isDevice();\n    }\n\n    get asDevice(): DeviceItemData | undefined {\n        if (this.isDevice) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as DeviceItemData;\n        }\n    }\n\n    asController(): HostItemData | DeviceItemData | undefined {\n        return this.asHost || this.asDevice || undefined;\n    }\n\n    isEquipment(): boolean {\n        return this.wrapper.isEquipment();\n    }\n\n    get asEquipment(): EquipmentItemData | undefined {\n        if (this.isEquipment()) {\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            return this as EquipmentItemData;\n        }\n    }\n\n    isEquipped(): boolean {\n        return this.wrapper.isEquipped();\n    }\n\n    isWireless(): boolean {\n        return this.wrapper.isWireless();\n    }\n\n    isCyberdeck(): boolean {\n        return this.wrapper.isCyberdeck();\n    }\n\n    isRCC(): boolean {\n        return this.wrapper.isRCC();\n    }\n\n    isCommlink(): boolean {\n        return this.wrapper.isCommlink();\n    }\n\n    isMatrixAction(): boolean {\n        return this.wrapper.isMatrixAction();\n    }\n\n    getSource(): string {\n        return this.wrapper.getSource();\n    }\n\n    setSource(source: string) {\n        if (!this.system.description) this.system.description = { chat: '', source: '', value: '' };\n        this.update({ 'system.description.source': source });\n        this.render(true);\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.wrapper.getConditionMonitor();\n    }\n\n    getRating(): number {\n        return this.wrapper.getRating();\n    }\n\n    getArmorValue(): number {\n        return this.wrapper.getArmorValue();\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        return this.wrapper.getArmorElements();\n    }\n\n    getEssenceLoss(): number {\n        return this.wrapper.getEssenceLoss();\n    }\n\n    getASDF() {\n        return this.wrapper.getASDF();\n    }\n\n    getActionSkill(): string | undefined {\n        return this.wrapper.getActionSkill();\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.wrapper.getActionAttribute();\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.wrapper.getActionAttribute2();\n    }\n\n    getModifierList(): ModList<number> {\n        return this.wrapper.getModifierList();\n    }\n\n    getActionSpecialization(): string | undefined {\n        return this.wrapper.getActionSpecialization();\n    }\n\n    get getDrain(): number {\n        return this.wrapper.getDrain();\n    }\n\n    getFade(): number {\n        return this.wrapper.getFade();\n    }\n\n    /**\n     * Amount of current recoil left after recoil compensation.\n     */\n    get unhandledRecoil(): number {\n        if (!this.isRangedWeapon) return 0;\n        return Math.max(this.actor.recoil - this.totalRecoilCompensation, 0);\n    }\n\n    /**\n     * Amount of recoil compensation configured via weapon system data.\n     */\n    get recoilCompensation(): number {\n        if (!this.isRangedWeapon) return 0;\n        return this.wrapper.getRecoilCompensation();\n    }\n\n    /**\n     * Amount of recoil compensation totally available when using weapon\n     *\n     * This includes both actor and item recoil compensation.\n     */\n    get totalRecoilCompensation(): number {\n        if (!this.isRangedWeapon) return 0;\n        return RangedWeaponRules.recoilCompensation(this);\n    }\n\n    /**\n     * Current TOTAL recoil compensation with current recoil included.\n     *\n     * This includes both the items and it's parent actors recoil compensation and total progressive recoil.\n     *\n     * @returns A positive number or zero.\n     */\n    get currentRecoilCompensation(): number {\n        if (!this.actor || !this.isRangedWeapon) return 0;\n        return Math.max(this.totalRecoilCompensation - this.actor.recoil, 0);\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon) {\n            const system = this.system as WeaponData;\n            return system.melee.reach ?? 0;\n        }\n        return 0;\n    }\n\n    /**\n     * Determine if a melee weapon uses agility instead of strength\n     * @returns True if the weapon uses agility, false if it uses strength\n     */\n    usesAgility(): boolean {\n        if (!this.isMeleeWeapon) return false;\n\n        // Check if the weapon has a specific attribute set\n        const system = this.system as WeaponData;\n        if (system.melee.attribute === 'agility') return true;\n\n        // Default to strength for melee weapons\n        return false;\n    }\n\n    getCondition(): ConditionData | undefined {\n        const technology = this.getTechnologyData();\n        if (technology && \"condition_monitor\" in technology)\n            return technology.condition_monitor;\n    }\n\n    hasOpposedTest(): boolean {\n        if (!this.hasOpposedRoll) return false;\n        const action = this.getAction();\n        if (!action) return false;\n        return action.opposed.test !== '';\n    }\n\n    /**\n     * A host type item can store IC actors to spawn in order, use this method to add into that.\n     * @param id An IC type actor id to fetch the actor with.\n     * @param pack Optional pack collection to fetch from\n     */\n    async addIC(id: string, pack: string | null = null) {\n        const host = this.asHost;\n        if (!host || !id) return;\n\n        // Check if actor exists before adding.\n        const actor = (pack ? await Helpers.getEntityFromCollection(pack, id) : game.actors?.get(id)) as SR6Actor;\n        if (!actor || !actor.isIC()) {\n            console.error(`Provided actor id ${id} doesn't exist (with pack collection '${pack}') or isn't an IC type`);\n            return;\n        }\n\n        const icData = actor.asIC();\n        if (!icData) return;\n\n        // Add IC to the hosts IC order\n        const sourceEntity = DataDefaults.sourceItemData({\n            id: actor.id as string,\n            name: actor.name as string,\n            type: 'Actor',\n            pack,\n            // Custom fields for IC\n            // @ts-expect-error foundry-vtt\n            system: { icType: icData.system.icType },\n        });\n        host.system.ic.push(sourceEntity);\n\n        await this.update({ 'system.ic': host.system.ic });\n    }\n\n    /**\n     * A host type item can contain IC in an order. Use this function remove IC at the said position\n     * @param index The position in the IC order to be removed\n     */\n    async removeIC(index: number) {\n        if (isNaN(index) || index < 0) return;\n\n        const host = this.asHost;\n        if (!host) return;\n        if (host.system.ic.length <= index) return;\n\n        host.system.ic.splice(index, 1);\n\n        await this.update({ 'system.ic': host.system.ic });\n    }\n\n    get _isNestedItem(): boolean {\n        return this.hasOwnProperty('parent') && this.parent instanceof SR6Item;\n    }\n\n    /**\n     * Hook into the Item.update process for embedded items.\n     *\n     * @param data changes made to the SR5ItemData\n     */\n    async updateNestedItem(data): Promise<this> {\n        if (!this.parent || this.parent instanceof SR6Actor) return this;\n        // Inform the parent item about changes to one of it's embedded items.\n        // TODO: updateOwnedItem needs the id of the update item. hand the item itself over, to the hack within updateOwnedItem for this.\n        data._id = this.id;\n\n        // Shadowrun Items can contain other items, while Foundry Items can't. Use the system local implementation for items.\n        // @ts-expect-error\n        await this.parent.updateNestedItems(data);\n\n        // After updating all item embedded data, rerender the sheet to trigger the whole rerender workflow.\n        // Otherwise changes in the template of an hiddenItem will show for some fields, while not rerendering all\n        // #if statements (hidden fields for other values, won't show)\n        await this.sheet?.render(false);\n\n        return this;\n    }\n\n    override async update(data, options?): Promise<this> {\n        // Item.item => Embedded item into another item!\n        if (this._isNestedItem) {\n            return this.updateNestedItem(data);\n        }\n\n        // Actor.item => Directly owned item by an actor!\n        // @ts-expect-error\n        return await super.update(data, options);\n    }\n\n    /**\n     * Place a Matrix Mark for this Item.\n     *\n     * @param target The Document the marks are placed on. This can be an actor (character, technomancer, IC) OR an item (Host)\n     * @param marks Amount of marks to be placed.\n     * @param options Additional options that may be needed.\n     * @param options.scene The scene the targeted actor lives on.\n     * @param options.item\n     *\n     * TODO: It might be useful to create a 'MatrixDocument' class sharing matrix methods to avoid duplication between\n     *       SR6Item and SR6Actor.\n     */\n    async setMarks(target: Token, marks: number, options?: { scene?: Scene, item?: Item, overwrite?: boolean }) {\n        if (!canvas.ready) return;\n\n        if (!this.isHost) {\n            console.error('Only Host item types can place matrix marks!');\n            return;\n        }\n\n        // Both scene and item are optional.\n        const scene = options?.scene || canvas.scene as Scene;\n        const item = options?.item;\n\n        // Build the markId string. If no item has been given, there still will be a third split element.\n        // Use Helpers.deconstructMarkId to get the elements.\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\n        const host = this.asHost;\n\n        if (!host) return;\n\n        const currentMarks = options?.overwrite ? 0 : this.getMarksById(markId);\n        host.system.marks[markId] = MatrixRules.getValidMarksCount(currentMarks + marks);\n\n        await this.update({ 'system.marks': host.system.marks });\n    }\n\n    getMarksById(markId: string): number {\n        const host = this.asHost;\n        return host ? host.system.marks[markId] : 0;\n    }\n\n    getAllMarks(): MatrixMarks | undefined {\n        const host = this.asHost;\n        if (!host) return;\n        return host.system.marks;\n    }\n\n    /**\n     * Receive the marks placed on either the given target as a whole or one it's owned items.\n     *\n     * @param target\n     * @param item\n     * @param options\n     *\n     * TODO: Check with technomancers....\n     *\n     * @return Will always return a number. At least zero, for no marks placed.\n     */\n    getMarks(target: SR6Actor, item?: SR6Item, options?: { scene?: Scene }): number {\n        if (!canvas.ready) return 0;\n        if (!this.isHost) return 0;\n\n        // Scene is optional.\n        const scene = options?.scene || canvas.scene as Scene;\n        item = item || target.getMatrixDevice();\n\n        const markId = Helpers.buildMarkId(scene.id as string, target.id as string, item?.id as string);\n        const host = this.asHost;\n\n        if (!host) return 0\n\n        return host.system.marks[markId] || 0;\n    }\n\n    /**\n     * Remove ALL marks placed by this item.\n     *\n     * TODO: Allow partial deletion based on target / item\n     */\n    async clearMarks() {\n        if (!this.isHost) return;\n\n        const host = this.asHost;\n\n        if (!host) return;\n\n        // Delete all markId properties from ActorData\n        const updateData = {}\n        for (const markId of Object.keys(host.system.marks)) {\n            updateData[`-=${markId}`] = null;\n        }\n\n        await this.update({ 'system.marks': updateData });\n    }\n\n    /**\n     * Remove ONE mark. If you want to delete all marks, use clearMarks instead.\n     */\n    async clearMark(markId: string) {\n        if (!this.isHost) return;\n\n        const updateData = {}\n        updateData[`-=${markId}`] = null;\n\n        await this.update({ 'system.marks': updateData });\n    }\n\n    /**\n     * Configure the given matrix item to be controlled by this item in a PAN/WAN.\n     * @param target The matrix item to be connected.\n     */\n    async addNetworkDevice(target: SR6Item | SR6Actor) {\n        // TODO: Add device to WAN network\n        // TODO: Add IC actor to WAN network\n        // TODO: setup networkController link on networked devices.\n        await NetworkDeviceFlow.addDeviceToNetwork(this, target);\n    }\n\n    /**\n     * Alias method for addNetworkDevice, both do the same.\n     * @param target\n     */\n    async addNetworkController(target: SR6Item) {\n        await this.addNetworkDevice(target);\n    }\n\n    async removeNetworkDevice(index: number) {\n        const controllerData = this.asController();\n        if (!controllerData) return;\n\n        // Convert the index to a device link.\n        if (controllerData.system.networkDevices[index] === undefined) return;\n        const networkDeviceLink = controllerData.system.networkDevices[index];\n        const controller = this;\n        return await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, networkDeviceLink);\n    }\n\n    async removeAllNetworkDevices() {\n        const controllerData = this.asController();\n        if (!controllerData) return;\n\n        return await NetworkDeviceFlow.removeAllDevicesFromNetwork(this);\n    }\n\n    getAllMarkedDocuments(): Shadowrun.MarkedDocument[] {\n        if (!this.isHost) return [];\n\n        const marks = this.getAllMarks();\n        if (!marks) return [];\n\n        // Deconstruct all mark ids into documents.\n        // @ts-expect-error\n        return Object.entries(marks)\n            .filter(([markId, marks]) => Helpers.isValidMarkId(markId))\n            .map(([markId, marks]) => ({\n                ...Helpers.getMarkIdDocuments(markId),\n                marks,\n                markId\n            }))\n    }\n\n    /**\n     * Return the network controller item when connected to a PAN or WAN.\n     */\n    async networkController() {\n        const technologyData = this.getTechnologyData();\n        if (!technologyData) return;\n        if (!technologyData.networkController) return;\n\n        return await NetworkDeviceFlow.resolveLink(technologyData.networkController) as SR6Item;\n    }\n\n    /**\n     * Return all network device items within a possible PAN or WAN.\n     */\n    async networkDevices() {\n        const controller = this.asDevice || this.asHost;\n        if (!controller) return [];\n\n        return NetworkDeviceFlow.getNetworkDevices(this);\n    }\n\n    /**\n     * Only devices can control a network.\n     */\n    get canBeNetworkController(): boolean {\n        return this.isDevice || this.isHost;\n    }\n\n    /**\n     * Assume all items with that are technology (therefore have a rating) are active matrix devices.\n     */\n    get canBeNetworkDevice(): boolean {\n        const technologyData = this.getTechnologyData();\n        return !!technologyData;\n    }\n\n    /**\n     * Disconnect any kind of item from a PAN or WAN.\n     */\n    async disconnectFromNetwork() {\n        if (this.canBeNetworkController) await NetworkDeviceFlow.removeAllDevicesFromNetwork(this);\n        if (this.canBeNetworkDevice) await NetworkDeviceFlow.removeDeviceFromController(this);\n    }\n\n    override async _onCreate(changed, options, user) {\n        const applyData = {};\n        UpdateActionFlow.injectActionTestsIntoChangeData(this.type, changed, applyData, this);\n        await super._preCreate(changed, options, user);\n\n        // Don't kill DocumentData by applying empty objects. Also performance.\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        if (!foundry.utils.isEmpty(applyData)) await this.update(applyData);\n    }\n\n    /**\n     * Make sure all item data is in a persistent and valid status.\n     *\n     * This is preferred to altering data on the fly in the prepareData methods flow.\n     */\n    override async _preUpdate(changed, options: DocumentModificationOptions, user: User) {\n        // Some Foundry core updates will no diff and just replace everything. This doesn't match with the\n        // differential approach of action test injection. (NOTE: Changing ownership of a document)\n        if (options.diff !== false && options.recursive !== false) {\n            // Change used action test implementation when necessary.\n            UpdateActionFlow.injectActionTestsIntoChangeData(this.type, changed, changed, this);\n            UpdateActionFlow.onUpdateAlterActionData(changed, this);\n        }\n\n        await super._preUpdate(changed, options, user);\n    }\n\n    /**\n     * Get the current range category and modifier for a weapon\n     */\n    getRangeData(): Shadowrun.RangeDescription | undefined {\n        if (!this.isRangedWeapon) return;\n\n        const system = (this.system as unknown) as WeaponItemData['system'];\n        const distance = system.range.current;\n        return WeaponRangeRules.getTargetRangeDescription(distance);\n    }\n\n    /**\n     * Update the weapon's range data based on a target distance\n     */\n    async updateRangeForDistance(distance: number) {\n        if (!this.isRangedWeapon) return;\n\n        const rangeData = WeaponRangeRules.getTargetRangeDescription(distance);\n        await this.update({\n            'system.range.current': distance,\n            'system.range.category': rangeData.category,\n            'system.range.modifier': rangeData.modifier\n        });\n    }\n}\n", "import MagicActorData = Shadowrun.MagicActorData;\nimport MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class InitiativePrep {\n    /**\n     * Current initiative is the selected initiative to be used within FoundryVTT Combat.\n     *\n     */\n    static prepareCurrentInitiative(system: ActorTypesData) {\n        const { initiative } = system;\n\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\n        else {\n            initiative.current = initiative.meatspace;\n            initiative.perception = 'meatspace';\n        }\n\n        // Recalculate selected initiative to be sure.\n        initiative.current.base.value = Helpers.calcTotal(initiative.current.base);\n\n        // Apply edge ini rules.\n        initiative.current.dice.value = Helpers.calcTotal(initiative.current.dice, {min: 0, max: 5});\n        if (initiative.edge) initiative.current.dice.value = 5;\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\n\n        // Calculate available actions based on initiative dice\n        InitiativePrep.calculateAvailableActions(initiative);\n    }\n\n    /**\n     * Calculate available actions based on initiative dice\n     * Every character starts with one major and one minor action\n     * They gain an additional minor action for each die in their initiative roll\n     */\n    static calculateAvailableActions(initiative: Shadowrun.Initiative) {\n        // Initialize actions if not already present\n        if (!initiative.actions) {\n            initiative.actions = {\n                major: 1,\n                minor: 1,\n                free: 1\n            };\n        }\n\n        // Only calculate actions if they haven't been initialized yet\n        // This allows the resetActions method to take precedence\n        // We check if the actions object exists but is empty (undefined values)\n        if (initiative.actions.major === undefined || initiative.actions.minor === undefined || initiative.actions.free === undefined) {\n            // Every character starts with one major and one minor action\n            initiative.actions.major = 1;\n\n            // They gain an additional minor action for each die in their initiative roll\n            // Start with 1 minor action and add one for each initiative die\n            initiative.actions.minor = 1 + initiative.current.dice.value;\n\n            // Free actions are unlimited\n            initiative.actions.free = '\u221E';\n\n            console.log(`Shadowrun 6e | Initialized actions for character: Major: ${initiative.actions.major}, Minor: ${initiative.actions.minor}, Free: ${initiative.actions.free}`);\n        }\n    }\n\n    /**\n     * Physical initiative\n     */\n    static prepareMeatspaceInit(system: ActorTypesData) {\n        const { initiative, attributes, modifiers } = system;\n\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value;\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative']));\n        initiative.meatspace.base.value = Helpers.calcTotal(initiative.meatspace.base);\n\n        initiative.meatspace.dice.base = 1;\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative_dice']));\n        initiative.meatspace.dice.value = Helpers.calcTotal(initiative.meatspace.dice, {min: 0, max: 5});\n    }\n\n    static prepareAstralInit(system: ActorTypesData & MagicActorData) {\n        const { initiative, attributes, modifiers } = system;\n\n        initiative.astral.base.base = attributes.intuition.value * 2;\n        initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR6.Bonus\", Number(modifiers['astral_initiative']));\n        initiative.astral.base.value = Helpers.calcTotal(initiative.astral.base);\n\n        initiative.astral.dice.base = 2;\n        initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR6.Bonus\", Number(modifiers['astral_initiative_dice']));\n        initiative.astral.dice.value = Helpers.calcTotal(initiative.astral.dice, {min: 0, max: 5});\n    }\n\n    static prepareMatrixInit(system: ActorTypesData & MatrixActorData) {\n        const { initiative, attributes, modifiers, matrix } = system;\n        if (matrix) {\n\n            initiative.matrix.base.base = attributes.intuition.value + system.matrix.data_processing.value;\n            initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR6.Bonus\", Number(modifiers['matrix_initiative']));\n            initiative.matrix.base.value = Helpers.calcTotal(initiative.matrix.base);\n\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3);\n            initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR6.Bonus\", Number(modifiers['matrix_initiative_dice']));\n            initiative.matrix.dice.value = Helpers.calcTotal(initiative.matrix.dice, {min: 0, max: 5});\n        }\n    }\n}\n", "import ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport ShadowrunActorDataData = Shadowrun.ShadowrunActorDataData;\nimport {SR6} from \"../../../config\";\nimport CharacterData = Shadowrun.CharacterData;\nimport CritterData = Shadowrun.CritterData;\nimport SpiritData = Shadowrun.SpiritData;\nimport VehicleData = Shadowrun.VehicleData;\n\nexport class ModifiersPrep {\n    /**\n     * Prepare the modifiers that are displayed in the Misc. tab\n     *\n     * NOTE: Currently these aren't controlled by the Foundry template. But ONLY here.\n     *       Therefore adding a modifier to an actor DataModel happens here and during Actor#prepareData\n     */\n    static prepareModifiers(system: ActorTypesData) {\n        let modifiers = ModifiersPrep.commonModifiers as string[];\n        modifiers = modifiers.concat(ModifiersPrep.matrixModifiers);\n        modifiers = modifiers.concat(ModifiersPrep.characterModifiers);\n\n        ModifiersPrep.setupModifiers(system, modifiers);\n    }\n\n    /**\n     * Modifiers that appear on all actor types.\n     */\n    static get commonModifiers(): (keyof Shadowrun.CommonModifiers)[] {\n        return [\n            'defense',\n            'defense_dodge',\n            'defense_block',\n            'defense_parry',\n            'defense_melee',\n            'defense_ranged',\n            'soak'\n        ];\n    }\n\n    /**\n     * Modifiers that appear on all character actors.\n     */\n    static get characterModifiers(): (keyof Shadowrun.CharacterModifiers)[] {\n        return [\n            'drain',\n            'armor',\n            'physical_limit',\n            'social_limit',\n            'mental_limit',\n            'astral_limit',\n            'stun_track',\n            'physical_track',\n            'physical_overflow_track',\n            'meat_initiative',\n            'meat_initiative_dice',\n            'astral_initiative',\n            'astral_initiative_dice',\n            'composure',\n            'lift_carry',\n            'judge_intentions',\n            'memory',\n            'walk',\n            'run',\n            'wound_tolerance',\n            'pain_tolerance_stun',\n            'pain_tolerance_physical',\n            'essence',\n            'fade',\n            'multi_defense',\n            'reach'\n        ];\n    }\n\n    /**\n     * Modifiers that appear on all matrix actor types.\n     */\n    static get matrixModifiers(): (keyof Shadowrun.MatrixModifiers)[] {\n        return [\n            'matrix_initiative',\n            'matrix_initiative_dice',\n            'matrix_track'\n        ]\n    }\n\n    static setupModifiers(system: ShadowrunActorDataData, modifiers: string[]) {\n        if (!system.modifiers) {\n            system.modifiers = {};\n        }\n\n        modifiers.sort();\n        // add and force global to the top\n        modifiers.unshift('global');\n\n        // Prepare sorted modifiers and merge with existing values when set.\n        // Unset modifier values will be null or not exist at all.\n        const sorted = {};\n        for (const modifier of modifiers) {\n            sorted[modifier] = Number(system.modifiers[modifier]) || 0;\n        }\n\n        system.modifiers = sorted;\n    }\n\n    static clearAttributeMods(system: ShadowrunActorDataData) {\n        const { attributes } = system;\n        for (const [name, attribute] of Object.entries(attributes)) {\n            // Check for valid attributes. Active Effects can cause unexpected properties to appear.\n            if (!SR6.attributes.hasOwnProperty(name) || !attribute) return;\n\n            attribute.mod = [];\n        }\n    }\n\n    static clearArmorMods(system: CharacterData|CritterData|SpiritData|VehicleData) {\n        const {armor} = system;\n\n        armor.mod = [];\n    }\n\n    static clearLimitMods(system: ShadowrunActorDataData) {\n        const {limits} = system;\n        for (const [name, limit] of Object.entries(limits)) {\n            if (!SR6.limits.hasOwnProperty(name) || !limit) return;\n\n            limit.mod = [];\n        }\n    }\n\n    /**\n     * Clear out modifierse from all calculate values, no matter where from and what.\n     *\n     * This is necessary to avoid items and naive modifications doubling up shoudl they be\n     * saved with update calls\n     *\n     */\n    static clearValueMods(system: ShadowrunActorDataData) {\n        for (const [name, values] of Object.entries(system.values)) {\n            values.mod = [];\n        }\n    }\n}\n", "import { SR6ItemDataWrapper } from '../../../data/SR6ItemDataWrapper';\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport ArmorActorData = Shadowrun.ArmorActorData;\nimport {SR6} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class ItemPrep {\n    /**\n     * Prepare the armor data for the Item\n     * - will only allow one \"Base\" armor item to be used (automatically takes the best one if multiple are equipped)\n     * - all \"accessories\" will be added to the armor\n     */\n    static prepareArmor(system: ActorTypesData & ArmorActorData, items: SR6ItemDataWrapper[]) {\n        const { armor } = system;\n\n        // Initialize defense rating\n        armor.defense_rating.base = 0;\n        armor.defense_rating.value = 0;\n\n        const parts = new PartsList(armor.mod);\n        const defenseRatingParts = new PartsList(armor.defense_rating.mod);\n        const equippedArmor = items.filter((item) => item.couldHaveArmor() && item.isEquipped());\n\n        console.log('Shadowrun 6e | Armor Preparation:', {\n            equippedArmorItems: equippedArmor.map(item => ({\n                name: item.getName(),\n                baseDR: item.getBaseDefenseRating(),\n                totalDR: item.getDefenseRating()\n            })),\n            initialArmor: foundry.utils.duplicate(armor)\n        });\n\n        // Calculate base DR from equipped armor\n        equippedArmor?.forEach((item) => {\n            // Set the base DR from the highest armor value\n            const itemBaseDefenseRating = item.getBaseDefenseRating();\n            if (itemBaseDefenseRating > armor.defense_rating.base) {\n                armor.defense_rating.base = itemBaseDefenseRating;\n            }\n\n            // Add any DR modifiers from the item\n            defenseRatingParts.addPart(item.getName(), item.getDefenseRating() - itemBaseDefenseRating);\n\n            // Apply elemental modifiers\n            for (const element of Object.keys(SR6.elementTypes)) {\n                armor[element] += item.getArmorElements()[element];\n            }\n        });\n\n        // Calculate total DR including modifiers\n        armor.defense_rating.value = Helpers.calcTotal(armor.defense_rating);\n\n        console.log('Shadowrun 6e | After Armor Preparation:', {\n            finalArmor: foundry.utils.duplicate(armor),\n            defenseRatingParts: defenseRatingParts\n        });\n    }\n    /**\n     * Apply all changes to an actor by their 'ware items.\n     *\n     * Modify essence by items essence loss\n     */\n    static prepareWareEssenceLoss(system: ActorTypesData, items: SR6ItemDataWrapper[]) {\n        const parts = new PartsList<number>(system.attributes.essence.mod);\n\n        items\n            .filter((item) => item.isBodyware() && item.isEquipped())\n            .forEach((item) => {\n                if (item.getEssenceLoss()) {\n                    parts.addPart(item.getName(), -item.getEssenceLoss());\n                }\n            });\n\n        system.attributes.essence.mod = parts.list;\n    }\n\n    static prepareWeapons(system: Shadowrun.CharacterData, items: SR6ItemDataWrapper[]) {\n\n    }\n}\n", "import { Helpers } from '../../../helpers';\nimport {SR} from \"../../../constants\";\nimport {SR6} from \"../../../config\";\nimport AttributeField = Shadowrun.AttributeField;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport { PartsList } from '../../../parts/PartsList';\nimport { SR6ItemDataWrapper } from '../../../data/SR6ItemDataWrapper';\nimport { ItemPrep } from './ItemPrep';\n\nexport class AttributesPrep {\n    /**\n     * Prepare actor data for attributes\n     */\n    static prepareAttributes(system: ActorTypesData, ranges?: Record<string, {min: number, max?: number}>) {\n        const {attributes} = system;\n\n        // always have special attributes set to hidden\n        attributes.magic.hidden = true;\n        attributes.resonance.hidden = true;\n        attributes.edge.hidden = true;\n        attributes.essence.hidden = true;\n\n        // set the value for the attributes\n        for (let [name, attribute] of Object.entries(attributes)) {\n            // don't manage the attribute if it is using the old method of edge tracking\n            // needed to be able to migrate things correctly\n            if (name === 'edge' && attribute['uses'] === undefined) return;\n\n            AttributesPrep.prepareAttribute(name, attribute, ranges)\n        }\n    }\n\n    /**\n     * Prepare one single AttributeField\n     * @param name The key field (and name) of the attribute given\n     * @param attribute The AttributeField to prepare\n     */\n    static prepareAttribute(name: string, attribute: AttributeField, ranges?: Record<string, {min: number, max?: number}>) {\n        // Check for valid attributes. Active Effects can cause unexpected properties to appear.\n        if (!SR6.attributes.hasOwnProperty(name) || !attribute) return;\n\n        // Each attribute can have a unique value range.\n        // TODO:  Implement metatype attribute value ranges for character actors.\n        AttributesPrep.calculateAttribute(name, attribute, ranges);\n\n        // add i18n labels.\n        attribute.label = SR6.attributes[name];\n    }\n\n    /**\n     * Calculate a single attributes value with all it's ranges and rules applied.\n     *\n     * @param name The attributes name / id\n     * @param attribute The attribute will be modified in place\n     */\n    static calculateAttribute(name: string, attribute: AttributeField, ranges?: Record<string, {min: number, max?: number}>) {\n        // Check for valid attributes. Active Effects can cause unexpected properties to appear.\n        if (!SR6.attributes.hasOwnProperty(name) || !attribute) return;\n\n        // Each attribute can have a unique value range.\n        // TODO:  Implement metatype attribute value ranges for character actors.\n        const range = ranges ? ranges[name] : SR.attributes.ranges[name];\n        Helpers.calcTotal(attribute, range);\n    }\n\n    /**\n     * Calculate the Essence attribute and it's modifiers.\n     *\n     * @param system A system actor having an essence attribute\n     * @param items The items that might cause an essence loss.\n     */\n    static prepareEssence(system: ActorTypesData, items: SR6ItemDataWrapper[]) {\n        // The essence base is fixed. Changes should be made through the attribute.temp field.\n        system.attributes.essence.base = SR.attributes.defaults.essence;\n\n        // Modify essence by actor modifer\n        const parts = new PartsList<number>(system.attributes.essence.mod);\n\n        const essenceMod = system.modifiers['essence'];\n        if (essenceMod && !Number.isNaN(essenceMod)) {\n            parts.addUniquePart('SR6.Bonus', Number(essenceMod));\n        }\n\n        system.attributes.essence.mod = parts.list;\n\n        ItemPrep.prepareWareEssenceLoss(system, items);\n\n        system.attributes.essence.value = Helpers.calcTotal(system.attributes.essence);\n    }\n}\n", "import MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { SR6ItemDataWrapper } from '../../../data/SR6ItemDataWrapper';\nimport { PartsList } from '../../../parts/PartsList';\nimport {SR6} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport CommonData = Shadowrun.CommonData;\nimport {AttributesPrep} from \"./AttributesPrep\";\n\nexport class MatrixPrep {\n    /**\n     * Prepare Matrix data on the actor\n     * - if an item is equipped, it will use that data\n     * - if it isn't and player is technomancer, it will use that data\n     */\n    static prepareMatrix(system: ActorTypesData & MatrixActorData, items: SR6ItemDataWrapper[]) {\n        const { matrix, attributes, modifiers } = system;\n\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\n\n        // clear matrix data to defaults\n        MatrixList.forEach((key) => {\n            const parts = new PartsList(matrix[key].mod);\n            if (matrix[key].temp) parts.addUniquePart('SR6.Temporary', matrix[key].temp);\n            // LEGACY from when the sheet used 'mod.Temporary'\n            parts.removePart('Temporary');\n            matrix[key].mod = parts.list;\n            matrix[key].value = parts.total;\n        });\n        matrix.condition_monitor.max = 0;\n        matrix.rating = 0;\n        matrix.name = '';\n        matrix.device = '';\n        matrix.condition_monitor.label = 'SR6.ConditionMonitor';\n\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\n\n        if (device) {\n            matrix.device = device.getId();\n\n            const conditionMonitor = device.getConditionMonitor();\n\n            matrix.condition_monitor.max = conditionMonitor.max + Number(modifiers.matrix_track);\n            matrix.condition_monitor.value = conditionMonitor.value;\n            matrix.rating = device.getRating();\n            matrix.is_cyberdeck = device.isCyberdeck();\n            matrix.name = device.getName();\n            matrix.item = device.getData();\n            const deviceAtts = device.getASDF();\n            if (deviceAtts) {\n                // setup the actual matrix attributes for the actor\n                for (const [key, value] of Object.entries(deviceAtts)) {\n                    if (value && matrix[key]) {\n                        matrix[key].base = value.value;\n                        matrix[key].device_att = value.device_att;\n                    }\n                }\n            }\n        } // if we don't have a device, use living persona\n        else if (system.special === 'resonance') {\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\n            matrix.name = game.i18n.localize('SR6.LivingPersona');\n        }\n\n        // set matrix condition monitor to max if greater than\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\n        }\n    }\n\n    /**\n     * Add Matrix Attributes to Limits and Attributes\n     * @param system\n     */\n    static prepareMatrixToLimitsAndAttributes(system: CommonData & MatrixActorData) {\n        const { matrix, attributes, limits } = system;\n\n        // add matrix attributes to both limits and attributes as hidden entries\n        Object.keys(SR6.matrixAttributes).forEach((attributeName) => {\n            if (!matrix.hasOwnProperty(attributeName)) {\n                return console.error(`SR6Actor matrix preparation failed due to missing matrix attributes`);\n            }\n\n            const attribute = matrix[attributeName];\n            // Helpers.calcTotal(matrix[attributeName]);\n            // const label = SR6.matrixAttributes[attributeName];\n            // const { value, base, mod } = matrix[attributeName];\n            AttributesPrep.prepareAttribute(attributeName, attribute);\n            const { value, base, mod, label } = attribute;\n            const hidden = true;\n\n            // Each matrix attribute also functions as a limit.\n            limits[attributeName] = {\n                value,\n                base,\n                mod,\n                label,\n                hidden,\n            };\n\n            // Copy matrix attribute data into attributes for ease of access during testing.\n            attributes[attributeName] = {\n                value,\n                base,\n                mod,\n                label,\n                hidden,\n            };\n        });\n    }\n\n    static prepareMentalAttributesForDevice(system: CommonData & MatrixActorData, rating?: number) {\n        const { matrix, attributes } = system;\n        rating = rating ?? matrix.rating;\n        const mentalAttributes = ['intuition', 'logic', 'charisma', 'willpower'];\n\n        mentalAttributes.forEach((attLabel) => {\n            if (attributes[attLabel] !== undefined) {\n                attributes[attLabel].base = rating ?? 0; // TypeScript got confused otherwise...\n                Helpers.calcTotal(attributes[attLabel]);\n            }\n        });\n    }\n\n    static prepareMatrixAttributesForDevice(system: CommonData & MatrixActorData, rating?: number) {\n        const { matrix } = system;\n        rating = rating ?? matrix.rating;\n        const matrixAttributes = ['firewall', 'data_processing'];\n        matrixAttributes.forEach((attribute) => {\n            matrix[attribute].base = rating;\n        });\n        [...matrixAttributes, 'sleaze', 'attack'].forEach((attId) => {\n            Helpers.calcTotal(matrix[attId]);\n        });\n    }\n\n    /**\n     * Prepare the mental attributes for a sheet that just has a device rating\n     * @param system\n     */\n    static prepareAttributesForDevice(system: CommonData & MatrixActorData, rating: number = 0) {\n        MatrixPrep.prepareMentalAttributesForDevice(system, rating);\n        MatrixPrep.prepareMatrixAttributesForDevice(system, rating);\n    }\n}\n", "import { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport {SR6} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class SkillsPrep {\n    /**\n     * Prepare missing skill data as early in during data preparation as possible.\n     *\n     * template.json is incomplete, so we need to fill in the missing fields.\n     * This is mostly a legacy design and should be fixed in the future when DataModel's are used.\n     *\n     * NOTE: Foundry also calls the prepareData multiple times with incomplete source data, causing some value properties to be missing.\n     * @param system\n     */\n    static prepareSkillData(system: ActorTypesData) {\n        const { language, active, knowledge } = system.skills;\n\n        // Active skills aren't grouped and can be prepared skill by skill.\n        Object.values(active).forEach((skill) => { _mergeWithMissingSkillFields(skill)} );\n\n        // Language skills aren't group, but might lack the value property.\n        if (language.value) Object.values(language.value).forEach((skill) => { _mergeWithMissingSkillFields(skill)} );\n\n        // Knowledge skills are groupd and might also lack the value property.\n        Object.values(knowledge).forEach((group) => {\n            if (group.value) Object.values(group.value).forEach((skill) => { _mergeWithMissingSkillFields(skill)} );\n        });\n    }\n\n    /**\n     * Prepare actor data for skills\n     */\n    static prepareSkills(system: ActorTypesData) {\n        const { language, active, knowledge } = system.skills;\n        if (language) {\n            if (!language.value) {\n                language.value = {};\n            }\n\n            // language.value is defined as an array in template.json\n            // However what we actually want here is an object, so we set it manually\n            // The same is done for the other knowledge skillgroups 'value' properties below\n            if (Array.isArray(language.value) && language.value.length == 0) {\n                language.value = {};\n            }\n\n            language.attribute = 'intuition';\n        }\n\n        // function that will set the total of a skill correctly\n        const prepareSkill = (skill) => {\n            if (!skill.base) skill.base = 0;\n            if (skill.bonus?.length) {\n                for (let bonus of skill.bonus) {\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, Number(bonus.value));\n                }\n            }\n            skill.value = Helpers.calcTotal(skill);\n        };\n\n        // setup active skills\n        for (const skill of Object.values(active)) {\n            if (!skill.hidden) {\n                prepareSkill(skill);\n            }\n        }\n\n        const entries = Object.entries(system.skills.language.value);\n        // remove entries which are deleted TODO figure out how to delete these from the data\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete system.skills.language.value[key]);\n\n        for (let skill of Object.values(language.value)) {\n            prepareSkill(skill);\n            skill.attribute = 'intuition';\n        }\n\n        // setup knowledge skills\n        for (let [, group] of Object.entries(knowledge)) {\n\n            if(!group?.value) {\n                continue;\n            }\n\n            const entries = Object.entries(group.value);\n            // remove entries which are deleted TODO figure out how to delete these from the data\n            group.value = entries\n                .filter(([, val]) => !val._delete)\n                .reduce((acc, [id, skill]) => {\n                    prepareSkill(skill);\n\n                    // set the attribute on the skill\n                    skill.attribute = group.attribute;\n                    acc[id] = skill;\n                    return acc;\n                }, {});\n        }\n\n        // skill labels\n        for (let [skillKey, skillValue] of Object.entries(active)) {\n            skillValue.label = SR6.activeSkills[skillKey];\n        }\n    }\n}\n\n/** Just a quick, semi hacky way of setting up a complete skill data structure, while still allowing\n *  fields to be added at need.\n *\n * @param givenSkill\n * @return merge default skill fields with fields of the given field, only adding new fields in the process.\n */\nexport const _mergeWithMissingSkillFields = (givenSkill) => {\n    // Only the absolute most necessary fields, not datatype complete to SkillField\n    const template = {\n        name: \"\",\n        base: 0,\n        value: 0,\n        attribute: \"\",\n        mod: [],\n        specs: [],\n        hidden: false\n    };\n\n    // Use mergeObject to reserve original object instance in case replacing it\n    // causes problems down the line with active skills taken from a preexisting\n    // data structure.\n    // overwrite false to prohibit existing values to be overwritten with empty values.\n    foundry.utils.mergeObject(givenSkill, template, {overwrite: false});\n}\n", "import MovementActorData = Shadowrun.MovementActorData;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\nimport {PartsList} from \"../../../parts/PartsList\";\n\nexport class MovementPrep {\n    static prepareMovement(system: ActorTypesData & MovementActorData) {\n        const { modifiers } = system;\n\n        const movement = system.movement;\n        // In SR6e, movement is standardized: WALK = 10, RUN = 15\n        movement.walk.value = 10 + Number(modifiers['walk']) + new PartsList(movement.walk.mod).total;\n        movement.run.value = 15 + Number(modifiers['run']) + new PartsList(movement.run.mod).total;\n    }\n}\n", "/**\n * Everything calculating damage monitors, tracks and how damage applies to it.\n */\nexport const MonitorRules = {\n    /**\n     * Calculate the amount of damage boxes per wound modifier\n     * \n     * According to SR5#169-170 'Wound Modifiers' and SR5#82 'Low Pain Tolerance'.\n     * \n     * To avoid confusion between Low Pain and High Pain Tolerance, this method uses a\n     * damage tolerance concept, allowing users to define how many boxes should determine\n     * a wound modifier. This allows to define both lower and higher amounts of damage taken\n     * per wound modifier.\n     * \n     * @param damageTolerance Apply this damage tolerance to the base damage\n     * @param baseDamage The amount of damage boxes taken before applying a wound modifier.\n     */\n    woundModifierBoxesThreshold(damageTolerance: number=0, baseDamage: number=3): number {\n        return baseDamage + damageTolerance;\n    },\n\n    /**\n     * Calculate the wounds for damage taken on a monitor.\n     * \n     * This differes from wound modifier and will be positive value.\n     * \n     * This is intended for stund an physical monitors and implements rules \n     * - SR5#169 'Wound Modifiers\n     * - SR#74 'High Pain Tolerance'\n     * \n     * @param damageTaken Amount of damage boxes filled on the damage monitor\n     * @param woundBoxesThreshold Amount of damage boxes per wound modifier\n     * @param painTolerance Amount of damage boxes that can be ingored before calculating wound modifiers. \n     *                      Expects a positive number when applying High Pain Tolerance Ratings\n     * @returns The amount of wounds on a damage monitor.\n     */\n    wounds(damageTaken: number, woundBoxesThreshold: number, painTolerance: number=0): number {\n        const relevantDamageTaken = Math.max(damageTaken - painTolerance, 0);\n        return Math.floor(relevantDamageTaken / woundBoxesThreshold);\n    },\n\n    /**\n     * Calculate the wound modifier based on the wounds taken.\n     * \n     * @param wounds Amount of wounds (not damage) taken\n     * @param modifierPerWound base modifier to apply to given wounds\n     */\n    woundModifier(wounds:number, modifierPerWound: number=-1): number {\n        return wounds * modifierPerWound;\n    }\n}", "import { MonitorRules } from './../../../rules/MonitorRules';\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\nimport WoundsActorData = Shadowrun.WoundsActorData;\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class WoundsPrep {\n    static prepareWounds(system: ActorTypesData & TwoTrackActorData & WoundsActorData) {\n        const { modifiers, track } = system;\n        \n        // The actor overall has a wound tolerance.\n        const damageTolerance = Number(modifiers['wound_tolerance']);\n        const woundBoxesThreshold = MonitorRules.woundModifierBoxesThreshold(damageTolerance);\n\n        // Each track defines it's local pain tolerance.\n        track.stun.pain_tolerance = Number(modifiers['pain_tolerance_stun']);\n        track.physical.pain_tolerance = Number(modifiers['pain_tolerance_physical']);\n\n        // Legacy system provides a way of disabling a track, which will always return no wounds\n        const stunWounds = track.stun.disabled ? 0 : MonitorRules.wounds(track.stun.value, woundBoxesThreshold, track.stun.pain_tolerance);\n        const physicalWounds = track.physical.disabled ? 0 : MonitorRules.wounds(track.physical.value, woundBoxesThreshold, track.physical.pain_tolerance);\n\n        // Each track defines it's local wounds\n        track.stun.wounds = stunWounds;\n        track.physical.wounds = physicalWounds;\n\n        // The actor as a whole derives these wounds for wound modifier calculation\n        system.wounds = {\n            value: stunWounds + physicalWounds,\n        };\n    }\n}\n", "import CharacterActorData = Shadowrun.CharacterData;\nimport {METATYPEMODIFIER, SR} from \"../../../constants\";\nimport {PartsList} from \"../../../parts/PartsList\";\nimport {AttributesPrep} from \"./AttributesPrep\";\n\nexport class NPCPrep {\n    static prepareNPCData(system: CharacterActorData) {\n        // Apply to NPC and none NPC to remove lingering modifiers after actor has been removed it's npc status.\n        NPCPrep.applyMetatypeModifiers(system);\n    }\n\n    /**\n     * Apply modifiers that result from an NPCs metatype.\n     * This method also should still run on any none NPC to remove eventually lingering NPC metatype modifiers.\n     */\n    static applyMetatypeModifiers(system: CharacterActorData) {\n        // Extract needed data.\n        const {attributes, metatype} = system;\n        // Fallback to empty object if no metatype modifiers exist.\n        const metatypeModifier = SR.grunt.metatype_modifiers[metatype] || {};\n\n        for (const [name, attribute] of Object.entries(attributes)) {\n            // old-style object mod transformation is happening in AttributePrep and is needed here. Order is important.\n            if (!Array.isArray(attribute.mod)) {\n                    console.error('Actor data contains wrong data type for attribute.mod', attribute, !Array.isArray(attribute.mod));\n            } else {\n\n                // Remove lingering modifiers from NPC actors that aren't anymore.\n                const parts = new PartsList(attribute.mod);\n                parts.removePart(METATYPEMODIFIER);\n\n                // Apply NPC modifiers\n                const modifyBy = metatypeModifier.attributes?.[name];\n                if (system.is_npc && modifyBy) {\n                    parts.addPart(METATYPEMODIFIER, modifyBy);\n                }\n\n                // Prepare attribute modifiers\n                attribute.mod = parts.list;\n\n                AttributesPrep.calculateAttribute(name, attribute);\n            }\n        }\n    }\n}", "import PhysicalTrackActorData = Shadowrun.PhysicalTrackActorData;\nimport StunTrackActorData = Shadowrun.StunTrackActorData;\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\nimport {SR6} from \"../../../config\";\nimport ActorTypesData = Shadowrun.ShadowrunActorDataData;\n\nexport class ConditionMonitorsPrep {\n    static prepareStun(system: ActorTypesData & StunTrackActorData) {\n        const { track, attributes, modifiers } = system;\n\n        track.stun.base = 8 + Math.ceil(attributes.willpower.value / 2);\n        track.stun.max = track.stun.base + Number(modifiers.stun_track);\n        track.stun.label = SR6.damageTypes.stun;\n        track.stun.disabled = false;\n    }\n\n    static preparePhysical(system: ActorTypesData & PhysicalTrackActorData) {\n        const { track, attributes, modifiers } = system;\n\n        track.physical.base = 8 + Math.ceil(attributes.body.value / 2);\n        track.physical.max = track.physical.base + Number(modifiers.physical_track);\n        track.physical.overflow.max = attributes.body.value + Number(modifiers.physical_overflow_track);\n        track.physical.label = SR6.damageTypes.physical;\n        track.physical.disabled = false;\n    }\n\n    static prepareGrunt(system: ActorTypesData & TwoTrackActorData) {\n        // Grunts use only one monitor, use physical to get overflow functionality.\n        ConditionMonitorsPrep.prepareStun(system);\n\n        const { track, attributes, modifiers } = system;\n        // Overwrite stun damage to avoid invisible damage modifiers.\n        track.stun.value = 0;\n        track.stun.disabled = true;\n\n        // Grunts use either their WIL or BOD as their monitors attribute.\n        const attribute = attributes.willpower.value > attributes.body.value ?\n            attributes.willpower:\n            attributes.body;\n\n        track.physical.base = 8 + Math.ceil(attribute.value / 2);\n        track.physical.max = track.physical.base + Number(modifiers.physical_track);\n        track.physical.overflow.max = attributes.body.value;\n        track.physical.label = \"SR6.ConditionMonitor\";\n        track.physical.disabled = false;\n    }\n}\n", "import { ConditionMonitorsPrep } from \"./ConditionMonitorsPrep\";\n\n/**\n * Prepare actor types with grunt support with rules around grunt actors.\n */\nexport const GruntPrep = {\n    /**\n     * If an NPC Grunt is selected, prepare the grunt condition monitor according to SR5#378 'Grunts'.\n     * @param system To be altered system data.\n     */\n    prepareConditionMonitors: (system: Shadowrun.GruntActorData) => {\n        if (system.is_npc && system.npc.is_grunt) {\n            ConditionMonitorsPrep.prepareGrunt(system);\n        } else {\n            ConditionMonitorsPrep.preparePhysical(system);\n            ConditionMonitorsPrep.prepareStun(system);\n        }\n    }\n}", "import { PartsList } from '../../parts/PartsList';\nimport { RangedWeaponRules } from '../../rules/RangedWeaponRules';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { ItemPrep } from './functions/ItemPrep';\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { NPCPrep } from './functions/NPCPrep';\nimport { SR6ItemDataWrapper } from \"../../data/SR6ItemDataWrapper\";\nimport { Helpers } from '../../helpers';\nimport { GruntPrep } from './functions/GruntPrep';\nimport { DataDefaults } from '../../data/DataDefaults';\n\nexport class CharacterPrep {\n    static prepareBaseData(system: Shadowrun.CharacterData) {\n        CharacterPrep.addSpecialAttributes(system);\n        SkillsPrep.prepareSkillData(system);\n\n        ModifiersPrep.prepareModifiers(system);\n        ModifiersPrep.clearAttributeMods(system);\n        ModifiersPrep.clearArmorMods(system);\n        ModifiersPrep.clearLimitMods(system);\n        ModifiersPrep.clearValueMods(system);\n    }\n\n    /**\n     * All derived data should depend on basic values like Attributes or Skills.\n     *\n     * It shouldn't be modified by Active Effects, which instead should modify the global modifiers.\n     *\n     * @param system\n     * @param items\n     */\n    static prepareDerivedData(system: Shadowrun.CharacterData, items: SR6ItemDataWrapper[]) {\n        AttributesPrep.prepareAttributes(system);\n        AttributesPrep.prepareEssence(system, items);\n\n        // NPCPrep is reliant to be called after AttributesPrep.\n        NPCPrep.prepareNPCData(system);\n\n        SkillsPrep.prepareSkills(system);\n\n        ItemPrep.prepareArmor(system, items);\n        ItemPrep.prepareWeapons(system, items);\n\n        MatrixPrep.prepareMatrix(system, items);\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\n\n        GruntPrep.prepareConditionMonitors(system);\n\n        MovementPrep.prepareMovement(system);\n        WoundsPrep.prepareWounds(system);\n\n        InitiativePrep.prepareMeatspaceInit(system);\n        InitiativePrep.prepareAstralInit(system);\n        InitiativePrep.prepareMatrixInit(system);\n        InitiativePrep.prepareCurrentInitiative(system);\n\n        CharacterPrep.prepareRecoil(system);\n        CharacterPrep.prepareRecoilCompensation(system);\n\n        CharacterPrep.prepareDefenseRating(system);\n    }\n\n    /**\n     * Prepare the current progressive recoil of an actor.\n     *\n     * @param system Physical humanoid system data.\n     */\n    static prepareRecoil(system: Shadowrun.CharacterData | Shadowrun.CritterData | Shadowrun.SpiritData | Shadowrun.VehicleData) {\n        Helpers.calcTotal(system.values.recoil, { min: 0 });\n    }\n\n    /**\n     * Prepare the base actor recoil compensation without item influence.\n     *\n     * @param system Character system data\n     */\n    static prepareRecoilCompensation(system: Shadowrun.CharacterData | Shadowrun.CritterData | Shadowrun.SpiritData) {\n        const recoilCompensation = RangedWeaponRules.humanoidRecoilCompensationValue(system.attributes.strength.value);\n        const baseRc = RangedWeaponRules.humanoidBaseRecoilCompensation();\n        system.values.recoil_compensation.base = baseRc;\n        PartsList.AddUniquePart(system.values.recoil_compensation.mod, 'SR6.RecoilCompensation', recoilCompensation);\n\n        Helpers.calcTotal(system.values.recoil_compensation, { min: 0 });\n    }\n\n    static prepareMeleeAttackRating(system: Shadowrun.CharacterData) {\n        const baseAttackRating: number = 0;\n        let attackRating:number = 0;\n        system.values.attack_rating.base = attackRating;\n        //PartsList.AddUniquePart(system.values.attack_rating.mod, 'SR6.AttackRating', )\n        Helpers.calcTotal(system.values.attack_rating, { min: 0 });\n    }\n\n    static addSpecialAttributes(system: Shadowrun.CharacterData) {\n        const { attributes } = system;\n\n        // This is necessary to support critter actor types.\n        attributes.initiation = DataDefaults.attributeData({ base: system.magic.initiation, label: \"SR6.Initiation\", hidden: true });\n        attributes.submersion = DataDefaults.attributeData({ base: system.technomancer.submersion, label: \"F\", hidden: true });\n        //attributes.transhumanism = DataDefaults.attributeData({ base: system.transhuman.rank, label: \"SR6.Transhumanism\", hidden: true });\n    }\n\n    static prepareDefenseRating(system: Shadowrun.CharacterData) {\n        const { attributes } = system;\n        const { defense_rating } = system.armor;\n\n        console.log('Shadowrun 6e | Defense Rating Pre-Calculation:', {\n            attributes,\n            initialDefenseRating: foundry.utils.duplicate(defense_rating),\n            bodyValue: attributes.body.value\n        });\n\n        // Add body attribute as a modifier to defense rating\n        PartsList.AddUniquePart(defense_rating.mod, 'SR6.AttrBody', attributes.body.value);\n\n        // Recalculate total DR with all modifiers\n        defense_rating.value = Helpers.calcTotal(defense_rating, {min: 0});\n\n        console.log('Shadowrun 6e | Defense Rating Post-Calculation:', {\n            baseArmor: defense_rating.base,\n            bodyMod: attributes.body.value,\n            otherMods: defense_rating.mod,\n            totalDR: defense_rating.value,\n            calculation: `${defense_rating.base} (base armor) + ${attributes.body.value} (body) + ${defense_rating.mod.total || 0} (mods) = ${defense_rating.value}`\n        });\n    }\n}\n", "import { CharacterPrep } from './CharacterPrep';\nimport {InitiativePrep} from './functions/InitiativePrep';\nimport {ModifiersPrep} from './functions/ModifiersPrep';\nimport {MatrixPrep} from './functions/MatrixPrep';\nimport {ItemPrep} from './functions/ItemPrep';\nimport {SkillsPrep} from './functions/SkillsPrep';\nimport {MovementPrep} from './functions/MovementPrep';\nimport {WoundsPrep} from './functions/WoundsPrep';\nimport {AttributesPrep} from './functions/AttributesPrep';\nimport {SR6ItemDataWrapper} from \"../../data/SR6ItemDataWrapper\";\nimport CritterData = Shadowrun.CritterData;\nimport { GruntPrep } from './functions/GruntPrep';\n\n\nexport class CritterPrep {\n    static prepareBaseData(system: CritterData) {\n        ModifiersPrep.prepareModifiers(system);\n        ModifiersPrep.clearAttributeMods(system);\n        ModifiersPrep.clearArmorMods(system);\n        ModifiersPrep.clearLimitMods(system);\n        SkillsPrep.prepareSkillData(system);\n    }\n\n    static prepareDerivedData(system: CritterData, items: SR6ItemDataWrapper[]) {\n        AttributesPrep.prepareAttributes(system);\n        AttributesPrep.prepareEssence(system, items);\n\n        SkillsPrep.prepareSkills(system);\n\n        ItemPrep.prepareArmor(system, items);\n\n        MatrixPrep.prepareMatrix(system, items);\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\n\n\n        GruntPrep.prepareConditionMonitors(system);\n\n        MovementPrep.prepareMovement(system);\n        WoundsPrep.prepareWounds(system);\n\n        InitiativePrep.prepareMeatspaceInit(system);\n        InitiativePrep.prepareAstralInit(system);\n        InitiativePrep.prepareMatrixInit(system);\n        InitiativePrep.prepareCurrentInitiative(system);\n\n        CharacterPrep.prepareRecoil(system);\n        CharacterPrep.prepareRecoilCompensation(system);\n    }\n}\n", "import { SkillsPrep } from './functions/SkillsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { Helpers } from '../../helpers';\nimport { PartsList } from \"../../parts/PartsList\";\nimport { SR6ItemDataWrapper } from \"../../data/SR6ItemDataWrapper\";\nimport { SkillFlow } from \"../flows/SkillFlow\";\nimport SpiritType = Shadowrun.SpiritType;\nimport SpiritData = Shadowrun.SpiritData;\nimport { CharacterPrep } from './CharacterPrep';\nimport { GruntPrep } from './functions/GruntPrep';\nimport { DataDefaults } from '../../data/DataDefaults';\nimport { SR6 } from '../../config';\nimport { SR } from '../../constants';\n\n\nexport class SpiritPrep {\n    static prepareBaseData(system: SpiritData) {\n        SpiritPrep.prepareSpiritSpecial(system);\n        SkillsPrep.prepareSkillData(system);\n\n        ModifiersPrep.prepareModifiers(system);\n        ModifiersPrep.clearAttributeMods(system);\n        ModifiersPrep.clearArmorMods(system);\n        ModifiersPrep.clearLimitMods(system);\n    }\n\n    static prepareDerivedData(system: SpiritData, items: SR6ItemDataWrapper[]) {\n        SpiritPrep.prepareSpiritBaseData(system);\n\n        // Use spirit attribute range to avoid issues with attribute calculation causing unusable attributes.\n        AttributesPrep.prepareAttributes(system, SR.attributes.rangesSpirit);\n        SpiritPrep.prepareAttributesWithForce(system);\n        SkillsPrep.prepareSkills(system);\n\n        SpiritPrep.prepareSpiritArmor(system);\n\n        GruntPrep.prepareConditionMonitors(system);\n\n        MovementPrep.prepareMovement(system);\n        WoundsPrep.prepareWounds(system);\n\n        InitiativePrep.prepareCurrentInitiative(system);\n\n        CharacterPrep.prepareRecoil(system);\n        CharacterPrep.prepareRecoilCompensation(system);\n    }\n\n    static prepareSpiritSpecial(data: SpiritData) {\n        // Spirits will always be awakened.\n        data.special = 'magic';\n    }\n\n    static prepareSpiritBaseData(data: SpiritData) {\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\n\n        if (overrides) {\n            const { attributes, skills, initiative, force, modifiers } = data;\n\n            // set the base of attributes to the provided force\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\n                if (attributes[attId] !== undefined) {\n                    attributes[attId].base = value + force;\n                }\n            }\n\n            // set the base of skills to the provided force\n            for (const skillId of overrides.skills) {\n                // Custom skills need to be created on the actor.\n                const skill = SpiritPrep.prepareActiveSkill(skillId, skills.active);\n                if (skill === undefined) continue;\n                if (SkillFlow.isCustomSkill(skill)) continue\n\n                skill.base = force;\n                skills.active[skillId] = skill;\n            }\n\n            // prepare initiative data\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\n            initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative']));\n            initiative.meatspace.dice.base = 2;\n            initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative_dice']));\n\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\n            initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR6.Bonus\", Number(modifiers['astral_initiative']));\n            initiative.astral.dice.base = 3;\n            initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR6.Bonus\", Number(modifiers['astral_initiative_dice']));\n        }\n    }\n\n    /**\n     * Spirits can have some none default skills. The must be created first and don't count as custom skills.\n     * @param skillId Whatever skill id should be used.\n     * @param skills The list of active skills of the sprite.\n     * @returns A prepared SkillField without levels.\n     */\n    static prepareActiveSkill(skillId: string, skills: Shadowrun.Skills): Shadowrun.SkillField {\n        if (skills[skillId]) return skills[skillId];\n\n        const label = SR6.activeSkills[skillId];\n        const attribute = SR6.activeSkillAttribute[skillId];\n\n        return DataDefaults.skillData({ label, attribute, canDefault: false })\n    }\n\n    static prepareSpiritArmor(data: SpiritData) {\n        const { armor, attributes } = data;\n        armor.base = (attributes.essence.value ?? 0) * 2;\n        armor.value = Helpers.calcTotal(armor);\n        armor.hardened = true;\n    }\n\n    /**\n     * get the attribute and initiative modifiers and skills\n     */\n    static getSpiritStatModifiers(spiritType: SpiritType) {\n        if (!spiritType) return;\n\n        const overrides = {\n            // value of 0 for attribute makes it equal to the Force\n            attributes: {\n                body: 0,\n                agility: 0,\n                reaction: 0,\n                strength: 0,\n                willpower: 0,\n                logic: 0,\n                intuition: 0,\n                charisma: 0,\n                magic: 0,\n                essence: 0,\n            },\n            // modifiers for after the Force x 2 calculation\n            init: 0,\n            astral_init: 0,\n            // skills are all set to Force\n            skills: [] as string[],\n        };\n        switch (spiritType) {\n            case 'air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'aircraft':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -2;\n                overrides.skills.push('free_fall', 'navigation', 'perception', 'pilot_aircraft', 'unarmed_combat');\n                break;\n            case 'airwave':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'impersonation', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'automotive':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.logic = -2;\n                overrides.init = 1;\n                overrides.skills.push('navigation', 'perception', 'pilot_ground_craft', 'running', 'unarmed_combat');\n                break;\n            case 'beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'ceramic':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'energy':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\n                break;\n            case 'guardian':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 2;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'guidance':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\n                break;\n            case 'man':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'metal':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'plant':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = -1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\n                break;\n            case 'ship':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 2;\n                overrides.attributes.logic = -2;\n                overrides.init = -1;\n                overrides.skills.push('navigation', 'perception', 'pilot_water_craft', 'survival', 'swimming', 'unarmed_combat');\n                break;\n            case 'task':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'train':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = -2;\n                overrides.init = -1;\n                overrides.skills.push('intimidation', 'navigation', 'perception', 'pilot_ground_craft', 'unarmed_combat');\n                break;\n            case 'water':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'toxic_air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'gymnastics', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'toxic_fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'flight', 'unarmed_combat');\n                break;\n            case 'toxic_man':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spell_casting', 'unarmed_combat');\n                break;\n            case 'toxic_water':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'blood':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 2;\n                overrides.attributes.strength = 2;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'running', 'unarmed_combat');\n                break;\n\n            case 'muse':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'nightmare':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'shade':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'succubus':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'wraith':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n\n            case 'shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'master_shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n\n            // insect\n            case 'caretaker':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'leadership', 'perception', 'unarmed_combat');\n                break;\n            case 'nymph':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'scout':\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'sneaking', 'unarmed_combat');\n                break;\n            case 'soldier':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.strength = 3;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'exotic_range', 'gymnastics', 'perception', 'unarmed_combat');\n                break;\n            case 'worker':\n                overrides.attributes.strength = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'queen':\n                overrides.attributes.body = 5;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = 5;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 5;\n                overrides.skills.push(\n                    'assensing',\n                    'astral_combat',\n                    'con',\n                    'counterspelling',\n                    'gymnastics',\n                    'leadership',\n                    'negotiation',\n                    'perception',\n                    'spellcasting',\n                    'unarmed_combat',\n                );\n                break;\n            case \"carcass\":\n                overrides.attributes.body = 3;\n                overrides.attributes.strength = 2;\n                overrides.attributes.charisma = -1;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"perception\", \"unarmed_combat\");\n                break;\n            case \"corpse\":\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = -1;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"perception\", \"unarmed_combat\");\n                break;\n            case \"rot\":\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -2;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -1;\n                overrides.attributes.charisma = -1;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"counterspelling\", \"exotic_range\", \"perception\", \"unarmed_combat\");\n                break;\n            case \"palefile\":\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = -1;\n                overrides.init = 3;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"exotic_range\", \"flight\", \"perception\", \"unarmed_combat\");\n                break;\n            case \"detritus\":\n                overrides.attributes.body = 5;\n                overrides.attributes.agility = -3;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.attributes.charisma = -1;\n                overrides.init = -1;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"exotic_range\", \"perception\", \"unarmed_combat\");\n                break;\n\n            // Howling Shadow\n            case \"anarch\":\n                overrides.attributes.body = -1;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.strength = -1;\n                overrides.init = 1;\n                overrides.skills.push(\"assensing\", \"automatics\", \"blades\", \"clubs\", \"con\", \"demolitions\", \"disguise\", \"forgery\", \"gymnastics\", \"impersonation\", \"locksmith\", \"palming\", \"perception\", \"pistols\", \"sneaking\", \"throwing_weapons\", \"unarmed_combat\");\n                break;\n\n            case \"arboreal\":\n                overrides.attributes.body = +2;\n                overrides.attributes.strength = 1;\n                overrides.attributes.essence = -2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"blade\", \"clubs\", \"unarmed_combat\", \"exotic_range\", \"perception\");\n                break;\n\n            case \"blackjack\":\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.init = 1;\n                overrides.skills.push(\"assensing\", \"automatics\", \"blades\", \"clubs\", \"computer\", \"first_aid\", \"gymnastics\", \"intimidation\", \"locksmith\", \"longarms\", \"perception\", \"pilot_ground_craft\", \"pistols\", \"sneaking\", \"throwing_weapons\", \"unarmed_combat\");\n                break;\n\n            case \"boggle\":\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = -2;\n                overrides.attributes.willpower = 2;\n                overrides.init = -1;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"blades\", \"clubs\", \"unarmed_combat\", \"gymnastics\", \"perception\");\n                break;\n\n            case \"bugul\":\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = -2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = 2;\n                overrides.skills.push(\"artisan\", \"assensing\", \"astral_combat\", \"con\", \"counterspelling\", \"disenchanting\", \"gymnastics\", \"negotiation\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"chindi\":\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.init = 2;\n                overrides.skills.push(\"archery\", \"blades\", \"clubs\", \"first_aid\", \"gymnastics\", \"intimidation\", \"perception\", \"sneaking\", \"throwing_weapons\", \"unarmed_combat\");\n                break;\n\n            // HS#119: This spirit types has fixed values that don't use general spirit rules...\n            case \"corpselight\":\n                break;\n\n            case \"croki\":\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"artificing\", \"assensing\", \"astral_combat\", \"gymnastics\", \"perception\", \"ritual_spellcasting\", \"spellcasting\");\n                break;\n\n            case \"duende\":\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"con\", \"gymnastics\", \"perception\");\n                break;\n\n            case \"elvar\":\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"con\", \"counterspelling\", \"disenchanting\", \"gymnastics\", \"perception\", \"spellcasting\");\n                break;\n\n            case \"erinyes\":\n                overrides.attributes.body = -1;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"flight\", \"gymnastics\", \"perception\", \"sneaking\", \"unarmed_combat\");\n                break;\n\n            case \"greenman\":\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 4;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"counterspelling\", \"gymnastics\", \"leadership\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"imp\":\n                overrides.attributes.reaction = 3;\n                overrides.init = 3;\n                overrides.skills.push(\"alchemy\", \"assensing\", \"astral_combat\", \"con\", \"counterspelling\", \"disenchanting\", \"gymnastics\", \"intimidation\", \"perception\", \"spellcasting\", \"unarmed_combat\");\n                break;\n\n            case \"jarl\":\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 2;\n                overrides.init = 4;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"counterspelling\", \"gymnastics\", \"leadership\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"kappa\":\n                overrides.attributes.body = 5;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.essence = -2;\n                overrides.init = -1;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"exotic_range\", \"gymnastics\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"kokopelli\":\n                overrides.attributes.body = -1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"artisan\", \"assensing\", \"astral_combat\", \"leadership\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"morbi\":\n                overrides.attributes.reaction = 1;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"perception\", \"ritual_spellcasting\", \"sneaking\", \"unarmed_combat\");\n                break;\n\n            case \"nocnitasa\":\n                overrides.attributes.body = -3;\n                overrides.attributes.agility = 4;\n                overrides.attributes.reaction = 5;\n                overrides.attributes.strength = -2;\n                overrides.attributes.willpower = -1;\n                overrides.init = 5;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"perception\", \"sneaking\", \"unarmed_combat\");\n                break;\n\n            case \"phantom\":\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"gymnastics\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"preta\":\n                overrides.attributes.body = -1;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -1;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"intimidation\", \"negotiation\", \"perception\", \"sneaking\", \"unarmed_combat\");\n                break;\n\n            case \"stabber\":\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 4;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 4;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"gymnastics\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"tungak\":\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.init = 2;\n                overrides.skills.push(\"assensing\", \"astral_combat\", \"gymnastics\", \"perception\", \"unarmed_combat\");\n                break;\n\n            case \"vucub\":\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = 4;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = 2;\n                overrides.attributes.intuition = 2;\n                overrides.attributes.charisma = 4;\n                overrides.init = 5;\n                overrides.skills.push(\"assensing\", \"flight\", \"perception\", \"unarmed_combat\");\n                break;\n\n        }\n\n        return overrides;\n    }\n\n    /**\n     * The spirits force value is used for the force attribute value.\n     *\n     * NOTE: This separation is mainly a legacy concern. Attributes are available as testable (and modifiable values)\n     *       flat values like force aren't. For this reason the flat value is transformed to an attribute.\n     *\n     * @param system The spirit system data to prepare\n     */\n    static prepareAttributesWithForce(system: Shadowrun.SpiritData) {\n        const { attributes, force } = system;\n\n        // Allow value to be understandable when displayed.\n        attributes.force.base = 0;\n        PartsList.AddUniquePart(attributes.force.mod, 'SR6.Force', force);\n        AttributesPrep.calculateAttribute('force', attributes.force);\n    }\n}\n", "import { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport SpriteType = Shadowrun.SpriteType;\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\nimport SpriteData = Shadowrun.SpriteData;\nimport {SR6ItemDataWrapper} from \"../../data/SR6ItemDataWrapper\";\n\n\n/**\n * Prepare a Sprite Type of Actor\n */\nexport class SpritePrep {\n    static prepareBaseData(data: SpriteData) {\n        SpritePrep.prepareSpriteSpecial(data);\n        SkillsPrep.prepareSkillData(data);\n\n        ModifiersPrep.prepareModifiers(data);\n        ModifiersPrep.clearAttributeMods(data);\n        ModifiersPrep.clearLimitMods(data);\n    }\n\n    static prepareDerivedData(data: SpriteData, items: SR6ItemDataWrapper[]) {\n        SpritePrep.prepareSpriteMatrixAttributes(data);\n        SpritePrep.prepareSpriteAttributes(data);\n        SpritePrep.prepareSpriteSkills(data);\n\n        AttributesPrep.prepareAttributes(data);\n        SkillsPrep.prepareSkills(data);\n\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(data);\n\n        SpritePrep.prepareSpriteConditionMonitor(data);\n        SpritePrep.prepareSpriteInitiative(data);\n\n        InitiativePrep.prepareCurrentInitiative(data);\n    }\n\n    static prepareSpriteSpecial(data: SpriteData) {\n        // Sprites are always awakened\n        data.special = 'resonance';\n    }\n\n    static prepareSpriteAttributes(data: SpriteData) {\n        const {attributes, level, spriteType} = data;\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // calculate resonance value\n        attributes.resonance.base = level + overrides.resonance;\n        Helpers.calcTotal(attributes.resonance);\n    }\n\n    static prepareSpriteMatrixAttributes(data: SpriteData) {\n        const {level, matrix, spriteType} = data;\n\n        const matrixAtts = ['attack', 'sleaze', 'data_processing', 'firewall'];\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // apply the matrix overrides\n        matrixAtts.forEach((att) => {\n            if (matrix[att] !== undefined) {\n                matrix[att].base = level + overrides[att];\n                matrix[att].value = Helpers.calcTotal(matrix[att]);\n            }\n        });\n\n        matrix.rating = level;\n    }\n\n    static prepareSpriteSkills(data: SpriteData) {\n        const {skills, level, spriteType} = data;\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // apply skill levels\n        // clear skills that we don't have\n        for (const [skillId, skill] of Object.entries(skills.active)) {\n            skill.base = overrides.skills.find((s) => s === skillId) ? level : 0;\n        }\n    }\n\n    static prepareSpriteConditionMonitor(data: SpriteData) {\n        const {matrix, level, modifiers} = data;\n\n        matrix.condition_monitor.max = 8 + Math.ceil(level / 2) + Number(modifiers.matrix_track);\n    }\n\n    static prepareSpriteInitiative(data: SpriteData) {\n        const {initiative, level, spriteType, modifiers} = data;\n\n        // always in matrix perception\n        initiative.perception = 'matrix';\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // setup initiative from overrides\n        initiative.matrix.base.base = level * 2 + overrides.init;\n        PartsList.AddUniquePart(initiative.matrix.base.mod, 'SR6.Bonus', modifiers['matrix_initiative']);\n        Helpers.calcTotal(initiative.matrix.base, {min: 0});\n\n        initiative.matrix.dice.base = 4;\n        PartsList.AddUniquePart(initiative.matrix.dice.mod, 'SR6.Bonus', modifiers['matrix_initiative_dice']);\n        Helpers.calcTotal(initiative.matrix.dice, {min: 0});\n    }\n\n    /**\n     * Get the stat modifiers for the specified type of sprite\n     * @param spriteType\n     */\n    static getSpriteStatModifiers(spriteType: SpriteType) {\n        const overrides = {\n            attack: 0,\n            sleaze: 0,\n            data_processing: 0,\n            firewall: 0,\n            resonance: 0,\n            init: 0,\n            // all sprites have computer\n            skills: ['computer'],\n        };\n        switch (spriteType) {\n            case 'courier':\n                overrides.sleaze = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('hacking');\n                break;\n            case 'crack':\n                overrides.sleaze = 3;\n                overrides.data_processing = 2;\n                overrides.firewall = 1;\n                overrides.init = 2;\n                overrides.skills.push('hacking', 'electronic_warfare');\n                break;\n            case 'data':\n                overrides.attack = -1;\n                overrides.data_processing = 4;\n                overrides.firewall = 1;\n                overrides.init = 4;\n                overrides.skills.push('electronic_warfare');\n                break;\n            case 'fault':\n                overrides.attack = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('cybercombat', 'hacking');\n                break;\n            case 'machine':\n                overrides.attack = 1;\n                overrides.data_processing = 3;\n                overrides.firewall = 2;\n                overrides.init = 3;\n                overrides.skills.push('electronic_warfare', 'hardware');\n                break;\n            case 'companion':\n                overrides.attack = -1;\n                overrides.sleaze = 1;\n                overrides.firewall = 4;\n                overrides.skills.push('electronic_warfare');\n                break;\n            case 'generalist':\n                overrides.attack = 1;\n                overrides.sleaze = 1;\n                overrides.data_processing = 1;\n                overrides.firewall = 1;\n                overrides.init = 1;\n                overrides.skills.push('hacking','electronic_warfare');\n                break;\n        }\n        return overrides;\n    }\n}\n", "import { CharacterPrep } from './CharacterPrep';\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\nimport {SR6} from \"../../config\";\nimport {SR6ItemDataWrapper} from \"../../data/SR6ItemDataWrapper\";\nimport { RangedWeaponRules } from '../../rules/RangedWeaponRules';\nimport { SR } from '../../constants';\n\n\nexport class VehiclePrep {\n    static prepareBaseData(system: Shadowrun.VehicleData) {\n        SkillsPrep.prepareSkillData(system);\n\n        ModifiersPrep.prepareModifiers(system);\n        ModifiersPrep.clearAttributeMods(system);\n        ModifiersPrep.clearArmorMods(system);\n        ModifiersPrep.clearLimitMods(system);\n    }\n\n    static prepareDerivedData(system: Shadowrun.VehicleData, items: SR6ItemDataWrapper[]) {\n        VehiclePrep.prepareVehicleStats(system);\n        VehiclePrep.prepareDeviceAttributes(system);\n        VehiclePrep.prepareLimits(system);\n\n        AttributesPrep.prepareAttributes(system);\n        VehiclePrep.prepareAttributesWithPilot(system);\n        VehiclePrep.prepareAttributesWithBody(system);\n        VehiclePrep.prepareAttributeRanges(system);\n\n        SkillsPrep.prepareSkills(system);\n\n        VehiclePrep.prepareConditionMonitor(system);\n\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\n        MatrixPrep.prepareMatrixAttributesForDevice(system);\n\n        VehiclePrep.prepareMovement(system);\n\n        VehiclePrep.prepareMeatspaceInit(system);\n        InitiativePrep.prepareMatrixInit(system);\n        InitiativePrep.prepareCurrentInitiative(system);\n\n        VehiclePrep.prepareArmor(system);\n        CharacterPrep.prepareRecoil(system);\n        VehiclePrep.prepareRecoilCompensation(system);\n    }\n\n    static prepareVehicleStats(system: Shadowrun.VehicleData) {\n        const { vehicle_stats, isOffRoad, isDrone } = system;\n        // set the value for the stats\n        for (let [key, stat] of Object.entries(vehicle_stats)) {\n            // this turns the Object model into the list mod\n            if (typeof stat.mod === 'object') {\n                stat.mod = new PartsList(stat.mod).list;\n            }\n            const parts = new PartsList(stat.mod);\n\n            if (stat.temp) parts.addUniquePart('SR6.Temporary', stat.temp);\n\n            stat.mod = parts.list;\n            Helpers.calcTotal(stat);\n            // add labels\n            stat.label = SR6.vehicle.stats[key];\n        }\n\n        // hide certain stats depending on if we're offroad\n        if (isOffRoad) {\n            vehicle_stats.off_road_speed.hidden = false;\n            vehicle_stats.off_road_handling.hidden = false;\n            vehicle_stats.speed.hidden = true;\n            vehicle_stats.handling.hidden = true;\n        } else {\n            vehicle_stats.off_road_speed.hidden = true;\n            vehicle_stats.off_road_handling.hidden = true;\n            vehicle_stats.speed.hidden = false;\n            vehicle_stats.handling.hidden = false;\n        }\n\n        // Hide vehicle seats for drones\n        vehicle_stats.seats.hidden = isDrone;\n    }\n\n    /**\n     * Apply SR5#199 'Pilot' and SR5#269 'Pilot Program' rules.\n     *\n     * Rulings here are a bit vague and current system implementation makes it more vague.\n     *\n     */\n    static prepareAttributesWithPilot(system: Shadowrun.VehicleData) {\n        const { attributes, vehicle_stats } = system;\n\n\n        const attributeIds = [\n            // SR5#199 - 'Pilot' => All  mental attributes and reaction.\n            'reaction', 'willpower', 'logic', 'intuition', 'charisma',\n            // No actual rule, a typical skill check would be 'Autosoft Rating + Pilot'\n            // Setting agility to pilot, helps the current unpolished way vehicles use character skills.\n            'agility',\n            // The actual pilot attribute will also equal the vehicle stat pilot\n            'pilot'\n        ];\n\n        attributeIds.forEach((attId) => {\n            const attribute = attributes[attId];\n            if (!attribute) return;\n\n            // Allow value to be understandable when displayed.\n            attribute.base = 0;\n            PartsList.AddUniquePart(attribute.mod, vehicle_stats.pilot.label, vehicle_stats.pilot.value);\n            AttributesPrep.calculateAttribute(attId, attribute);\n        });\n    }\n\n    static prepareAttributesWithBody(system: Shadowrun.VehicleData) {\n        const { attributes } = system;\n\n        // R5.0#125 'Drone Arm' - while not ALL vehicles have arms, leave it up to the user to NOT cast if they shouldn't.\n        const attributeIds = ['strength']\n\n        attributeIds.forEach((attId) => {\n            const attribute = attributes[attId];\n            if (!attribute) return;\n\n            // Allow value to be understandable when displayed.\n            attribute.base = 0;\n            PartsList.AddUniquePart(attribute.mod, attributes.body.label, attributes.body.value);\n            AttributesPrep.calculateAttribute(attId, attribute);\n        });\n    }\n\n    static prepareLimits(system: Shadowrun.VehicleData) {\n        const { limits, vehicle_stats, isOffRoad } = system;\n\n        limits.mental.base = Helpers.calcTotal(vehicle_stats.sensor);\n\n        // add sensor, handling, and speed as limits\n        limits.sensor = { ...vehicle_stats.sensor, hidden: true };\n        limits.handling = { ...(isOffRoad ? vehicle_stats.off_road_handling : vehicle_stats.handling), hidden: true };\n        limits.speed = { ...(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed), hidden: true };\n    }\n\n    /**\n     * Apply SR5#269 'Drones in the matrix' rules.\n     */\n    static prepareDeviceAttributes(system: Shadowrun.VehicleData) {\n        const {matrix, vehicle_stats} = system;\n\n        matrix.rating = vehicle_stats.pilot.value;\n    }\n\n    static prepareConditionMonitor(system: Shadowrun.VehicleData) {\n        const { track, attributes, matrix, isDrone, modifiers } = system;\n\n        const halfBody = Math.ceil(Helpers.calcTotal(attributes.body) / 2);\n        // CRB pg 199 drone vs vehicle physical condition monitor rules\n        if (isDrone) {\n            track.physical.base = 6 + halfBody;\n            track.physical.max = track.physical.base + (Number(modifiers['physical_track']) || 0);\n        } else {\n            track.physical.base = 12 + halfBody;\n            track.physical.max =  track.physical.base + (Number(modifiers['physical_track']) || 0);\n        }\n        track.physical.label = SR6.damageTypes.physical;\n\n        const rating = matrix.rating || 0;\n        matrix.condition_monitor.max = 8 + Math.ceil(rating / 2) + Number(modifiers.matrix_track);\n    }\n\n    static prepareMovement(system: Shadowrun.VehicleData) {\n        const { vehicle_stats, movement, isOffRoad } = system;\n\n        let speedTotal = Helpers.calcTotal(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed);\n\n        // algorithm to determine speed, CRB pg 202 table.\n        // Allow ActiveEffects to apply to movement directly.\n        movement.walk.base = 5 * Math.pow(2, speedTotal - 1);\n        movement.walk.value = Helpers.calcTotal(movement.walk, {min: 0});\n\n        movement.run.base = 10 * Math.pow(2, speedTotal - 1);\n        movement.run.value = Helpers.calcTotal(movement.run, {min: 0});\n    }\n\n    static prepareMeatspaceInit(system: Shadowrun.VehicleData) {\n        const { vehicle_stats, initiative, modifiers } = system;\n\n        const pilot = Helpers.calcTotal(vehicle_stats.pilot);\n\n        initiative.meatspace.base.base = pilot * 2;\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative']));\n        initiative.meatspace.dice.base = 4;\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR6.Bonus\", Number(modifiers['meat_initiative_dice']));\n\n        Helpers.calcTotal(initiative.meatspace.base);\n        Helpers.calcTotal(initiative.meatspace.dice);\n    }\n\n    static prepareArmor(system: Shadowrun.VehicleData) {\n        const { armor, modifiers } = system;\n\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR6.Temporary', Number(armor['temp'] || 0));\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR6.Bonus', Number(modifiers['armor'] || 0));\n\n        Helpers.calcTotal(armor);\n    }\n    /**\n     * Prepare the base actor recoil compensation without item influence.\n     */\n    static prepareRecoilCompensation(system: Shadowrun.VehicleData) {\n        const {attributes} = system;\n\n        const recoilCompensation = RangedWeaponRules.vehicleRecoilCompensationValue(attributes.body.value);\n        PartsList.AddUniquePart(system.values.recoil_compensation.mod, 'SR6.RecoilCompensation', recoilCompensation);\n\n        Helpers.calcTotal(system.values.recoil_compensation, {min: 0});\n    }\n\n    /**\n     * Some attributes don't exist on vehicle actors.\n     *\n     * Instead of default character range, use vehicle specific ranges.\n     *\n     * NOTE: This is a hack around the actor type character centric preparation design still present in the system.\n     *       Times is short, perfect solutions are costly.\n     */\n    static prepareAttributeRanges(system: Shadowrun.VehicleData) {\n        const ranges = SR.actorTypeAttributes['vehicle'];\n        Helpers.calcTotal(system.attributes.strength, ranges.strength);\n        Helpers.calcTotal(system.attributes.agility, ranges.agility);\n    }\n}\n", "import {ModifiersPrep} from \"./functions/ModifiersPrep\";\nimport {InitiativePrep} from \"./functions/InitiativePrep\";\nimport {AttributesPrep} from \"./functions/AttributesPrep\";\nimport {PartsList} from \"../../parts/PartsList\";\nimport {SR6} from \"../../config\";\nimport {MatrixPrep} from \"./functions/MatrixPrep\";\nimport ICData = Shadowrun.ICData;\nimport {SR6ItemDataWrapper} from \"../../data/SR6ItemDataWrapper\";\nimport {DataDefaults} from \"../../data/DataDefaults\";\nimport {MatrixRules} from \"../../rules/MatrixRules\";\nimport DeviceAttribute = Shadowrun.DeviceAttribute;\nimport {SkillsPrep} from \"./functions/SkillsPrep\";\n\n\nexport class ICPrep {\n    static prepareBaseData(system: ICData) {\n        ModifiersPrep.clearAttributeMods(system);\n        ModifiersPrep.clearLimitMods(system);\n        SkillsPrep.prepareSkillData(system);\n\n        ICPrep.addMissingTracks(system);\n        ICPrep.prepareModifiers(system);\n        ICPrep.hideMeatAttributes(system);\n        ICPrep.addHostAttributes(system);\n    }\n\n    static prepareDerivedData(system: ICData, items: SR6ItemDataWrapper[]) {\n        ICPrep.prepareMatrixAttributes(system);\n\n        SkillsPrep.prepareSkills(system);\n\n        ICPrep.prepareHostAttributes(system);\n        ICPrep.prepareMeatAttributes(system);\n\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(system);\n\n        ICPrep.prepareMatrix(system);\n        ICPrep.prepareMatrixTrack(system);\n\n        ICPrep.prepareMatrixInit(system);\n        InitiativePrep.prepareCurrentInitiative(system);\n    }\n\n    /**\n     * On initial actor creation the matrix track will be missing.\n     *\n     * This is intentional as not to pollute template.json with actor type specific data.\n     *\n     */\n    static addMissingTracks(system: ICData) {\n        // Newly created actors SHOULD have this by template.\n        // Legacy actors MIGHT not have it, therefore make sure it's there.\n        const track = system.track || {};\n        if (!track.matrix) track.matrix = DataDefaults.trackData();\n        system.track = track;\n    }\n\n    /**\n     * Add IC modifiers only to the misc tab.\n     * @param system\n     */\n    static prepareModifiers(system: ICData) {\n        let modifiers = ModifiersPrep.commonModifiers as string[];\n        modifiers = modifiers.concat(ModifiersPrep.matrixModifiers as string[]);\n        ModifiersPrep.setupModifiers(system, modifiers);\n    }\n\n    static prepareMatrix(system: ICData) {\n        system.matrix.rating = MatrixRules.getICDeviceRating(system.host.rating);\n    }\n\n    static prepareMatrixTrack(system: ICData) {\n        const { modifiers, track, matrix } = system;\n\n        // Prepare internal matrix condition monitor values\n        // LEGACY: matrix.condition_monitor is no TrackType. It will only be used as a info, should ever be needed anywhere\n        matrix.condition_monitor.max = Number(modifiers['matrix_track']) + MatrixRules.getConditionMonitor(matrix.rating as number);\n\n        // Prepare user visible matrix track values\n        track.matrix.base = MatrixRules.getConditionMonitor(matrix.rating as number);\n        track.matrix.mod = PartsList.AddUniquePart(track.matrix.mod, \"SR6.Bonus\", Number(modifiers['matrix_track']));\n        track.matrix.max = matrix.condition_monitor.max;\n        track.matrix.label = SR6.damageTypes.matrix;\n    }\n\n    static prepareMatrixInit(system: ICData) {\n        const { initiative, modifiers, host } = system;\n\n\n        // Set current initiative to matrix\n        initiative.perception = 'matrix';\n\n        // Prepare used initiative parts\n        initiative.matrix.base.base = MatrixRules.getICInitiativeBase(host.rating);\n        initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR6.Bonus\", Number(modifiers['matrix_initiative']));\n\n        initiative.matrix.dice.base = MatrixRules.getICInitiativeDice();\n        initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR6.Bonus\", Number(modifiers['matrix_initiative_dice']));\n    }\n\n    /**\n     * For connected hosts overwrite matrix attributes with the hosts attributes, otherwise leave as is.\n     */\n    static prepareHostAttributes(system: ICData) {\n        if (!system.host.id || !system.host.atts) return;\n\n        Object.keys(system.host.atts).forEach(deviceAttribute => {\n            const attribute: DeviceAttribute = system.host.atts[deviceAttribute];\n            system.matrix[attribute.att].base = attribute.value;\n            system.matrix[attribute.att].device_att = deviceAttribute;\n        });\n    }\n\n    /**\n     * Hide all meat attributes from display\n     */\n    static hideMeatAttributes(system: ICData) {\n        const { attributes } = system;\n\n        for (const attribute of Object.values(attributes)) {\n            attribute.hidden = true;\n        }\n    }\n\n    /**\n     * Add derived attributes based on host values.\n     *\n     * As the rating attribute is only derived, it's not included in base data or template.json.\n     */\n    static addHostAttributes(system: ICData) {\n        system.attributes['rating'] = DataDefaults.attributeData({label: 'SR6.Rating'});\n    }\n\n    static prepareMeatAttributes(system: ICData) {\n        const { attributes, host } = system;\n\n        for (const id of Object.keys(SR6.attributes)) {\n            if (!attributes.hasOwnProperty(id)) continue;\n            // Exclude invalid attributes for IC\n            if (['magic', 'edge', 'essence', 'resonance'].includes(id)) continue\n\n            const attribute = attributes[id];\n\n            // Overwrite the base as it's missing on new actors and IC should only derive it's meat attributes\n            // from it's host attributes.\n            attribute.base = 0;\n\n            const parts = new PartsList(attribute.mod);\n            parts.addPart('SR6.Host.Rating', MatrixRules.getICMeatAttributeBase(host.rating));\n            attribute.mod = parts.list;\n\n            AttributesPrep.prepareAttribute(id, attribute);\n        }\n    }\n\n    /**\n     * Calculate all matrix attributes without the meat attributes\n     */\n    static prepareMatrixAttributes(system: ICData) {\n        const { matrix } = system;\n\n        for (const id of Object.keys(SR6.matrixAttributes)) {\n            if (!matrix.hasOwnProperty(id)) continue;\n\n            const attribute = matrix[id];\n            AttributesPrep.prepareAttribute(id, attribute);\n        }\n    }\n\n}\n", "import { SR6Actor } from \"../SR6Actor\";\nimport { Helpers } from \"../../helpers\";\nimport InventoryData = Shadowrun.InventoryData;\nimport InventoriesData = Shadowrun.InventoriesData;\nimport { SR6Item } from \"../../item/SR6Item\";\n\n/**\n * Handle all inventory related actions on an SR6Actor'.\n *\n * An inventory can store a set of items on an actor, without actually altering the\n * itemData directly, only going through the documentData and indirectly referencing the item.\n *\n * It expects the actor to define a defaultInventory field of type InventoryData, which\n * is where all items without an inventory will be placed. This default inventory won't be\n * stored on the actor. This allows for the inventory system to be drop in, without any\n * migration needed.\n *\n * Furthermore a default Inventory (actor.allInventories) exists on all inventory actors\n * that has showAll set to true. An item can either be on no inventory, one custom inventory\n * or this allInventories, which will let it appear on all inventories.\n */\nexport class InventoryFlow {\n    actor: SR6Actor;\n\n    constructor(actor: SR6Actor) {\n        // Check for sub-type actors.\n        // NOTE: This should be checked through actor.system.modelProvider, though this doesn\u00B4t exist sometimes?\n        if (actor.type.includes('.') || !game.model.Actor.hasOwnProperty(actor.type)) {\n            console.debug(`Shadowrun 6e | InventoryFlow ignored actor ${actor.name} as it has a non-system DataModel`);\n            return;\n        }\n        // Some actor's might have inventories as a key with an undefined value.\n        // This will happen if there has been some tempering with inventory data.\n        // To prevent this causing issues, just set it to default data\n        if (actor.system.inventories === undefined) {\n            actor.system.inventories = foundry.utils.duplicate(game.model.Actor[actor.type].inventories);\n        }\n\n        this.actor = actor;\n    }\n\n    /**\n     * Create an inventory place for gear organization.\n     *\n     * @param name How to name the inventory, will also be its label for custom inventories.\n     * @returns Created inventories name\n     */\n    async create(name: string): Promise<string | void> {\n        console.debug(`Shadowrun 6e | Creating inventory ${name}`);\n\n        name = InventoryFlow._sanitzeName(name);\n\n        if (name.length === 0) return console.error('Shadowrun 6e | The given name has been reduced to a zero length, please try another name');\n        if (this.exists(name)) return ui.notifications?.warn(game.i18n.localize('SR6.Errors.InventoryAlreadyExists'));\n        if (this.actor.defaultInventory.name === name) return;\n\n        const updateData = {\n            'system.inventories': {\n                [name]: {\n                    name,\n                    label: name,\n                    itemIds: []\n                }\n            }\n        };\n\n        console.debug(`Shadowrun 6e | Executing update to create inventory`, updateData)\n        // Don't render to allow sheets to manage switching inventories.\n        await this.actor.update(updateData, { render: false });\n\n        return name;\n    }\n\n    /**\n     * Remove an actors inventory and maybe move the containing items over to another one.\n     *\n     * @param name The inventory name to be removed.\n     * @param moveTo The inventory name items need to moved over to, otherwise the default inventory.\n     */\n    async remove(name: string, moveTo: string = this.actor.defaultInventory.name) {\n        console.debug(`Shadowrun 6e | Removing inventory ${name}. Moving items over to ${moveTo}`);\n\n        if (this.disallowRemove(name))\n            return ui.notifications?.error(game.i18n.localize('SR6.Errors.DefaultInventoryCantBeRemoved'));\n\n        if (!this.exists(name))\n            return console.error(`Shadowrun 6e | Can't remove inventory ${name} or move its items over to inventory ${moveTo}`);\n\n        // Move items over to default in case of missing target inventory.\n        if (!this.exists(moveTo))\n            moveTo = this.actor.defaultInventory.name;\n\n        // Prepare deletion of inventory.\n        const updateData = Helpers.getDeleteKeyUpdateData('system.inventories', name);\n\n        // Default inventory is virtual, so only none default inventories need to have their items merged.\n        if (this.actor.defaultInventory.name !== moveTo) {\n            // @ts-expect-error\n            updateData[`system.inventories.${moveTo}.itemIds`] = [\n                ...this.actor.system.inventories[name].itemIds,\n                ...this.actor.system.inventories[moveTo].itemIds\n            ];\n        }\n\n        console.debug(`Shadowrun 6e | Executing update to remove inventory`, updateData);\n        // Don't render to allow sheets to manage switching inventories.\n        await this.actor.update(updateData, { render: false });\n    }\n\n    /**\n * Does this actor have the given inventory already?\n *\n * Note: Comparisons will only be against lower case.\n *\n * @param name The inventory name.\n */\n    exists(name): boolean {\n        return name === Object.keys(this.actor.system.inventories)\n            .find(inventory => inventory.toLowerCase() === name.toLowerCase());\n    }\n\n    /**\n     * Helper to get a specifics inventory's data\n     *\n     * @param name The inventory name to return.\n     */\n    getOne(name): InventoryData | undefined {\n        return this.actor.system.inventories[name];\n    }\n\n    /**\n     * Helper to get all inventories.\n     */\n    getAll(): InventoriesData {\n        return this.actor.system.inventories;\n    }\n\n    /**\n     * Rename an existing inventory to a new name.\n     *\n     * @param current The old name of the inventory.\n     * @param newName The new name of the inventory.\n     */\n    async rename(current: string, newName: string): Promise<string | void> {\n        console.debug(`Shadowrun 6e | Renaming the inventory ${current} to ${newName}`);\n\n        // Disallow editing of default inventory.\n        if (this.disallowRename(current))\n            return ui.notifications?.warn(game.i18n.localize('SR6.Warnings.CantEditDefaultInventory'));\n\n        newName = InventoryFlow._sanitzeName(newName);\n\n        if (newName.length === 0) return console.error('Shadowrun 6e | The given name has been reduced to a zero length, please try another name');\n        if (this.actor.defaultInventory.name === current) return;\n        if (current === newName) return;\n\n        const inventory = this.getOne(current);\n        if (!inventory) return;\n\n        // Change internal and display name.\n        inventory.name = newName;\n        inventory.label = newName;\n\n        const updateData = {\n            'system.inventories': {\n                [`-=${current}`]: null,\n                [newName]: inventory\n            }\n        };\n\n        console.debug(`Shadowrun 6e | Executing update to rename inventory`, updateData);\n        // Don't render to allow sheets to manage switching inventories.\n        await this.actor.update(updateData, { render: false });\n\n        return newName;\n    }\n\n    /**\n     * Add an array of items to the given inventory.\n     *\n     * @param inventoryName The inventory to add the items to.\n     * @param items The items in question. A single item can be given.\n     * @param removeFromCurrent By default the item added will be removed from another inventory it might be in.\n     */\n    async addItems(inventoryName: string, items: SR6Item[] | SR6Item, removeFromCurrent: boolean = true) {\n        console.debug(`Shadowrun 6e | Adding items to to inventory ${inventoryName}`, items);\n\n        // Default inventory is valid target here.\n        if (this.actor.defaultInventory.name !== inventoryName && !this.exists(inventoryName)) return;\n        if (items instanceof SR6Item) items = [items];\n        if (items.length === 0) return;\n\n        if (removeFromCurrent) {\n            // This will cause at least one additional re-render, but make the code clearer.\n            for (const item of items) await this.removeItem(item);\n        }\n\n        // Default inventory is no actual inventory that needs to be added to.\n        if (this.actor.defaultInventory.name === inventoryName) return;\n\n        for (const item of items) {\n            if (item.id) this.actor.system.inventories[inventoryName].itemIds.push(item.id);\n        }\n\n        const updateData = { [`system.inventories.${inventoryName}.itemIds`]: this.actor.system.inventories[inventoryName].itemIds };\n\n        console.debug(`Shadowrun 6e | Executing adding items to inventory`, updateData);\n        await this.actor.update(updateData);\n    }\n\n    /**\n    * Remove the given item from one or any inventory it might be in.\n    *\n    * @param item The item to be removed.\n    * @param name The one inventory to remove it from. If empty, will search for inventory the item is in.\n    */\n    async removeItem(item: SR6Item, name?: string) {\n        console.debug(`Shadowrun 6e | Removing item from inventory (${name || this.actor.defaultInventory.name})`, item);\n\n        // The default inventory is not actual inventory.\n        if (this.actor.defaultInventory.name === name) return;\n\n        // Collect affected inventories.\n        const inventories: InventoryData[] = name ?\n            [this.actor.system.inventories[name]] :\n            Object.values(this.actor.system.inventories).filter(({ itemIds }) => itemIds.includes(item.id as string));\n\n        // No inventory found means, it's in the default inventory and no removal is needed.\n        if (inventories.length === 0) return;\n\n        // Collect all inventories with remaining ids after the item's been removed.\n        const updateData = {};\n        for (const inventory of inventories) {\n            const itemIds = inventory.itemIds.filter(id => id !== item.id);\n            updateData[`system.inventories.${inventory.name}.itemIds`] = itemIds;\n        }\n\n        console.debug(`Shadowrun 6e | Executing update to remove item`, updateData);\n        if (updateData) await this.actor.update(updateData);\n    }\n\n    /**\n     * Sanitize inventory name to not use characters used within FoundryVTT Document#update and expandObject methods.\n     *\n     * @param name The inventory name, maybe containing prohibited characters\n     */\n    static _sanitzeName(name: string): string {\n        return Helpers.sanitizeDataKey(name);\n    }\n\n    /**\n     * Check if a rename would be allowed\n     * @param name The current name of the to be renamed invenotry\n     * @returns true, when it's not and false when it is.\n     */\n    disallowRename(name: string): boolean {\n        // Sanitize falsy by disallowing\n        if (!name) return true;\n        return [this.actor.defaultInventory.name, this.actor.allInventories.name].includes(name);\n    }\n\n    /**\n     * Check if a remove would be allowed.\n     *\n     * @param name The current name of the to be removed invenotry\n     * @returns true, when it's not and false when it is.\n     */\n    disallowRemove(name: string): boolean {\n        // Sanitize falsy by disallowing\n        if (!name) return true;\n        return [this.actor.defaultInventory.name, this.actor.allInventories.name].includes(name);\n    }\n\n    /**\n     * Check if the given item is within the given inventory.\n     *\n     * @param name Inventory name to check for item in\n     * @param item Item to check for in inventory\n     * @returns\n     */\n    isItemInInventory(name: string, item: SR6Item) {\n        const inventory = this.actor.inventory.getOne(name);\n        if (!inventory) return false;\n\n        return inventory.itemIds.includes(item.id as string);\n    }\n}\n", "import { SuccessTest } from './../../tests/SuccessTest';\nimport {SR6Actor} from \"../SR6Actor\";\n\n/**\n * Options for calling the general modifier access helper method ModifierFlow#totalFor.\n */\nexport interface ModifierFlowOptions {\n    // Set true to always re-apply selections.\n    reapply?: boolean;\n    // See SituationModifier applicable\n    applicable?: string[]\n    // If called from SuccessTest or sub-class context, allow it's documents and data to\n    // influence modifier calculation.\n    test?: SuccessTest\n}\n\n/**\n * Map the different kinds of modifier handlings that have been deployed accross the systems lifetime.\n *\n * All actor modifier totals should be access through this interface and only mapped onto the whatever\n * data / api lies underneath.\n *\n * Use this interface to retrieve a total value, not values used to create that total.\n *\n */\nexport class ModifierFlow {\n    // The actor document to retrieve modifiers for.\n    actor: SR6Actor;\n\n    constructor(actor: SR6Actor) {\n        this.actor = actor;\n    }\n\n    /**\n     * Retrieve a total modifier value for a specific modifier\n     *\n     * @param name The internal modifiers name. This can either be a situation modifier or an actor modifier\n     * @param options\n     * @returns Total value requested or zero, should the requested modifier not exist.\n     */\n    totalFor(name: string, options: ModifierFlowOptions={}): number {\n        // Get special cases that need local handling.\n        if (this[name] !== undefined) return this[name];\n\n        // Get global modifiers that can come from the general modifier system.\n        const modifiers = this.actor.getSituationModifiers();\n        if (modifiers.handlesTotalFor(name)) return modifiers.getTotalFor(name, options);\n\n        // Get global modifiers that come from the legacy actor modifier system.\n        return Number(this.actor.system.modifiers[name] ?? 0);\n    }\n\n    /**\n     * Translate simple modifier type string to the differently named actor / document method.\n     */\n    get wounds(): number {\n        return this.actor.getWoundModifier();\n    }\n}\n", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {PartsList} from \"../parts/PartsList\";\n\nexport interface AttributeOnlyTestData extends SuccessTestData {\n    // Selection for attributes used. attribute1 will be preselected.\n    attribute1: string\n    attribute2: string\n}\n\n\n/**\n * Handle custom attribute-only tests as defined in SR5#152.\n *\n * Attribute-Only Tests don't alter default SuccessTests rule wise but only Foundry behaviour wise.\n * Main difference is the user ability to change attributes before rolling dice.\n */\nexport class AttributeOnlyTest extends SuccessTest {\n    override data: AttributeOnlyTestData\n\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/attribute-only-test-dialog.html';\n    }\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        // Preset attribute selection with action attributes.\n        data.attribute1 = data.action.attribute;\n        data.attribute2 = data.action.attribute2;\n\n        return data;\n    }\n\n    override prepareBaseValues() {\n        this.prepareAttributeSelection();\n\n        super.prepareBaseValues();\n    }\n\n    prepareAttributeSelection() {\n        if (!this.actor) return;\n\n        // Clear everything. This way we don't have to track previous / current attributes and remove accordingly.\n        this.data.pool.mod = [];\n        const pool = new PartsList(this.pool.mod);\n\n        const attribute1 = this.actor.getAttribute(this.data.attribute1);\n        const attribute2 = this.actor.getAttribute(this.data.attribute2);\n\n        // Re-build base pool values first. Other modifiers will be added within prepareBaseValues\n        if (attribute1) pool.addPart(attribute1.label, attribute1.value);\n        if (attribute2) pool.addPart(attribute2.label, attribute2.value);\n\n        // Rebuild attribute specific modifiers previously added in TestCreate#_prepareTestDataWithAction\n        if (attribute1 && this.actor._isMatrixAttribute(this.data.attribute1)) this.actor._addMatrixParts(pool, true);\n        if (attribute2 && this.actor._isMatrixAttribute(this.data.attribute2)) this.actor._addMatrixParts(pool, true);\n    }\n}\n", "export const RecoveryRules = {\n    /**\n     * Can an actor heal physical damage depends on its stun track according to SR5#207 section 'Glitches&Healing'\n     *\n     * @param stunBoxes\n     */\n    canHealPhysicalDamage: (stunBoxes: number): boolean => {\n        return stunBoxes === 0;\n    }\n}", "import { SR6Actor } from \"../actor/SR6Actor\";\n\nexport interface DefeatedStatus {\n    unconscious: Boolean,\n    dying: Boolean,\n    dead: Boolean,\n\n}\nexport const ConditionRules = {\n    /**\n     * Determine the current defeated status of an actor\n     *\n     * @param actor The actor to check out\n     */\n    determineDefeatedStatus: (actor: SR6Actor): DefeatedStatus => {\n        const stun = actor.getStunTrack();\n        const phyiscal = actor.getPhysicalTrack();\n        const matrix = actor.getMatrixTrack();\n\n        let unconscious = false;\n        let dying = false;\n        let dead = false;\n\n        // Some actor types die differently.\n        if (actor.isIC() || actor.isSprite()) {\n            dead = matrix?.value === matrix?.max;\n        } else if (actor.isVehicle() || actor.isGrunt()) {\n            dead = phyiscal?.value === phyiscal?.max;\n        } else {\n            unconscious = stun?.value === stun?.max;\n            dying = phyiscal?.value === phyiscal?.max;\n            dead = phyiscal?.overflow.value === phyiscal?.overflow.max;\n        }\n\n        return {\n            unconscious, dying, dead\n        }\n    }\n\n}\n", "import {Helpers} from '../helpers';\nimport {SR6Item} from '../item/SR6Item';\nimport {FLAGS, SKILL_DEFAULT_NAME, SR, SYSTEM_NAME} from '../constants';\nimport {PartsList} from '../parts/PartsList';\nimport {SR6Combat} from \"../combat/SR6Combat\";\nimport {DataDefaults} from '../data/DataDefaults';\nimport {SkillFlow} from \"./flows/SkillFlow\";\nimport {SR6CharacterSheet} from \"./sheets/SR6CharacterSheet\";\nimport {SR6} from \"../config\";\nimport {CharacterPrep} from \"./prep/CharacterPrep\";\nimport {SR6ItemDataWrapper} from \"../data/SR6ItemDataWrapper\";\nimport {CritterPrep} from \"./prep/CritterPrep\";\nimport {SpiritPrep} from \"./prep/SpiritPrep\";\nimport {SpritePrep} from \"./prep/SpritePrep\";\nimport {VehiclePrep} from \"./prep/VehiclePrep\";\nimport {DocumentSituationModifiers} from \"../rules/DocumentSituationModifiers\";\nimport {SkillRules} from \"../rules/SkillRules\";\nimport {MatrixRules} from \"../rules/MatrixRules\";\nimport {ICPrep} from \"./prep/ICPrep\";\nimport {\n    EffectChangeData\n} from \"@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/effectChangeData\";\nimport {InventoryFlow} from \"./flows/InventoryFlow\";\nimport {ModifierFlow} from \"./flows/ModifierFlow\";\nimport {TestCreator} from \"../tests/TestCreator\";\nimport {AttributeOnlyTest} from \"../tests/AttributeOnlyTest\";\nimport {RecoveryRules} from \"../rules/RecoveryRules\";\nimport { CombatRules } from '../rules/CombatRules';\nimport { allApplicableDocumentEffects, allApplicableItemsEffects } from '../effects';\nimport { ConditionRules, DefeatedStatus } from '../rules/ConditionRules';\nimport { Translation } from '../utils/strings';\nimport { TeamworkMessageData } from './flows/TeamworkFlow';\nimport { SR6ActiveEffect } from '../effect/SR6ActiveEffect';\n\n\n/**\n * The general Shadowrun actor implementation, which currently handles all actor types.\n *\n * To easily access ActorData without any typing issues us the SR6Actor.asCritter helpers.\n * They are set up in a way that will handle both error management and type narrowing.\n * Example:\n * <pre><code>\n *     const actor = game.actors.get('randomId');\n *     const critter = actor.asCritter();\n *     if (!critter) return;\n *     // critter.type === 'critter'\n *     // critter.system as CritterData\n * </code></pre>\n *\n */\nexport class SR6Actor extends Actor {\n    /**\n     * Cache for armor calculations to avoid recalculating unnecessarily\n     * @type {Object}\n     * @private\n     */\n    private _armorCache: {\n        armor?: Shadowrun.ActorArmor,\n        timestamp: number,\n        equipmentHash: string\n    } = {\n        timestamp: 0,\n        equipmentHash: ''\n    };\n    // This is the default inventory name and label for when no other inventory has been created.\n    defaultInventory: Shadowrun.InventoryData = {\n        name: 'Carried',\n        label: 'SR6.Labels.Inventory.Carried',\n        itemIds: []\n    }\n    // This is a dummy inventory\n    allInventories: Shadowrun.InventoryData = {\n        name: 'All',\n        label: 'SR6.Labels.Inventory.All',\n        itemIds: [],\n        showAll: true\n    }\n\n    // Allow users to access to tests creation.\n    tests: typeof TestCreator = TestCreator;\n\n    // Add v10 type helper\n    system: Shadowrun.ShadowrunActorDataData; // TODO: foundry-vtt-types v10\n\n    // Holds all operations related to this actors inventory.\n    inventory: InventoryFlow;\n    // Holds all operations related to fetching an actors modifiers.\n    modifiers: ModifierFlow;\n\n    // TODO: foundry-vtt-types v10. Allows for {system: ...} to be given without type error\n    constructor(data, context?) {\n        super(data, context);\n\n        this.inventory = new InventoryFlow(this);\n        this.modifiers = new ModifierFlow(this);\n    }\n\n    /**\n     * Hook into item creation to invalidate armor cache\n     * @override\n     */\n    override async _onCreateEmbeddedDocuments(embeddedName, documents, result, options, userId) {\n        await super._onCreateEmbeddedDocuments(embeddedName, documents, result, options, userId);\n\n        // Only invalidate cache for items that could affect armor\n        if (embeddedName === 'Item' && documents.some(doc => doc.type === 'armor' || doc.type === 'equipment')) {\n            this.invalidateArmorCache();\n        }\n    }\n\n    /**\n     * Hook into item update to invalidate armor cache\n     * @override\n     */\n    override async _onUpdateEmbeddedDocuments(embeddedName, documents, result, options, userId) {\n        await super._onUpdateEmbeddedDocuments(embeddedName, documents, result, options, userId);\n\n        // Only invalidate cache for items that could affect armor\n        if (embeddedName === 'Item' && documents.some(doc => doc.type === 'armor' || doc.type === 'equipment')) {\n            this.invalidateArmorCache();\n        }\n    }\n\n    /**\n     * Hook into item deletion to invalidate armor cache\n     * @override\n     */\n    override async _onDeleteEmbeddedDocuments(embeddedName, documents, result, options, userId) {\n        await super._onDeleteEmbeddedDocuments(embeddedName, documents, result, options, userId);\n\n        // Only invalidate cache for items that could affect armor\n        if (embeddedName === 'Item' && documents.some(doc => doc.type === 'armor' || doc.type === 'equipment')) {\n            this.invalidateArmorCache();\n        }\n    }\n\n    getOverwatchScore() {\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\n        return os !== undefined ? os : 0;\n    }\n\n    async setOverwatchScore(value) {\n        const num = parseInt(value);\n        if (!isNaN(num)) {\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\n        }\n    }\n\n    /**\n     * General data preparation order.\n     * Check base, embeddedEntities and derived methods (see super.prepareData implementation for order)\n     * Only implement data preparation here that doesn't fall into the other three categories.\n     */\n    override prepareData() {\n        super.prepareData();\n    }\n\n    /**\n     *  Prepare base data. Be careful that this ONLY included data not in need for item access.\n     *  Check Actor and ClientDocumentMixin.prepareData for order of data prep.\n     *\n     *  Shadowrun data preparation is separate from the actor entity see the different <>Prep classes like\n     *  CharacterPrep\n     */\n    override prepareBaseData() {\n        super.prepareBaseData();\n\n        switch (this.type) {\n            case 'character':\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                CharacterPrep.prepareBaseData(this.system);\n                break;\n            case \"critter\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                CritterPrep.prepareBaseData(this.system);\n                break;\n            case \"spirit\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                SpiritPrep.prepareBaseData(this.system);\n                break;\n            case \"sprite\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                SpritePrep.prepareBaseData(this.system);\n                break;\n            case \"vehicle\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                VehiclePrep.prepareBaseData(this.system);\n                break;\n            case \"ic\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                ICPrep.prepareBaseData(this.system);\n                break;\n        }\n    }\n\n    /**\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\n     */\n    override prepareEmbeddedDocuments() {\n        // This will apply ActiveEffects, which is okay for modify (custom) effects, however add/multiply on .value will be\n        // overwritten.\n        super.prepareEmbeddedDocuments();\n\n        // NOTE: Hello there! Should you ever be in need of calling the grand parents methods, maybe to avoid applyActiveEffects,\n        //       look at this beautiful piece of software and shiver in it's glory.\n        // ClientDocumentMixin(class {}).prototype.prepareEmbeddedDocuments.apply(this);\n    }\n\n    /**\n     * Should some ActiveEffects need to be excluded from the general application, do so here.\n     * @override\n     */\n    override applyActiveEffects() {\n        // Shadowrun uses prepareDerivedData to calculate lots of things that don't exist on the data model in full.\n        // Errors during change application will stop that process and cause a broken sheet.\n        try {\n            super.applyActiveEffects();\n        } catch (error) {\n            console.error(`SR6: Elysium | Some effect changes could not be applied and might cause issues. Check effects of actor (${this.name}) / id (${this.id})`);\n            console.error(error);\n            ui.notifications?.error(`See browser console (F12): Some effect changes could not be applied and might cause issues. Check effects of actor (${this.name}) / id (${this.id})`);\n        }\n    }\n\n    /**\n     * Get all ActiveEffects applicable to this actor.\n     *\n     * The system uses a custom method of determining what ActiveEffect is applicable that doesn't\n     * use default FoundryVTT allApplicableEffect.\n     *\n     * The system has additional support for:\n     * - taking actor effects from items (apply-To actor)\n     * - having effects apply that are part of a targeted action against this actor (apply-To targeted_actor)\n     *\n     * NOTE: FoundryVTT applyActiveEffects will check for disabled effects.\n     */\n    //@ts-expect-error TODO: foundry-vtt-types v10\n    override *allApplicableEffects() {\n        for (const effect of allApplicableDocumentEffects(this, {applyTo: ['actor', 'targeted_actor']})) {\n            yield effect;\n        }\n\n        for (const effect of allApplicableItemsEffects(this, {applyTo: ['actor']})) {\n            yield effect;\n        }\n    }\n\n    /**\n     * All temporary ActiveEffects that should display on the Token\n     *\n     * The shadowrun6-elysium system uses a custom application method with different effect application targets. Some of\n     * these effects exist on the actor or one of it's items, however still shouldn't show in their token.\n     *\n     * While default Foundry relies on allApplicableEffects, as it only knows apply-to actor effects, we have to\n     * return all effects that are temporary instead, to include none-actor apply-to effects.\n     *\n     * NOTE: Foundry also shows disabled effects by default. We behave the same.\n     */\n    // @ts-expect-error NOTE: I don't fully understand the typing here.\n    override get temporaryEffects() {\n        // @ts-expect-error // TODO: foundry-vtt-types v10\n        const showEffectIcon = (effect: SR6ActiveEffect) => !effect.disabled && !effect.isSuppressed && effect.isTemporary && effect.appliesToLocalActor;\n\n        // Collect actor effects.\n        let effects = this.effects.filter(showEffectIcon);\n\n        // Collect item effects.\n        for (const item of this.items) {\n            effects = effects.concat(item.effects.filter(showEffectIcon));\n\n            // Collect nested item effects.\n            // for (const nestedItem of item.items) {\n            //     effects = effects.concat(nestedItem.effects.filter(showEffectIcon));\n            // }\n        }\n\n        return effects;\n    }\n\n    /**\n     * prepare embedded entities. Check ClientDocumentMixin.prepareData for order of data prep.\n     *\n     * At the moment general actor data preparation has been moved to derived data preparation, due it's dependence\n     * on prepareEmbeddedEntities and prepareEmbeddedItems for items modifying attribute values and more.\n     */\n    override prepareDerivedData() {\n        super.prepareDerivedData();\n\n        // General actor data preparation has been moved to derived data, as it depends on prepared item data.\n        const itemDataWrappers = this.items.map((item) => new SR6ItemDataWrapper(item as unknown as Shadowrun.ShadowrunItemData));\n        switch (this.type) {\n            case 'character':\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                CharacterPrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n            case \"critter\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                CritterPrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n            case \"spirit\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                SpiritPrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n            case \"sprite\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                SpritePrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n            case \"vehicle\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                VehiclePrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n            case \"ic\":\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                ICPrep.prepareDerivedData(this.system, itemDataWrappers);\n                break;\n        }\n\n        // Ensure matrix actions are available for all actors that can use the Matrix\n        if (game.user?.isGM && this.isOwner && (this.isCharacter() || this.isSprite() || this.isIC())) {\n            // Check if we've already added matrix actions to this actor\n            const hasMatrixActions = this.getFlag('shadowrun6-elysium', 'hasMatrixActions');\n            if (!hasMatrixActions) {\n                // We need to use a setTimeout to avoid issues with the actor being locked during data preparation\n                setTimeout(() => this.ensureMatrixActions(), 500);\n            }\n        }\n    }\n\n    /**\n     * NOTE: This method is unused at the moment, keep it for future inspiration.\n     */\n    applyOverrideActiveEffects() {\n        const changes = this.effects.reduce((changes: EffectChangeData[], effect) => {\n            if (effect.data.disabled) return changes;\n\n            // include changes partially matching given keys.\n            return changes.concat(effect.data.changes\n                .filter(change => change.mode === CONST.ACTIVE_EFFECT_MODES.OVERRIDE)\n                .map(change => {\n                    // @ts-expect-error // Foundry internal code, duplicate doesn't like EffectChangeData\n                    change = foundry.utils.duplicate(change);\n                    // @ts-expect-error\n                    change.effect = effect;\n                    change.priority = change.priority ?? (change.mode * 10);\n\n                    return change;\n                }));\n        }, []);\n        // Sort changes according to priority, in case it's ever needed.\n        // @ts-expect-error // a / b can't be null here...\n        changes.sort((a, b) => a.priority - b.priority);\n\n        for (const change of changes) {\n            // @ts-expect-error\n            change.effect.apply(this, change);\n        }\n    }\n\n    /**\n     * A helper method to only apply a subset of keys instead of all.\n     * @param partialKeys Can either be complete keys or partial keys\n     */\n    _applySomeActiveEffects(partialKeys: string[]) {\n        const changes = this._reduceEffectChangesByKeys(partialKeys);\n        this._applyActiveEffectChanges(changes);\n    }\n\n\n    /**\n     * A helper method to apply a active effect changes collection (which might come from multiple active effects)\n     * @param changes\n     */\n    _applyActiveEffectChanges(changes: EffectChangeData[]) {\n        const overrides = {};\n\n        for (const change of changes) {\n            // @ts-expect-error\n            const result = change.effect.apply(this, change);\n            if (result !== null) overrides[change.key] = result;\n        }\n\n        this.overrides = {...this.overrides, ...foundry.utils.expandObject(overrides)};\n    }\n\n    /**\n     * Reduce all changes across multiple active effects that match the given set of partial keys\n     * @param partialKeys Can either be complete keys or partial keys\n     */\n    _reduceEffectChangesByKeys(partialKeys: string[]): EffectChangeData[] {\n        // Collect only those changes matching the given partial keys.\n        const changes = this.effects.reduce((changes: EffectChangeData[], effect) => {\n            if (effect.data.disabled) return changes;\n\n            // include changes partially matching given keys.\n            return changes.concat(effect.data.changes\n                .filter(change => partialKeys.some(partialKey => change.key.includes(partialKey)))\n                .map(change => {\n                    // @ts-expect-error // Foundry internal code, duplicate doesn't like EffectChangeData\n                    change = foundry.utils.duplicate(change);\n                    // @ts-expect-error\n                    change.effect = effect;\n                    change.priority = change.priority ?? (change.mode * 10);\n\n                    return change;\n                }));\n        }, []);\n        // Sort changes according to priority, in case it's ever needed.\n        // @ts-expect-error // TODO: foundry-vtt-types v10\n        changes.sort((a, b) => a.priority - b.priority);\n\n        return changes;\n    }\n\n    /**\n     * Some actors have skills, some don't. While others don't have skills but derive skill values from their ratings.\n     */\n    findActiveSkill(skillName?: string): Shadowrun.SkillField | undefined {\n        // Check for faulty to catch empty names as well as missing parameters.\n        if (!skillName) return;\n\n        // Handle legacy skills (name is id)\n        const skills = this.getActiveSkills();\n        const skill = skills[skillName];\n        if (skill) return skill;\n\n        // Handle custom skills (name is not id)\n        return Object.values(skills).find(skill => skill.name === skillName);\n    }\n\n    findAttribute(id?: string): Shadowrun.AttributeField | undefined {\n        if (id === undefined) return;\n        const attributes = this.getAttributes();\n        if (!attributes) return;\n        return attributes[id];\n    }\n\n    findVehicleStat(statName?: string): Shadowrun.VehicleStat | undefined {\n        if (statName === undefined) return;\n\n        const vehicleStats = this.getVehicleStats();\n        if (vehicleStats)\n            return vehicleStats[statName];\n    }\n\n    getWoundModifier(): number {\n        if (!(\"wounds\" in this.system)) return 0;\n        return -1 * this.system.wounds.value || 0;\n    }\n\n    /** Use edge on actors that have an edge attribute.\n     *\n     * NOTE: This doesn't only include characters but spirits, critters and more.\n     */\n    async useEdge(by: number = -1) {\n        const edge = this.getEdge();\n        if (edge && edge.value === 0) return;\n        // NOTE: There used to be a bug which could lower edge usage below zero. Let's quietly ignore and reset. :)\n        const usesLeft = edge.uses > 0 ? edge.uses : by * -1;\n\n        const uses = Math.min(edge.value, usesLeft + by);\n\n        await this.update({'system.attributes.edge.uses': uses});\n    }\n\n    getEdge(): Shadowrun.EdgeAttributeField {\n        return this.system.attributes.edge;\n    }\n\n    hasArmor(): boolean {\n        return \"armor\" in this.system;\n    }\n\n    /**\n     * Generate a hash of the actor's equipped armor items\n     * This is used to determine if the armor cache is still valid\n     * @returns {string} A hash of the actor's equipped armor items\n     * @private\n     */\n    private _generateEquipmentHash(): string {\n        // Get all equipped armor items\n        const equippedArmor = this.items\n            .filter(item => item.type === 'armor' || item.type === 'equipment')\n            .filter(item => item.system.technology?.equipped)\n            .map(item => ({\n                id: item.id,\n                name: item.name,\n                type: item.type,\n                equipped: item.system.technology?.equipped,\n                dr: item.system.armor?.defense_rating?.value || 0\n            }));\n\n        // Generate a hash of the equipped armor\n        return JSON.stringify(equippedArmor);\n    }\n\n    /**\n     * Check if the armor cache is still valid\n     * @returns {boolean} True if the cache is valid, false otherwise\n     * @private\n     */\n    private _isArmorCacheValid(): boolean {\n        // If there's no cache, it's not valid\n        if (!this._armorCache.armor) return false;\n\n        // Generate a hash of the current equipped armor\n        const currentHash = this._generateEquipmentHash();\n\n        // Check if the hash matches the cached hash\n        return this._armorCache.equipmentHash === currentHash;\n    }\n\n    /**\n     * Invalidate the armor cache\n     * This should be called when equipment changes\n     */\n    invalidateArmorCache(): void {\n        console.log(`Shadowrun 6e | Invalidating armor cache for ${this.name}`);\n        this._armorCache = {\n            timestamp: 0,\n            equipmentHash: ''\n        };\n    }\n\n    /**\n     * Return armor worn by this actor.\n     *\n     * @param damage If given will be applied to the armor to get modified armor.\n     * @returns Armor or modified armor.\n     */\n    getArmor(damage?:Shadowrun.DamageData) {\n        // If damage is provided, we can't use the cache\n        if (damage) {\n            return this._calculateArmor(damage);\n        }\n\n        // Check if the cache is valid\n        if (this._isArmorCacheValid()) {\n            console.log(`Shadowrun 6e | Using cached armor for ${this.name}`);\n            return foundry.utils.duplicate(this._armorCache.armor);\n        }\n\n        // Calculate the armor and cache it\n        const armor = this._calculateArmor();\n\n        // Cache the armor\n        this._armorCache = {\n            armor: foundry.utils.duplicate(armor),\n            timestamp: Date.now(),\n            equipmentHash: this._generateEquipmentHash()\n        };\n\n        console.log(`Shadowrun 6e | Cached armor for ${this.name}:`, this._armorCache);\n\n        return armor;\n    }\n\n    /**\n     * Calculate the armor worn by this actor.\n     * This is the actual calculation method, while getArmor() handles caching.\n     *\n     * @param damage If given will be applied to the armor to get modified armor.\n     * @returns Armor or modified armor.\n     * @private\n     */\n    private _calculateArmor(damage?:Shadowrun.DamageData) {\n        console.log(`Shadowrun 6e | Calculating armor for ${this.name}`);\n\n        // Prepare base armor data.\n        const armor = \"armor\" in this.system ?\n            foundry.utils.duplicate(this.system.armor) :\n            DataDefaults.actorArmor();\n        // Prepare damage to apply to armor.\n        damage = damage || DataDefaults.damageData();\n\n        Helpers.calcTotal(damage);\n        Helpers.calcTotal(damage.ap);\n\n        // Modify by penetration\n        if (damage.ap.value !== 0)\n            PartsList.AddUniquePart(armor.mod, 'SR6.AP', damage.ap.value);\n\n        // Modify by element\n        if (damage.element.value !== '') {\n            const armorForDamageElement = armor[damage.element.value] || 0;\n            if (armorForDamageElement > 0)\n                PartsList.AddUniquePart(armor.mod, 'SR6.Element', armorForDamageElement);\n        }\n\n        Helpers.calcTotal(armor, {min: 0});\n\n        return armor;\n    }\n\n\n\n    getMatrixDevice(): SR6Item | undefined {\n        if (!(\"matrix\" in this.system)) return;\n        const matrix = this.system.matrix;\n        if (matrix.device) return this.items.get(matrix.device);\n    }\n\n    /**\n     * Check if the actor has a matrix device with an active hacking program\n     * @returns True if the actor has a matrix device with an active hacking program\n     */\n    hasActiveHackingProgram(): boolean {\n        // First, check if the actor has a matrix device\n        const matrixDevice = this.getMatrixDevice();\n        if (!matrixDevice) return false;\n\n        // Get all program items owned by the actor\n        const programs = this.items.filter(item => item.type === 'program');\n\n        // Check if any of the programs are hacking programs\n        // In this implementation, we assume all programs on the device are active\n        // A more sophisticated implementation might check for a specific 'active' flag on programs\n        return programs.some(program => MatrixRules.isHackingProgram(program));\n    }\n\n    getFullDefenseAttribute(): Shadowrun.AttributeField | undefined {\n        if (this.isVehicle()) {\n            return this.findVehicleStat('pilot');\n        } else if (this.isCharacter()) {\n            const character = this.asCharacter();\n            if (character) {\n                let att = character.system.full_defense_attribute;\n                if (!att) att = 'willpower';\n                return this.findAttribute(att);\n            }\n        }\n    }\n\n    getEquippedWeapons(): SR6Item[] {\n        return this.items.filter((item: SR6Item) => item.isEquipped() && item.isWeapon);\n    }\n\n    /**\n     * Amount of recoil compensation this actor has available (without the weapon used).\n     */\n    get recoilCompensation(): number {\n        if(!this.system.values.hasOwnProperty('recoil_compensation')) return 0;\n        //@ts-expect-error\n        return this.system.values.recoil_compensation.value;\n    }\n\n    get unarmedAttackRating() : number {\n        if(!this.system.values.hasOwnProperty(\"attack_rating\")) return 0;\n        //@ts-expect-error\n        return this.system.values.unarmed_attack_rating.value;\n    }\n\n    get meleeAttackRating(): number {\n        if(!this.system.values.hasOwnProperty(\"attack_rating\")) return 0;\n        //@ts-expect-error\n        return this.system.values.melee_attack_rating.value;\n    }\n\n    get defenseRating() : number {\n        if(!this.system.values.hasOwnProperty(\"defense_rating\")) return 0;\n        //@ts-expect-error\n        return this.system.values.defense_rating.value;\n    }\n\n\n    /**\n     * Current recoil compensation with current recoil included.\n     *\n     * @returns A positive number or zero.\n    */\n    get currentRecoilCompensation(): number {\n        return Math.max(this.recoilCompensation - this.recoil, 0);\n    }\n\n    /**\n     * Amount of progressive recoil this actor has accrued.\n     */\n    get recoil(): number {\n        if(!this.system.values.hasOwnProperty('recoil')) return 0;\n        //@ts-expect-error\n        return this.system.values.recoil.value;\n    }\n\n    getDeviceRating(): number {\n        if (!(\"matrix\" in this.system)) return 0;\n        // @ts-expect-error // parseInt does indeed allow number types.\n        return parseInt(this.system.matrix.rating);\n    }\n\n    getAttributes(): Shadowrun.Attributes {\n        return this.system.attributes;\n    }\n\n    /**\n     * Return the given attribute, no matter its source.\n     *\n     * For characters and similar this will only return their attributes.\n     * For vehicles this will also return their vehicle stats.\n\n     * @param name An attribute or other stats name.\n     * @returns Note, this can return undefined. It is not typed that way, as it broke many things. :)\n     */\n    getAttribute(name: string): Shadowrun.AttributeField {\n        // First check vehicle stats, as they don't always exist.\n        const stats = this.getVehicleStats();\n        if (stats && stats[name]) return stats[name];\n\n        // Second check general attributes.\n        const attributes = this.getAttributes();\n        return attributes[name];\n    }\n\n\n    /** Return actor type, which can be different kind of actors from 'character' to 'vehicle'.\n     *  Please check SR5ActorType for reference.\n     */\n    getType(): string {\n        return this.type;\n    }\n\n    isCharacter(): boolean {\n        return this.getType() === 'character';\n    }\n\n    isSpirit(): boolean {\n        return this.getType() === 'spirit';\n    }\n\n    isSprite(): boolean {\n        return this.getType() === 'sprite';\n    }\n\n    isVehicle() {\n        return this.getType() === 'vehicle';\n    }\n\n    isGrunt() {\n        if (!(\"is_npc\" in this.system) || !(\"npc\" in this.system)) return false;\n\n        return this.system.is_npc && this.system.npc.is_grunt;\n    }\n\n    isCritter() {\n        return this.getType() === 'critter';\n    }\n\n    isIC() {\n        return this.getType() === 'ic';\n    }\n\n    /**\n     * Determine if this actor is able to have natural damage recovery.\n     * @returns true in case of possible natural recovery.\n     */\n    get hasNaturalRecovery(): boolean {\n        return this.isCharacter() || this.isCritter();\n    }\n\n    getVehicleTypeSkillName(): string | undefined {\n        if (!(\"vehicleType\" in this.system)) return;\n\n        switch (this.system.vehicleType) {\n            case 'air':\n                return 'pilot_aircraft';\n            case 'ground':\n                return 'pilot_ground_craft';\n            case 'water':\n                return 'pilot_water_craft';\n            case 'aerospace':\n                return 'pilot_aerospace';\n            case 'walker':\n                return 'pilot_walker';\n            case 'exotic':\n                return 'pilot_exotic_vehicle';\n            default:\n                return;\n        }\n    }\n\n    getVehicleTypeSkill(): Shadowrun.SkillField | undefined {\n        if (!this.isVehicle()) return;\n\n        const name = this.getVehicleTypeSkillName();\n        return this.findActiveSkill(name);\n    }\n\n    get hasSkills(): boolean {\n        return this.getSkills() !== undefined;\n    }\n\n    getSkills(): Shadowrun.CharacterSkills {\n        return this.system.skills;\n    }\n\n    getActiveSkills(): Shadowrun.Skills {\n        return this.system.skills.active;\n    }\n\n    getNetworkController(): string|undefined {\n        if(!this.isVehicle()) return;\n\n        return this.asVehicle()?.system?.networkController;\n    }\n\n    async setNetworkController(networkController: string|undefined): Promise<void> {\n        if(!this.isVehicle()) return;\n\n        await this.update({ 'system.networkController': networkController });\n    }\n\n    get canBeNetworkDevice(): boolean {\n        return this.isVehicle();\n    }\n\n    /**\n     * Determine if an actor can choose a special trait using the special field.\n     */\n    get hasSpecial(): boolean {\n        return ['character', 'sprite', 'spirit', 'critter'].includes(this.type);\n    }\n\n    /**\n     * Determine if an actor can alter the special trait\n     */\n    get canAlterSpecial(): boolean {\n        return this.hasSpecial && ['character', 'critter'].includes(this.type);\n    }\n\n    /**\n     * Determine if an actor can choose a full defense attribute\n     */\n    get hasFullDefense(): boolean {\n        return ['character', 'vehicle', 'sprite', 'spirit', 'critter'].includes(this.type);\n    }\n\n    /**\n     * Determine if an actor is awakened / magical in some kind.\n     */\n    get isAwakened(): boolean {\n        return this.system.special === 'magic';\n    }\n\n    /**\n     * This actor is emerged as a matrix native actor (Technomancers, Sprites)\n     *\n     */\n    get isEmerged(): boolean {\n        if (this.isSprite()) return true;\n        if (this.isCharacter() && this.system.special === 'resonance') return true;\n\n        return false;\n    }\n\n    /**\n     * Return the full pool of a skill including attribute and possible specialization bonus.\n     * @param skillId The ID of the skill. Note that this can differ from what is shown in the skill list. If you're\n     *                unsure about the id and want to search\n     * @param options An object to change the behavior.\n     *                The property specialization will trigger the pool value to be raised by a specialization modifier\n     *                The property byLabel will cause the param skillId to be interpreted as the shown i18n label.\n     */\n    getPool(skillId: string, options = {specialization: false, byLabel: false}): number {\n        const skill = options.byLabel ? this.getSkillByLabel(skillId) : this.getSkill(skillId);\n        if (!skill || !skill.attribute) return 0;\n        if (!SkillFlow.allowRoll(skill)) return 0;\n\n        const attribute = this.getAttribute(skill.attribute);\n\n        // An attribute can have a NaN value if no value has been set yet. Do the skill for consistency.\n        const attributeValue = typeof attribute.value === 'number' ? attribute.value : 0;\n        const skillValue = typeof skill.value === 'number' ? skill.value : 0;\n\n        if (SkillRules.mustDefaultToRoll(skill) && SkillRules.allowDefaultingRoll(skill)) {\n            return SkillRules.defaultingModifier + attributeValue;\n        }\n\n        const specializationBonus = options.specialization ? SR.skill.SPECIALIZATION_MODIFIER : 0;\n        return skillValue + attributeValue + specializationBonus;\n    }\n\n    /**\n     * Find a skill either by id or label.\n     *\n     * Skills are mapped by an id, which can be a either a lower case name (legacy skills) or a short uid (custom, language, knowledge).\n     * Legacy skills use their name as the id, while not having a name set on the SkillField.\n     * Custom skills use an id and have their name set, however no label. This goes for active, language and knowledge.\n     *\n     * NOTE: Normalizing skill mapping from active, language and knowledge to a single skills with a type property would\n     *       clear this function up.\n     *\n     * @param id Either the searched id, name or translated label of a skill\n     * @param options .byLabel when true search will try to match given skillId with the translated label\n     */\n    getSkill(id: string, options = {byLabel: false}): Shadowrun.SkillField | undefined {\n        if (options.byLabel)\n            return this.getSkillByLabel(id);\n\n        const {skills} = this.system;\n\n        // Find skill by direct id to key matching.\n        if (skills.active.hasOwnProperty(id)) {\n            return skills.active[id];\n        }\n        if (skills.language.value.hasOwnProperty(id)) {\n            return skills.language.value[id];\n        }\n        // Knowledge skills are de-normalized into categories (street, hobby, ...)\n        for (const categoryKey in skills.knowledge) {\n            if (skills.knowledge.hasOwnProperty(categoryKey)) {\n                const category = skills.knowledge[categoryKey];\n                if (category.value.hasOwnProperty(id)) {\n                    return category.value[id];\n                }\n            }\n        }\n\n        return this.getSkillByLabel(id)\n    }\n\n    /**\n     * Search all skills for a matching i18n translation label.\n     * NOTE: You should use getSkill if you have the skillId ready. Only use this for ease of use!\n     *\n     * @param searchedFor The translated output of either the skill label (after localize) or name of the skill in question.\n     * @return The first skill found with a matching translation or name.\n     */\n    getSkillByLabel(searchedFor: string): Shadowrun.SkillField | undefined {\n        if (!searchedFor) return;\n\n        const possibleMatch = (skill: Shadowrun.SkillField): string => skill.label ? game.i18n.localize(skill.label as Translation) : skill.name;\n\n        const skills = this.getSkills();\n\n        for (const [id, skill] of Object.entries(skills.language.value)) {\n            if (searchedFor === possibleMatch(skill))\n                return {...skill, id};\n        }\n\n        // Iterate over all different knowledge skill categories\n        for (const categoryKey in skills.knowledge) {\n            if (!skills.knowledge.hasOwnProperty(categoryKey)) continue;\n            // Typescript can't follow the flow here...\n            const categorySkills = skills.knowledge[categoryKey].value as Shadowrun.SkillField[];\n            for (const [id, skill] of Object.entries(categorySkills)) {\n                if (searchedFor === possibleMatch(skill))\n                    return {...skill, id};\n            }\n        }\n\n        for (const [id, skill] of Object.entries(skills.active)) {\n            if (searchedFor === possibleMatch(skill))\n                return {...skill, id};\n        }\n    }\n\n    /**\n     * For the given skillId as it be would in the skill data structure for either\n     * active, knowledge or language skill.\n     *\n     * @param skillId Legacy / default skills have human-readable ids, while custom one have machine-readable.\n     * @returns The label (not yet translated) OR set custom name.\n     */\n    getSkillLabel(skillId: string): string {\n        const skill = this.getSkill(skillId);\n        if (!skill) {\n            return '';\n        }\n\n        return skill.label ?? skill.name ?? '';\n    }\n\n    /**\n     * Add a new knowledge skill for a specific category.\n     *\n     * Knowledge skills are stored separately from active and language skills and have\n     * some values pre-defined by their category (street, professional, ...)\n     *\n     * @param category Define the knowledge skill category\n     * @param skill  Partially define the SkillField properties needed. Omitted properties will be default.\n     * @returns The id of the created knowledge skill.\n     */\n    async addKnowledgeSkill(category: keyof Shadowrun.KnowledgeSkills, skill: Partial<Shadowrun.SkillField>={name: SKILL_DEFAULT_NAME}): Promise<string|undefined> {\n        if (!this.system.skills.knowledge.hasOwnProperty(category)) {\n            console.error(`SR6: Elysium | Tried creating knowledge skill with unknown category ${category}`);\n            return;\n        }\n\n        skill = DataDefaults.skillData(skill);\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `system.skills.knowledge.${category}.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n\n        await this.update(updateData);\n\n        return id;\n    }\n\n    /**\n     * Add a new active skill.\n     *\n     * @param skillData Partially define the SkillField properties needed. Omitted properties will be default.\n     * @returns The new active skill id.\n     */\n    async addActiveSkill(skillData: Partial<Shadowrun.SkillField> = {name: SKILL_DEFAULT_NAME}): Promise<string | undefined> {\n        const skill = DataDefaults.skillData(skillData);\n\n        const activeSkillsPath = 'system.skills.active';\n        const updateSkillDataResult = Helpers.getRandomIdSkillFieldDataEntry(activeSkillsPath, skill);\n\n        if (!updateSkillDataResult) return;\n\n        const {updateSkillData, id} = updateSkillDataResult;\n\n        await this.update(updateSkillData as object);\n\n        return id;\n    }\n\n    /**\n     * Remove a language skill by it's id.\n     * @param skillId What skill id to delete.\n     */\n    async removeLanguageSkill(skillId: string) {\n        const updateData = Helpers.getDeleteKeyUpdateData('system.skills.language.value', skillId);\n        await this.update(updateData);\n    }\n\n    /**\n     * Add a language skill.\n     *\n     * @param skill Partially define the SkillField properties needed. Omitted properties will be default.\n     * @returns The new language skill id.\n     */\n    async addLanguageSkill(skill): Promise<string> {\n        const defaultSkill = {\n            name: '',\n            specs: [],\n            base: 0,\n            value: 0,\n            // TODO: BUG ModifiableValue is ModList<number>[] and not number\n            mod: 0,\n        };\n        skill = {\n            ...defaultSkill,\n            ...skill,\n        };\n\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `system.skills.language.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n\n        await this.update(updateData);\n\n        return id;\n    }\n\n    /**\n     * Remove a knowledge skill\n     * @param skillId What skill id to delete.\n     * @param category The matching knowledge skill category for skillId\n     */\n    async removeKnowledgeSkill(skillId: string, category: keyof Shadowrun.KnowledgeSkills) {\n        const updateData = Helpers.getDeleteKeyUpdateData(`system.skills.knowledge.${category}.value`, skillId);\n        await this.update(updateData);\n    }\n\n    /**\n     * Delete the given active skill by it's id. It doesn't\n     *\n     * @param skillId Either a random id for custom skills or the skills name used as an id.\n     */\n    async removeActiveSkill(skillId: string) {\n        const activeSkills = this.getActiveSkills();\n        if (!activeSkills.hasOwnProperty(skillId)) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        // Don't delete legacy skills to allow prepared items to use them, should the user delete by accident.\n        // New custom skills won't have a label set also.\n        if (skill.name === '' && skill.label !== undefined && skill.label !== '') {\n            await this.hideSkill(skillId);\n            // NOTE: For some reason unlinked token actors won't cause a render on update?\n            //@ts-expect-error // TODO: foundry-vtt-types v10\n            if (!this.prototypeToken.actorLink)\n                await this.sheet?.render();\n            return;\n        }\n\n        // Remove custom skills without mercy!\n        const updateData = Helpers.getDeleteKeyUpdateData('system.skills.active', skillId);\n        await this.update(updateData);\n    }\n\n    /**\n     * Mark the given skill as hidden.\n     *\n     * NOTE: Hiding skills has\n     *\n     * @param skillId The id of any type of skill.\n     */\n    async hideSkill(skillId: string) {\n        if (!skillId) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        skill.hidden = true;\n        const updateData = Helpers.getUpdateDataEntry(`system.skills.active.${skillId}`, skill);\n        await this.update(updateData);\n    }\n\n    /**\n     * mark the given skill as visible.\n     *\n     * @param skillId The id of any type of skill.\n     */\n    async showSkill(skillId: string) {\n        if (!skillId) return;\n        const skill = this.getSkill(skillId);\n        if (!skill) return;\n\n        skill.hidden = false;\n        const updateData = Helpers.getUpdateDataEntry(`system.skills.active.${skillId}`, skill);\n        await this.update(updateData);\n    }\n\n    /**\n     * Show all hidden skills.\n     *\n     * For hiding/showing skill see SR6Actor#showSkill and SR6Actor#hideSkill.\n     */\n    async showHiddenSkills() {\n        const updateData = {};\n\n        const skills = this.getActiveSkills();\n        for (const [id, skill] of Object.entries(skills)) {\n            if (skill.hidden === true) {\n                skill.hidden = false;\n                updateData[`system.skills.active.${id}`] = skill;\n            }\n        }\n\n        if (!updateData) return;\n\n        await this.update(updateData);\n        // NOTE: For some reason unlinked token actors won't cause a render on update?\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        if (!this.prototypeToken.actorLink)\n            await this.sheet?.render();\n    }\n\n    /**\n     * Prompt the current user for a generic roll.\n     */\n    async promptRoll() {\n        await this.tests.promptSuccessTest();\n    }\n\n    /**\n     * The general action process has currently no good way of injecting device ratings into the mix.\n     * So, let's trick a bit.\n     *\n     * @param options\n     */\n    async rollDeviceRating(options?: Shadowrun.ActorRollOptions) {\n        const rating = this.getDeviceRating();\n\n        const showDialog = this.tests.shouldShowDialog(options?.event);\n        const testCls = this.tests._getTestClass('SuccessTest');\n        const test = new testCls({}, {actor: this}, {showDialog});\n\n        // Build pool values.\n        const pool = new PartsList<number>(test.pool.mod);\n        pool.addPart('SR6.Labels.ActorSheet.DeviceRating', rating);\n        pool.addPart('SR6.Labels.ActorSheet.DeviceRating', rating);\n\n\n        // Build modifiers values.\n        const mods = new PartsList<number>(test.data.modifiers.mod);\n        mods.addUniquePart('SR6.ModifierTypes.Global', this.modifiers.totalFor('global'));\n\n        return await test.execute();\n    }\n\n    /**\n     * Get an action from any pack with the given name, configured for this actor and let the caller handle it..\n     *\n     * @param packName The name of the item pack to search.\n     * @param actionName The name within that pack.\n     * @param options Success Test options\n     * @returns the test instance after configuration and before it's execution.\n     */\n    async packActionTest(packName: Shadowrun.PackName, actionName: Shadowrun.PackActionName, options?: Shadowrun.ActorRollOptions) {\n        const showDialog = this.tests.shouldShowDialog(options?.event);\n        return await this.tests.fromPackAction(packName, actionName, this, {showDialog});\n    }\n\n    /**\n     * Roll an action from any pack with the given name.\n     *\n     * @param packName The name of the item pack to search.\n     * @param actionName The name within that pack.\n     * @param options Success Test options\n     * @returns the test instance after it's been executed\n     */\n    async rollPackAction(packName: Shadowrun.PackName, actionName: Shadowrun.PackActionName, options?: Shadowrun.ActorRollOptions) {\n        const test = await this.packActionTest(packName, actionName, options);\n\n        if (!test) return console.error('Shadowrun 6e | Rolling pack action failed');\n\n        return await test.execute();\n    }\n\n    /**\n     * Get an action as defined within the systems general action pack.\n     *\n     * @param actionName The action with in the general pack.\n     * @param options Success Test options\n     */\n    async generalActionTest(actionName: Shadowrun.PackActionName, options?: Shadowrun.ActorRollOptions) {\n        return await this.packActionTest(SR6.packNames.generalActions as Shadowrun.PackName, actionName, options);\n    }\n\n    /**\n     * Roll an action as defined within the systems general action pack.\n     *\n     * @param actionName The action with in the general pack.\n     * @param options Success Test options\n     */\n    async rollGeneralAction(actionName: Shadowrun.PackActionName, options?: Shadowrun.ActorRollOptions) {\n        return await this.rollPackAction(SR6.packNames.generalActions as Shadowrun.PackName, actionName, options);\n    }\n\n    /**\n     * Roll a skill test for a specific skill\n     * @param skillId The id or label for the skill. When using a label, the appropriate option must be set.\n     * @param options Optional options to configure the roll.\n     * @param options.byLabel true to search the skill by label as displayed on the sheet.\n     * @param options.specialization true to configure the skill test to use a specialization.\n     */\n    async rollSkill(skillId: string, options: Shadowrun.SkillRollOptions={}) {\n        console.info(`SR6: Elysium | Rolling skill test for ${skillId}`);\n\n        const action = this.skillActionData(skillId, options);\n        if (!action) return;\n        if(options.threshold) {\n            action.threshold = options.threshold\n        }\n\n        const showDialog = this.tests.shouldShowDialog(options.event);\n        const test = await this.tests.fromAction(action, this, {showDialog});\n        if (!test) return;\n\n        return await test.execute();\n    }\n\n    /**\n     * Roll a general attribute test with one or two attributes.\n     *\n     * @param name The attributes name as defined within data\n     * @param options Change general roll options.\n     */\n    async rollAttribute(name, options: Shadowrun.ActorRollOptions={}) {\n        console.info(`SR6: Elysium | Rolling attribute ${name} test from ${this.constructor.name}`);\n\n        // Prepare test from action.\n        const action = DataDefaults.actionRollData({attribute: name, test: AttributeOnlyTest.name});\n        const showDialog = this.tests.shouldShowDialog(options.event);\n        const test = await this.tests.fromAction(action, this, {showDialog});\n        if (!test) return;\n\n        return await test.execute();\n    }\n\n    /**\n     * Roll a skill test for a specific skill\n     * @param skillId The id or label for the skill. When using a label, the appropriate option must be set.\n     * @param options Optional options to configure the roll.\n     * @param options.byLabel true to search the skill by label as displayed on the sheet.\n     * @param options.specialization true to configure the skill test to use a specialization.\n     */\n    async startTeamworkTest(skillId: string, options: Shadowrun.SkillRollOptions={}) {\n        console.info(`SR6: Elysium | Starting teamwork test for ${skillId}`);\n\n        // Prepare message content.\n        const templateData = {\n            title: \"Teamwork \" + Helpers.getSkillTranslation(skillId),\n            // Note: While ChatData uses ids, this uses full documents.\n            speaker: {\n                actor: this,\n                token: this.token\n            },\n            participants: []\n        };\n        const content = await renderTemplate('systems/shadowrun6-elysium/dist/templates/rolls/teamwork-test-message.html', templateData);\n        // Prepare the actual message.\n        const messageData =  {\n            user: game.user?.id,\n            // Use type roll, for Foundry built in content visibility.\n            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n            speaker: {\n                actor: this.id,\n                alias: game.user?.name,\n                token: this.token\n            },\n            content,\n            // Manually build flag data to give renderChatMessage hook flag access.\n            // This test data is needed for all subsequent testing based on this chat messages.\n            flags: {\n                // Add test data to message to allow ChatMessage hooks to access it.\n                [SYSTEM_NAME]: {[FLAGS.Test]: {skill: skillId}},\n                'core.canPopout': true\n            },\n            sound: CONFIG.sounds.dice,\n        };\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const message = await ChatMessage.create(messageData, options);\n\n        if (!message) return;\n\n        return message;\n    }\n\n        /**\n     * Roll a skill test for a specific skill\n     * @param skillId The id or label for the skill. When using a label, the appropriate option must be set.\n     * @param options Optional options to configure the roll.\n     * @param options.byLabel true to search the skill by label as displayed on the sheet.\n     * @param options.specialization true to configure the skill test to use a specialization.\n     */\n        async rollTeamworkTest(skillId: string, teamworkData: TeamworkMessageData, options: Shadowrun.SkillRollOptions={}) {\n            console.info(`SR6: Elysium | Rolling teamwork test for ${skillId}`);\n\n            const action = this.skillActionData(skillId, options);\n            if (!action) return;\n            if(teamworkData.criticalGlitch != true) {\n                action.limit.mod.push({name: \"Teamwork\", value: teamworkData.additionalLimit})\n            }\n\n            action.dice_pool_mod.push({name: \"Teamwork\", value: teamworkData.additionalDice})\n\n            const showDialog = this.tests.shouldShowDialog(options.event);\n            const test = await this.tests.fromAction(action, this, {showDialog});\n            if (!test) return;\n\n\n            return await test.execute();\n        }\n\n    /**\n     * Is the given attribute id a matrix attribute\n     * @param attribute\n     */\n    _isMatrixAttribute(attribute: string): boolean {\n        return SR6.matrixAttributes.hasOwnProperty(attribute);\n    }\n\n    /**\n     * Add matrix modifier values to the given modifier parts from whatever Value as part of\n     * matrix success test.\n     *\n     * @param parts The Value.mod field as a PartsList\n     * @param atts The attributes used for the success test.\n     */\n    _addMatrixParts(parts: PartsList<number>, atts) {\n        if (Helpers.isMatrix(atts)) {\n            if (!(\"matrix\" in this.system)) return;\n\n            // Apply general matrix modifiers based on commlink/cyberdeck status.\n            const matrix = this.system.matrix;\n            if (matrix.hot_sim) parts.addUniquePart('SR6.HotSim', 2);\n            if (matrix.running_silent) parts.addUniquePart('SR6.RunningSilent', -2);\n        }\n    }\n\n    /**\n     * Remove matrix modifier values to the given modifier part\n     *\n     * @param parts A Value.mod field as a PartsList\n     */\n    _removeMatrixParts(parts: PartsList<number>) {\n        ['SR6.HotSim', 'SR6.RunningSilent'].forEach(part => parts.removePart(part));\n    }\n\n    /**\n     * Build an action for the given skill id based on it's configured values.\n     *\n     * @param skillId Any skill, no matter if active, knowledge or language\n     * @param options\n     */\n    skillActionData(skillId: string, options: Shadowrun.SkillRollOptions = {}): Shadowrun.ActionRollData|undefined {\n        const byLabel = options.byLabel || false;\n        const skill = this.getSkill(skillId, {byLabel});\n        if (!skill) {\n            console.error(`Shadowrun 6e | Skill ${skillId} is not registered of actor ${this.id}`);\n            return;\n        }\n\n        // When fetched by label, getSkillByLabel will inject the id into SkillField.\n        skillId = skill.id || skillId;\n\n        // Derive limit from skill attribute.\n        const attribute = this.getAttribute(skill.attribute);\n        // TODO: Typing. LimitData is incorrectly typed to ActorAttributes only but including limits.\n        const limit = '';\n        // Should a specialization be used?\n        const spec = options.specialization || false;\n\n        return DataDefaults.actionRollData({\n            skill: skillId,\n            spec,\n            attribute: skill.attribute,\n            limit: {\n                base: 0, value: 0, mod: [],\n                attribute: limit,\n                base_formula_operator: 'add',\n            },\n\n            test: 'SkillTest'\n        });\n    }\n\n    /**\n     * Override setFlag to remove the 'SR6.' from keys in modlists, otherwise it handles them as embedded keys\n     * @param scope\n     * @param key\n     * @param value\n     */\n    //@ts-expect-error // TODO: foundry-vtt-types v10\n    setFlag(scope: string, key: string, value: any): Promise<any> {\n        const newValue = Helpers.onSetFlag(value);\n        return super.setFlag(scope, key, newValue);\n    }\n\n    /**\n     * Override getFlag to add back the 'SR6.' keys correctly to be handled\n     * @param scope\n     * @param key\n     */\n    //@ts-expect-error // TODO: foundry-vtt-types v10\n    getFlag(scope: string, key: string): any {\n        const data = super.getFlag(scope, key);\n        return Helpers.onGetFlag(data);\n    }\n\n    /** Return either the linked token or the token of the synthetic actor.\n     *\n     * @return Will return null should no token have been placed on scene.\n     */\n    getToken(): TokenDocument | null {\n        // Linked actors can only have one token, which isn't stored within actor data...\n        if (this._isLinkedToToken() && this.hasToken()) {\n            const linked = true;\n            const tokens = this.getActiveTokens(linked) as unknown as Token[];\n            // This assumes for a token to exist and should fail if not.\n            return tokens[0].document;\n        }\n\n        // Unlinked actors can have multiple active token but each have theirs directly attached...\n        return this.token;\n    }\n\n    /**\n     * There is no need for a token to placed. The prototype token is enough.\n     */\n    _isLinkedToToken(): boolean {\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        // If an actor is linked, all it's copies also contain this linked status, even if they're not.\n        return this.prototypeToken.actorLink && !this.token;\n    }\n\n    hasToken(): boolean {\n        return this.getActiveTokens().length > 0;\n    }\n\n    hasActivePlayerOwner(): boolean {\n        const players = this.getActivePlayerOwners();\n        return players.length > 0;\n    }\n\n    getActivePlayer(): User | null {\n        if (!game.users) return null;\n        if (!this.hasPlayerOwner) return null;\n\n        for (const user of game.users.contents) {\n            if (!user.active || user.isGM) {\n                continue;\n            }\n            if (this.id === user.character?.id) {\n                return user;\n            }\n        }\n\n        return null;\n    }\n\n    getActivePlayerOwners(): User[] {\n        // @ts-expect-error\n        return Helpers.getPlayersWithPermission(this, 'OWNER', true);\n    }\n\n    __addDamageToTrackValue(damage: Shadowrun.DamageData, track: Shadowrun.TrackType | Shadowrun.OverflowTrackType | Shadowrun.ConditionData): Shadowrun.TrackType | Shadowrun.OverflowTrackType | Shadowrun.ConditionData {\n        if (damage.value === 0) return track;\n        if (track.value === track.max) return track;\n\n        //  Avoid cross referencing.\n        track = foundry.utils.duplicate(track);\n\n        track.value += damage.value;\n        if (track.value > track.max) {\n            // dev error, not really meant to be ever seen by users. Therefore no localization.\n            console.error(\"Damage did overflow the track, which shouldn't happen at this stage. Damage has been set to max. Please use applyDamage.\")\n            track.value = track.max;\n        }\n\n        return track;\n    }\n\n    async _addDamageToDeviceTrack(damage: Shadowrun.DamageData, device: SR6Item) {\n        if (!device) return;\n\n        let condition = device.getCondition();\n        if (!condition) return damage;\n\n        if (damage.value === 0) return;\n        if (condition.value === condition.max) return;\n\n        condition = this.__addDamageToTrackValue(damage, condition);\n\n        const updateData = {['system.technology.condition_monitor']: condition};\n        await device.update(updateData);\n    }\n\n    /**\n     * Apply damage to an actors main damage monitor / track.\n     *\n     * This includes physical and stun for meaty actors and matrix for matrix actors.\n     *\n     * Applying damage will also reduce the initiative score of an active combatant.\n     *\n     * Handles rule 'Changing Initiative' on SR5#160.\n     *\n     * @param damage The damage to be taken.\n     * @param track The track to apply that damage to.\n     */\n    async _addDamageToTrack(damage: Shadowrun.DamageData, track: Shadowrun.TrackType | Shadowrun.OverflowTrackType | Shadowrun.ConditionData) {\n        if (damage.value === 0) return;\n        if (track.value === track.max) return;\n\n        // Allow a wound modifier difference to be calculated after damage has been dealt.\n        const woundsBefore = this.getWoundModifier();\n\n        // Apply damage to track and trigger derived value calculation.\n        track = this.__addDamageToTrackValue(damage, track);\n        const updateData = {[`system.track.${damage.type.value}`]: track};\n        await this.update(updateData);\n\n        // Apply any wounds modifier delta to an active combatant.\n        const woundsAfter = this.getWoundModifier();\n        const iniAdjustment = CombatRules.initiativeScoreWoundAdjustment(woundsBefore, woundsAfter);\n\n        // Only actors that can have a wound modifier, will have a delta.\n        if (iniAdjustment < 0 && game.combat) game.combat.adjustActorInitiative(this, iniAdjustment);\n    }\n\n    /**\n     * Apply damage to an actors physical overflow damage monitor / track.\n     *\n     * @param damage The damage to overflow.\n     * @param track The track to overflow the damage into.\n     * @returns\n     */\n    async _addDamageToOverflow(damage: Shadowrun.DamageData, track: Shadowrun.OverflowTrackType) {\n        if (damage.value === 0) return;\n        if (track.overflow.value === track.overflow.max) return;\n\n        //  Avoid cross referencing.\n        const overflow = foundry.utils.duplicate(track.overflow);\n\n        // Don't over apply damage to the track overflow.\n        overflow.value += damage.value;\n        overflow.value = Math.min(overflow.value, overflow.max);\n\n        const updateData = {[`system.track.${damage.type.value}.overflow`]: overflow};\n        await this.update(updateData);\n    }\n\n    /**\n     * Heal damage on a given damage track. Be aware that healing damage doesn't equate to recovering damage\n     * and will not adhere to the recovery rules.\n     *\n     * @param track What track should be healed?\n     * @param healing How many boxes of healing should be done?\n     */\n    async healDamage(track: Shadowrun.DamageType, healing: number) {\n        console.log(`SR6: Elysium | Healing ${track} damage of ${healing} for actor`, this);\n\n        // @ts-expect-error\n        if (!this.system?.track.hasOwnProperty(track)) return\n\n        // @ts-expect-error\n        const current = Math.max(this.system.track[track].value - healing, 0);\n\n        await this.update({[`system.track.${track}.value`]: current});\n    }\n\n    async healStunDamage(healing: number) {\n        await this.healDamage('stun', healing);\n    }\n\n    async healPhysicalDamage(healing: number) {\n        await this.healDamage('physical', healing);\n    }\n\n    get canRecoverPhysicalDamage(): boolean {\n        const stun = this.getStunTrack();\n        if (!stun) return false\n        return RecoveryRules.canHealPhysicalDamage(stun.value);\n    }\n\n    /**\n     * Apply damage to the stun track and get overflow damage for the physical track.\n     *\n     * @param damage The to be applied damage.\n     * @returns overflow damage after stun damage is full.\n     */\n    async addStunDamage(damage: Shadowrun.DamageData): Promise<Shadowrun.DamageData> {\n        if (damage.type.value !== 'stun') return damage;\n\n        const track = this.getStunTrack();\n        if (!track)\n            return damage;\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        // Only change damage type when needed, in order to avoid confusion of callers.\n        if (overflow.value > 0) {\n            // Apply Stun overflow damage to physical track according to: SR5E#170\n            overflow.value = Math.floor(overflow.value / 2);\n            overflow.type.value = 'physical';\n        }\n\n        await this._addDamageToTrack(rest, track);\n\n        return overflow;\n    }\n\n    /**\n     * Apply damage to the physical track and get overflow damage for the physical overflow track.\n     *\n     * @param damage The to be applied damage.\n     */\n    async addPhysicalDamage(damage: Shadowrun.DamageData) {\n        if (damage.type.value !== 'physical') {\n            return damage;\n        }\n\n\n        const track = this.getPhysicalTrack();\n        if (!track) {\n            return damage;\n        }\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        await this._addDamageToTrack(rest, track);\n        await this._addDamageToOverflow(overflow, track);\n    }\n\n\n    /**\n     * Matrix damage can be added onto different tracks:\n     * - IC has a local matrix.condition_monitor\n     * - Characters have matrix devices (items) with their local track\n     */\n    async addMatrixDamage(damage: Shadowrun.DamageData) {\n        if (damage.type.value !== 'matrix') return;\n\n\n        const device = this.getMatrixDevice();\n        const track = this.getMatrixTrack();\n        if (!track) return damage;\n\n        const {overflow, rest} = this._calcDamageOverflow(damage, track);\n\n        if (device) {\n            await this._addDamageToDeviceTrack(rest, device);\n        }\n        if (this.isIC() || this.isSprite()) {\n            await this._addDamageToTrack(rest, track);\n        }\n    }\n\n    /**\n     * Apply damage of any type to this actor. This should be the main entry method to applying damage.\n     *\n     * @param damage Damage to be applied\n     * @returns overflow damage.\n     */\n    async addDamage(damage: Shadowrun.DamageData) {\n        switch(damage.type.value) {\n            case 'matrix':\n                await this.addMatrixDamage(damage);\n                break;\n            case 'stun':\n                // Let stun overflow to physical.\n                const overflow = await this.addStunDamage(damage);\n                await this.addPhysicalDamage(overflow);\n                break;\n            case 'physical':\n                await this.addPhysicalDamage(damage);\n                break;\n        }\n\n        await this.applyDefeatedStatus();\n    }\n\n    /**\n     * Directly set the matrix damage track of this actor to a set amount.\n     *\n     * This is mainly used for manual user input on an actor sheet.\n     *\n     * This is done by resetting all tracked damage and applying one manual damage set.\n     *\n     * @param value The matrix damage to be applied.\n     */\n    async setMatrixDamage(value: number) {\n        // Disallow negative values.\n        value = Math.max(value, 0);\n\n        // Use artificial damage to be consistent across other damage application Actor methods.\n        const damage = DataDefaults.damageData({\n            type: {base: 'matrix', value: 'matrix'},\n            base: value,\n            value: value\n        });\n\n        let track = this.getMatrixTrack();\n        if (!track) return;\n\n        // Reduce track to minimal value and simply add new damage.\n        track.value = 0;\n        // As track has been reduced to zero already, setting it to zero is already done.\n        if (value > 0)\n            track = this.__addDamageToTrackValue(damage, track);\n\n        // If a matrix device is used, damage that instead of the actor.\n        const device = this.getMatrixDevice();\n        if (device) {\n            return await device.update({'system.technology.condition_monitor': track});\n        }\n\n        // IC actors use a matrix track.\n        if (this.isIC()) {\n            return await this.update({'system.track.matrix': track});\n        }\n\n        // Emerged actors use a personal device like condition monitor.\n        if (this.isMatrixActor) {\n            return await this.update({'system.matrix.condition_monitor': track});\n        }\n    }\n\n    /** Calculate damage overflow only based on max and current track values.\n     */\n    _calcDamageOverflow(damage: Shadowrun.DamageData, track: Shadowrun.TrackType | Shadowrun.ConditionData): { overflow: Shadowrun.DamageData, rest: Shadowrun.DamageData } {\n        const freeTrackDamage = track.max - track.value;\n        const overflowDamage = damage.value > freeTrackDamage ?\n            damage.value - freeTrackDamage :\n            0;\n        const restDamage = damage.value - overflowDamage;\n\n        //  Avoid cross referencing.\n        const overflow = foundry.utils.duplicate(damage);\n        const rest = foundry.utils.duplicate(damage);\n\n        overflow.value = overflowDamage;\n        rest.value = restDamage;\n\n        return {overflow, rest};\n    }\n\n    getStunTrack(): Shadowrun.TrackType | undefined {\n        if (\"track\" in this.system && \"stun\" in this.system.track)\n            return this.system.track.stun;\n    }\n\n    getPhysicalTrack(): Shadowrun.OverflowTrackType | undefined {\n        if (\"track\" in this.system && \"physical\" in this.system.track)\n            return this.system.track.physical;\n    }\n\n    /**\n     * The matrix depends on actor type and possibly equipped matrix device.\n     *\n     * Use this method for whenever you need to access this actors matrix damage track as it's source might differ.\n     */\n    getMatrixTrack(): Shadowrun.ConditionData | undefined {\n        // Some actors will have a direct matrix track.\n        if (\"track\" in this.system && \"matrix\" in this.system.track) {\n            return this.system.track.matrix;\n        }\n\n        // Some actors will have a personal matrix condition monitor, like a device condition monitor.\n        if (this.isMatrixActor) {\n            // @ts-expect-error isMatrixActor checks for the matrix attribute\n            return this.system.matrix.condition_monitor;\n        }\n\n        // Fallback to equipped matrix device.\n        const device = this.getMatrixDevice();\n        if (!device) return undefined;\n\n        return device.getCondition();\n    }\n\n    /**\n     * Depending on this actors defeated status, apply the correct effect and status.\n     *\n     * This will only work when the actor is connected to a token.\n     *\n     * @param defeated Optional defeated status to be used. Will be determined if not given.\n     */\n    async applyDefeatedStatus(defeated?: DefeatedStatus) {\n        // TODO: combat-utility-belt seems to replace the default status effects, causing some issue I don't yet understand.\n        // thus a setting is added so GMs can turn it off if they handle it in another way\n\n        const token = this.getToken();\n        if (!token || !game.settings.get(SYSTEM_NAME, FLAGS.UseDamageCondition)) return;\n\n        defeated = defeated ?? ConditionRules.determineDefeatedStatus(this);\n\n        // Remove unapplicable defeated token status.\n        await this.removeDefeatedStatus(defeated);\n\n        // Apply the appropriate combatant status.\n        if (defeated.unconscious || defeated.dying || defeated.dead) {\n            await this.combatant?.update({defeated: true});\n        } else {\n            return await this.combatant?.update({ defeated: false });\n        }\n\n        let newStatus = 'unconscious';\n        if (defeated.dying) newStatus = 'unconscious';\n        if (defeated.dead) newStatus = 'dead';\n\n        // Find fitting status and fallback to dead if not found.\n        const status = CONFIG.statusEffects.find(e => e.id === newStatus);\n        const effect = status || CONFIG.controlIcons.defeated;\n\n        // Avoid applying defeated status multiple times.\n        const existing = this.effects.reduce((arr, e) => {\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            if ( (e.statuses.size === 1) && e.statuses.has(effect.id) ) {\n                // @ts-expect-error\n                arr.push(e.id);\n            }\n            return arr;\n        }, []);\n\n        if (existing.length) return;\n\n        // @ts-expect-error\n        // Set effect as active, as we've already made sure it isn't.\n        // Otherwise Foundry would toggle on/off, even though we're still dead.\n        await token.object.toggleEffect(effect, { overlay: true, active: true });\n    }\n\n    /**\n     * Remove defeated status effects from this actor, depending on current status.\n     *\n     * @param defeated Optional defeated status to be used. Will be determined if not given.\n     */\n    async removeDefeatedStatus(defeated?: DefeatedStatus) {\n        defeated = defeated ?? ConditionRules.determineDefeatedStatus(this);\n\n        const removeStatus: string[] = [];\n        if ((!defeated.unconscious && !defeated.dying) || defeated.dead) removeStatus.push('unconscious');\n        if (!defeated.dead) removeStatus.push('dead');\n\n        // Remove out old defeated effects.\n        if (removeStatus.length) {\n            const existing = this.effects.reduce((arr, e) => {\n                // @ts-expect-error TODO: foundry-vtt-types v10\n                if ( (e.statuses.size === 1) && e.statuses.some(status => removeStatus.includes(status)) ) arr.push(e.id);\n                return arr;\n            }, []);\n\n            if (existing.length) await this.deleteEmbeddedDocuments('ActiveEffect', existing);\n        }\n    }\n\n    getModifiedArmor(damage: Shadowrun.DamageData): Shadowrun.ActorArmorData {\n        if (!damage.ap?.value) {\n            return this.getArmor();\n        }\n\n        // Use the _calculateArmor method directly with the damage\n        return this._calculateArmor(damage);\n    }\n\n    /** Reduce the initiative of the actor in the currently open / selected combat.\n     * Should a tokens actor be in multiple combats it will also only affect the currently open combat,\n     * since that is what's set in game.combat\n     *\n     * TODO: There is an issue with linked actors that have multiple tokens placed, with each in different combats.\n     *       The defense test needs to be done using the correct token, not just by the actor (from the sidebar).\n     *       One could argue this to be correct behavior, just confusing with normal linked actor / token usage.\n     */\n    async changeCombatInitiative(modifier: number) {\n        // No change needed for nothing to change.\n        if (modifier === 0) return;\n\n        const combat: SR6Combat = game.combat as unknown as SR6Combat;\n        const combatant = combat.getActorCombatant(this);\n\n        // Token might not be part of active combat.\n        if (!combatant) return;\n        if (!combatant.initiative) return;\n\n        // While not prohibiting, inform user about missing resource.\n        if (combatant.initiative + modifier < 0) {\n            ui.notifications?.warn('SR6.MissingRessource.Initiative', {localize: true});\n        }\n\n        await combat.adjustInitiative(combatant, modifier);\n    }\n\n    /**\n     * Determine if this actor is an active combatant.\n     *\n     * @returns true, when active. false, when not in combat.\n     */\n    get combatActive(): boolean {\n        if (!game.combat) return false;\n        const combatant = (game.combat as SR6Combat).getActorCombatant(this);\n        if (!combatant) return false;\n        if (!combatant.initiative) return false;\n\n        return true;\n    }\n\n    get combatant(): Combatant | undefined {\n        if (!this.combatActive) return;\n        return (game.combat as SR6Combat).getActorCombatant(this);\n    }\n\n    /**\n     * Return the initiative score for a currently active combat\n     *\n     * @returns The score or zero.\n     */\n    get combatInitiativeScore(): number {\n        if (!game.combat) return 0;\n        const combatant = (game.combat as SR6Combat).getActorCombatant(this);\n        if (!combatant || !combatant.initiative) return 0;\n        return combatant.initiative;\n    }\n\n    hasDamageTracks(): boolean {\n        return \"track\" in this.system;\n    }\n\n    asVehicle(): Shadowrun.VehicleActorData | undefined {\n        if (this.isVehicle())\n            return this as unknown as Shadowrun.VehicleActorData;\n    }\n\n    asCharacter(): Shadowrun.CharacterActorData | undefined {\n        if (this.isCharacter())\n            return this as unknown as Shadowrun.CharacterActorData;\n    }\n\n    asSpirit(): Shadowrun.SpiritActorData | undefined {\n        if (this.isSpirit()) {\n            return this as unknown as Shadowrun.SpiritActorData;\n        }\n    }\n\n    asSprite(): Shadowrun.SpriteActorData | undefined {\n        if (this.isSprite()) {\n            return this as unknown as Shadowrun.SpriteActorData;\n        }\n    }\n\n    asCritter(): Shadowrun.CritterActorData | undefined {\n        if (this.isCritter()) {\n            return this as unknown as Shadowrun.CritterActorData;\n        }\n    }\n\n    asIC(): Shadowrun.ICActorData | undefined {\n        if (this.isIC()) {\n            return this as unknown as Shadowrun.ICActorData;\n        }\n    }\n\n    getVehicleStats(): Shadowrun.VehicleStats | undefined {\n        if (this.isVehicle() && \"vehicle_stats\" in this.system) {\n            return this.system.vehicle_stats;\n        }\n    }\n\n    /** Add another actor as the driver of a vehicle to allow for their values to be used in testing.\n     *\n     * @param uuid An actors id. Should be a character able to drive a vehicle\n     */\n    async addVehicleDriver(uuid: string) {\n        if (!this.isVehicle()) return;\n\n        const driver = await fromUuid(uuid) as SR6Actor;\n        if (!driver) return;\n\n        // NOTE: In THEORY almost all actor types can drive a vehicle.\n        // ... drek, in theory a drone could drive another vehicle even...\n\n        await this.update({'system.driver': driver.id});\n    }\n\n    async removeVehicleDriver() {\n        if (!this.hasDriver()) return;\n\n        await this.update({'system.driver': ''});\n    }\n\n    hasDriver(): boolean {\n        const vehicle = this.asVehicle();\n        if (!vehicle) return false;\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return this.system.driver.length > 0;\n    }\n\n    getVehicleDriver(): SR6Actor | undefined {\n        if (!this.hasDriver()) return;\n        const vehicle = this.asVehicle();\n        if (!vehicle) return;\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        const driver = game.actors?.get(this.system.driver) as SR6Actor;\n        // If no driver id is set, we won't get an actor and should explicitly return undefined.\n        if (!driver) return;\n        return driver;\n    }\n\n    /**\n     * Add a host to this IC type actor.\n     *\n     * Currently compendium hosts aren't supported.\n     * Any other actor type has no use for this method.\n     *\n     * @param item The host item\n     */\n    async addICHost(item: SR6Item) {\n        if (!this.isIC()) return;\n        if (!item.isHost) return;\n\n        const host = item.asHost;\n        if (!host) return;\n        await this._updateICHostData(host);\n    }\n\n    async _updateICHostData(hostData: Shadowrun.HostItemData) {\n        const updateData = {\n            // @ts-expect-error _id is missing on internal typing...\n            id: hostData._id,\n            rating: hostData.system.rating,\n            atts: foundry.utils.duplicate(hostData.system.atts)\n        }\n\n        // Some host data isn't stored on the IC actor (marks) and won't cause an automatic render.\n        await this.update({'system.host': updateData}, {render: false});\n        await this.sheet?.render();\n    }\n\n    /**\n     * Remove a connect Host item from an ic type actor.\n     */\n    async removeICHost() {\n        if (!this.isIC()) return;\n\n        const updateData = {\n            id: null,\n            rating: 0,\n            atts: null\n        }\n\n        await this.update({'system.host': updateData});\n    }\n\n    /**\n     * Will return true if this ic type actor has been connected to a host.\n     */\n    hasHost(): boolean {\n        const ic = this.asIC();\n        if (!ic) return false;\n        return ic && !!ic.system.host.id;\n    }\n\n    /**\n     * Get the host item connect to this ic type actor.\n     */\n    getICHost(): SR6Item | undefined {\n        const ic = this.asIC();\n        if (!ic) return;\n        return game.items?.get(ic?.system?.host.id);\n    }\n\n    /**\n     * Add an actor as this spirit actor's summoner.\n     * @param actor A character actor to be used as summoner\n     */\n    async addSummoner(actor: SR6Actor) {\n        if (!this.isSpirit() || !actor.isCharacter()) return;\n        await this.update({ 'system.summonerUuid': actor.uuid });\n    }\n\n    /**\n     * Remove a summoner from this spirit actor.\n     */\n    async removeSummoner() {\n        if (!this.isSpirit()) return;\n        await this.update({ 'system.summonerUuid': null });\n    }\n\n    /**\n     * Add an actor as this sprites technomancers.\n     * @param actor A character actor to be used as technomancer\n     */\n    async addTechnomancer(actor: SR6Actor) {\n        if (!this.isSprite() || !actor.isCharacter()) return;\n        await this.update({ 'system.technomancerUuid': actor.uuid });\n    }\n\n    /**\n     * Remove a technomancer from this sprite actor.\n     */\n    async removeTechnomancer() {\n        if (!this.isSprite()) return;\n        await this.update({ 'system.technomancerUuid': '' });\n    }\n    /** Check if this actor is of one or multiple given actor types\n     *\n     * @param types A list of actor types to check.\n     */\n    matchesActorTypes(types: string[]): boolean {\n        return types.includes(this.type);\n    }\n\n    /**\n     * Get all situational modifiers from this actor.\n     * NOTE: These will return selections only without higher level selections applied.\n     *       You'll have to manually trigger .applyAll or apply what's needed.\n     */\n    getSituationModifiers(): DocumentSituationModifiers {\n        return DocumentSituationModifiers.getDocumentModifiers(this);\n    }\n\n    /**\n     * Set all situational modifiers for this actor\n     *\n     * @param modifiers The DocumentSituationModifiers instance to save source modifiers from.\n     *                  The actor will not be checked, so be careful.\n     */\n    async setSituationModifiers(modifiers: DocumentSituationModifiers) {\n        await DocumentSituationModifiers.setDocumentModifiers(this, modifiers.source);\n    }\n\n    /**\n     * Check if the current actor has matrix capabilities.\n     */\n    get isMatrixActor(): boolean {\n        return 'matrix' in this.system;\n    }\n\n    get matrixData(): Shadowrun.MatrixData | undefined {\n        if (!this.isMatrixActor) return;\n        // @ts-expect-error // isMatrixActor handles it, TypeScript doesn't know.\n        return this.system.matrix as Shadowrun.MatrixData;\n    }\n\n    /**\n     * Change the amount of marks on the target by the amount of marks given, while adhering to min/max values.\n     *\n     *\n     * @param target The Document the marks are placed on. This can be an actor (character, technomancer, IC) OR an item (Host)\n     * @param marks The amount of marks to be placed\n     * @param options Additional options that may be needed\n     * @param options.scene The scene the actor lives on. If empty, will be current active scene\n     * @param options.item The item that the mark is to be placed on\n     * @param options.overwrite Replace the current marks amount instead of changing it\n     */\n    async setMarks(target: Token, marks: number, options?: { scene?: Scene, item?: SR6Item, overwrite?: boolean }) {\n        if (!canvas.ready) return;\n\n        if (this.isIC() && this.hasHost()) {\n            return await this.getICHost()?.setMarks(target, marks, options);\n        }\n\n        if (!this.isMatrixActor) {\n            ui.notifications?.error(game.i18n.localize('SR6.Errors.MarksCantBePlacedBy'));\n            return console.error(`The actor type ${this.type} can't receive matrix marks!`);\n        }\n        if (target.actor && !target.actor.isMatrixActor) {\n            ui.notifications?.error(game.i18n.localize('SR6.Errors.MarksCantBePlacedOn'));\n            return console.error(`The actor type ${target.actor.type} can't receive matrix marks!`);\n        }\n        if (!target.actor) {\n            return console.error(`The token ${target.name} is missing it's actor`);\n        }\n\n        // It hurt itself in confusion.\n        if (this.id === target.actor.id) {\n            return;\n        }\n\n        // Both scene and item are optional.\n        const scene = options?.scene || canvas.scene as Scene;\n        const item = options?.item;\n\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\n        const matrixData = this.matrixData;\n\n        if (!matrixData) return;\n\n        const currentMarks = options?.overwrite ? 0 : this.getMarksById(markId);\n        matrixData.marks[markId] = MatrixRules.getValidMarksCount(currentMarks + marks);\n\n        await this.update({'system.matrix.marks': matrixData.marks});\n    }\n\n    /**\n     * Remove ALL marks placed by this actor\n     */\n    async clearMarks() {\n        const matrixData = this.matrixData;\n        if (!matrixData) return;\n\n        // Delete all markId properties from ActorData\n        const updateData = {}\n        for (const markId of Object.keys(matrixData.marks)) {\n            updateData[`-=${markId}`] = null;\n        }\n\n        await this.update({'system.matrix.marks': updateData});\n    }\n\n    /**\n     * Remove ONE mark. If you want to delete all marks, use clearMarks instead.\n     */\n    async clearMark(markId: string) {\n        if (!this.isMatrixActor) return;\n\n        const updateData = {}\n        updateData[`-=${markId}`] = null;\n\n        await this.update({'system.matrix.marks': updateData});\n    }\n\n    getAllMarks(): Shadowrun.MatrixMarks | undefined {\n        const matrixData = this.matrixData;\n        if (!matrixData) return;\n        return matrixData.marks;\n    }\n\n    /**\n     * Return the amount of marks this actor has on another actor or one of their items.\n     *\n     * TODO: It's unclear what this method will be used for\n     *       What does the caller want?\n     *\n     * TODO: Check with technomancers....\n     *\n     * @param target\n     * @param item\n     * @param options\n     */\n    getMarks(target: Token, item?: SR6Item, options?: { scene?: Scene }): number {\n        if (!canvas.ready) return 0;\n        if (target instanceof SR6Item) {\n            console.error('Not yet supported');\n            return 0;\n        }\n        if (!target.actor || !target.actor.isMatrixActor) return 0;\n\n\n        const scene = options?.scene || canvas.scene as Scene;\n        // If an actor has been targeted, they might have a device. If an item / host has been targeted they don't.\n        item = item || target instanceof SR6Actor ? target.actor.getMatrixDevice() : undefined;\n\n        const markId = Helpers.buildMarkId(scene.id as string, target.id, item?.id as string);\n        return this.getMarksById(markId);\n    }\n\n    getMarksById(markId: string): number {\n        return this.matrixData?.marks[markId] || 0;\n    }\n\n    /**\n     * Return the actor or item that is the network controller of this actor.\n     * These cases are possible:\n     * - IC with a host connected will provide the host item\n     * - IC without a host will provide itself\n     * - A matrix actor within a PAN will provide the controlling actor\n     * - A matrix actor without a PAN will provide itself\n     */\n    get matrixController(): SR6Actor | SR6Item {\n        // In case of a broken host connection, return the IC actor.\n        if (this.isIC() && this.hasHost()) return this.getICHost() || this;\n        // TODO: Implement PAN\n        // if (this.isMatrixActor && this.hasController()) return this.getController();\n\n        return this;\n    }\n\n    getAllMarkedDocuments(): Shadowrun.MarkedDocument[] {\n        const marks = this.matrixController.getAllMarks();\n        if (!marks) return [];\n\n        // Deconstruct all mark ids into documents.\n        // @ts-expect-error\n        return Object.entries(marks)\n            .filter(([markId, marks]) => Helpers.isValidMarkId(markId))\n            .map(([markId, marks]) => ({\n                ...Helpers.getMarkIdDocuments(markId),\n                marks,\n                markId\n            }))\n    }\n\n    /**\n     * How many previous attacks has this actor been subjected to?\n     *\n     * @returns A positive number or zero.\n     */\n    get previousAttacks(): number {\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        return Math.max(this.system.modifiers.multi_defense * -1, 0);\n    }\n    /**\n     * Apply a new consecutive defense multiplier based on the amount of attacks given\n     *\n     * @param previousAttacks Attacks within a combat turn. If left out, will guess based on current modifier.\n     */\n    async calculateNextDefenseMultiModifier(previousAttacks: number=this.previousAttacks) {\n        console.debug('Shadowrun 6e | Applying consecutive defense modifier for. Last amount of attacks: ', previousAttacks);\n\n        const automateDefenseMod = game.settings.get(SYSTEM_NAME, FLAGS.AutomateMultiDefenseModifier);\n        if (!automateDefenseMod || !this.combatActive) return;\n\n        const multiDefenseModi = CombatRules.defenseModifierForPreviousAttacks(previousAttacks + 1);\n        await this.update({'system.modifiers.multi_defense': multiDefenseModi});\n    }\n\n    /**\n     * Remove the consecutive defense per turn modifier.\n     */\n    async removeDefenseMultiModifier() {\n        const automateDefenseMod = game.settings.get(SYSTEM_NAME, FLAGS.AutomateMultiDefenseModifier);\n        if (!automateDefenseMod || !this.combatActive) return;\n\n        if (this.system.modifiers.multi_defense === 0) return;\n\n        console.debug('Shadowrun 6e | Removing consecutive defense modifier.', this);\n        await this.update({'system.modifiers.multi_defense': 0});\n    }\n\n    /**\n     * Add a firemode recoil to the progressive recoil.\n     *\n     * @param fireMode Ranged Weapon firemode used to attack with.\n     */\n    async addProgressiveRecoil(fireMode: Shadowrun.FireModeData) {\n        const automateProgressiveRecoil = game.settings.get(SYSTEM_NAME, FLAGS.AutomateProgressiveRecoil);\n        if (!automateProgressiveRecoil) return;\n\n        if (!this.hasPhysicalBody) return;\n        if (!fireMode.recoil) return;\n\n        await this.addRecoil(fireMode.value);\n    }\n\n    /**\n     * Add a flat value on top of existing progressive recoil\n     * @param additional New recoil to be added\n     */\n    async addRecoil(additional: number) {\n        const base = this.recoil + additional;\n        await this.update({'system.values.recoil.base': base});\n    }\n\n    /**\n     * Clear whatever progressive recoil this actor holds.\n     */\n    async clearProgressiveRecoil() {\n        if (!this.hasPhysicalBody) return;\n        if (this.recoil === 0) return;\n        await this.update({'system.values.recoil.base': 0});\n    }\n\n    /**\n     * Determine if the actor has a physical body\n     *\n     * @returns true, if the actor can interact with the physical plane\n     */\n    get hasPhysicalBody() {\n        return this.isCharacter() || this.isCritter() || this.isSpirit() || this.isVehicle();\n    }\n\n    /**\n     * Reset damage, edge, etc. and prepare this actor for a new run.\n     */\n    async resetRunData() {\n        console.log(`Shadowrun 6e | Resetting actor ${this.name} (${this.id}) for a new run`);\n\n        const updateData: Record<string, any> = {};\n\n        if (this.isCharacter() || this.isCritter() || this.isSpirit() || this.isVehicle()) {\n            updateData['system.track.physical.value'] = 0;\n            updateData['system.track.physical.overflow.value'] = 0;\n        }\n\n        if (this.isCharacter() || this.isCritter() || this.isSpirit()) {\n            updateData['system.track.stun.value'] = 0;\n        }\n\n        if (this.isCharacter() || this.isCritter()) {\n            updateData['system.attributes.edge.uses'] = this.getEdge().value;\n        }\n\n        if (this.isMatrixActor) await this.setMatrixDamage(0);\n        if (updateData) await this.update(updateData);\n\n        // Reset actions\n        await this.resetActions();\n    }\n\n    /**\n     * Reset the actor's actions for a new combat round\n     */\n    async resetActions() {\n        // Only proceed if the actor has initiative\n        if (!this.system.initiative) return;\n\n        // Initialize the actions object if it doesn't exist\n        if (!this.system.initiative.actions) {\n            await this.update({\n                'system.initiative.actions': {}\n            });\n        }\n\n        // Calculate available actions based on initiative dice\n        const initiativeDice = this.system.initiative?.current?.dice?.value || 0;\n\n        // In Shadowrun 6th Edition, each character starts with one major and one minor action\n        // They gain an additional minor action for each die in their initiative roll\n        // Free actions are unlimited\n        const majorCount = 1;\n        const minorCount = 1 + initiativeDice;\n        const freeCount = '\u221E';\n\n        // Log the values for debugging\n        console.log('Shadowrun 6e | Reset action values:', {\n            major: majorCount,\n            minor: minorCount,\n            free: freeCount\n        });\n\n        // Update the actions directly\n        await this.update({\n            'system.initiative.actions.major': majorCount,\n            'system.initiative.actions.minor': minorCount,\n            'system.initiative.actions.free': freeCount\n        });\n\n        console.log(`Shadowrun 6e | Reset actions for ${this.name}: Major: ${majorCount}, Minor: ${minorCount}, Free: ${freeCount}`);\n\n        // Force a refresh of all sheets displaying this actor\n        this.forceRefreshSheets();\n    }\n\n    /**\n     * Convert 4 minor actions into 1 major action\n     * If a player has 4 or more unspent minor actions, they may convert 4 minor actions into a major action (for the round)\n     */\n    async convertMinorToMajorAction() {\n        // Log the actor name for debugging\n        console.log(`Shadowrun 6e | Converting minor actions to major action for ${this.name} (${this.id})`);\n\n        // Only proceed if the actor has initiative\n        if (!this.system.initiative) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no initiative data`);\n            return;\n        }\n\n        // Initialize the actions object if it doesn't exist\n        if (!this.system.initiative.actions) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no actions data, initializing`);\n            await this.update({\n                'system.initiative.actions': {}\n            });\n            // Reset actions to ensure they're properly initialized\n            await this.resetActions();\n            return;\n        }\n\n        const actions = this.system.initiative.actions;\n        console.log(`Shadowrun 6e | Current actions for ${this.name}:`, actions);\n\n        // Check if the actor has at least 4 minor actions\n        if (actions.minor < 4) {\n            ui.notifications?.warn(game.i18n.format('SR6.NotEnoughMinorActions', {\n                name: this.name,\n                count: actions.minor\n            }));\n            return;\n        }\n\n        // Get the actor from the game.actors collection to ensure we're working with the latest data\n        const checkActor = game.actors.get(this.id);\n        if (checkActor && checkActor.system.initiative && checkActor.system.initiative.actions) {\n            // Check if the actor has at least 4 minor actions in the database\n            const dbMinorActions = checkActor.system.initiative.actions.minor;\n            if (dbMinorActions < 4) {\n                ui.notifications?.warn(game.i18n.format('SR6.NotEnoughMinorActions', {\n                    name: this.name,\n                    count: dbMinorActions\n                }));\n                return;\n            }\n        }\n\n        // Convert 4 minor actions into 1 major action\n        // Make sure we're working with numbers\n        const majorCount = Number(actions.major) + 1;\n        const minorCount = Number(actions.minor) - 4;\n\n        // Log the values for debugging\n        console.log('Shadowrun 6e | Action conversion values:', {\n            originalMajor: actions.major,\n            originalMinor: actions.minor,\n            newMajor: majorCount,\n            newMinor: minorCount\n        });\n\n        // Create a complete actions object\n        const newActions = {\n            major: majorCount,\n            minor: minorCount,\n            free: this.system.initiative.actions.free\n        };\n\n        console.log(`Shadowrun 6e | Updating actions for ${this.name} (${this.id}):`, newActions);\n\n        try {\n            // Use a direct approach to update the actor\n            console.log(`Shadowrun 6e | Using direct update approach for ${this.name}`);\n\n            // Get the actor from the game.actors collection to ensure we're working with the latest data\n            const actor = game.actors.get(this.id);\n            if (!actor) {\n                console.error(`Shadowrun 6e | Could not find actor ${this.name} (${this.id}) in game.actors collection`);\n                return;\n            }\n\n            // Log the current actions before update\n            console.log(`Shadowrun 6e | Actions before update for ${this.name}:`, {\n                major: actor.system.initiative.actions.major,\n                minor: actor.system.initiative.actions.minor,\n                free: actor.system.initiative.actions.free\n            });\n\n            // Create a complete update data object\n            const updateData = {\n                'system.initiative.actions': {\n                    major: majorCount,\n                    minor: minorCount,\n                    free: actor.system.initiative.actions.free\n                }\n            };\n\n            // Log the update data\n            console.log(`Shadowrun 6e | Update data for ${this.name}:`, updateData);\n\n            // Update the actor in the database\n            await actor.update(updateData);\n\n            // Wait a moment to ensure the update is processed\n            await new Promise(resolve => setTimeout(resolve, 100));\n\n            // Directly modify the actor's data as a fallback\n            actor.system.initiative.actions.major = majorCount;\n            actor.system.initiative.actions.minor = minorCount;\n\n            console.log(`Shadowrun 6e | Actions after direct update for ${this.name}:`, {\n                major: actor.system.initiative.actions.major,\n                minor: actor.system.initiative.actions.minor,\n                free: actor.system.initiative.actions.free\n            });\n\n            // Force a refresh of all sheets displaying this actor\n            actor.forceRefreshSheets();\n\n            // Force a delayed re-render of the character sheet\n            setTimeout(() => {\n                // Get the actor again to ensure we have the latest data\n                const refreshActor = game.actors.get(this.id);\n                if (refreshActor) {\n                    // Force a refresh of all sheets displaying this actor\n                    refreshActor.forceRefreshSheets();\n                    console.log(`Shadowrun 6e | Forced delayed refresh of ${Object.values(refreshActor.apps).length} sheets for ${refreshActor.name}`);\n                }\n            }, 500);\n\n            console.log(`Shadowrun 6e | Forced refresh of ${Object.values(actor.apps).length} sheets for ${this.name}`);\n        } catch (error) {\n            console.error(`Shadowrun 6e | Error updating actions for ${this.name}:`, error);\n\n            // Try a more direct approach\n            console.log(`Shadowrun 6e | Trying direct data modification after error for ${this.name}`);\n\n            // Directly modify the data\n            if (this.system.initiative && this.system.initiative.actions) {\n                this.system.initiative.actions.major = majorCount;\n                this.system.initiative.actions.minor = minorCount;\n\n                // Force a refresh of all sheets displaying this actor\n                this.forceRefreshSheets();\n\n                console.log(`Shadowrun 6e | Actions after direct modification for ${this.name}:`, this.system.initiative.actions);\n            }\n        }\n\n        // Verify the update was successful by checking the game.actors collection\n        const verifyActor = game.actors.get(this.id);\n        if (verifyActor) {\n            // Get the current values from the actor\n            const actorMajor = verifyActor.system.initiative.actions.major;\n            const actorMinor = verifyActor.system.initiative.actions.minor;\n\n            console.log(`Shadowrun 6e | Final verification from game.actors collection for ${this.name}:`, {\n                major: actorMajor,\n                minor: actorMinor,\n                expectedMajor: majorCount,\n                expectedMinor: minorCount\n            });\n\n            // Check if the values match the expected values\n            if (actorMajor !== majorCount || actorMinor !== minorCount) {\n                console.error(`Shadowrun 6e | Values don't match expected values! Forcing direct update.`);\n\n                // Force a direct update of the actor's data\n                verifyActor.system.initiative.actions.major = majorCount;\n                verifyActor.system.initiative.actions.minor = minorCount;\n\n                // Force a refresh of all sheets displaying this actor\n                verifyActor.forceRefreshSheets();\n            }\n\n            // Notify the user with the expected values\n            ui.notifications?.info(game.i18n.format('SR6.ConvertedActionsWithValues', {\n                name: this.name,\n                major: majorCount,\n                minor: minorCount\n            }));\n\n            console.log(`Shadowrun 6e | Converted 4 minor actions to 1 major action for ${this.name}: Major: ${majorCount}, Minor: ${minorCount}`);\n        } else {\n            // Fall back to using the local data\n            const currentMajor = this.system.initiative.actions.major;\n            const currentMinor = this.system.initiative.actions.minor;\n\n            // Notify the user with the values from the local data\n            ui.notifications?.info(game.i18n.format('SR6.ConvertedActionsWithValues', {\n                name: this.name,\n                major: majorCount,\n                minor: minorCount\n            }));\n\n            console.log(`Shadowrun 6e | Converted 4 minor actions to 1 major action for ${this.name}: Major: ${majorCount}, Minor: ${minorCount}`);\n        }\n\n        // Force a final refresh of all sheets displaying this actor\n        this.forceRefreshSheets();\n\n        console.log(`Shadowrun 6e | Forced refresh of ${Object.values(this.apps).length} sheets for ${this.name}`);\n    }\n\n\n\n    /**\n     * Reset the matrix actions flag\n     * This will force the system to recalculate whether the actor has matrix actions\n     */\n    async resetMatrixActionsFlag() {\n        await this.unsetFlag('shadowrun6-elysium', 'hasMatrixActions');\n        console.log(`Shadowrun 6e | Reset matrix actions flag for ${this.name}`);\n    }\n\n    /**\n     * Find and refresh all token sheets for this actor\n     * This is needed because token sheets are not automatically refreshed when the actor is updated\n     */\n    refreshTokenSheets() {\n        console.log(`Shadowrun 6e | Refreshing token sheets for ${this.name}`);\n\n        // Get all tokens for this actor\n        const tokens = this.getActiveTokens();\n        console.log(`Shadowrun 6e | Found ${tokens.length} tokens for ${this.name}`);\n\n        // Refresh each token\n        for (const token of tokens) {\n            // Refresh the token\n            if (token.refresh) token.refresh();\n\n            // Refresh the token's sheet if it's open\n            if (token.sheet && token.sheet.rendered) {\n                token.sheet.render(true);\n                console.log(`Shadowrun 6e | Refreshed token sheet for ${token.name}`);\n            }\n        }\n\n        // Find and refresh all token sheets in the ui.windows collection\n        for (const [id, app] of Object.entries(ui.windows)) {\n            // Check if this is a sheet for one of our tokens\n            if (app.token && tokens.some(t => t.id === app.token.id)) {\n                app.render(true);\n                console.log(`Shadowrun 6e | Refreshed token sheet ${id} for ${app.token.name}`);\n            }\n        }\n    }\n\n    /**\n     * Ensures that the actor has access to all matrix actions from the matrix-actions compendium.\n     * This method will add any missing matrix actions to the actor.\n     *\n     * @returns {Promise<void>}\n     */\n    async ensureMatrixActions() {\n        console.log(`Shadowrun 6e | Ensuring matrix actions for actor ${this.name} (${this.id})`);\n\n        // Check if we've already added matrix actions to this actor\n        const hasMatrixActions = this.getFlag('shadowrun6-elysium', 'hasMatrixActions');\n        if (hasMatrixActions) {\n            console.log(`Shadowrun 6e | ${this.name} already has matrix actions flag set`);\n            return;\n        }\n\n        // Get the matrix actions compendium\n        const matrixPack = game.packs.get(\"shadowrun6-elysium.matrix-actions\");\n        if (!matrixPack) {\n            console.error(\"Shadowrun 6e | Matrix Actions compendium not found\");\n            return;\n        }\n\n        // Get all matrix actions\n        await matrixPack.getIndex();\n        const matrixActions = await Promise.all(\n            Array.from(matrixPack.index).map(i => matrixPack.getDocument(i._id))\n        );\n\n        // Get existing action names to avoid duplicates\n        const existingNames = this.items\n            .filter(i => i.type === \"action\")\n            .map(i => i.name.toLowerCase());\n\n        // Filter out actions the actor already has\n        const actionsToAdd = matrixActions.filter(\n            a => !existingNames.includes(a.name.toLowerCase())\n        );\n\n        if (actionsToAdd.length === 0) {\n            console.log(`Shadowrun 6e | ${this.name} already has all matrix actions`);\n            // Set the flag to indicate that we've checked for matrix actions\n            await this.setFlag('shadowrun6-elysium', 'hasMatrixActions', true);\n            return;\n        }\n\n        // Add the actions\n        await this.createEmbeddedDocuments(\n            \"Item\",\n            actionsToAdd.map(a => a.toObject())\n        );\n\n        console.log(`Shadowrun 6e | Added ${actionsToAdd.length} matrix actions to ${this.name}`);\n\n        // Set the flag to indicate that we've added matrix actions\n        await this.setFlag('shadowrun6-elysium', 'hasMatrixActions', true);\n    }\n\n    async newSceneSetup() {\n        const updateData: Record<string, any> = {};\n\n        updateData['system.attributes.edge.uses'] = this.getEdge().value;\n\n        if(updateData) await this.update(updateData);\n    }\n\n    /**\n     * Spend a major action\n     * This should be called whenever a character performs an action that costs a major action\n     * @returns True if the action was spent successfully, false if there were no major actions left\n     */\n    async spendMajorAction() {\n        console.log(`Shadowrun 6e | Spending major action for ${this.name}`);\n\n        // Only proceed if the actor has initiative\n        if (!this.system.initiative) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no initiative data`);\n            return false;\n        }\n\n        // Initialize the actions object if it doesn't exist\n        if (!this.system.initiative.actions) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no actions data, initializing`);\n            await this.update({\n                'system.initiative.actions': {}\n            });\n            // Reset actions to ensure they're properly initialized\n            await this.resetActions();\n            return false;\n        }\n\n        const actions = this.system.initiative.actions;\n        console.log(`Shadowrun 6e | Current actions for ${this.name}:`, actions);\n\n        // Check if the actor has at least 1 major action\n        if (actions.major < 1) {\n            ui.notifications?.warn(game.i18n.format('SR6.NoMajorActionsLeft', {\n                name: this.name\n            }));\n            return false;\n        }\n\n        // Spend 1 major action\n        const majorCount = Number(actions.major) - 1;\n\n        // If the major action count will be 0, we need to make sure it doesn't get reset\n        // by the InitiativePrep.calculateAvailableActions method\n        const willBeZero = majorCount === 0;\n\n        // Log the values for debugging\n        console.log('Shadowrun 6e | Action spending values:', {\n            originalMajor: actions.major,\n            newMajor: majorCount\n        });\n\n        // Update the actions\n        console.log(`Shadowrun 6e | Updating major action count for ${this.name} from ${actions.major} to ${majorCount}`);\n        try {\n            // Update the actor data directly first for immediate feedback\n            this.system.initiative.actions.major = majorCount;\n\n            // Then update the database\n            await this.update({\n                'system.initiative.actions.major': majorCount\n            });\n            console.log(`Shadowrun 6e | Successfully updated major action count for ${this.name}`);\n        } catch (error) {\n            console.error(`Shadowrun 6e | Error updating major action count for ${this.name}:`, error);\n            return false;\n        }\n\n        // Force a refresh of all sheets displaying this actor\n        console.log(`Shadowrun 6e | Refreshing sheets for ${this.name}`);\n        this.forceRefreshSheets();\n        console.log(`Shadowrun 6e | Sheets refreshed for ${this.name}`);\n\n        // No need to verify the update since we've already updated the actor data directly\n\n        console.log(`Shadowrun 6e | Spent 1 major action for ${this.name}: Major: ${majorCount}`);\n\n        // Notify the user that a major action was spent\n        ui.notifications?.info(game.i18n.format('SR6.SpentMajorAction', {\n            name: this.name,\n            count: majorCount\n        }));\n\n        return true;\n    }\n\n    /**\n     * Spend a minor action\n     * This should be called whenever a character performs an action that costs a minor action\n     * @returns True if the action was spent successfully, false if there were no minor actions left\n     */\n    async spendMinorAction() {\n        console.log(`Shadowrun 6e | Spending minor action for ${this.name}`);\n\n        // Only proceed if the actor has initiative\n        if (!this.system.initiative) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no initiative data`);\n            return false;\n        }\n\n        // Initialize the actions object if it doesn't exist\n        if (!this.system.initiative.actions) {\n            console.log(`Shadowrun 6e | Actor ${this.name} has no actions data, initializing`);\n            await this.update({\n                'system.initiative.actions': {}\n            });\n            // Reset actions to ensure they're properly initialized\n            await this.resetActions();\n            return false;\n        }\n\n        const actions = this.system.initiative.actions;\n        console.log(`Shadowrun 6e | Current actions for ${this.name}:`, actions);\n\n        // Check if the actor has at least 1 minor action\n        if (actions.minor < 1) {\n            ui.notifications?.warn(game.i18n.format('SR6.NoMinorActionsLeft', {\n                name: this.name\n            }));\n            return false;\n        }\n\n        // Spend 1 minor action\n        const minorCount = Number(actions.minor) - 1;\n\n        // If the minor action count will be 0, we need to make sure it doesn't get reset\n        // by the InitiativePrep.calculateAvailableActions method\n        const willBeZero = minorCount === 0;\n\n        // Log the values for debugging\n        console.log('Shadowrun 6e | Action spending values:', {\n            originalMinor: actions.minor,\n            newMinor: minorCount\n        });\n\n        // Update the actions\n        console.log(`Shadowrun 6e | Updating minor action count for ${this.name} from ${actions.minor} to ${minorCount}`);\n        try {\n            // Update the actor data directly first for immediate feedback\n            this.system.initiative.actions.minor = minorCount;\n\n            // Then update the database\n            await this.update({\n                'system.initiative.actions.minor': minorCount\n            });\n            console.log(`Shadowrun 6e | Successfully updated minor action count for ${this.name}`);\n        } catch (error) {\n            console.error(`Shadowrun 6e | Error updating minor action count for ${this.name}:`, error);\n            return false;\n        }\n\n        // Force a refresh of all sheets displaying this actor\n        console.log(`Shadowrun 6e | Refreshing sheets for ${this.name}`);\n        this.forceRefreshSheets();\n        console.log(`Shadowrun 6e | Sheets refreshed for ${this.name}`);\n\n        // No need to verify the update since we've already updated the actor data directly\n\n        console.log(`Shadowrun 6e | Spent 1 minor action for ${this.name}: Minor: ${minorCount}`);\n\n        // Notify the user that a minor action was spent\n        ui.notifications?.info(game.i18n.format('SR6.SpentMinorAction', {\n            name: this.name,\n            count: minorCount\n        }));\n\n        return true;\n    }\n\n    /**\n     * Force a refresh of all sheets displaying this actor\n     * This is a comprehensive method to ensure all sheets and tokens are updated\n     */\n    forceRefreshSheets() {\n        console.log(`Shadowrun 6e | Forcing refresh of all sheets for ${this.name}`);\n\n        // Force a refresh of the actor\n        this.render(false);\n\n        // Force a refresh of all sheets displaying this actor\n        for (const sheet of Object.values(this.apps)) {\n            // Render all sheets to ensure they get the latest data\n            sheet.render(true);\n        }\n\n        // Also refresh any token HUDs\n        for (const token of this.getActiveTokens()) {\n            if (token.refresh) token.refresh();\n        }\n\n        // Refresh the canvas if it exists\n        if (canvas && canvas.tokens && typeof canvas.tokens.placeables !== 'undefined') {\n            canvas.tokens.placeables.forEach(token => {\n                if (token.actor && token.actor.id === this.id && token.refresh) {\n                    token.refresh();\n                }\n            });\n        }\n\n        // Refresh token sheets\n        this.refreshTokenSheets();\n\n        console.log(`Shadowrun 6e | Completed refresh of all sheets for ${this.name}`);\n    }\n\n    /**\n     * Will unequip all other items of the same type as the given item.\n     *\n     * It's not necessary for the given item to be equipped.\n     *\n     * @param unequipItem Input item that will be equipped while unequipping all others of the same type.\n     */\n    async equipOnlyOneItemOfType(unequipItem: SR6Item) {\n        const sameTypeItems = this.items.filter(item => item.type === unequipItem.type);\n\n        // If the given item is the only of it's type, allow unequipping.\n        if (sameTypeItems.length === 1 && sameTypeItems[0].id === unequipItem.id) {\n            await unequipItem.update({'system.technology.equipped': !unequipItem.isEquipped()});\n            return\n        }\n\n        // For a set of items, assure only the selected is equipped.\n        const updateData = sameTypeItems.map(item => ({\n                _id: item.id,\n                'system.technology.equipped': item.id === unequipItem.id\n        }));\n\n        await this.updateEmbeddedDocuments('Item', updateData);\n    }\n}\n", "import {FormDialog, FormDialogData} from \"./FormDialog\";\n\nexport class DeleteConfirmationDialog extends FormDialog {\n    constructor(options?) {\n        const dialogData = DeleteConfirmationDialog.getDialogData() as unknown as FormDialogData;\n\n        super(dialogData, options)\n    }\n\n    static getDialogData() {\n        return {\n            title: game.i18n.localize(\"SR6.DeleteConfirmationApplication.Title\"),\n            buttons: {\n                delete: {\n                    label: game.i18n.localize('SR6.DeleteConfirmationApplication.Delete')\n                },\n                cancel: {\n                    label: game.i18n.localize('SR6.DeleteConfirmationApplication.Cancel')\n                }\n            },\n            default: 'cancel',\n            templateData: {},\n            templatePath: 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/delete-confirmation-dialog.html'\n        }\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'delete-confirmation-application';\n        // Class Dialog here is needed for dialog button styling.\n        options.classes = ['sr6', 'form-dialog'];\n        options.resizable = true;\n        options.height = 'auto';\n        return options;\n    }\n}\n", "import AttributeField = Shadowrun.AttributeField;\nimport SkillField = Shadowrun.SkillField;\nimport ModifiableValue = Shadowrun.ModifiableValue;\nimport GenericValueField = Shadowrun.GenericValueField;\nimport LabelField = Shadowrun.LabelField;\nimport RangeTemplateData = Shadowrun.RangeTemplateData;\nimport DamageData = Shadowrun.DamageData;\nimport ModifiedDamageData = Shadowrun.ModifiedDamageData;\nimport DamageType = Shadowrun.DamageType;\nimport DamageElement = Shadowrun.DamageElement;\nimport Skills = Shadowrun.Skills;\nimport TargetedDocument = Shadowrun.TargetedDocument;\nimport { SR6Actor } from \"./actor/SR6Actor\";\nimport { DeleteConfirmationDialog } from \"./apps/dialogs/DeleteConfirmationDialog\";\nimport { DEFAULT_ID_LENGTH, FLAGS, LENGTH_UNIT, LENGTH_UNIT_TO_METERS_MULTIPLIERS, SYSTEM_NAME } from \"./constants\";\nimport { DataDefaults } from \"./data/DataDefaults\";\nimport { SR6Item } from './item/SR6Item';\nimport { PartsList } from './parts/PartsList';\nimport { SuccessTestData } from \"./tests/SuccessTest\";\nimport { Translation } from './utils/strings';\n\ninterface CalcTotalOptions {\n    // Min/Max value range\n    min?: number,\n    max?: number,\n    // Round total to a given decimal, 0 rounds to the next integer.\n    roundDecimals?: number\n}\n\nexport class Helpers {\n    /**\n     * Calculate the total value for a data object\n     * - stores the total value and returns it\n     * @param value\n     * @param options min will a apply a minimum value, max will apply a maximum value.\n     */\n    static calcTotal(value: ModifiableValue, options?: CalcTotalOptions): number {\n        if (value.mod === undefined) value.mod = [];\n\n        const parts = new PartsList(value.mod);\n        // if a temp field is found, add it as a unique part\n        if (!isNaN(value.temp as number) && Number(value.temp) !== 0) {\n            parts.addUniquePart('SR6.Temporary', value['temp']);\n        }\n\n        // On some values base might be undefined...\n        // Check for undefined, as some Values might be none numerical / boolean.\n        value.base = value.base !== undefined ? Number(value.base) : 0;\n\n        // If the given value has an override defined, use that as a value, while keeping the base and mod values.\n        if (value.override) {\n            // Still apply a possible value range, even if override says otherwise.\n            value.value = Helpers.applyValueRange(value.override.value, options);\n            return value.value;\n        }\n\n        // Base on type change calculation behavior.\n        switch (foundry.utils.getType(value.base)) {\n            case 'number':\n                value.value = Helpers.roundTo(parts.total + value.base, options?.roundDecimals);\n                value.value = Helpers.applyValueRange(value.value, options);\n                break;\n            // boolean / string values should be applied\n            default:\n                value.value = parts.last === undefined ? value.base : parts.last;\n                break;\n        }\n\n        value.mod = parts.list;\n\n        return value.value;\n    }\n\n    static calcValue<ValueType>(value: GenericValueField): any {\n        if (value.mod === undefined) value.mod = [];\n\n        if (value.override) {\n            value.value = value.override.value;\n\n            return value.value;\n        }\n\n        value.value = value.base;\n\n        return value.value;\n    }\n\n    /** Round a number to a given degree.\n     *\n     * @param value Number to round with.\n     * @param decimals Amount of decimals after the decimal point.\n     */\n    static roundTo(value: number, decimals: number=3): number {\n        const multiplier = Math.pow(10, decimals);\n        return Math.round(value * multiplier) / multiplier;\n    }\n\n    /** Make sure a given value is in between a range.\n     *\n     * @param value\n     * @param options Define the range the given value must be in (or none)\n     */\n    static applyValueRange(value: number, options?: CalcTotalOptions): number {\n        if (typeof options?.min === 'number') {\n            value = Math.max(options.min, value);\n        }\n        if (typeof options?.max === 'number') {\n            value = Math.min(options.max, value);\n        }\n\n        return value;\n    }\n\n    static listItemId(event): string {\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    static listHeaderId(event): string {\n        return event.currentTarget.closest('.list-header').dataset.itemId;\n    }\n\n    // replace 'SR6.'s on keys with 'SR5_DOT_'\n    static onSetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR6.', 'SR6_DOT_');\n            newData[newKey] = this.onSetFlag(value);\n        }\n        return newData;\n    }\n\n    // replace 'SR6_DOT_' with 'SR6.' on keys\n    static onGetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR6_DOT_', 'SR6.');\n            newData[newKey] = this.onGetFlag(value);\n        }\n        return newData;\n    }\n\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\n        if (!atts) return false;\n        if (typeof atts === 'boolean') return atts;\n        // array of labels to check for on the incoming data\n        const matrixLabels = [\n            'SR6.MatrixAttrFirewall',\n            'SR6.MatrixAttrDataProcessing',\n            'SR6.MatrixAttrSleaze',\n            'SR6.MatrixAttrAttack',\n            'SR6.Skill.Computer',\n            'SR6.Skill.Hacking',\n            'SR6.Skill.Cybercombat',\n            'SR6.Skill.ElectronicWarfare',\n            'SR6.Software',\n        ];\n        if (!Array.isArray(atts)) atts = [atts];\n        atts = atts.filter((att) => att);\n        // iterate over the attributes and return true if we find a matrix att\n        for (const att of atts) {\n            if (typeof att === 'string') {\n                if (matrixLabels.indexOf(att) >= 0) {\n                    return true;\n                }\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\n                    return true;\n                }\n            }\n        }\n        // if we don't find anything return false\n        return false;\n    }\n\n    static parseInputToString(val: number | string | string[] | undefined): string {\n        if (val === undefined) return '';\n        if (typeof val === 'number') return val.toString();\n        if (typeof val === 'string') return val;\n        if (Array.isArray(val)) {\n            return val.join(',');\n        }\n        return '';\n    }\n\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n            const ret = +val;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        if (Array.isArray(val)) {\n            const str = val.join('');\n            const ret = +str;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        return 0;\n    }\n\n    static setupCustomCheckbox(app, html) {\n        const setContent = (el) => {\n            const checkbox = $(el).children('input[type=checkbox]');\n            const checkmark = $(el).children('.checkmark');\n            if ($(checkbox).prop('checked')) {\n                $(checkmark).addClass('fa-check-circle');\n                $(checkmark).removeClass('fa-circle');\n            } else {\n                $(checkmark).addClass('fa-circle');\n                $(checkmark).removeClass('fa-check-circle');\n            }\n        };\n        html.find('label.checkbox').each(function () {\n            setContent(this);\n        });\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\n    }\n\n    static mapRoundsToDefenseDesc(rounds) {\n        if (rounds === 1) return '';\n        if (rounds === 3) return '-2';\n        if (rounds === 6) return '-5';\n        if (rounds === 10) return '-9';\n        if (rounds === 20) return 'SR6.DuckOrCover';\n        return '';\n    }\n\n    static label(str: string) {\n        // Gracefully fail if for falsy values.\n        if (!str) return '';\n\n        const frags = str.split('_');\n        for (let i = 0; i < frags.length; i++) {\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\n        }\n        frags.forEach((frag, idx) => {\n            if (frag === 'Processing') frags[idx] = 'Proc.';\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\n        });\n        return frags.join(' ');\n    }\n\n    static orderKeys(obj) {\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\n            if (k1 < k2) return -1;\n            if (k1 > k2) return +1;\n            return 0;\n        });\n\n        let i;\n        const after = {};\n        for (i = 0; i < keys.length; i++) {\n            after[keys[i]] = obj[keys[i]];\n            delete obj[keys[i]];\n        }\n\n        for (i = 0; i < keys.length; i++) {\n            obj[keys[i]] = after[keys[i]];\n        }\n        return obj;\n    }\n\n    static hasModifiers(event) {\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\n    }\n\n    static filter(obj, comp) {\n        const retObj = {};\n        if (typeof obj === 'object' && obj !== null) {\n            Object.entries(obj).forEach(([key, value]) => {\n                if (comp([key, value])) retObj[key] = value;\n            });\n        }\n        return retObj;\n    }\n\n    static addLabels(obj, label) {\n        if (typeof obj === 'object' && obj !== null) {\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\n                obj.label = label;\n            }\n            Object.entries(obj)\n                .filter(([, value]) => typeof value === 'object')\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\n        }\n    }\n\n    /* Handle Shadowrun style shortened attribute names with typical three letter shortening. */\n    static shortenAttributeLocalization(label: string, length: number = 3): string {\n        const name = game.i18n.localize(label as Translation);\n\n        if (length <= 0) {\n            return name;\n        }\n\n        if (name.length < length) {\n            length = name.length;\n        }\n\n        return name.slice(0, length).toUpperCase();\n    }\n\n    // TODO: Foundry 0.9 Should TokenDocument be used instead of Token?\n    // TODO: Check canvas.scene.tokens\n    static getToken(id?: string): Token | undefined {\n        if (!canvas || !canvas.ready || !canvas.tokens) return;\n\n        for (const token of canvas.tokens.placeables) {\n            if (token.id === id) {\n                return token;\n            }\n        }\n    }\n\n    /**\n     * Use this helper to get a tokens actor from any given scene id.\n     * @param sceneTokenId A mixed id with the format '<sceneId>.<tokenid>\n     */\n    static getSceneTokenActor(sceneTokenId: string): SR6Actor | null {\n        const [sceneId, tokenId] = Helpers.deconstructSceneTokenId(sceneTokenId);\n        const token = Helpers.getSceneTokenDocument(sceneId, tokenId);\n        if (!token) return null;\n        return token.getActor();\n    }\n\n    static deconstructSceneTokenId(sceneTokenId: string): [sceneId: string, tokenId: string] {\n        return sceneTokenId.split('.') as [sceneId: string, tokenId: string];\n    }\n\n    static getSceneTokenDocument(sceneId, tokenId): TokenDocument | undefined {\n        const scene = game.scenes?.get(sceneId);\n        if (!scene) return;\n        const token = scene.tokens.get(tokenId);\n        if (!token) return;\n\n        return token;\n    }\n\n    static getUserTargets(user?: User | null): Token[] {\n        user = user ? user : game.user;\n\n        if (!user) return []\n\n        return Array.from(user.targets);\n    }\n\n    static userHasTargets(user?: User | null): boolean {\n        user = user ? user : game.user;\n\n        if (!user) return false;\n\n        return user.targets.size > 0;\n    }\n\n    /**\n     * Measure the distance between two tokens on the canvas in length units,\n     * factoring in both 2D distance and 3D elevation difference.\n     *\n     * Depending on the scene distance unit the result will be converted.\n     *\n     * If wall-height is installed and using tokenHeight, it will be used for elevation.\n     *\n     * @param tokenOrigin\n     * @param tokenDest\n     * @returns Distance in scene distance unit\n     */\n    static measureTokenDistance(tokenOrigin: TokenDocument, tokenDest: TokenDocument): number {\n        if (!canvas || !canvas.ready || !canvas.scene || !canvas.grid) return 0;\n\n        if (!tokenOrigin || !tokenDest) return 0;\n\n        // 2d coordinates and distance\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        const origin2D = new PIXI.Point(...canvas.grid.getCenter(tokenOrigin.x, tokenOrigin.y));\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        const dest2D = new PIXI.Point(...canvas.grid.getCenter(tokenDest.x, tokenDest.y));\n\n        // Use gridSpace to measure in grids instead of distance. This will give results parity to FoundryVTTs canvas ruler.\n        const distanceInGridUnits2D = canvas.grid.measureDistance(origin2D, dest2D);\n\n        // 3d coordinates and distance\n        const originLOSHeight = Helpers.getTokenLOSHeight(tokenOrigin);\n        const destLOSHeight = Helpers.getTokenLOSHeight(tokenDest);\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        const elevationDifference = (tokenOrigin.elevation + originLOSHeight) - (tokenDest.elevation + destLOSHeight);\n        const origin3D = new PIXI.Point(0, 0);\n        const dest3D = new PIXI.Point(distanceInGridUnits2D, elevationDifference);\n\n        const distanceInGridUnits3D = Math.round(Helpers.measurePointDistance(origin3D, dest3D));\n\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        const sceneUnit = canvas.scene.grid.units;\n        return Helpers.convertLengthUnit(distanceInGridUnits3D, sceneUnit);\n    }\n\n    /**\n     * Measure distance between two points on a grid in length units.\n     *\n     * @param origin\n     * @param destination\n     * @returns Distance without a unit.\n     */\n    static measurePointDistance(origin: Point, destination: Point): number {\n        const sideA = origin.x + destination.x;\n        const sideB = origin.y + destination.y;\n        return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2))\n    }\n\n    /**\n     * Determine a tokens line of sight height.\n     *\n     * Default Foundry will use 0, while wall-height might have defined another value on the token.\n     *\n     * The auto height generation of wall-height isn't supported.\n     *\n     * @param token\n     * @returns\n     */\n    static getTokenLOSHeight(token: TokenDocument): number {\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        return token.flags['wall-height']?.tokenHeight ?? 0;\n    }\n\n    static convertLengthUnit(length: number, fromUnit: string): number {\n        fromUnit = fromUnit.toLowerCase();\n\n        if (!LENGTH_UNIT_TO_METERS_MULTIPLIERS.hasOwnProperty(fromUnit)) {\n            console.error(`Distance can't be converted from ${fromUnit} to ${LENGTH_UNIT}`);\n            return 0;\n        }\n\n        // Note: length is a grid distance. To avoid suddenly feeding floats, still round in case\n        //       of a later API change somewhere.\n        return Math.round(length * LENGTH_UNIT_TO_METERS_MULTIPLIERS[fromUnit]);\n    }\n\n    static getControlledTokens(): Token[] {\n        if (!canvas || !canvas.ready || !canvas.tokens) return [];\n        return canvas.tokens.controlled;\n    }\n\n    /**\n     * Determine if the current user has any tokens selected.\n     * @returns true if one or more tokens have been selected.\n     */\n    static userHasControlledTokens(): boolean {\n        if (!canvas || !canvas.ready || !canvas.tokens) return false;\n        return canvas.tokens.controlled.length > 0;\n    }\n\n    /**\n     * Return all actors connected to all user controlled tokens.\n     * @returns An array token actors.\n     */\n    static getControlledTokenActors(): SR6Actor[] {\n        if (!canvas || !canvas.ready) return []\n\n        const tokens = Helpers.getControlledTokens();\n        return tokens.map(token => token.actor) as SR6Actor[];\n    }\n\n    /**\n     * return all tokens a user has targeted at the moment.\n     * @returns An array tokens.\n     */\n    static getTargetedTokens(): Token[] {\n        if (!canvas.ready || !game.user) return [];\n\n        return Array.from(game.user.targets);\n    }\n\n    /**\n     * Return either all user selected token actors or the users game character actor.\n     * @returns An array of actors.\n     */\n    static getSelectedActorsOrCharacter(): SR6Actor[] {\n        if (!game.user) return [];\n\n        const actors = Helpers.getControlledTokenActors();\n\n        // Try to default to a users character.\n        if (actors.length === 0 && game.user.character) {\n            actors.push(game.user.character);\n        }\n\n        return actors as SR6Actor[];\n    }\n\n    /**\n     * Given a SuccessTestData subset fetch all target actors.\n     *\n     * BEWARE: A target will always be token based BUT linked actors provide an actor uuid instead of\n     * pointing to their token actors.\n     *\n     * @param testData The test data containing target uuids.\n     */\n    static async getTestTargetActors(testData: SuccessTestData): Promise<SR6Actor[]> {\n        const actors: SR6Actor[] = [];\n        for (const uuid of testData.targetActorsUuid) {\n            const tokenOrActor = await fromUuid(uuid);\n            // Assume given target to be an actor.\n            let actor = tokenOrActor;\n\n            // In case of a Token, extract it's synthetic actor.\n            if (tokenOrActor instanceof TokenDocument) {\n                if (!tokenOrActor.actor) continue;\n                actor = tokenOrActor.actor;\n            }\n\n            // Avoid fromUuid pulling an unwanted Document type.\n            if (!(actor instanceof SR6Actor)) {\n                console.error(`SR6: Elysium | testData with targets containt UUID ${uuid} which doesn't provide an actor or syntheic actor`, tokenOrActor);\n                continue;\n            }\n\n            actors.push(actor);\n        }\n        return actors;\n    }\n    /**\n     * Check given test for actors to use for opposed tests.\n     *\n     * @param testData The test to use for actor selection\n     * @returns A list of actors that should be used for an opposed test.\n     */\n    static async getOpposedTestActors(testData: SuccessTestData): Promise<SR6Actor[]> {\n        const overwriteSelectionWithTarget = game.settings.get(SYSTEM_NAME, FLAGS.DefaultOpposedTestActorSelection) as boolean;\n\n        // Honor user preference of using test targets, if any are set.\n        if (overwriteSelectionWithTarget && testData.targetActorsUuid.length > 0) {\n            return await Helpers.getTestTargetActors(testData);\n        }\n\n        // Otherwise fallback to default behavior\n        return Helpers.getSelectedActorsOrCharacter();\n    }\n\n    static createRangeDescription(label: Translation, distance: number, modifier: number): RangeTemplateData {\n        const localizedLabel = game.i18n.localize(label);\n        return {label: localizedLabel, distance, modifier}\n    }\n\n    static convertIndexedObjectToArray(indexedObject: object): object[] {\n        return Object.keys(indexedObject).map((index) => {\n            if (Number.isNaN(index)) {\n                console.warn('An object with no numerical index was given, which is likely a bug.', indexedObject);\n            }\n            return indexedObject[index];\n        });\n    }\n\n    /**\n     * Depending on the system setting allow GMs to define if they want to always display the name within the actor\n     * or within the token.\n     *\n     * This can be relevant for when GMs either manually or by module change the tokens name, while the actors name\n     * is untouched and might even be detrimental to share with players.\n     *\n     * @param actor\n     */\n    static getChatSpeakerName(actor: SR6Actor): string {\n        if (!actor) return '';\n\n        const useTokenNameForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\n        const token = actor.getToken();\n\n        if (useTokenNameForChatOutput && token) return token.name as string;\n\n        return actor.name as string;\n    }\n\n    static getDefenseRating(targets: TokenDocument[]): number {\n        let defenseRating = 0;\n        for(const token of targets) {\n            let target = token.actor;\n            console.log(target);\n            // @ts-ignore\n            if ('defense_rating' in target.system.values && target.system.values.defense_rating.value > defenseRating) {\n                // @ts-ignore\n                defenseRating = target.system.values.defense_rating.value;\n            }\n        }\n        return defenseRating;\n    }\n\n    static getAttackRating(actor: SR6Actor): number {\n        return 0;\n    }\n\n    /**\n     * Given an actor this will display either the actor or token name, when there is any.\n     *\n     * The use token name setting is also respected.\n     *\n     * @param actor Either an actual or a virtual actor, taken from a token.\n     * @returns A path pointing to an image.\n     */\n    static getChatSpeakerImg(actor: SR6Actor): string {\n        if (!actor) return '';\n\n        const useTokenForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\n        const token = actor.getToken();\n\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        if (useTokenForChatOutput && token) return token.texture.src || '';\n        return actor.img || '';\n    }\n\n    static createDamageData(value: number, type: DamageType, ap: number = 0, element: DamageElement = '', sourceItem?: SR6Item): DamageData {\n        const damage = DataDefaults.damageData({type: {base: '', value: ''}});\n        damage.base = value;\n        damage.value = value;\n        damage.type.base = type;\n        damage.type.value = type;\n        damage.ap.base = ap;\n        damage.ap.value = ap;\n        damage.element.base = element;\n        damage.element.value = element;\n\n        if (sourceItem && sourceItem.actor) {\n            damage.source = {\n                actorId: sourceItem.actor.id as string,\n                itemType: sourceItem.type,\n                itemId: sourceItem.id as string,\n                itemName: sourceItem.name as string\n            };\n        }\n\n        return damage;\n    }\n\n    /**\n     * Retrieves the item causing the damage, if there is any.\n     * This only works for embedded items at the moment\n     */\n    static findDamageSource(damageData: DamageData): SR6Item | undefined {\n        if (!game.actors) return;\n\n        if (!damageData.source) {\n            return;\n        }\n\n        const actorId = damageData.source.actorId;\n        const actorSource = game.actors.get(actorId)\n\n        if (!actorSource) {\n            return;\n        }\n\n        // First search the actor itself for the item\n        const itemId = damageData.source.itemId;\n        const actorItem = actorSource.items.get(itemId);\n        if (actorItem) {\n            return actorItem;\n        }\n\n        // If we did not find anything on the actor, search the active tokens (the item might only exist on a non linked token)\n        // This will not work if we are on a different scene or the token got deleted, which is expected when you put an\n        // item on a token without linking it.\n        const tokens = actorSource.getActiveTokens();\n        let tokenItem: SR6Item | undefined;\n        tokens.forEach(token => {\n            if (!token.actor) return;\n\n            const foundItem = token.actor.items.get(itemId);\n            if (foundItem) {\n                tokenItem = foundItem as unknown as SR6Item;\n            }\n        });\n\n        return tokenItem;\n    }\n\n    /** Modifies given damage value and returns both original and modified damage\n     *\n     * For better readability reduceDamageByHits wraps this method to avoid negative params in the call signature.\n     * so instead of\n     * > modifyDamageByHits(incoming, -hits, label)\n     * do this instead\n     * > reduceDamageByHits(incoming, hits, label)\n     *\n     * @param incoming A DamageData value to be modified from\n     * @param hits Positive or negative hits to change the damage value with.\n     * @param modificationLabel The translatable label for the modification\n     */\n    static modifyDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\n        const modified = foundry.utils.duplicate(incoming) as DamageData;\n        modified.mod = PartsList.AddUniquePart(modified.mod, modificationLabel, hits);\n        modified.value = Helpers.calcTotal(modified, {min: 0});\n\n        return {incoming, modified};\n    }\n\n    /** Reduces given damage value and returns both original and modified damage.\n     *\n     * Should you want RAISE the damage value, use modifyDamageByHits directly.\n     *\n     * @param incoming A DamageData value to be modified from\n     * @param hits Positive hits to reduce the damage value with! Should the hits amount be negative, use modifyDamageByHits.\n     * @param modificationLabel The translatable label for the modification\n     */\n    static reduceDamageByHits(incoming: DamageData, hits: number, modificationLabel: string): ModifiedDamageData {\n        if (hits < 0) hits = 0;\n        return Helpers.modifyDamageByHits(incoming, -hits, modificationLabel);\n    }\n\n    static async confirmDeletion(): Promise<boolean> {\n        const dialog = new DeleteConfirmationDialog();\n        await dialog.select();\n        return !dialog.canceled && dialog.selectedButton === 'delete';\n    }\n\n    /**\n     * This can be used to create an SkillField into the Skills data path during the Skill creation process.\n     *\n     * @param skillDataPath Could be 'data.skills.active' or 'data.skill.language.value' or more\n     * @param skillField A SkillField with whatever values. You could use DataDefaults.skillData to create one.\n     * @param idLength How long should the id (GUID) be?\n     */\n    static getRandomIdSkillFieldDataEntry(skillDataPath: string, skillField: SkillField, idLength: number = DEFAULT_ID_LENGTH): { id: string, updateSkillData: { [skillDataPath: string]: { [id: string]: SkillField } } } | undefined {\n        if (!skillDataPath || skillDataPath.length === 0) return;\n\n        const id = randomID(idLength);\n        const updateSkillData = {\n            [skillDataPath]: {[id]: skillField}\n        };\n\n        return {\n            id,\n            updateSkillData\n        }\n    }\n\n    /**\n     * A simple helper to get an data entry for updating with Entity.update\n     *\n     * @param path The main data path as a doted string relative from the type data (not document data).\n     * @param value Whatever needs to be stored.\n     *\n     */\n    static getUpdateDataEntry(path: string, value: any): { [path: string]: any } {\n        return {[path]: value};\n    }\n\n    /**\n     * A simple helper to delete existing document data keys with Entity.update\n     *\n     * @param path The main data path as doted string relative from the item type data (not document data). data.skills.active\n     * @param key The single sub property within the path that's meant to be deleted. 'test'\n     *\n     * @return An expected return object could look like this: {'data.skills.active': {'-=Pistols': null}} and would\n     *         remove the Pistols key from the 'data.skills.active' path within Entity.system.skills.active.\n     */\n    static getDeleteKeyUpdateData(path: string, key: string): { [path: string]: { [key: string]: null } } {\n        // Entity.update utilizes the mergeObject function within Foundry.\n        // That functions documentation allows property deletion using the -= prefix before property key.\n        return {[path]: {[`-=${key}`]: null}};\n    }\n\n    static localizeSkill(skill: SkillField): string {\n        return skill.label ? game.i18n.localize(skill.label as Translation) : skill.name;\n    }\n\n    /**\n     * Alphabetically sort skills either by their translated label. Should a skill not have one, use the name as a\n     * fallback.\n     *\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\n     *\n     * @param skills\n     * @param asc Set to true for ascending sorting order and to false for descending order.\n     * @return Sorted Skills given by the skills parameter\n     */\n    static sortSkills(skills: Skills, asc: boolean = true): Skills {\n        // Filter entries instead of values to have a store of ids for easy rebuild.\n        const sortedEntries = Object.entries(skills).sort(([aId, a], [bId, b]) => {\n            const comparatorA = Helpers.localizeSkill(a) || aId;\n            const comparatorB = Helpers.localizeSkill(b) || bId;\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\n            if (asc)\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\n            else\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\n        });\n\n        // Rebuild the Skills type using the earlier entries.\n        const sortedAsObject = {};\n        for (const [id, skill] of sortedEntries) {\n            sortedAsObject[id] = skill;\n        }\n\n        return sortedAsObject;\n    }\n\n    /**\n     * Alphabetically sort any SR5 config object with a key to label structure.\n     *\n     * Sorting should be aware of UTF-8, however please blame JavaScript if it's not. :)\n     *\n     * @param configValues The config value to be sorted\n     * @param asc Set to true for ascending sorting order and to false for descending order.\n     * @return Sorted config values given by the configValues parameter\n     */\n    static sortConfigValuesByTranslation(configValues: Record<string, Translation>, asc: boolean = true): Record<string, string> {\n        // Filter entries instead of values to have a store of ids for easy rebuild.\n        const sortedEntries = Object.entries(configValues).sort(([aId, a], [bId, b]) => {\n            const comparatorA = game.i18n.localize(a);\n            const comparatorB = game.i18n.localize(b);\n            // Use String.localeCompare instead of the > Operator to support other alphabets.\n            if (asc)\n                return comparatorA.localeCompare(comparatorB) === 1 ? 1 : -1;\n            else\n                return comparatorA.localeCompare(comparatorB) === 1 ? -1 : 1;\n        });\n\n        // Rebuild the skills type using the earlier entries.\n        const sortedAsObject = {};\n        for (const [key, translated] of sortedEntries) {\n            sortedAsObject[key] = translated;\n        }\n        return sortedAsObject;\n    }\n\n    /**\n     * Return a list of users with the given permission for the given document.\n     *\n     * @param document A foundry Document implementation.\n     * @param permission A foundry access permission\n     * @param active If true, will only return users that are also currently active.\n     */\n    static getPlayersWithPermission(document: foundry.abstract.Document<any>, permission: string, active: boolean = true): User[] {\n        if (!game.users) return [];\n\n        return game.users.filter(user => {\n            if (user.isGM) return false;\n            // @ts-expect-error // Check for permissions. String is allowed\n            if (!document.testUserPermission(user, permission)) return false;\n            // Check for active state.\n            if (active && !user.active) return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Handle the special skill cases with id equals name and possible i18n\n     *\n     * @param skill\n     * @returns Either a translation or a name.\n     */\n    static getSkillLabelOrName(skill: SkillField): string {\n        // Custom skills don't have labels, use their name instead.\n        return skill.label ? game.i18n.localize(skill.label as Translation) : skill.name || '';\n    }\n\n    /**\n     * Fetch entities from global or pack collections using data acquired by Foundry Drag&Drop process\n     * @param data Foundry Drop Data\n     */\n    static async getEntityFromDropData(data: { type: 'Actor' | 'Item', pack: string, id: string }): Promise<SR6Actor | SR6Item | undefined> {\n        if (!game.actors || !game.items) return;\n\n        if (data.pack && data.type === 'Actor')\n            return await Helpers.getEntityFromCollection(data.pack, data.id) as unknown as SR6Actor;\n\n        if (data.pack && data.type === 'Item')\n            return await Helpers.getEntityFromCollection(data.pack, data.id) as unknown as SR6Item;\n\n        if (data.type === 'Actor')\n            return game.actors.get(data.id);\n\n        if (data.type === 'Item')\n            return game.items.get(data.id);\n    }\n\n    /**\n     * Fetch entities from a pack collection\n     * @param collection The pack name as stored in the collection property\n     * @param id The entity id in that collection\n     */\n    static async getEntityFromCollection(collection: string, id: string): Promise<Document> {\n        const pack = game.packs.find((p) => p.collection === collection);\n        // @ts-expect-error // All Document types COULD be returned...\n        return await pack.getDocument(id);\n    }\n\n    /**\n     * A markId is valid if:\n     * - It's scene still exists\n     * - The token still exists on that scene\n     * - And a possible owned item still exists on that documents actor.\n     */\n    static isValidMarkId(markId: string): boolean {\n        if (!game.scenes) return false;\n\n        const [sceneId, targetId, itemId] = Helpers.deconstructMarkId(markId);\n\n        const scene = game.scenes.get(sceneId);\n        if (!scene) return false;\n\n        const tokenDocument = scene.tokens.get(targetId);\n        if (!tokenDocument) return false;\n\n        const actor = tokenDocument.actor;\n        // Some targets are allowed without a targeted owned item.\n        if (itemId && !actor?.items.get(itemId)) return false;\n\n        return true;\n    }\n\n    /**\n     * Build a markId string. See Helpers.deconstructMarkId for usage.\n     *\n     * @param sceneId Optional id in a markId\n     * @param targetId Mandatory id in a markId\n     * @param itemId Optional id in a markId\n     * @param separator Should you want to change the default separator used. Make sure not to use a . since Foundry will split the key into objects.\n     */\n    static buildMarkId(sceneId: string, targetId: string, itemId: string | undefined, separator = '/'): string {\n        return [sceneId, targetId, itemId || ''].join(separator);\n    }\n\n    /**\n     * Deconstruct the given markId string.\n     *\n     * @param markId 'sceneId.targetId.itemId' with itemId being optional\n     * @param separator Should you want to change the default separator used\n     */\n    static deconstructMarkId(markId: string, separator = '/'): [sceneId: string, targetId: string, itemId: string] {\n        const ids = markId.split(separator);\n\n        if (ids.length !== 3) {\n            console.error('A mark id must always be of length 3');\n        }\n\n        return ids as [string, string, string];\n    }\n\n    static getMarkIdDocuments(markId: string): TargetedDocument | undefined {\n        if (!game.scenes || !game.items) return;\n\n        const [sceneId, targetId, itemId] = Helpers.deconstructMarkId(markId);\n\n        const scene = game.scenes.get(sceneId);\n        if (!scene) return;\n        const target = scene.tokens.get(targetId) || game.items.get(targetId) as SR6Item;\n        const item = target?.actor?.items?.get(itemId) as SR6Item; // DocumentCollection will return undefined if needed\n\n        return {\n            scene, target, item\n        }\n    }\n\n    /**\n     * Return true if all given keys are present in the given object.\n     * Values don't matter for this comparison.\n     *\n     * @param obj\n     * @param keys\n     */\n    static objectHasKeys(obj: object, keys: string[]): boolean {\n        for (const key of keys) {\n            if (!obj.hasOwnProperty(key)) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Check packs for a given action.\n     *\n     * TODO: Use pack and action ids to avoid polluted user namespaces\n     * TODO: Allow for i18n to fetch a label from an action? Or predefine the title?\n     *\n     * @param packName The metadata name of the pack\n     * @param actionName The name of the action within that pack\n     */\n    static async getPackAction(packName, actionName): Promise<SR6Item | undefined> {\n        console.debug(`Shadowrun 6e | Trying to fetch action ${actionName} from pack ${packName}`);\n        const pack = game.packs.find(pack =>\n            pack.metadata.system === SYSTEM_NAME &&\n            pack.metadata.name === packName);\n        if (!pack) return;\n\n        // TODO: Use predefined ids instead of names...\n        const packEntry = pack.index.find(data => data.name?.toLowerCase().replace(new RegExp(' ', 'g'), '_') === actionName.toLowerCase());\n        if (!packEntry) return;\n\n        const item = await pack.getDocument(packEntry._id) as unknown as SR6Item;\n        if (!item || item.type !== 'action') return;\n\n        console.debug(`SR6: Elysium | Fetched action ${actionName} from pack ${packName}`, item);\n        return item;\n    }\n\n    /**\n     * Show the DocumentSheet of whatever entity link uuid.\n     *\n     * This function is designed to work in cojunction with the content-link CSS-class used by Foundry opening\n     * the given id. Because of this only entity-links with uuid dataset entries should trigger.\n     *\n     * @param event A PointerEvent by user interaction.\n     */\n    static async renderEntityLinkSheet(event) {\n        const element = $(event.currentTarget);\n        const uuid = element.data('uuid');\n        await Helpers.renderDocumentSheet(uuid);\n    }\n\n    /**\n     * Fetch a Document using the FoundryVTT UUID and render it's connected sheet.\n     *\n     * @param uuid Generated by Document.uuid property.\n     * @param resolveTokenToActor Should the uuid resolve to a TokenDocument, rather render it's actor.\n     */\n    static async renderDocumentSheet(uuid: string, resolveTokenToActor = true) {\n        if (!uuid) return;\n        let document = await fromUuid(uuid);\n        if (!document) return;\n        if (document instanceof TokenDocument && resolveTokenToActor && document.actor)\n            document = document.actor;\n        // @ts-expect-error\n        await document.sheet.render(true);\n    }\n\n    /**\n     * Sanitize keys to not use characters used within FoundryVTT Document#update and expandObject methods.\n     *\n     * @param key The key, maybe containing prohibited characters\n     * @param replace The characters to replaces prohibited characters with\n     * @returns key without\n     */\n    static sanitizeDataKey(key: string, replace: string=''): string {\n        const spicyCharacters = ['.', '-='];\n        spicyCharacters.forEach(character => key = key.replace(character, replace));\n        return key;\n    }\n\n    /**\n     * This method tries to get an owned actor of the user.\n     * If none are found it will return null\n     * If exactly one is found, it will automatically return the found actor\n     * If several are found it prompts the user to choose on of the available actors\n     * @returns an actor\n     */\n    static async chooseFromAvailableActors() {\n        let availableActors =  game.actors?.filter( e => e.isOwner && e.hasPlayerOwner) ?? [];\n\n        if(availableActors.length == 0) {\n            return\n        }\n\n        if(availableActors.length == 1) {\n            return availableActors[0]\n        }\n        else {\n            let allActors = ''\n            game.actors?.filter( e => e.isOwner && e.hasPlayerOwner).forEach(t => {\n                    allActors = allActors.concat(`\n                            <option value=\"${t.id}\">${t.name}</option>`);\n                });\n            const  dialog_content = `  \n                <select name =\"actor\">\n                ${allActors}\n                </select>`;\n\n            let choosenActor = await Dialog.prompt({\n                title: game.i18n.localize('SR6.Skill.Teamwork.ParticipantActor'),\n                content: dialog_content,\n                callback: (html) => html.find('select').val()\n            }) as string;\n\n            return game.actors?.get(choosenActor) as SR6Actor;\n        }\n    }\n\n    /**\n     * A method to capitalize the first letter of a given string.\n     * This allows to transform skill and attribute ids to the corresponding translation sub-keys\n     * See @see getSkillTranslation @see getAttributeTranslaton\n     * @param string\n     * @returns the string with a capitalized first letter\n     */\n    static capitalizeFirstLetter(string: string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    /**\n     * Translates a skillId\n     * @param skill\n     * @returns translation\n     */\n    static getSkillTranslation(skill: string) : string {\n        return game.i18n.localize(`SR6.Skill.${this.capitalizeFirstLetter(skill)}` as Translation)\n    }\n\n    /**\n     * Translate an attribute\n     * @param attribute\n     * @returns translation\n     */\n    static getAttributeTranslation(attribute: string) : string {\n        return game.i18n.localize(`SR6.Attr${this.capitalizeFirstLetter(attribute)}` as Translation)\n    }\n}\n", "import { PartsList } from '../parts/PartsList';\nimport ModList = Shadowrun.ModList;\nimport {Helpers} from \"../helpers\";\nimport {SafeString} from \"handlebars\";\nimport DamageData = Shadowrun.DamageData;\nimport ModListEntry = Shadowrun.ModListEntry;\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\n\nexport const registerRollAndLabelHelpers = () => {\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\n        if (damage === 'physical') return 'P';\n        if (damage === 'stun') return 'S';\n        if (damage === 'matrix') return 'M';\n        return '';\n    });\n\n    Handlebars.registerHelper('damageCode', function(damage: DamageData): SafeString {\n        // Add null checks to prevent errors when damage or damage.type is undefined\n        if (!damage) {\n            console.log('Shadowrun 6e | Damage object is undefined in damageCode helper');\n            return new Handlebars.SafeString('0S');\n        }\n\n        // Add debugging to see what's in the damage object\n        console.log('Shadowrun 6e | Damage object in damageCode helper:', damage);\n\n        // Make sure damage.value is defined\n        let damageValue = 0;\n        if (damage.value !== undefined) {\n            damageValue = damage.value;\n        } else if (damage.base !== undefined) {\n            damageValue = damage.base;\n        }\n\n        // Handle empty or missing type\n        let damageType = 'stun';\n        if (damage.type) {\n            if (damage.type.value && damage.type.value !== '') {\n                damageType = damage.type.value;\n            } else if (damage.type.base && damage.type.base !== '') {\n                damageType = damage.type.base;\n            }\n        } else {\n            // Create type object if it doesn't exist\n            damage.type = { base: 'stun', value: 'stun' };\n        }\n\n        const typeCode = Handlebars.helpers.damageAbbreviation(damageType);\n        let code = `${damageValue}${typeCode}`;\n        console.log('Shadowrun 6e | Damage code generated:', code);\n        return new Handlebars.SafeString(code);\n    });\n\n    Handlebars.registerHelper('diceIcon', function (side) {\n        if (side) {\n            switch (side) {\n                case 1:\n                    return 'red';\n                case 2:\n                    return 'grey';\n                case 3:\n                    return 'grey';\n                case 4:\n                    return 'grey';\n                case 5:\n                    return 'green';\n                case 6:\n                    return 'green';\n            }\n        }\n    });\n\n    Handlebars.registerHelper('elementIcon', function (element) {\n        let icon = '';\n        if (element === 'electricity') {\n            icon = 'fas fa-bolt';\n        } else if (element === 'radiation') {\n            icon = 'fas fa-radiation-alt';\n        } else if (element === 'fire') {\n            icon = 'fas fa-fire';\n        } else if (element === 'acid') {\n            icon = 'fas fa-vials';\n        } else if (element === 'cold') {\n            icon = 'fas fa-snowflake';\n        }\n        return icon;\n    });\n\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\n        const parts = new PartsList(partsList);\n        return parts.total;\n    });\n\n    Handlebars.registerHelper('signedValue', function (value: number) {\n        return value > 0 ?  `+${value}`: `${value}`;\n    });\n\n    Handlebars.registerHelper('speakerName', Helpers.getChatSpeakerName);\n    Handlebars.registerHelper('speakerImg', Helpers.getChatSpeakerImg);\n    Handlebars.registerHelper(\"defenseRating\", Helpers.getDefenseRating);\n    Handlebars.registerHelper(\"attackRating\", Helpers.getAttackRating)\n};\n", "import * as englishTranslations from \"../../../public/locale/en/config.json\";\nimport { NestedKeys } from './types';\n// import * as germanTranslations from '../../../public/locale/de/config.json';\n// import * as koreanTranslations from '../../../public/locale/ko/config.json';\n// import * as portTranslations from '../../../public/locale/pt-BR/config.json';\n// import * as frenchTranslations from '../../../public/locale/fr/config.json';\n\n// Type encompassing all translated strings, flattening nested objects into only their leaf nodes (ie. \"SR6.Ammo\", \"SR6.TestResults.AttackHits\", etc.)\nexport type Translation = NestedKeys<typeof englishTranslations>;\n\n// Utility type to help uncover untranslated strings.  Left commented out due to only being useful during development\n// export type FullyTranslatedTranslation =\n//     NestedKeys<typeof englishTranslations> &\n//     NestedKeys<typeof germanTranslations> &\n//     NestedKeys<typeof koreanTranslations> &\n//     NestedKeys<typeof portTranslations> &\n//     NestedKeys<typeof frenchTranslations>;\n\n//Wrapped version of game.i18.format that only accepts Translation strings for data\nexport function formatStrict(stringId: Translation, data: Record<string, Translation>): string {\n    return game.i18n.format(\n        stringId,\n        Object.fromEntries(\n            Object.entries(data)\n                .map(([key, value]) =>\n                    [key, game.i18n.localize(value)])));\n}\n", "import { SR6ItemDataWrapper } from '../data/SR6ItemDataWrapper';\nimport { SR6 } from '../config';\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\nimport MarkedDocument = Shadowrun.MarkedDocument;\nimport { InventorySheetDataByType } from '../actor/sheets/SR6BaseActorSheet';\nimport { SR6ActiveEffect } from '../effect/SR6ActiveEffect';\nimport { formatStrict } from '../utils/strings';\nimport ActionType = Shadowrun.ActionType;\nimport InitiativeTiming = Shadowrun.InitiativeTiming;\n\n/**\n * Format action type and initiative timing with appropriate classes for styling\n * @param actionType The action type (major, minor, free, etc.)\n * @param initiativeTiming The initiative timing (initiative, anytime, etc.)\n * @returns HTML string with appropriate classes\n */\nfunction formatActionTypeWithClasses(actionType: ActionType, initiativeTiming: InitiativeTiming): string {\n    let typeCode = '';\n    let typeClass = '';\n    let timingCode = '';\n    let timingClass = '';\n\n    // Get the type code and class\n    if (actionType) {\n        switch(actionType) {\n            case 'major':\n                typeCode = 'M';\n                typeClass = 'action-major';\n                break;\n            case 'minor':\n                typeCode = 'm';\n                typeClass = 'action-minor';\n                break;\n            case 'free':\n                typeCode = 'F';\n                typeClass = 'action-free';\n                break;\n            case 'varies':\n                typeCode = 'V';\n                typeClass = 'action-varies';\n                break;\n            case 'none':\n            default:\n                typeCode = '';\n                typeClass = '';\n                break;\n        }\n    }\n\n    // Get the timing code and class\n    if (initiativeTiming) {\n        switch(initiativeTiming) {\n            case 'initiative':\n                timingCode = '(I)';\n                timingClass = 'timing-initiative';\n                break;\n            case 'anytime':\n                timingCode = '(A)';\n                timingClass = 'timing-anytime';\n                break;\n            case 'none':\n            default:\n                timingCode = '';\n                timingClass = '';\n                break;\n        }\n    }\n\n    // If we have no type code, return an empty string\n    if (!typeCode) return '';\n\n    // Combine the codes with appropriate classes\n    const classes = ['action-type', typeClass, timingClass].filter(Boolean).join(' ');\n    return `<span class=\"${classes}\">${typeCode}${timingCode}</span>`;\n}\n\n/**\n * Typing around the legacy item list helper.\n */\ninterface ItemListRightSide {\n    // Provide a simple text, main use for column headers.\n    text?: {\n        text: string | number | undefined\n        title?: string // TODO: This doesn't seem to be doing anything in ListItem.html\n        cssClass?: string\n    }\n    // Provide a button element, main use for column values.\n    button?: {\n        text: string | number\n        cssClass?: string\n        // Shorten the button visually...\n        short?: boolean\n    }\n    // Provide a input element, main use for column values.\n    input?: {\n        type: string\n        value: any\n        cssClass?: string\n    }\n    // Provide html as string.\n    html?: {\n        text: string\n        cssClass?: string\n    }\n}\n\nexport const registerItemLineHelpers = () => {\n    Handlebars.registerHelper('InventoryHeaderIcons', function (section: InventorySheetDataByType) {\n        var icons = Handlebars.helpers['ItemHeaderIcons'](section.type) as object[];\n\n        icons.push(section.isOpen\n            ? {\n                icon: 'fas fa-square-chevron-up',\n                title: game.i18n.localize('SR6.Collapse'),\n                cssClass: 'item-toggle',\n                // Add HTML data attributes using a key<string>:value<string> structure\n                data: {}\n            }\n            : {\n                icon: 'fas fa-square-chevron-down',\n                title: game.i18n.localize('SR6.Expand'),\n                cssClass: 'item-toggle',\n                // Add HTML data attributes using a key<string>:value<string> structure\n                data: {}\n            }\n        );\n\n        return icons;\n    })\n\n    Handlebars.registerHelper('ItemHeaderIcons', function (type: string) {\n        const PlusIcon = 'fas fa-plus';\n        const AddText = game.i18n.localize('SR6.Add');\n        const addIcon = {\n            icon: PlusIcon,\n            text: AddText,\n            title: formatStrict('SR6.Create', { type: 'SR6.Item' }),\n            cssClass: 'item-create',\n            // Add HTML data attributes using a key<string>:value<string> structure\n            data: {}\n        };\n        switch (type) {\n            case 'lifestyle':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Lifestyle' });\n                return [addIcon];\n            case 'contact':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.Contact' });\n                return [addIcon];\n            case 'sin':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.SIN' });\n                return [addIcon];\n            case 'license':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.License' });\n                return [addIcon];\n            case 'quality':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Quality' });\n                return [addIcon];\n            case 'adept_power':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.AdeptPower' });\n                return [addIcon];\n            case 'action':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Action' });\n                return [addIcon];\n            case 'spell':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.Spell' });\n                return [addIcon];\n            case 'ritual':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.Ritual' });\n                return [addIcon];\n            case 'gear':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Gear' });\n                return [addIcon];\n            case 'complex_form':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ComplexForm' });\n                return [addIcon];\n            case 'program':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Program' });\n                return [addIcon];\n            case 'weapon':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.Weapon' });\n                return [addIcon];\n            case 'armor':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Armor' });\n                return [addIcon];\n            case 'ammo':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Ammo' });\n                return [addIcon];\n            case 'modification':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Modification' });\n                return [addIcon];\n            case 'device':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Device' });\n                return [addIcon];\n            case 'equipment':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Equipment' });\n                return [addIcon];\n            case 'cyberware':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Cyberware' });\n                return [addIcon];\n            case 'bioware':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.Bioware' });\n                return [addIcon];\n            case 'critter_power':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.CritterPower' });\n                return [addIcon];\n            case 'sprite_power':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.ItemTypes.SpritePower' });\n                return [addIcon];\n            case 'echo':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Echo' });\n                return [addIcon];\n            case 'metamagic':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Metamagic' });\n                return [addIcon];\n            case 'summoning':\n                // NOTE: summoning is not an actual item type. It's a call_in_action sub type\n                addIcon.title = game.i18n.localize('SR6.CallInAction.CreateSummoning');\n                return [addIcon];\n            case 'compilation':\n                // NOTE: compilation is not an actual item type. It's a call_in_action sub type\n                addIcon.title = game.i18n.localize('SR6.CallInAction.CreateCompilation');\n                return [addIcon];\n            case 'effect':\n                addIcon.title = formatStrict('SR6.Create', { type: 'SR6.Effect' });\n                addIcon.cssClass = 'effect-control';\n                addIcon.data = { action: 'create' };\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('InventoryIcons', function (name: string) {\n        const addItemIcon = {\n            icon: 'fas fa-plus',\n            text: game.i18n.localize('SR6.Add'),\n            title: formatStrict('SR6.Create', { type: 'SR6.Item' }),\n            cssClass: 'inventory-item-create',\n            // Add HTML data attributes using a key<string>:value<string> structure\n            data: { inventory: name }\n        };\n\n        return [addItemIcon];\n    });\n\n    /**\n     * The legacy ItemList helper to provide a generic way of defining headers and columns\n     * on the 'right side' of an item list across all document sheets.\n     */\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id: string): ItemListRightSide[] {\n        switch (id) {\n            case 'action':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.ActionType'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Skill'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Modifier'),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'weapon':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n            case 'modification':\n            case 'ammo':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Qty'),\n                        },\n                    },\n                ];\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Target'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Fade'),\n                        },\n                    },\n                ];\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.PowerType'),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Spell.Type'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Spell.Range'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Drain'),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.CritterPower.Type')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.CritterPower.Range')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.CritterPower.Duration')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Rating')\n                        }\n                    },\n                ];\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.QualityType'),\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Rating'),\n                        },\n                    },\n                ];\n            case 'echo':\n            case 'metamagic':\n                return [{}];\n            case 'summoning':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Summoning.SpiritType')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Force')\n                        }\n                    }\n                ]\n            case 'compilation':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Compilation.SpriteType')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Level')\n                        }\n                    }\n                ]\n\n            // General use case item lines\n            case 'modifiers':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Value')\n                        }\n                    }\n                ]\n            case 'itemEffects':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.ActiveEffect.ApplyTo')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Duration')\n                        }\n                    },\n                    {\n                        text: {\n                            // Used as a placeholder for effect line icons.\n                            // This way the header column is empty (as no +Add makes sense)\n                            // However the line column contains the normal interaction icons.\n                            text: ''\n                        }\n                    }\n                ]\n            case 'effects':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.ActiveEffect.ApplyTo')\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR6.Duration')\n                        }\n                    }\n                ]\n            default:\n                return [];\n        }\n    });\n\n    /**\n     * Helper for ListItem parts do define segments on the right hand sight per list row.\n     *\n     * These must match in order and quantity to the ItemHeadersRightSide helper.\n     * Example of a matching list header by ItemHeader:\n     * <header name>                          <ItemHeaderRightSide>['First Header', 'Second Header']\n     * Example of a list item row:\n     * <list name>                            <ItemRightSide>      ['First Value',  'Second Value']\n     *\n     * @param item The item to render the right side for.\n     *             NOTE: ItemHeaderRightSide doesn't use the whole item to determine what to show, while\n     *                   ItemRightSide does. This is due to ItemRightSide showing content, while ItemHeaderRightSide\n     *                   showing dscriptors for that content.\n     */\n    Handlebars.registerHelper('ItemRightSide', function (item: ShadowrunItemData): ItemListRightSide[] {\n        const wrapper = new SR6ItemDataWrapper(item);\n        const qtyInput = {\n            input: {\n                type: 'number',\n                value: wrapper.getQuantity(),\n                cssClass: 'item-qty',\n            },\n        };\n\n        switch (item.type) {\n            case 'action':\n\n                // Only show a limit, when one is defined. Either by name or attribute\n                const limitAttribute = item.system.action.limit.attribute;\n                const limitBase = Number(item.system.action.limit.base);\n                // Transform into text values, either numerical or localized.\n                const textLimitParts: string[] = [];\n                if (!isNaN(limitBase) && limitBase > 0) {\n                    textLimitParts.push(limitBase.toString());\n                }\n                if (limitAttribute) {\n                    textLimitParts.push(game.i18n.localize(SR6.limits[limitAttribute ?? '']));\n                }\n                const textLimit = textLimitParts.join(' + ');\n\n                return [\n                    {\n                        html: {\n                            // Use HTML to add classes for styling\n                            text: formatActionTypeWithClasses(item.system.action.type, item.system.action.initiative_timing),\n                            cssClass: 'action-type-container'\n                        },\n                    },\n                    {\n                        text: {\n                            // Either use the legacy skill localization OR just the skill name/id instead.\n                            text: game.i18n.localize(SR6.activeSkills[wrapper.getActionSkill() ?? ''] ?? wrapper.getActionSkill()),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.attributes[wrapper.getActionAttribute() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            // Legacy actions could have both skill and attribute2 set, which would show both information, when it shouldn't.\n                            text: wrapper.getActionSkill() ? '' : game.i18n.localize(SR6.attributes[wrapper.getActionAttribute2() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getActionDicePoolMod(),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'armor':\n            case 'ammo':\n            case 'modification':\n                if (wrapper.isVehicleModification()) {\n                    return [\n                        {\n                            text: {\n                                text: game.i18n.localize(SR6.modificationCategories[wrapper.getModificationCategory() ?? ''])\n                            },\n\n                        },\n                        {\n                            text: {\n                                text: wrapper.getModificationCategorySlots() ?? ''\n                            },\n                        },\n                        qtyInput,\n                    ];\n                };\n\n                if (wrapper.isDroneModification()) {\n                    return [\n                        {\n                            text: {\n                                text: wrapper.getModificationCategorySlots() ?? ''\n                            },\n                        },\n                        qtyInput,\n                    ];\n                }\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n                return [qtyInput];\n            case 'weapon':\n                // Both Ranged and Melee Weapons can have ammo.\n                if (wrapper.isRangedWeapon() || (wrapper.isMeleeWeapon() && item.system.ammo?.current.max > 0)) {\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\n                    const partialReloadRounds = wrapper.getAmmo()?.partial_reload_value ?? -1;\n\n                    const reloadLinks: ItemListRightSide[] = [];\n\n                    // Show reload on both no ammo configured and partially consumed clips.\n                    const textReload = count < max ?\n                        `${game.i18n.localize('SR6.Weapon.Reload')} ` :\n                        `${game.i18n.localize('SR6.AmmoFull')}`;\n\n                    const cssClassReload = 'no-break';\n\n                    reloadLinks.push({\n                        text: {\n                            title: `${game.i18n.localize('SR6.Weapon.AmmoCount')}: `,\n                            text: textReload,\n                            cssClass: cssClassReload,\n                        },\n                    });\n\n                    if (count < max) {\n                        const textFullReload = `${game.i18n.localize('SR6.Weapon.FullReload')} (${count}/${max})`;\n                        const cssClassFullReload = 'no-break reload-ammo roll';\n\n                        reloadLinks.push({\n                            button: {\n                                short: true,\n                                text: textFullReload,\n                                cssClass: cssClassFullReload,\n                            },\n                        });\n                    }\n\n                    if(count < max && partialReloadRounds > 0) {\n                        const textPartialReload = `${game.i18n.localize('SR6.Weapon.PartialReload')} (+${partialReloadRounds})`;\n                        const cssClassPartialReload = 'no-break partial-reload-ammo roll';\n\n                        reloadLinks.push({\n                            button: {\n                                short: true,\n                                text: textPartialReload,\n                                cssClass: cssClassPartialReload,\n                            },\n                        });\n                    }\n\n                    reloadLinks.push(qtyInput)\n\n                    return reloadLinks;\n                } else {\n                    return [qtyInput];\n                }\n\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.qualityTypes[item.system.type ?? '']),\n                        }\n                    },\n                    {\n                        text: {\n                            text: item.system.rating || '',\n                        },\n                    }\n                ];\n\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.adeptPower.types[item.system.type ?? '']),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.spellTypes[item.system.type ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.spellRanges[item.system.range ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.durations[item.system.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getDrain(),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.critterPower.types[item.system.powerType ?? ''])\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.critterPower.ranges[item.system.range ?? ''])\n                        }\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.critterPower.durations[item.system.duration ?? ''])\n                        }\n                    },\n                    {\n                        text: {\n                            text: item.system.rating ?? ''\n                        }\n                    }\n                ];\n\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.matrixTargets[item.system.target ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(SR6.durations[item.system.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: String(item.system.fade),\n                        },\n                    },\n                ];\n            case 'program':\n                return [\n                    {\n                        button: {\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\n                            short: true,\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR6.Loaded') : game.i18n.localize('SR6.Load') + ' >>',\n                        },\n                    },\n                ];\n\n            case 'echo':\n            case 'metamagic':\n                return [{}];\n            /**\n             * Call In Actions differ depending on called in actor type.\n             */\n            case 'call_in_action':\n                if (item.system.actor_type === 'spirit') {\n                    const summoningData = item.system as Shadowrun.CallInActionData;\n                    const spiritTypeLabel = SR6.spiritTypes[summoningData.spirit.type] ?? '';\n\n                    return [\n                        {\n                            text: {\n                                text: game.i18n.localize(spiritTypeLabel)\n                            }\n                        },\n                        {\n                            text: {\n                                text: summoningData.spirit.force\n                            }\n                        }\n                    ]\n                }\n\n                if (item.system.actor_type === 'sprite') {\n                    const compilationData = item.system as Shadowrun.CallInActionData;\n                    const spriteTypeLabel = SR6.spriteTypes[compilationData.sprite.type] ?? '';\n\n                    return [\n                        {\n                            text: {\n                                text: game.i18n.localize(spriteTypeLabel)\n                            }\n                        },\n                        {\n                            text: {\n                                text: compilationData.sprite.level\n                            }\n                        }\n                    ]\n                }\n\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemIcons', function (item: ShadowrunItemData) {\n        const wrapper = new SR6ItemDataWrapper(item);\n\n        const editIcon = {\n            icon: 'fas fa-edit item-edit',\n            title: game.i18n.localize('SR6.EditItem'),\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash item-delete',\n            title: game.i18n.localize('SR6.DeleteItem'),\n        };\n        const equipIcon = {\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\n            title: game.i18n.localize('SR6.ToggleEquip'),\n        };\n        const pdfIcon = {\n            icon: 'fas fa-file open-source',\n            title: game.i18n.localize('SR6.OpenSource'),\n        };\n\n        const icons = [pdfIcon, editIcon, removeIcon];\n\n        switch (wrapper.getType()) {\n            case 'program':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n            case 'weapon':\n                icons.unshift(equipIcon);\n        }\n\n        return icons;\n    });\n\n    /**\n     * Used for the actor sheets display of active effects.\n     */\n    Handlebars.registerHelper('EffectRightSide', function (effect: SR6ActiveEffect) {\n        const getDurationLabel = () => {\n            // @ts-expect-error - duration is not typed correctly\n            if (effect.duration.seconds) return `${effect.duration.seconds}s`;\n            // @ts-expect-error - duration is not typed correctly\n            if (effect.duration.rounds && effect.duration.turns) return `${effect.duration.rounds}r, ${effect.duration.turns}t`;\n            // @ts-expect-error - duration is not typed correctly\n            if (effect.duration.rounds) return `${effect.duration.rounds}r`;\n            // @ts-expect-error - duration is not typed correctly\n            if (effect.duration.turns) return `${effect.duration.turns}t`;\n\n            return '';\n        }\n\n        return [\n            {\n                // Apply To Column\n                text: {\n                    text: game.i18n.localize(SR6.effectApplyTo[effect.applyTo]),\n                    cssClass: 'six',\n                }\n            },\n            {\n                // Duration Column\n                text: {\n                    text: getDurationLabel(),\n                    cssClass: 'six',\n                }\n            }\n        ];\n    });\n\n    Handlebars.registerHelper('InventoryItemIcons', function (item: ShadowrunItemData) {\n        const wrapper = new SR6ItemDataWrapper(item);\n        const moveIcon = {\n            icon: 'fas fa-exchange-alt inventory-item-move',\n            title: game.i18n.localize('SR6.MoveItemInventory')\n        };\n        const editIcon = {\n            icon: 'fas fa-edit item-edit',\n            title: game.i18n.localize('SR6.EditItem'),\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash item-delete',\n            title: game.i18n.localize('SR6.DeleteItem'),\n        };\n        const equipIcon = {\n            icon: `${wrapper.isEquipped() ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\n            title: game.i18n.localize('SR6.ToggleEquip'),\n        };\n        const pdfIcon = {\n            icon: 'fas fa-file open-source',\n            title: game.i18n.localize('SR6.OpenSource'),\n        };\n\n        const icons = [pdfIcon, moveIcon, editIcon, removeIcon];\n\n        switch (wrapper.getType()) {\n            case 'program':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'bioware':\n            case 'weapon':\n                icons.unshift(equipIcon);\n        }\n\n        return icons;\n    });\n\n    /**\n     * Helper specifically for active effect icons.\n     *\n     * Add HTML data attributes using a key<string>:value<string> structure for each icon.\n     */\n    Handlebars.registerHelper('EffectIcons', function (effect) {\n        const editIcon = {\n            icon: 'fas fa-edit effect-control',\n            title: game.i18n.localize('SR6.EditItem'),\n            data: { action: 'edit' }\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash effect-control',\n            title: game.i18n.localize('SR6.DeleteItem'),\n            data: { action: 'delete' }\n        };\n        const disableIcon = {\n            icon: `${effect.disabled ? 'far fa-circle' : 'fas fa-check-circle'} effect-control`,\n            title: game.i18n.localize('SR6.ToggleActive'),\n            data: { action: \"toggle\" }\n        };\n        const openOriginIcon = {\n            icon: 'fas fa-file effect-control',\n            title: game.i18n.localize('SR6.OpenOrigin'),\n            data: { action: \"open-origin\" }\n        }\n        // Disallow changes to effects that aren't of direct origin.\n        let icons = [disableIcon, editIcon, removeIcon];\n        if (effect.isOriginOwned) icons = [openOriginIcon, ...icons];\n        return icons;\n    });\n\n    /**\n     * Helper specifically for active effect icons sourced from an actors items to display in list form.\n     */\n    Handlebars.registerHelper('ItemEffectIcons', function (effect) {\n        const openOriginIcon = {\n            icon: 'fas fa-file item-effect-control',\n            title: game.i18n.localize('SR6.OpenOrigin'),\n            data: { action: \"open-origin\" }\n        }\n        const disableIcon = {\n            icon: `${effect.disabled ? 'far fa-circle' : 'fas fa-check-circle'} item-effect-control`,\n            title: game.i18n.localize('SR6.ToggleActive'),\n            data: { action: \"toggle\" }\n        };\n        const editIcon = {\n            icon: 'fas fa-edit item-effect-control',\n            title: game.i18n.localize('SR6.EditItem'),\n            data: { action: 'edit' }\n        };\n\n        return [openOriginIcon, disableIcon, editIcon];\n    });\n\n    // Allow Matrix Marks to be changed on the spot on a Sheet.\n    Handlebars.registerHelper('MarksRightSide', (marked: MarkedDocument) => {\n        const quantityInput = {\n            input: {\n                type: 'number',\n                value: marked.marks,\n                cssClass: 'marks-qty',\n            },\n        };\n        return [quantityInput]\n    });\n\n    // Matrix Mark interaction on a Sheet.\n    Handlebars.registerHelper('MarksIcons', (marked: MarkedDocument) => {\n        const incrementIcon = {\n            icon: 'fas fa-plus marks-add-one',\n            title: game.i18n.localize('SR6.Labels.Sheet.AddOne'),\n            data: { action: 'add-one' }\n        };\n        const decrementIcon = {\n            icon: 'fas fa-minus marks-remove-one',\n            title: game.i18n.localize('SR6.Labels.Sheet.SubtractOne'),\n            data: { action: 'remove-one' }\n        }\n\n        return [incrementIcon, decrementIcon];\n    });\n\n    /**\n     * Helper to convert action types to their abbreviated form with initiative timing\n     * Format: [Type][Timing]\n     *\n     * Type:\n     * - Major: 'M'\n     * - Minor: 'm'\n     * - Free: 'F'\n     * - None: ''\n     * - Varies: 'V'\n     *\n     * Timing (in parentheses):\n     * - In Initiative: '(I)'\n     * - Any Time: '(A)'\n     * - None: '' (no parentheses)\n     */\n    Handlebars.registerHelper('formatActionType', function(actionType: ActionType, initiativeTiming: InitiativeTiming) {\n        let typeCode = '';\n        let timingCode = '';\n\n        // Get the type code\n        if (actionType) {\n            switch(actionType) {\n                case 'major': typeCode = 'M'; break;\n                case 'minor': typeCode = 'm'; break;\n                case 'free': typeCode = 'F'; break;\n                case 'varies': typeCode = 'V'; break;\n                case 'none':\n                default: typeCode = ''; break;\n            }\n        }\n\n        // Get the timing code\n        if (initiativeTiming) {\n            switch(initiativeTiming) {\n                case 'initiative': timingCode = '(I)'; break;\n                case 'anytime': timingCode = '(A)'; break;\n                case 'none':\n                default: timingCode = ''; break;\n            }\n        }\n\n        // Combine the codes\n        return typeCode + timingCode;\n    });\n\n    Handlebars.registerHelper('MarkListHeaderRightSide', () => {\n        return [\n            {\n                text: {\n                    text: game.i18n.localize('SR6.FOUNDRY.Scene'),\n                },\n            },\n            {\n                text: {\n                    text: game.i18n.localize('SR6.FOUNDRY.Item'),\n                },\n            },\n            {\n                text: {\n                    text: game.i18n.localize('SR6.Qty'),\n                },\n            }]\n    });\n\n    Handlebars.registerHelper('MarkListHeaderIcons', () => {\n        return [{\n            icon: 'fas fa-trash',\n            title: game.i18n.localize('SR6.ClearMarks'),\n            text: game.i18n.localize('SR6.Del'),\n            cssClass: 'marks-clear-all'\n        }];\n    });\n\n    Handlebars.registerHelper('NetworkDevicesListRightSide', () => {\n        return [\n            {\n                text: {\n                    text: game.i18n.localize('SR6.FOUNDRY.Actor'),\n                },\n            },\n            {\n                text: {\n                    text: game.i18n.localize('SR6.FOUNDRY.Item'),\n                },\n            }]\n    })\n\n    Handlebars.registerHelper('NetworkDevicesListHeaderIcons', () => {\n        return [{\n            icon: 'fas fa-trash',\n            title: game.i18n.localize('SR6.Labels.Sheet.ClearNetwork'),\n            text: game.i18n.localize('SR6.Del'),\n            cssClass: 'network-clear'\n        }];\n    });\n\n    /**\n     * Helper to check if a string contains a substring\n     */\n    Handlebars.registerHelper('contains', function(str, substring) {\n        if (!str || !substring) return false;\n        return String(str).toLowerCase().includes(String(substring).toLowerCase());\n    });\n\n    /**\n     * Helper for logical OR operation\n     */\n    Handlebars.registerHelper('or', function() {\n        for (let i = 0; i < arguments.length - 1; i++) {\n            if (arguments[i]) return true;\n        }\n        return false;\n    });\n\n    /**\n     * Helper to convert a JSON string to an object\n     */\n    Handlebars.registerHelper('json', function(context) {\n        if (typeof context === 'string') {\n            try {\n                return JSON.stringify(context);\n            } catch (e) {\n                return context;\n            }\n        }\n        return JSON.stringify(context);\n    });\n\n    /**\n     * Helper for equality comparison\n     */\n    Handlebars.registerHelper('eq', function(a, b) {\n        return a === b;\n    });\n};\n", "import SkillField = Shadowrun.SkillField;\nimport { Helpers } from '../helpers';\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\nimport SkillCategories = Shadowrun.SkillCategories;\nimport {SkillRules} from \"../rules/SkillRules\";\nimport {FLAGS, SYSTEM_NAME} from \"../constants\";\n\nexport const registerSkillLineHelpers = () => {\n    Handlebars.registerHelper('SkillHeaderIcons', function (category: SkillCategories) {\n        const addIcon = {\n            icon: 'fas fa-plus',\n            title: game.i18n.localize('SR6.AddSkill'),\n            text: game.i18n.localize('SR6.Add'),\n            cssClass: '',\n        };\n        switch (category) {\n            case 'active':\n                addIcon.cssClass = 'add-active';\n                return [addIcon];\n            case 'language':\n                addIcon.cssClass = 'add-language';\n                return [addIcon];\n            case 'knowledge':\n                addIcon.cssClass = 'add-knowledge';\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    /**\n     * Handle the right side of the skill header.\n     * \n     * Main feature necessary is to indicate the list being filtered or not.\n     * \n     * @param id The skill category of this skill header.\n     * @param filters As soon as the sheet uses some kind of filter this will provide an object that is 'truey'.\n     */\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id: string, filters?: SR5SheetFilters) {\n        const specs = {\n            text: {\n                text: game.i18n.localize('SR6.Specialization'),\n                cssClass: 'skill-spec-item',\n            },\n        };\n\n        // Display filters for active skills. See issue #871.\n        // when not given, filters won't be undefined, but will contain a handlebar object.\n        const activeSkillFilter = id === 'active' &&\n            filters && filters.hasOwnProperty('showUntrainedSkills') &&\n            !filters.showUntrainedSkills;\n\n        const rtg = {\n            text: {\n                text: activeSkillFilter ?\n                    game.i18n.localize('SR6.RtgAboveZero') :\n                    game.i18n.localize('SR6.Rtg'),\n                cssClass: 'rtg',\n            },\n        };\n\n        switch (id) {\n            case 'active':\n            case 'knowledge':\n            case 'language':\n                return [specs, rtg];\n            default:\n                return [];\n        }\n    });\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\n        return [\n            {\n                html: {\n                    text: specs.map(spec => `<span class=\"roll skill-spec-roll\">${spec}</span>`).join(', '),\n                    cssClass: 'skill-spec-item',\n                }\n            },\n            {\n                text: {\n                    text: Helpers.calcTotal(skill),\n                    cssClass: 'rtg',\n                },\n            },\n        ];\n    });\n\n    Handlebars.registerHelper('SkillAdditionCssClass', function(skill: SkillField): string[] {\n        const classes: string[] = [];\n\n        // @PDF SR5#151 not defaultable skills should be shown as italic.\n        if (game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) && !SkillRules.allowDefaultingRoll(skill)) {\n            classes.push('skill-roll-not-defaultable');\n        }\n\n        return classes;\n    })\n\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\n        const editIcon = {\n            icon: 'fas fa-edit',\n            title: game.i18n.localize('SR6.EditSkill'),\n            cssClass: '',\n        };\n        const openSourceIcon = { \n            icon: 'fas fa-file',\n            title: game.i18n.localize('SR6.OpenSource'),\n            cssClass: '',\n        }\n        const removeIcon = {\n            icon: 'fas fa-trash',\n            title: game.i18n.localize('SR6.DeleteSkill'),\n            cssClass: '',\n        };\n        switch (skillType) {\n            case 'active':\n                editIcon.cssClass = 'skill-edit';\n                removeIcon.cssClass = 'remove-active'\n                openSourceIcon.cssClass = 'skill-opensource'\n                return [openSourceIcon, editIcon, removeIcon];\n            case 'language':\n                editIcon.cssClass = 'language-skill-edit';\n                removeIcon.cssClass = 'remove-language';\n                openSourceIcon.cssClass = 'language-skill-opensource'\n                return [openSourceIcon, editIcon, removeIcon];\n            case 'knowledge':\n                editIcon.cssClass = 'knowledge-skill-edit';\n                removeIcon.cssClass = 'remove-knowledge';\n                openSourceIcon.cssClass = 'knowledge-skill-opensource'\n                return [openSourceIcon, editIcon, removeIcon];\n            default:\n                return [editIcon];\n        }\n    });\n\n};\n", "export const registerAppHelpers = () => {\n    // TODO: Add modifiers.env typing and add missing type\n    /** \n     * An environmental modifier is active when the the set value matches the expected modifier value\n     * for this selection.\n     *\n     * @param active The applied environmental modifiers \n     * @param category A environment modifier category (wind, range, ...)\n     * @param modifier A environmental modifier value (0, -1)\n     */\n    Handlebars.registerHelper('IsEnvModifierActive', (active, category: string, modifier: number) => {\n        return active[category] === modifier;\n    })\n}", "import { Helpers } from '../helpers';\nimport {SafeString} from \"handlebars\";\nimport SkillField = Shadowrun.SkillField;\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport {SYSTEM_NAME} from \"../constants\";\nimport { Translation } from '../utils/strings';\n\nexport const registerBasicHelpers = () => {\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\n        if (obj) strId = obj[strId];\n        return game.i18n.localize(strId);\n    });\n\n    Handlebars.registerHelper('localizeDocumentType', function (document) {\n        if (document.type.length < 1) return '';\n        const documentClass = document instanceof SR6Actor ? 'Actor' : 'Item';\n        const i18nTypeLabel = `TYPES.${documentClass}.${document.type}`;\n        return game.i18n.localize(i18nTypeLabel as Translation);\n    });\n\n    Handlebars.registerHelper('localizeSkill', function (skill: SkillField): string {\n        return skill.label ? game.i18n.localize(skill.label as Translation) : skill.name;\n        // NOTE: Below is code to append a shortened attribute name to the skill name. It's been removed for readability.\n        //       But still might useful for someone.\n        // if (!game.settings.get(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails) || !translatedSkill || !skill.attribute)\n        //     return translatedSkill;\n        //\n        // // Try showing the first three letters, or less.\n        // const translatedAttribute = game.i18n.localize(SR6.attributes[skill.attribute]);\n        // if (!translatedAttribute) return translatedSkill;\n        //\n        // const cutToIndex = translatedAttribute.length < SR.attributes.SHORT_NAME_LENGTH ?\n        //     translatedAttribute.length -1 :\n        //     SR.attributes.SHORT_NAME_LENGTH;\n        // const translatedAttributeShorthand = translatedAttribute.substring(0, cutToIndex).toUpperCase();\n        // return `${translatedSkill} (${translatedAttributeShorthand})`;\n    });\n\n    Handlebars.registerHelper('toHeaderCase', function (str) {\n        if (str) return Helpers.label(str);\n        return '';\n    });\n\n    Handlebars.registerHelper('concatStrings', function (...args) {\n        return args.filter(a => typeof a === 'string').join('');\n    });\n\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\n        if (Array.isArray(strs)) {\n            return strs.join(c);\n        }\n        return strs;\n    });\n\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\n        let accum = '';\n        for (let i = from; i < to; i += 1) {\n            accum += options.fn(i);\n        }\n\n        return accum;\n    });\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\n        return v1 % v2;\n    });\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\n        if (v2 === 0) return 0;\n        return v1 / v2;\n    });\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\n        if (obj.hasOwnProperty(prop)) {\n            return options.fn(this);\n        } else return options.inverse(this);\n    });\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\n        if (arr.includes(val)) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if greater than\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\n        if (v1 > v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n\n    // if greater than or equal\n    Handlebars.registerHelper('gte', function (v1, v2) {\n        return Number(v1) >= Number(v2);\n    });\n    // if less than\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\n        if (v1 < v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if less than or equal\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\n        if (v1 <= v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if not equal\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\n        if (v1 !== v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if equal\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\n        if (v1 === v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if then\n    Handlebars.registerHelper('ift', function (v1, v2) {\n        if (v1) return v2;\n    });\n\n    // if empty (object, array, string)\n    Handlebars.registerHelper('empty', function (value) {\n        if (foundry.utils.getType(value) === 'Array') return value.length === 0;\n        if (foundry.utils.getType(value) === 'Object') return Object.keys(value).length === 0;\n        if (foundry.utils.getType(value) === 'String') return value.length === 0;\n    });\n    Handlebars.registerHelper('not', function (v1) {\n        return !v1;\n    });\n    Handlebars.registerHelper('sum', function (v1, v2) {\n        return v1 + v2;\n    });\n\n    Handlebars.registerHelper('isDefined', function (value) {\n        return value !== undefined && value !== null;\n    });\n    /**\n     * Return a fallback value if the provided value is not defined (null or undefined)\n     * NOTE: original helper 'default' caused incompatibilities with module AFK Ready Check, as both were overwriting it.\n     */\n    Handlebars.registerHelper('fallbackValue', function (value: string, defaultValue: string) {\n        return new Handlebars.SafeString(value ?? defaultValue);\n    });\n\n    Handlebars.registerHelper('log', function (value: string) {\n        console.log(value);\n    });\n    Handlebars.registerHelper('buildName', function (options) {\n        const hash: string[] = Helpers.orderKeys(options.hash);\n        const name = Object.values(hash).reduce((retVal, current, index) => {\n            if (index > 0) retVal += '.';\n            return retVal + current;\n        }, '');\n        return new Handlebars.SafeString(name);\n    });\n    Handlebars.registerHelper('disabledHelper', function (value) {\n        const val = Boolean(value);\n        return val ? val : undefined;\n    });\n    // TODO: This helper doesn't work... Don't know why, but it doesn't.\n    Handlebars.registerHelper('localizeShortened', function (label: string, length: number, options: any): SafeString {\n        return new Handlebars.SafeString(Helpers.shortenAttributeLocalization(label, length));\n    });\n\n    /**\n     * Given an object return the value for a given key.\n     */\n    Handlebars.registerHelper('objValue', function(obj: Object, key: string) {\n        return obj[key] ||  '';\n    });\n\n    /**\n     * Creates an array from a spread set of objects ie. (toArray \"foo\" \"bar\") => [\"foo\", \"bar\"]\n     */\n    Handlebars.registerHelper('toArray', function(...vals) {\n        const copy = [...vals];\n        copy.splice(-1); //Remove handlebars options object from last item in array\n        return copy;\n    });\n\n    /**\n     * Checks if an element should be displayed based on the value of the MarkImports Setting\n     * 'ANY' option returns true as long as the setting isn't set to 'NONE'\n     */\n    Handlebars.registerHelper('itemMarking', function(element: string) {\n        const mark = game.settings.get(SYSTEM_NAME, 'MarkImports');\n        if (element == 'ANY' && mark != 'NONE') {\n            return true;\n        }\n        if (mark == element || mark == 'BOTH') {\n            return true;\n        }\n        return false;\n    });\n\n    /**\n     * Check whether an actor has any items that are freshly imported\n     */\n    Handlebars.registerHelper('hasAnyFreshImports', function(actor: SR6Actor) {\n        if (game.settings.get(SYSTEM_NAME, 'MarkImports') != 'NONE') {\n            const allItems = actor.items;\n            for (const item of allItems) {\n                if (item.system.importFlags) {\n                    if (item.system.importFlags.isFreshImport) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    });\n\n    /**\n     * Allow to give two values and compare them with logical OR.\n     *\n     * Uses JavaScript truthy/falsy values.\n     *\n     * @param a The first value\n     * @param v The second value\n     * @returns true or false\n     */\n    Handlebars.registerHelper('or', function(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Allow using the first given value that's defined.\n     * @params * A open list of parameters, from which the first defined value will be returned.\n     */\n    Handlebars.registerHelper('firstDefined', function(...values) {\n        for (const value of values) {\n            if (value !== undefined) return value;\n        }\n        return undefined;\n    });\n};\n", "import { MonitorRules } from './../rules/MonitorRules';\nimport { SR6Item } from '../item/SR6Item';\nimport ModificationCategoryType = Shadowrun.ModificationCategoryType;\n\nexport const registerActorHelpers = () => {\n    /**\n     * Determine if a wound modifier should be shown for a specific box on a damage track, including pain rules.\n     *\n     * @param box The box to be treated as virutal damage\n     * @param painTolerance Amount of boxes before given box to be ignored\n     * @param woundBoxesThreshold Amount of boxes after pain tolerance used as a step size between shown wound modifiers.\n     */\n    Handlebars.registerHelper('showWoundModifier', (box: number, painTolerance: number, woundBoxesThreshold: number): boolean => {\n        if (box <= painTolerance) return false;\n\n        return (box - painTolerance) % woundBoxesThreshold === 0;\n    });\n\n    Handlebars.registerHelper('woundModifier', (box: number, painTolerance: number, woundBoxesThreshold: number): number => {\n        const wounds = MonitorRules.wounds(box, woundBoxesThreshold, painTolerance);\n        return MonitorRules.woundModifier(wounds);\n    });\n\n    /**\n    * Determine the amount of Modification Category slots in use by a Vehicle actor, for the given Modification Category\n    *\n    * @param items The items to be considered\n    * @param modificationCategory The modification category\n    */\n    Handlebars.registerHelper('calcModificationCategorySlots', (items: [SR6Item], modificationCategory: ModificationCategoryType): number => {\n        if (!Array.isArray(items) || !items.length) { return 0 }\n        const slotSum = items.reduce((arr, item) => {\n            if (item.system.modification_category == modificationCategory) { return arr += item.system.slots ? item.system.slots : 0 } else {return arr};\n        } ,0)\n\n        return slotSum;\n    });\n\n    /**\n    * Determine the amount of Mod Points slots in use by a Vehicle actor (Drone)\n    *\n    * @param items The items to be considered\n    */\n    Handlebars.registerHelper('calcModPointSlots', (items: [SR6Item]): number => {\n        if (!Array.isArray(items) || !items.length) { return 0 }\n        var dronestring = 'drone';\n        const slotSum = items.reduce((arr, item) => {\n            if (item.system.type == dronestring) { return arr += item.system.slots ? item.system.slots : 0 } else { return arr };\n        }, 0)\n\n        return slotSum;\n    });\n\n\n}\n", "import { preloadHandlebarsTemplates } from './HandlebarTemplates';\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\nimport { registerItemLineHelpers } from './ItemLineHelpers';\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\nimport { registerAppHelpers } from \"./AppHelpers\";\nimport { registerBasicHelpers } from \"./BasicHelpers\";\nimport { registerActorHelpers } from './ActorHelpers';\n\nexport class HandlebarManager {\n    static async loadTemplates() {\n        await preloadHandlebarsTemplates();\n    }\n    static registerHelpers(): void {\n        registerBasicHelpers();\n        registerRollAndLabelHelpers();\n        registerItemLineHelpers();\n        registerSkillLineHelpers();\n        registerAppHelpers();\n        registerActorHelpers();\n    }\n}", "import { DataDefaults } from \"../data/DataDefaults\";\nimport { Helpers } from \"../helpers\";\n\n/**\n * Rules around Compiling Sprites in SR6.\n */\nexport const CompilationRules = {\n    /**\n     * Determine the amount of fade value a technomancer has to resist against.\n     * \n     * See SR5#254 'Compiling a sprite'\n     * \n     * @param hitsSprite Amount of hits by the opposing sprite.\n     * @returns The numerical drain value without damage type.\n     */\n    compilationFadeValue: (hitsSprite: number): number => {\n        return Math.max(hitsSprite * 2, 2);\n    },\n    /**\n     * Determine fade damage type according to SR5#254 'Compiling a sprite'.\n     * @param level Sprite sprite level value.\n     * @param resonance Resonance attribute value.\n     * @returns damage type\n     */\n    calcFadeDamageType: (level: number, resonance: number): Shadowrun.DamageType => {\n        if (level < 0) level = 0;\n        if (resonance < 0) resonance = 1;\n\n        return level > resonance ? 'physical' : 'stun';\n    },\n    /**\n     * Determine the fade damage a technomancer has to resist against.\n     * @param spriteHits Amount of hits by the opposing sprite.\n     * @param level Sprite level used.\n     * @param resonance Resonance attribute value.\n     * @returns Configured fade damage\n     */\n    calcFadeDamage: (spriteHits: number, level: number, resonance: number): Shadowrun.DamageData => {\n        if (spriteHits < 1) spriteHits = 0;\n        if (resonance < 0) resonance = 1;\n\n        const damage = DataDefaults.damageData();\n        damage.base = CompilationRules.compilationFadeValue(spriteHits);\n        damage.type.base = damage.type.value = CompilationRules.calcFadeDamageType(level, resonance);\n\n        Helpers.calcTotal(damage, {min: 0});\n\n        return damage;\n    },\n    /**\n     * Determine if the chosen level is valid for the given resonance attribute.\n     * \n     * See SR5#254 'Compiling a sprite'\n     * \n     * @param level The level value.\n     * @param resonance The resonance attribute value.\n     */\n    validLevel: (level: number, resonance: number): boolean => {\n        if (level < 1) return false;\n        return level <= resonance * 2;\n    }\n};\n", "import { SR6 } from \"../config\";\nimport { DataDefaults } from \"../data/DataDefaults\";\nimport { PartsList } from \"../parts/PartsList\";\nimport { CompilationRules } from \"../rules/CompilationRules\";\nimport { SuccessTest, SuccessTestData, TestOptions } from \"./SuccessTest\";\n\n\ninterface CompileSpriteTestData extends SuccessTestData {\n    // Sprite type selection.\n    spriteTypes: typeof SR6.spriteTypes\n    spriteTypeSelected: string\n\n    // Testing values as described on SR5#254\n    level: number\n    fade: number\n    fadeDamage: Shadowrun.DamageData\n\n    // Determine if compilation concluded and fade will apply\n    fadeReady: boolean\n\n    // Reference to prepared sprite actor\n    preparedSpriteUuid: string\n}\n/**\n * Implement testing workflow for technomancers sprite compilation within FoundryVTT.\n *\n * This test is designed to work together with the compilation item type as it's\n * defined within\n */\nexport class CompileSpriteTest extends SuccessTest<CompileSpriteTestData> {\n\n    override _prepareData(data: any, options: TestOptions) {\n        data = super._prepareData(data, options);\n\n        this._prepareCompilationData(data);\n\n        data.fade = data.fade || 0;\n        data.fadeDamage = data.fadeDamage || DataDefaults.damageData();\n\n        return data;\n    }\n\n    _prepareCompilationData(data) {\n        if (!this.item) return;\n        const compilation = this.item.asCallInAction;\n        if (!compilation || !this.item.isCompilation) return;\n\n        // Choose the most explicit value given, making sure it's still usable.\n        data.level = Math.max(data.level || compilation.system.sprite.level || 1, 1);\n\n        data.spriteTypes = this._prepareSpriteTypes();\n        data.spriteTypeSelected = data.spriteTypeSelected || compilation.system.sprite.type;\n\n        data.preparedSpriteUuid = data.preparedSpriteUuid || compilation.system.sprite.uuid;\n    }\n\n    _prepareSpriteTypes() {\n        return SR6.spriteTypes;\n    }\n\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/compilation-test-dialog.html';\n    }\n\n    override get canBeExtended() {\n        return false;\n    }\n\n    /**\n     * Fade test is configured here but will be executed only manually after the opposed test finished.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['compiling'];\n    }\n\n    /**\n     * Skill + Attribute [Limit] as defined in SR5#254 'Compiling a Sprite'\n     *\n     * Limit 'level' is a dynamic test value, so it's missing here as it can't be taken from actor values\n     * but will be injected during test dialog preparations.\n     */\n    static override _getDefaultTestAction(): Partial<Shadowrun.MinimalActionData> {\n        return {\n            skill: 'compiling',\n            attribute: 'resonance'\n        }\n    }\n\n    /**\n     * Inject level as limit value into test.\n     */\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareLimitValue();\n    }\n\n    /**\n     * Level value only depends on user selection and doesn't deviate according to SR5#254.\n     */\n    prepareLimitValue() {\n        const level = Number(this.data.level);\n        const label = 'SR6.Level';\n\n        const limitParts = new PartsList<number>(this.data.limit.mod);\n        limitParts.addUniquePart(label, level);\n    }\n\n    /**\n     * Inject into user dialog level value selection changes.\n     */\n    override validateBaseValues() {\n        this.warnAboutInvalidLevel();\n    }\n\n    /**\n     * Notify mancers about incomplete compilation. To avoid pre mature fade tests.\n     */\n    override async executeFollowUpTest() {\n        if (!this.data.fadeReady) ui.notifications?.warn('SR6.Warnings.CompilationNotConcluded', {localize: true});\n        await super.executeFollowUpTest();\n    }\n\n    /**\n     * Let user know about invalid level selection.\n     */\n    warnAboutInvalidLevel() {\n        const level = Number(this.data.level);\n        const resonance = (this.actor?.getAttribute('resonance')?.value ?? 0);\n\n        if (CompilationRules.validLevel(level, resonance)) return;\n\n        ui.notifications?.warn('SR6.Warnings.InvalidCompilationLevel', {localize: true});\n    }\n\n    /**\n     * Derive the actual fade damage from compilation values.\n     * NOTE: This will be called by the opposing test via a follow up test action.\n     *\n     * @param opposingHits Amount of hits from the opposing test (sprite).\n     */\n    calcFade(opposingHits: number) {\n        this.data.fadeReady = true;\n        this.data.fade = CompilationRules.compilationFadeValue(opposingHits);\n        this.data.fadeDamage = this.calcFadeDamage(opposingHits);\n    }\n\n    calcFadeDamage(opposingHits: number): Shadowrun.DamageData {\n        if (!this.actor) return DataDefaults.damageData();\n\n        const resonance = this.actor.getAttribute('resonance').value;\n        const level = this.data.level;\n\n        return CompilationRules.calcFadeDamage(opposingHits, level, resonance);\n    }\n\n    /**\n     * Indicate the use of a prepared actor.\n     */\n    get preparedActorUsed(): boolean {\n        return this.data.preparedSpriteUuid !== '';\n    }\n}\n", "/**\n * Handle all rules related to Shadowrun 5 magic drain.\n */\nimport DamageData = Shadowrun.DamageData;\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {Helpers} from \"../helpers\";\nimport DamageType = Shadowrun.DamageType;\nimport {PartsList} from \"../parts/PartsList\";\n\nexport class DrainRules {\n    /**\n     * Calculate spell casting drain damage according to SR6e rules\n     *\n     * @param drain The drain value\n     * @param force The force value used to cast (not used in SR6e)\n     * @param magic The magic attribute level of the caster\n     * @param hits Spellcasting test hits\n     */\n    static calcDrainDamage(drain: number, force: number, magic: number, hits: number): DamageData {\n        if (magic < 0) magic = 1;\n        if (hits < 0) hits = 0;\n\n        console.log('Shadowrun 6e | DrainRules.calcDrainDamage inputs:', { drain, magic, hits });\n\n        const damage = DataDefaults.damageData({}, true);\n        damage.base = drain;\n        damage.value = drain;\n        damage.type.base = damage.type.value = DrainRules.calcDrainDamageType(hits, magic);\n\n        // Ensure all properties are set\n        DrainRules.ensureDamageProperties(damage);\n\n        console.log('Shadowrun 6e | DrainRules.calcDrainDamage result:', damage);\n\n        return damage;\n    }\n\n    /**\n     * Ensure that a damage object has all the required properties\n     */\n    static ensureDamageProperties(damage) {\n        if (!damage) return;\n\n        // Ensure value is set\n        if (damage.value === undefined) {\n            damage.value = damage.base || 0;\n        }\n\n        // Ensure type is set\n        if (!damage.type) {\n            damage.type = { base: 'stun', value: 'stun' };\n        } else {\n            // Ensure type.value is set\n            if (damage.type.value === undefined) {\n                damage.type.value = damage.type.base || 'stun';\n            }\n        }\n\n        console.log('Shadowrun 6e | Ensured damage properties:', damage);\n    }\n\n    /**\n     * Get the drain damage type according to SR6e rules\n     * @param hits The spell casting test hits\n     * @param magic The magic attribute level of the caster\n     */\n    static calcDrainDamageType(hits: number, magic: number): DamageType {\n        if (hits < 0) hits = 0;\n        if (magic < 0) magic = 1;\n        // In SR6e, drain defaults to stun, only turned into physical rarely\n        return hits > magic ? 'physical' : 'stun';\n    }\n\n    /**\n     * Modify the drain damage after the spell casting test has been completed.\n     *\n     * @param drainDamage The base drain damage after force / drain has been chosen.\n     * @param hits The spell casting test hits\n     */\n    static modifyDrainDamage(drainDamage: DamageData, hits: number) {\n        if (hits < 0) hits = 0;\n\n        console.log('Shadowrun 6e | DrainRules.modifyDrainDamage inputs:', { drainDamage, hits });\n\n        drainDamage = foundry.utils.duplicate(drainDamage);\n\n        PartsList.AddUniquePart(drainDamage.mod, 'SR6.Hits', -hits);\n        Helpers.calcTotal(drainDamage, {min: 0});\n\n        // Ensure all properties are set\n        DrainRules.ensureDamageProperties(drainDamage);\n\n        console.log('Shadowrun 6e | DrainRules.modifyDrainDamage result:', drainDamage);\n\n        return drainDamage;\n    }\n}\n", "import { DataDefaults } from \"../data/DataDefaults\";\nimport { Helpers } from \"../helpers\";\nimport { DrainRules } from \"./DrainRules\";\n\n/**\n * Rules implementing the Conjuring chapter in SR6.300\n */\nexport const ConjuringRules = {\n    /**\n     * Determine the amount of services a spirit will provide the it's summoner\n     * \n     * @param hitsSummoner Hits of the summoning test.\n     * @param hitsSpirit Hits of the spirits opposing test.\n     */\n    spiritServices: (hitsSummoner: number, hitsSpirit: number): number => {\n        return Math.max(hitsSummoner - hitsSpirit, 0);\n    },\n\n    /**\n     * Determine the amount of drain value a summoner has to drain against.\n     * \n     * See SR5#300 'Resist Drain'\n     * \n     * @param hitsSpirit The amount of hits of the opposing spirit\n     */\n    summoningDrainValue: (hitsSpirit: number): number => {\n        return Math.max(hitsSpirit * 2, 2);\n    },\n\n    /**\n     * Determine the drain damage a summoner has to drain against.\n     * \n     * See SR5#300 and general Drain Rules.\n     * \n     * @param hitsSpirit The amount of hits of the opposing spirit\n     * @param force The force level chosen for summoning\n     * @param magic The magic attribute level of the summoner\n     */\n    calcDrainDamage: (hitsSpirit, force: number, magic: number): Shadowrun.DamageData => {\n        if (hitsSpirit < 0) hitsSpirit = 0;\n        if (magic < 0) magic = 1;\n\n        const damage = DataDefaults.damageData();\n        damage.base = ConjuringRules.summoningDrainValue(hitsSpirit);\n        damage.type.base = damage.type.value = DrainRules.calcDrainDamageType(force, magic);\n        Helpers.calcTotal(damage, {min: 0});\n        \n        return damage;\n    },\n\n    /**\n     * Determine if the chosen force is valid for the given magic attribute.\n     * \n     * See SR5#300 'Summoning' Step 1.\n     * \n     * @param force The force value.\n     * @param magic The magic attribute value.\n     */\n    validForce: (force: number, magic: number): boolean => {\n        if (force < 1) return false;\n        return force <= magic * 2;\n    }\n}\n", "import { SR6Actor } from '../actor/SR6Actor';\nimport { SR6 } from '../config';\nimport { PartsList } from '../parts/PartsList';\nimport { ConjuringRules } from '../rules/ConjuringRules';\nimport { OpposedTest, OpposedTestData } from './OpposedTest';\nimport { TestDocuments, TestOptions } from './SuccessTest';\nimport { SummonSpiritTest } from './SummonSpiritTest';\nimport { Translation } from '../utils/strings';\n\n\ninterface OpposedSummonSpiritTestData extends OpposedTestData {\n    // The created spirit actors FoundryVTT uuid\n    summonedSpiritUuid: string\n}\n\n/**\n * The opposed test of summoning a spirit.\n *\n * The summoner is the active actor and the spirit is the opposed actor.\n */\nexport class OpposedSummonSpiritTest extends OpposedTest<OpposedSummonSpiritTestData> {\n    public override against: SummonSpiritTest\n\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\n        // Due to summoning, the active actor for this test will be created during execution.\n        // The selected or user character aren't the correct choice here.\n        delete documents?.actor;\n        delete data.sourceActorUuid;\n\n        super(data, documents, options);\n\n        this._assertCorrectAgainst();\n    }\n\n    /**\n     * Prohibit opposing any other test than SummonSpiritTest\n     */\n    _assertCorrectAgainst() {\n        if (this.against.type !== 'SummonSpiritTest') throw new Error(`${this.constructor.name} can only oppose SummonSpiritTest but is opposing a ${this.against.type}`);\n    }\n\n    override _prepareData(data: any, options?: any) {\n        data = super._prepareData(data, options);\n\n        data.summonedSpiritUuid = data.summonedSpiritUuid || '';\n\n        return data;\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/opposed-actor-creator-message.html'\n    }\n\n    /**\n     * When summoning the opposing spirit test triggers the DrainTest from summoning.\n     * Since we can expect this test to be within GM context, we can't auto cast DrainTest.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    /**\n     * To have an opposing actor, that's not on the map already, create the spirit actor.\n     */\n    override async populateDocuments() {\n        await this.createSummonedSpirit();\n\n        this.data.sourceActorUuid = this.data.summonedSpiritUuid || this.against.data.preparedSpiritUuid;\n\n        await super.populateDocuments();\n    }\n\n    /**\n     * Other than force there shouldn't be any other pool parts.\n     */\n    override applyPoolModifiers() {\n        // NOTE: We don't have an actor, therefore don't need to call document modifiers.\n        PartsList.AddUniquePart(this.data.pool.mod, 'SR6.Force', this.against.data.force);\n    }\n\n    /**\n     * A failure for the spirit is a success for the summoner.\n     */\n    override async processFailure() {\n        await this.updateSummonTestForFollowup();\n        await this.finalizeSummonedSpirit();\n    }\n\n    /**\n     * A success of the spirit is a failure for the summoner.\n     */\n    override async processSuccess() {\n        await this.updateSummonTestForFollowup();\n        await this.cleanupAfterExecutionCancel();\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.SpiritSummonFailure';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.SpiritSummonSuccess';\n    }\n\n    async updateSummonTestForFollowup() {\n        // Finalize the original test values.\n        this.against.calcDrain(this.hits.value);\n        await this.against.saveToMessage();\n    }\n\n    /**\n     * Derive the amount of services the created actor spirit will have.\n     *\n     * Should be called after a successful summoning.\n     */\n    deriveSpiritServices() {\n        return ConjuringRules.spiritServices(this.against.hits.value, this.hits.value);\n    }\n\n    /**\n     * Finalize the existing spirit actor with context around it's summoning.\n     *\n     * This should be called as the last step in summoning.\n     */\n    async finalizeSummonedSpirit() {\n        if (!this.actor) return;\n\n        const summoner = this.against.actor as Actor;\n\n        const updateData = {\n            'system.services': this.deriveSpiritServices(),\n            'system.summonerUuid': summoner.uuid\n        }\n\n        this._addOwnershipToUpdateData(updateData);\n\n        await this.actor.update(updateData);\n    }\n\n    /**\n     * Give all users with the summoning actor permissions of the created spirit actor.\n     *\n     * @param updateData The update data to add the permission to, that's applied to the spirit actor.\n     */\n    _addOwnershipToUpdateData(updateData: object) {\n        const summoner = this.against.actor as Actor;\n\n        // Set permissions for all users using the summoner as main character.\n        const users = game.users?.filter(user => user.character?.uuid === summoner.uuid);\n        if (!users) return;\n\n        const ownership = {};\n        users.forEach(user => {\n            if (user.isGM) return;\n            // #TODO: Add a setting to define that this should be done and what permission it should be done with.\n            //@ts-expect-error v10\n            ownership[user.id] = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        })\n        updateData['ownership'] = ownership\n    }\n\n    /**\n     * Based on this tests selection, create a spirit actor\n     */\n    async createSummonedSpirit() {\n        if (!this.against) return;\n        if (!this.against.actor) return;\n\n        const summoner = this.against.actor;\n\n        if (this.against.data.preparedSpiritUuid) {\n            // Reuse a prepared actor...\n            const preparedActor = await this.getPreparedSpiritActor();\n            if (!preparedActor) return console.error('Shadowrun 6e | Could not find prepared spirit actor');\n            await preparedActor.update({ 'system.summonerUuid': summoner.uuid });\n\n        } else {\n            // Create a new spirit actor from scratch...\n            const spiritType = this.against.data.spiritTypeSelected;\n            const spiritTypeLabel = game.i18n.localize(SR6.spiritTypes[spiritType]);\n            const name = `${summoner.name} ${spiritTypeLabel} ${game.i18n.localize('TYPES.Actor.spirit')}`;\n            const force = this.against.data.force;\n            const system = { force, spiritType };\n\n            const actor = await Actor.create({ name, type: 'spirit', system, prototypeToken: {actorLink: true} });\n\n            if (!actor) return console.error('Shadowrun 6e | Could not create the summoned spirit actor');\n\n            this.data.summonedSpiritUuid = actor.uuid;\n        }\n    }\n\n    /**\n     * Try getting a prepared spirit actor to reuse.\n     *\n     * @returns\n     */\n    async getPreparedSpiritActor(): Promise<SR6Actor|null> {\n        return await fromUuid(this.against.data.preparedSpiritUuid) as SR6Actor;\n    }\n\n    /**\n     * Cleanup created actors that aren't needed anymore.\n     *\n     * When user cancels the dialog, the spirits has been created. Remove it.\n     */\n    override async cleanupAfterExecutionCancel() {\n        if (!this.data.summonedSpiritUuid) return;\n        const actor = await fromUuid(this.data.summonedSpiritUuid);\n        await actor?.delete();\n        delete this.actor;\n    }\n}\n", "import { PartsList } from '../parts/PartsList';\nimport { OpposedTest, OpposedTestData } from './OpposedTest';\nimport { TestDocuments, TestOptions } from './SuccessTest';\nimport { RitualSpellcastingTest } from './RitualSpellcastingTest';\nimport { Translation } from '../utils/strings';\n\n\ninterface OpposedRitualTestData extends OpposedTestData {\n\n}\n\n/**\n * The opposed test of summoning a spirit.\n *\n * The summoner is the active actor and the spirit is the opposed actor.\n */\nexport class OpposedRitualTest extends OpposedTest<OpposedRitualTestData> {\n    public override against: RitualSpellcastingTest\n\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\n        super(data, documents, options);\n\n        this._assertCorrectAgainst();\n    }\n\n    /**\n     * Prohibit opposing any other test than SpellCastingTest\n     */\n    _assertCorrectAgainst() {\n        if (this.against.type !== 'RitualSpellcastingTest') throw new Error(`${this.constructor.name} can only oppose RitualSpellcastingTest but is opposing a ${this.against.type}`);\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/success-test-message.html'\n    }\n\n    /**\n     * When ritual casting the opposing ritual test triggers the DrainTest.\n     * Since we can expect this test to be within GM context, we can't auto cast DrainTest.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    /**\n     * Other than force there shouldn't be any other pool parts.\n     */\n    override applyPoolModifiers() {\n        // NOTE: We don't have an actor, therefore don't need to call document modifiers.\n        PartsList.AddUniquePart(this.data.pool.mod, 'SR6.Force', this.against.data.force);\n        PartsList.AddPart(this.data.pool.mod, 'SR6.Force', this.against.data.force);\n    }\n\n    /**\n     * A failure for the ritual is a success for the summoner.\n     */\n    override async processFailure() {\n        await this.updateRitualTestForFollowup();\n    }\n\n    /**\n     * A success of the ritual is a failure for the summoner.\n     */\n    override async processSuccess() {\n        await this.updateRitualTestForFollowup();\n        await this.cleanupAfterExecutionCancel();\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.RitualFailure';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.RitualSuccess';\n    }\n\n    async updateRitualTestForFollowup() {\n        // Finalize the original test values.\n        let opposingHits = this.hits.value\n\n        this.against.calcDrain(opposingHits);\n        await this.against.saveToMessage();\n    }\n}\n", "import { DataDefaults } from \"../data/DataDefaults\";\nimport { Helpers } from \"../helpers\";\nimport { DrainRules } from \"./DrainRules\";\n\n/**\n * Rules implementing the ritual chapter in SR6.295f\n */\nexport const RitualRules = {\n\n    /**\n     * Determine the amount of hits\n     * \n     * @param hitsCaster Hits of the ritual test.\n     * @param hitsRitual Hits of the ritual opposing test.\n     */\n    ritualHits: (hitsCaster: number, hitsRitual: number): number => {\n        return Math.max(hitsCaster - hitsRitual, 0);\n    },\n\n    /**\n     * Determine the amount of drain value all ritual participants have to drain against.\n     * \n     * See SR5#296 'Seal the ritual'\n     * \n     * @param hits The amount of hits of the opposing ritual\n     */\n    drainValue: (hits: number, reagents: number, force: number): number => {\n        let reduction = Math.max(Math.floor(reagents / force) - 1, 0);\n        return Math.max(hits * 2 - reduction, 2);\n    },\n\n    /**\n     * Determine the drain damage a ritual participant has to drain against.\n     * \n     * See SR5#296 and general Drain Rules.\n     * \n     * @param hits The amount of hits of the opposing ritual\n     * @param drain The drain for the ritual\n     * @param magic The magic attribute level of the ritual leader\n     */\n    calcDrainDamage: (hits, drain: number, magic: number): Shadowrun.DamageData => {\n        if (hits < 0) hits = 0;\n        if (magic < 0) magic = 1;\n\n        const damage = DataDefaults.damageData();\n        damage.base = drain;\n        damage.type.base = damage.type.value = DrainRules.calcDrainDamageType(hits, magic);\n        Helpers.calcTotal(damage, { min: 0 });\n\n        return damage;\n    },\n\n    /**\n     * Determine if the chosen force is valid for the given lodge rating.\n     * \n     * See SR5#300 'Ritual Spellcasting' Step 4.\n     * \n     * @param force The force value.\n     * @param lodgeRating The lodge rating value.\n     */\n    validForce: (force: number, lodgeRating: number): boolean => {\n        if (force < 1) {\n            return false;\n        }\n\n        return force <= lodgeRating;\n    },\n\n    validReagent: (reagents: number, force: number): boolean => {\n        if (force < 1) {\n            return false;\n        }\n\n        return force <= reagents;\n    },\n\n    /**\n     * Reagents used must either match force exactly or be a multiple of force.\n     * \n     * See SR5#296 'Give the offering'\n     * @param force \n     */\n    deriveReagents: (force: number, reagents: number): number => {\n        if (reagents <= force) return force;\n\n        const remainder = reagents % force;\n        if (remainder > 0) return reagents - remainder + force;\n        else return reagents;\n    }\n}\n", "import { DataDefaults } from \"../data/DataDefaults\";\nimport { SuccessTest, SuccessTestData } from \"./SuccessTest\";\nimport { PartsList } from '../parts/PartsList';\nimport { RitualRules } from '../rules/RitualRules';\n\n\ninterface RitualSpellcastingTestData extends SuccessTestData {\n\n    // Force value as described on SR5#300\n    force: number\n    // Drain value as described on SR5#300\n    drain: number\n    drainDamage: Shadowrun.DamageData\n\n    // Reagent value as described on SR5#296 'Give the offering'\n    reagents: number\n\n    // Determine that ritual concluded and drain is ready to be cast.\n    drainReady: boolean\n}\n\n/**\n *\n * NOTE: While we need spell casting data, we don't need general spell casting flow.\n *\n * Ritual Spellcasting uses the default Success Test, Opposed Test and Followup Flow.\n */\nexport class RitualSpellcastingTest extends SuccessTest<RitualSpellcastingTestData> {\n\n    override _prepareData(data: any, options: any) {\n        data = super._prepareData(data, options);\n\n        this._prepareRitualData(data);\n\n        data.drain = data.drain || 0;\n        data.drainDamage = data.drainDamage || DataDefaults.damageData();\n\n        return data;\n    }\n\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/ritualspellcasting-test-dialog.html';\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['spell_ritual']\n    }\n\n    /**\n     * A ritual test can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    /**\n     * Drain test is configured here but will be executed within the opposing tests context.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    /**\n     *\n     */\n    static override _getDefaultTestAction(): Partial<Shadowrun.MinimalActionData> {\n        return {\n            skill: 'ritual_spellcasting',\n            attribute: 'magic'\n        }\n    }\n\n    override async prepareDocumentData() {\n        this.prepareInitialForceValue();\n        await super.prepareDocumentData();\n    }\n\n    /**\n     * Set a default force value based on the force last used for this ritual.\n     *\n     * If ritual hasn't been cast before, fallback to a useable value.\n     */\n    prepareInitialForceValue() {\n        if (!this.item) return;\n\n        const lastUsedForce = this.item.getLastSpellForce();\n        this.data.force = lastUsedForce.value || 1;\n    }\n\n    /**\n     * Rituals uses Force as limit, which needs to be injected into the normal test flow.\n     */\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareLimitValue();\n        this.prepareReagents();\n    }\n\n    /**\n     * Validate user input during dialog or creation and inform user about invalid values.\n     */\n    override validateBaseValues() {\n        this.warnAboutInvalidForce();\n        this.warnAboutInvalidReagents()\n    }\n\n    /**\n     * Notify caster about incomplete ritual. To avoid pre mature drain tests.\n     */\n    override async executeFollowUpTest() {\n        if (!this.data.drainReady) {\n            ui.notifications?.warn('SR6.Warnings.RitualNotConcluded', {localize: true});\n        }\n        await super.executeFollowUpTest();\n    }\n\n    /**\n     * Don't abort execution as there might be some reason users would want to allow 'invalid' values.\n     */\n    warnAboutInvalidForce() {\n        const force = Number(this.data.force);\n\n        //currently we don't check for the lodge, so we always allow it\n        if (!RitualRules.validForce(force, force)) {\n            ui.notifications?.warn('SR6.Warnings.RitualInvalidForce', {localize: true});\n        }\n    }\n\n    warnAboutInvalidReagents() {\n        const reagents = Number(this.data.reagents);\n        const force = Number(this.data.force);\n\n        if (!RitualRules.validReagent(reagents, force)) {\n            ui.notifications?.warn('SR6.Warnings.RitualNotEnoughReagents', {localize: true});\n        }\n    }\n\n    /**\n     * Calculate limit based on force selected by user.\n     *\n     */\n    prepareLimitValue() {\n        this.data.limit.mod = PartsList.AddUniquePart(\n            this.data.limit.mod,\n            'SR6.Force',\n            this.data.force\n        )\n    }\n\n    /**\n     * For rituals reagents must match the force of the ritual at a minimum.\n     */\n    prepareReagents() {\n        this.data.reagents = RitualRules.deriveReagents(this.data.force, this.data.reagents);\n    }\n\n    /**\n     *\n     * @param data Test data to be extended\n     */\n    _prepareRitualData(data: RitualSpellcastingTestData) {\n\n        // Lower from more to less explicit values being given.\n        // Don't let force go below one.\n        data.force = Math.max(data.force || 1, 1);\n        data.reagents = data.reagents || data.force;\n    }\n\n    /**\n     * Derive the actual drain damage from spellcasting values.\n     *\n     * NOTE: This will be called by the opposing test via a follow up test action.\n     */\n    calcDrain(opposingHits: number) {\n        if (!this.actor) return DataDefaults.damageData();\n\n        this.data.drain = RitualRules.drainValue(opposingHits, this.data.reagents, this.data.force);\n        this.data.drainDamage = RitualRules.calcDrainDamage(opposingHits, this.data.drain, this.actor.getAttribute('magic').value);\n        this.data.drainReady = true;\n    }\n\n    /**\n     * Allow the currently used force value of this ritual to be reused next time it is cast.\n     */\n    override async saveUserSelectionAfterDialog() {\n        if (!this.item) return;\n\n        await this.item.setLastSpellForce({value: this.data.force});\n    }\n}\n", "import { SR6Actor } from '../actor/SR6Actor';\nimport {SR6Item} from \"../item/SR6Item\";\n\nexport type SystemMigrationDocuments = SR6Actor|SR6Item|Scene;\n\n// This interface is used as data container between migration methods and the actual document update.\nexport interface UpdateData {\n    data?: any\n    items?: any\n    effects?: any\n}\n\n/**\n * Converts a game's data model from source version to a target version.\n * Extending classes are only required to handle items, actors, and scenes,\n *  other methods are implementable purely for convenience and atomicity.\n */\nexport abstract class VersionMigration {\n    static readonly MODULE_NAME = 'shadowrun6-elysium';\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\n    static readonly NO_VERSION = '0';\n\n    private m_Abort: boolean = false;\n    private m_AbortReason: string;\n\n    /**\n     * The allowed version this migrator should be able to operate on.\n     */\n    public abstract get SourceVersion(): string;\n    /**\n     * The resulting version this migrator will produce.\n     */\n    public abstract get TargetVersion(): string;\n\n    public get SourceVersionFriendlyName(): string {\n        return `v${this.SourceVersion}`;\n    }\n    public get TargetVersionFriendlyName(): string {\n        return `v${this.TargetVersion}`;\n    }\n\n    /**\n     * Flag the migration to be aborted.\n     * @param reason The reason that the migration must be aborted, to be displayed\n     *  to the user and returned from the migration call.\n     */\n    protected abort(reason: string): void {\n        this.m_Abort = true;\n        this.m_AbortReason = reason;\n        ui.notifications?.error(`Data migration has been aborted: ${reason}`, { permanent: true });\n    }\n\n    /**\n     * Show a version specific dialog to the user to inform or confirm about certain migration aspects.\n     */\n    public async AskForUserConsentAndConfiguration(): Promise<boolean> {\n        return true;\n    }\n\n    /**\n     * Begin migration for the specified game.\n     * @param game The world that should be migrated.\n     */\n    public async Migrate(game: Game) {\n        ui.notifications?.info(`${game.i18n.localize('SR6.MIGRATION.BeginNotification')} ${this.SourceVersionFriendlyName} -> ${this.TargetVersionFriendlyName}.`);\n        ui.notifications?.warn(game.i18n.localize('SR6.MIGRATION.DoNotCloseNotification'), {\n            permanent: true,\n        });\n\n        // Map of entities to update, store until later to reduce chance of partial updates\n        // which may result in impossible game states.\n        const entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate> = new Map();\n\n        // Migrate World Items\n        await this.PreMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateItems(game, entityUpdates);\n        await this.PostMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate World Actors\n        await this.PreMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateActors(game, entityUpdates);\n        await this.PostMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate Actor Tokens\n        await this.PreMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateScenes(game, entityUpdates);\n        await this.PostMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Apply the updates, this should *always* work, now that parsing is complete.\n        await this.Apply(entityUpdates);\n\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\n        ui.notifications?.info(`${game.i18n.localize('SR6.MIGRATION.SuccessNotification')} ${this.TargetVersion}.`, { permanent: true });\n    }\n\n    /**\n     * Applies the specified mapping of entities, iteratively updating each.\n     * @param documentUpdates A mapping of document updateData pairs.\n     */\n    protected async Apply(documentUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\n        for (const [entity, { updateData, embeddedItems }] of documentUpdates) {\n\n            // v9 -> v10 workaround, should be removed when safe.\n            const updateSystem = updateData?.data ? {system: updateData.data} : updateData;\n\n            if (embeddedItems !== null) {\n                const actor = entity as SR6Actor;\n                await actor.updateEmbeddedDocuments('Item', embeddedItems);\n            }\n\n            if (updateData !== null ) {\n                await entity.update(updateSystem, { enforceTypes: false });\n            }\n        }\n    }\n\n    /**\n     * Iterate through all scenes and migrate each if needed.\n     * @param game\n     * @param entityUpdates\n     */\n    protected async IterateScenes(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\n        // @ts-expect-error // ignore null state\n        for (const scene of game.scenes.contents) {\n            try {\n                if (!(await this.ShouldMigrateSceneData(scene))) {\n                    continue;\n                }\n\n                // Migrate SceneData itself.\n                console.log(`Migrating Scene entity ${scene.name}`);\n                const updateData = await this.MigrateSceneData(scene);\n\n                expandObject(updateData);\n                entityUpdates.set(scene, {\n                    updateData,\n                    embeddedItems: null,\n                    embeddedEffects: null,\n                });\n\n                // Migrate embedded TokenDocument / ActorData within SceneData\n                for (const token of scene.data.tokens) {\n                    // Don't migrate tokens without or a linked actor.\n                    if (!token.actor || token.data.actorLink) continue;\n\n                    //@ts-expect-error // TODO: foundry-vtt-types v10\n                    if (foundry.utils.isEmpty(token.actor)) continue;\n\n                    const updateData = await this.MigrateActorData(token.actor);\n\n                    expandObject(updateData);\n                    entityUpdates.set(token.actor, {\n                        updateData: updateData.data || null,\n                        embeddedItems: updateData.items || null,\n                        embeddedEffects: updateData.effects || null\n                    });\n                }\n\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                if (foundry.utils.isEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(scene, {\n                    updateData,\n                    embeddedItems: null,\n                    embeddedEffects: null\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all items and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async IterateItems(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\n        // @ts-expect-error // ignore null state\n        for (const item of game.items.contents) {\n            try {\n                if (!(await this.ShouldMigrateItemData(item))) {\n                    continue;\n                }\n\n                console.log(`Migrating Item: ${item.name}`);\n                const updateData = await this.MigrateItemData(item);\n\n                //@ts-expect-error // TODO: foundry-vtt-types v10\n                if (foundry.utils.isEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(item, {\n                    updateData,\n                    embeddedItems: null,\n                    embeddedEffects: updateData.effects || null\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all actors and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async IterateActors(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>) {\n        // @ts-expect-error // ignore null state\n        for (const actor of game.actors.contents) {\n            try {\n                if (!(await this.ShouldMigrateActorData(actor))) {\n                    continue;\n                }\n\n                console.log(`Migrating Actor ${actor.name}`);\n                console.log(actor);\n                const updateData = await this.MigrateActorData(actor);\n                console.log(updateData);\n                let items = [];\n                if (updateData.items) {\n                    items = updateData.items;\n                    delete updateData.items;\n                }\n\n                expandObject(updateData);\n\n                entityUpdates.set(actor, {\n                    updateData,\n                    embeddedItems: items,\n                    embeddedEffects: updateData.effects || null\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n\n    /**\n     * Iterate over an actor's items, updating those that need updating.\n     * @param actor The actor to iterate over\n     * @param updateData The existing update data to merge into\n     */\n    protected async IterateActorItems(actor: SR6Actor, updateData) {\n        let hasItemUpdates = false;\n        if (actor.items !== undefined) {\n            const items = await Promise.all(\n                actor.items.map(async (item) => {\n                    if (item instanceof SR6Item) console.error('Shadowrun 6e | Migration encountered an Item when it should have encountered ItemData / Object');\n                    if (!await this.ShouldMigrateItemData(item)) return item;\n                    const itemUpdate = await this.MigrateItemData(item);\n\n                    hasItemUpdates = true;\n                    itemUpdate['_id'] = item.id;\n\n                    return foundry.utils.mergeObject(item, itemUpdate.data, {\n                        enforceTypes: false,\n                        inplace: false,\n                    });\n                }),\n            );\n            if (hasItemUpdates) {\n                updateData.items = items;\n            }\n        }\n\n        return updateData;\n    }\n\n    /**\n     * Check if a scene requires updates.\n     * @param scene The scene to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified scene's data.\n     * @param scene The scene to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateSceneData(scene: Scene): Promise<UpdateData> {\n        return {};\n    }\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n\n    /**\n     * Check if an item requires updates.\n     * @param item The item to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateItemData(item: SR6Item): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified item's data.\n     * @param item The item to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateItemData(item: SR6Item): Promise<UpdateData> {\n        return {};\n    }\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n\n    /**\n     * Check if an actor requires updates.\n     * @param actor The actor to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateActorData(actor: SR6Actor): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified actor's data.\n     * @param actor The actor to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateActorData(actor: SR6Actor): Promise<UpdateData> {\n        return {};\n    }\n    /**\n     * Do something right before actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n    /**\n     * Do something right after actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of document updates.\n     */\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<SystemMigrationDocuments, DocumentUpdate>): Promise<void> {}\n\n    /**\n     * Migrate a compendium pack\n     * @param pack\n     */\n    public async MigrateCompendiumPack(pack: CompendiumCollection<CompendiumCollection.Metadata>) {\n        if (!['Actor', 'Item', 'Scene'].includes(pack.metadata.type)) return;\n\n        // Begin by requesting server-side data model migration and get the migrated content\n        await pack.migrate({});\n        const documents = await pack.getDocuments();\n\n        // Iterate over compendium entries - applying fine-tuned migration functions\n        for (let document of documents) {\n            try {\n                let updateData: any = null;\n                if (pack.metadata.type === 'Item') {\n                    // @ts-expect-error // TODO: vtt-types v9 document.data.type check added to type gate... but didn't work\n                    updateData = await this.MigrateItemData(document);\n\n                    //@ts-expect-error // TODO: foundry-vtt-types v10\n                    if (foundry.utils.isEmpty(updateData)) {\n                        continue;\n                    }\n\n                    if (updateData.data) {\n                        expandObject(updateData.data);\n                        document.update({system: updateData.data});\n                    }\n\n                } else if (pack.metadata.type === 'Actor') {\n                    //@ts-expect-error\n                    updateData = await this.MigrateActorData(document);\n\n                    //@ts-expect-error // TODO: foundry-vtt-types v10\n                    if (foundry.utils.isEmpty(updateData)) {\n                        continue;\n                    }\n\n                    if (updateData.items) {\n                        await document.updateEmbeddedDocuments('Item', updateData.items);\n                    }\n\n                    if (updateData.effects) {\n                        await document.updateEmbeddedDocuments('Effect', updateData.effects);\n                    }\n\n                    if (updateData.data) {\n                        expandObject(updateData.data);\n                        await document.update({system: updateData.data});\n                    }\n\n                } else if (pack.metadata.type === 'Scene') {\n                    updateData = await this.MigrateSceneData(document as unknown as Scene);\n\n                    //@ts-expect-error // TODO: foundry-vtt-types v10\n                    if (foundry.utils.isEmpty(updateData)) {\n                        continue;\n                    }\n\n                    if (updateData.data) {\n                        expandObject(updateData.data);\n                        await document.update(updateData.data);\n                    }\n                }\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        console.log(`Migrated all ${pack.metadata.type} entities from Compendium ${pack.collection}`);\n    }\n}\n\ntype DocumentUpdate = {\n    updateData: any;\n    embeddedItems: null | any[];\n    embeddedEffects: null | any[];\n};\n", "/**\n * Version 0.8 comes with a complete rework of the original roller design in ShadowrunRoller.\n * instead rolls are handled within the SuccessTest class or subclasses of that using ActionRollData as their basis.\n *\n * What class is to be used is defined within each action (active, followed, opposed, resist). Migration needs to map\n * these classes to their item types.\n *\n *\n */\nimport {VersionMigration} from \"../VersionMigration\";\nimport {Helpers} from \"../../helpers\";\nimport { SR6Item } from \"../../item/SR6Item\";\nimport { SR6Actor } from \"../../actor/SR6Actor\";\nimport { UpdateActionFlow } from \"../../item/flows/UpdateActionFlow\";\n\nexport class Version0_8_0 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.7.6';\n    }\n\n    get TargetVersion(): string {\n        return Version0_8_0.TargetVersion;\n    }\n\n    static get TargetVersion(): string {\n        return \"0.8.0\";\n    }\n\n    protected override async ShouldMigrateItemData(item: SR6Item) {\n        return this._ShouldMigrateItemData(item);\n    }\n\n    protected _ShouldMigrateItemData(item: SR6Item): boolean {\n        return ['weapon', 'spell'].includes(item.type);\n    }\n\n    protected override async ShouldMigrateSceneData(scene: Scene) {\n        return scene.tokens.size > 0;\n    }\n\n    protected override async ShouldMigrateActorData(actor: SR6Actor) {\n        return actor.items.contents.filter(item => this._ShouldMigrateItemData(item)).length > 0;\n    }\n\n    protected override async MigrateItemData(item: SR6Item) {\n        const updateData: {\n            data?: object\n        } = {};\n\n        UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item.toObject(), item.toObject());\n\n        return updateData;\n    }\n\n    protected override async MigrateActorData(actor: SR6Actor) {\n        let updateData: {\n            data?: object,\n            items?: object[]\n        } = {\n            items: []\n        };\n\n        updateData = await this.IterateActorItems(actor, updateData);\n\n        // @ts-expect-error//@ts-expect-error // TODO: foundry-vtt-types v10\n        if (updateData.data && foundry.utils.isEmpty(updateData.data)) delete updateData.data;\n        if (updateData.items?.length === 0) delete updateData.items;\n\n        return updateData;\n    }\n}\n", "import { SR6Actor } from \"../../actor/SR6Actor\";\nimport { FormDialog } from \"../../apps/dialogs/FormDialog\";\nimport { SR6ActiveEffect } from \"../../effect/SR6ActiveEffect\";\nimport { VersionMigration } from \"../VersionMigration\";\n\n/**\n * Version 0.18.0 disables Foundry CONFIG.Active.Effect.legacyTransferal.\n *\n * This causes effects on owned items to also be applied on actors. As these effects will have been\n * transferred onto the actor before, they're now collected and applied twice.\n *\n * Therefore effects with a owned item source are deleted. Effects without an\n * existing origin item on their parent actor will be left in place.\n */\nexport class Version0_18_0 extends VersionMigration {\n    // TODO: is this the last version with a migration?\n    get SourceVersion(): string {\n        return '0.17.0';\n    }\n\n    get TargetVersion(): string {\n        return Version0_18_0.TargetVersion;\n    }\n\n    static get TargetVersion(): string {\n        // First migration with 0.18.0 target didn't quite work out. This is the second attempt.\n        return '0.18.1';\n    }\n\n    // By default item effects will be deleted. should users want to keep them, they can\n    // only have them disabled and manually review / remove each.\n    private onlyDisableEffects = false;\n\n    /**\n     * Version 12 is introducing a breaking change with deleting effects.\n     *\n     * Inform users about this and provide a less destructive option.\n     */\n    override async AskForUserConsentAndConfiguration() {\n        const dialog = new ConfigurationDialog({onlyDisableEffects: this.onlyDisableEffects});\n        await dialog.select();\n        if (dialog.canceled) return false;\n\n        // @ts-expect-error\n        this.onlyDisableEffects = dialog.data.templateData.onlyDisableEffects;\n\n        return true;\n    }\n\n    protected override async ShouldMigrateActorData(actor: SR6Actor) {\n        return !!actor.effects.find(effect => !!effect.origin);\n    }\n\n    /**\n     * There is two ways of migrating...\n     *\n     * 1. Delete effects with origin. Maybe check before if a similar effect exists on the origin.\n     * 2. Disable effects with origin. let users delete.\n     *\n     * @param data\n     */\n    protected override async MigrateActorData(actor: SR6Actor) {\n        if (!this.onlyDisableEffects) {\n            await Version0_18_0.DeleteLocalItemOwnedEffects(actor);\n            return {};\n        }\n\n        return Version0_18_0.DisableLocalItemOwnedEffects(actor);\n    }\n\n    protected override async ShouldMigrateSceneData(scene) {\n        return true;\n    }\n\n    /**\n     * Check if an effect originates from an owned item.\n     *\n     * NOTE: Since foundry copies the original items uuid as origin, this original origin\n     * will be preserved for copies of that actor via tokens or packs. For these actors the\n     * origin points to the original actor owned item, not the copied actors local item.\n     *\n     * NOTE: As the system only ever used FoundryVTT core functionality in regards of how\n     * effects where applied, we delete ALL item origin effects.\n     *\n     * @param actor\n     */\n    static async DeleteLocalItemOwnedEffects(actor: SR6Actor) {\n        const itemOriginEffects = migrateEffects(actor);\n\n        if (itemOriginEffects.length === 0) return;\n\n        console.log(`Actor (${actor.uuid}). Delete these effects:`, itemOriginEffects);\n        const toDelete = itemOriginEffects.map(effect => effect.id as string);\n        await actor.deleteEmbeddedDocuments('ActiveEffect', toDelete);\n    }\n\n\n    /**\n     * Check if an effect originates from an owned item.\n     *\n     * For more documentation check DeleteLocalItemOwnedEffects.\n     *\n     * This method will only disable the effects instead of deleting them outright.\n     * @param actor\n     * @returns updateData{effects}\n     */\n    static async DisableLocalItemOwnedEffects(actor: SR6Actor) {\n        const itemOriginEffects = migrateEffects(actor);\n\n        if (itemOriginEffects.length === 0) return {};\n\n        console.log(`Actor (${actor.uuid}). Disable these effects:`, itemOriginEffects);\n        const updateData = {effects: itemOriginEffects.map(effect => {\n            // this migration might have run twice, therefore we remove a name prefix before readding :)\n            return {_id: effect.id, disabled: true, name: `DISABLED: ${effect.name?.replace('DISABLED: ', '')}`};\n        })};\n\n        return updateData;\n    }\n}\n\n/**\n * Inform users about migration changes and let them consent to deleting effects or opt-in to deleting effects only.\n */\nclass ConfigurationDialog extends FormDialog {\n    constructor(data = {} as any) {\n        data.templateData = {onlyDisableEffects: data.onlyDisableEffects};\n        data.templatePath = `systems/shadowrun6-elysium/dist/templates/apps/migrator/Version0.18.0.hbs`;\n        data.title = Version0_18_0.TargetVersion;\n        //@ts-expect-error\n        super(data, {applyFormChangesOnSubmit: true});\n    }\n\n    override get buttons() {\n        return {\n            migrate: {\n                label: game.i18n.localize('SR6.MIGRATION.BeginMigration'),\n                icon: '<i class=\"fas fa-check\"></i>'\n            },\n            cancel: {\n                label: game.i18n.localize('SR6.Dialogs.Common.Cancel')\n            }\n        };\n    }\n}\n\n/**\n * Filter down all effects to only those to be migrated.\n * @param effects\n * @param actor\n * @returns\n */\nconst migrateEffects = (actor: SR6Actor) => {\n    return actor.effects.filter(effect => !!effect.origin && effect.origin.includes('.Item.'));\n}\n", "/**\n * Version 0.8 comes with a complete rework of the original roller design in ShadowrunRoller.\n * instead rolls are handled within the SuccessTest class or subclasses of that using ActionRollData as their basis.\n *\n * What class is to be used is defined within each action (active, followed, opposed, resist). Migration needs to map\n * these classes to their item types.\n */\nimport {VersionMigration} from \"../VersionMigration\";\nimport { SR6Item } from \"../../item/SR6Item\";\nimport { SR6Actor } from \"../../actor/SR6Actor\";\n\nexport class Version0_16_0 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.15.0';\n    }\n\n    get TargetVersion(): string {\n        return Version0_16_0.TargetVersion;\n    }\n\n    static get TargetVersion(): string {\n        return \"0.16.0\";\n    }\n\n    protected override async ShouldMigrateItemData(item: SR6Item) {\n        return false;\n    }\n\n    protected override async ShouldMigrateSceneData(scene: Scene) {\n        return false;\n    }\n\n    protected override async ShouldMigrateActorData(actor: SR6Actor) {\n        return true;\n    }\n\n    protected override async MigrateActorData(actor: SR6Actor) {\n        const updateData = {data: {}};\n\n        // Some actors did have heat, when they shouldn't.\n        if (actor.type !== 'character' && actor.type !== 'critter' && actor.type !== 'vehicle') {\n            updateData.data['visibilityChecks.meat.hasHeat'] = false;\n        }\n\n        // Migrate magic character actors with wrong templates for initiation (initiation = {})\n        // @ts-expect-error\n        if (actor.system.magic && actor.system.magic.hasOwnProperty('initiation') && isNaN(actor.system.magic.initiation)) {\n            updateData.data['magic.initiation'] = 0;\n        }\n        return updateData;\n    }\n}\n", "/**\n * Version 0.24.0 changes action types from simple/complex to minor/major\n * and adds initiative timing field.\n */\nimport { VersionMigration } from \"../VersionMigration\";\nimport { SR6Item } from \"../../item/SR6Item\";\n\nexport class Version0_24_0 extends VersionMigration {\n    static readonly TargetVersion = '0.24.0';\n\n    get SourceVersion(): string {\n        return '0.23.2';\n    }\n\n    get TargetVersion(): string {\n        return Version0_24_0.TargetVersion;\n    }\n\n    /**\n     * Migrate a single Item entity to the new data model.\n     * @param item The item data to migrate\n     * @return The updated item data\n     */\n    protected override async MigrateItemData(item: SR6Item) {\n        const updateData: {\n            data?: object\n        } = {\n            data: {}\n        };\n\n        // Only process items with actions\n        if (item.system.action) {\n            // Convert action types\n            const currentActionType = item.system.action.type;\n            let newActionType = currentActionType;\n            \n            // Convert complex to major\n            if (currentActionType === 'complex') {\n                newActionType = 'major';\n                updateData.data['action.type'] = newActionType;\n            }\n            // Convert simple to minor\n            else if (currentActionType === 'simple') {\n                newActionType = 'minor';\n                updateData.data['action.type'] = newActionType;\n            }\n            // Any other non-standard types will remain as they are\n            \n            // Set default initiative timing based on action type\n            // Major and minor actions typically happen in initiative order\n            // Free actions can happen anytime\n            let initiativeTiming = 'none';\n            if (newActionType === 'major' || newActionType === 'minor') {\n                initiativeTiming = 'initiative';\n            } else if (newActionType === 'free') {\n                initiativeTiming = 'anytime';\n            }\n            \n            updateData.data['action.initiative_timing'] = initiativeTiming;\n        }\n\n        return updateData;\n    }\n\n    /**\n     * Migrate a single Scene entity to use the new data model.\n     * @param scene The Scene data to migrate\n     * @return The updated Scene data\n     */\n    protected override async MigrateSceneData(scene: Scene) {\n        const tokens = scene.tokens.map(token => {\n            const t = token.toObject();\n            if (t.actorLink && t.actorId) {\n                t.actorData = {};\n            }\n            return t;\n        });\n        return { tokens };\n    }\n\n    /**\n     * If the migration should also handle this document\n     * @param item\n     */\n    protected override async ShouldMigrateItemData(item: SR6Item): Promise<boolean> {\n        return item.system.action !== undefined;\n    }\n}\n", "/**\n * Version 0.24.1 adds legality property to matrix actions\n * Electronics-based matrix actions are legal, while cracking-based matrix actions are illegal\n */\nimport { VersionMigration } from \"../VersionMigration\";\nimport { SR6Item } from \"../../item/SR6Item\";\n\nexport class Version0_24_1 extends VersionMigration {\n    static readonly TargetVersion = '0.24.1';\n\n    get SourceVersion(): string {\n        return '0.24.0';\n    }\n\n    get TargetVersion(): string {\n        return Version0_24_1.TargetVersion;\n    }\n\n    /**\n     * Migrate a single Item entity to the new data model.\n     * @param item The item data to migrate\n     * @return The updated item data\n     */\n    protected override async MigrateItemData(item: SR6Item) {\n        const updateData: {\n            data?: object\n        } = {\n            data: {}\n        };\n\n        // Only process action items\n        if (item.type === 'action' && item.system.action) {\n            // Check if this is a matrix action\n            if (this.isMatrixAction(item)) {\n                // Determine if the action is legal or illegal\n                const isIllegal = this.isIllegalMatrixAction(item);\n                updateData.data['action.legality'] = isIllegal ? 'illegal' : 'legal';\n                \n                console.log(`SR6: Setting matrix action ${item.name} legality to ${isIllegal ? 'illegal' : 'legal'}`);\n            }\n        }\n\n        return updateData;\n    }\n\n    /**\n     * Determine if an item is a matrix action\n     * @param item The item to check\n     * @returns True if the item is a matrix action\n     */\n    private isMatrixAction(item: SR6Item): boolean {\n        // Check if the item has matrix-related categories\n        const matrixCategories = [\n            'matrix_action',\n            'matrix_defense',\n            'matrix_initiative',\n            'matrix_perception',\n            'matrix_search',\n            'hack_on_the_fly',\n            'brute_force',\n            'data_spike',\n            'crack_file',\n            'matrix_stealth',\n            'matrix_confuse_persona',\n            'matrix_jump_into_rigged_device',\n            'matrix_control_device',\n            'matrix_format_device',\n            'matrix_reboot_device',\n            'matrix_full_matrix_defense',\n            'matrix_hide',\n            'matrix_jack_out',\n            'matrix_jam_signals',\n            'matrix_spoof_command',\n            'matrix_trace_icon'\n        ];\n        \n        // Check if action has any matrix categories\n        if (item.system?.action?.categories) {\n            const categories = item.system.action.categories;\n            if (categories.some(category => matrixCategories.includes(category))) {\n                return true;\n            }\n        }\n        \n        // Check if action name contains matrix-related terms\n        const matrixTerms = ['matrix', 'hack', 'cyberdeck', 'deck', 'icon', 'host', 'persona', 'grid', 'commlink'];\n        const actionName = item.name.toLowerCase();\n        return matrixTerms.some(term => actionName.includes(term));\n    }\n\n    /**\n     * Determine if a matrix action is illegal (cracking-based) or legal (electronics-based)\n     * @param item The matrix action item\n     * @returns True if the action is illegal (cracking-based)\n     */\n    private isIllegalMatrixAction(item: SR6Item): boolean {\n        // Cracking-based categories and terms that indicate illegal actions\n        const illegalCategories = [\n            'hack_on_the_fly',\n            'brute_force',\n            'data_spike',\n            'crack_file',\n            'matrix_stealth'\n        ];\n        \n        // Check categories\n        if (item.system?.action?.categories) {\n            const categories = item.system.action.categories;\n            if (categories.some(category => illegalCategories.includes(category))) {\n                return true;\n            }\n        }\n        \n        // Check name for cracking-related terms\n        const illegalTerms = ['hack', 'crack', 'brute force', 'data spike', 'spoof', 'sneak', 'stealth'];\n        const actionName = item.name.toLowerCase();\n        return illegalTerms.some(term => actionName.includes(term));\n    }\n\n    /**\n     * Migrate a single Scene entity to use the new data model.\n     * @param scene The Scene data to migrate\n     * @return The updated Scene data\n     */\n    protected override async MigrateSceneData(scene: Scene) {\n        const tokens = scene.tokens.map(token => {\n            const t = token.toObject();\n            if (t.actorLink && t.actorId) {\n                t.actorData = {};\n            }\n            return t;\n        });\n        return { tokens };\n    }\n\n    /**\n     * If the migration should also handle this document\n     * @param item\n     */\n    protected override async ShouldMigrateItemData(item: SR6Item): Promise<boolean> {\n        return item.type === 'action';\n    }\n}\n", "import { VersionMigration } from './VersionMigration';\nimport {Version0_8_0} from \"./versions/Version0_8_0\";\nimport { Version0_18_0 } from './versions/Version0_18_0';\nimport { Version0_16_0 } from './versions/Version0_16_0';\nimport { Version0_24_0 } from './versions/Version0_24_0';\nimport { Version0_24_1 } from './versions/Version0_24_1';\n\ntype VersionDefinition = {\n    versionNumber: string;\n    migration: VersionMigration;\n};\nexport class Migrator {\n    // Map of all version migrations to their target version numbers.\n    private static readonly s_Versions: VersionDefinition[] = [\n        { versionNumber: Version0_8_0.TargetVersion, migration: new Version0_8_0() },\n        { versionNumber: Version0_18_0.TargetVersion, migration: new Version0_18_0() },\n        { versionNumber: Version0_16_0.TargetVersion, migration: new Version0_16_0() },\n        { versionNumber: Version0_24_0.TargetVersion, migration: new Version0_24_0() },\n        { versionNumber: Version0_24_1.TargetVersion, migration: new Version0_24_1() }\n    ];\n\n    /**\n     * Check if the current world is empty of any migrate documents.\n     *\n     */\n    public static get isEmptyWorld(): boolean {\n        return game.actors?.contents.length === 0 &&\n            game.items?.contents.length === 0 &&\n            game.scenes?.contents.length === 0 &&\n            Migrator.onlySystemPacks\n    }\n\n    public static get onlySystemPacks(): boolean {\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return game.packs.contents.filter(pack => pack.metadata.packageType !== 'system' && pack.metadata.packageName !== 'shadowrun6-elysium').length === 0;\n    }\n\n    public static async InitWorldForMigration() {\n        console.log('Shadowrun 6e | Initializing an empty world for future migrations');\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, game.system.version);\n    }\n\n    public static async BeginMigration() {\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION) as string;\n        if (currentVersion === undefined || currentVersion === null) {\n            currentVersion = VersionMigration.NO_VERSION;\n        }\n\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\n            return this.compareVersion(versionNumber, currentVersion) === 1;\n        });\n\n        // No migrations are required, exit.\n        if (migrations.length === 0) {\n            return;\n        }\n\n        const localizedWarningTitle = game.i18n.localize('SR6.MIGRATION.WarningTitle');\n        const localizedWarningHeader = game.i18n.localize('SR6.MIGRATION.WarningHeader');\n        const localizedWarningRequired = game.i18n.localize('SR6.MIGRATION.WarningRequired');\n        const localizedWarningDescription = game.i18n.localize('SR6.MIGRATION.WarningDescription');\n        const localizedWarningBackup = game.i18n.localize('SR6.MIGRATION.WarningBackup');\n        const localizedWarningBegin = game.i18n.localize('SR6.MIGRATION.BeginMigration');\n\n        const d = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\n                `<p>${localizedWarningDescription}</p>` +\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\n            buttons: {\n                ok: {\n                    label: localizedWarningBegin,\n                    callback: () => this.migrate(migrations),\n                },\n            },\n            default: 'ok',\n        });\n        d.render(true);\n    }\n\n    private static async migrate(migrations: VersionDefinition[]) {\n        // we want to apply migrations in ascending order until we're up to the latest\n        migrations.sort((a, b) => {\n            return this.compareVersion(a.versionNumber, b.versionNumber);\n        });\n\n        // Before starting, configure each migration\n        for (const {migration} of migrations) {\n            // Show a configuration or information dialog and abort if necessary.\n            const consent = await migration.AskForUserConsentAndConfiguration();\n            if (!consent) return;\n        }\n\n        await this.migrateWorld(game, migrations);\n        await this.migrateCompendium(game, migrations);\n\n        const localizedWarningTitle = game.i18n.localize('SR6.MIGRATION.SuccessTitle');\n        const localizedWarningHeader = game.i18n.localize('SR6.MIGRATION.SuccessHeader');\n        const localizedSuccessDescription = game.i18n.localize('SR6.MIGRATION.SuccessDescription');\n        const localizedSuccessPacksInfo = game.i18n.localize('SR6.MIGRATION.SuccessPacksInfo');\n        const localizedSuccessConfirm = game.i18n.localize('SR6.MIGRATION.SuccessConfirm');\n        const packsDialog = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\n                `<p>${localizedSuccessDescription}</p>` +\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: localizedSuccessConfirm,\n                },\n            },\n            default: 'ok',\n        });\n        packsDialog.render(true);\n    }\n\n    /**\n     * Migrate all world objects\n     * @param game\n     * @param migrations\n     */\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\n        // Run the migrations in order\n        for (const { migration } of migrations) {\n            // Migrate after user accepted.\n            await migration.Migrate(game);\n        }\n    }\n\n    /**\n     * Iterate over all world compendium packs\n     * @param game Game that will be migrated\n     * @param migrations Instances of the version migration\n     */\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\n        // Migrate World Compendium Packs\n        // @ts-expect-error // v11 onwards uses packageType\n        const packs = game.packs?.filter((pack) => pack.metadata.packageType === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.type));\n\n        if (!packs) return;\n\n        // Run the migrations in order on each pack.\n        for (const pack of packs) {\n            for (const { migration } of migrations) {\n                await migration.MigrateCompendiumPack(pack);\n            }\n        }\n    }\n\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\n    // updated for typescript\n    /**\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\n     * @param v1\n     * @param v2\n     */\n    public static compareVersion(v1: string, v2: string) {\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\n        const k = Math.min(v1.length, v2.length);\n        for (let i = 0; i < k; ++i) {\n            if (s1[i] > s2[i]) return 1;\n            if (s1[i] < s2[i]) return -1;\n        }\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\n    }\n}\n", "import { RANGE_CATEGORIES, RANGE_MODIFIERS, WeaponRangeRules } from '../rules/WeaponRangeRules';\nimport { SR6Item } from '../item/SR6Item';\n\nexport class MigrationRunner {\n    // ... existing code ...\n\n    static async migrateWeaponRanges(item: SR6Item) {\n        if (!item.isRangedWeapon) return;\n\n        const updateData = {\n            'system.range': {\n                current: 0,\n                category: RANGE_CATEGORIES.NEAR, // Default to \"near\" range\n                modifier: RANGE_MODIFIERS[RANGE_CATEGORIES.NEAR]\n            }\n        };\n\n        // Remove old range data structure\n        await item.update({\n            'system.range.-=ranges': null,\n            'system.range.-=selected': null,\n            // Add new range structure\n            ...updateData\n        });\n    }\n\n    static async migrateToNewRanges() {\n        ui.notifications?.info('Starting weapon range migration...');\n\n        // Migrate all weapons in all actor inventories\n        for (const actor of game.actors || []) {\n            const weapons = actor.items.filter(i => i.isRangedWeapon);\n            for (const weapon of weapons) {\n                await this.migrateWeaponRanges(weapon);\n            }\n        }\n\n        // Migrate all weapons in world items\n        for (const item of game.items || []) {\n            if (item.isRangedWeapon) {\n                await this.migrateWeaponRanges(item);\n            }\n        }\n\n        ui.notifications?.info('Weapon range migration complete.');\n    }\n\n    static async migrateWeaponAttackRatings(item: SR6Item) {\n        if (!item.isRangedWeapon) return;\n\n        const updateData = {\n            'system.range.attackRating': {\n                [RANGE_CATEGORIES.CLOSE]: 0,\n                [RANGE_CATEGORIES.NEAR]: 0,\n                [RANGE_CATEGORIES.MEDIUM]: 0,\n                [RANGE_CATEGORIES.FAR]: 0,\n                [RANGE_CATEGORIES.EXTREME]: 0\n            }\n        };\n\n        // Migrate from old attack rating structure if it exists\n        const oldAR = item.system?.attack_rating;\n        if (oldAR) {\n            // Map old values to new categories if they exist\n            if (oldAR.close) updateData.system.range.attackRating[RANGE_CATEGORIES.CLOSE] = oldAR.close;\n            if (oldAR.near) updateData.system.range.attackRating[RANGE_CATEGORIES.NEAR] = oldAR.near;\n            if (oldAR.medium) updateData.system.range.attackRating[RANGE_CATEGORIES.MEDIUM] = oldAR.medium;\n            if (oldAR.far) updateData.system.range.attackRating[RANGE_CATEGORIES.FAR] = oldAR.far;\n            if (oldAR.extreme) updateData.system.range.attackRating[RANGE_CATEGORIES.EXTREME] = oldAR.extreme;\n        }\n\n        // Remove old attack rating structure and add new one\n        await item.update({\n            'system.-=attack_rating': null,\n            ...updateData\n        });\n    }\n}\n", "// game settings for shadowrun 5e\n\nimport { VersionMigration } from './migrator/VersionMigration';\nimport { FLAGS, SYSTEM_NAME } from './constants';\nimport { MigrationRunner } from './migration/MigrationRunner';\n\nexport const registerSystemSettings = () => {\n    /**\n     * No actual setting.\n     *\n     * Instead this is used to store global data outside of FoundryVTT document storage.\n     * See DataStorage.ts for more information.\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.GlobalDataStorage, {\n        name: 'SETTINGS.GlobalDataStorageName',\n        hint: 'SETTINGS.GlobalDataStorageDescription',\n        scope: 'world',\n        config: false,\n        type: Object,\n        default: {}\n    });\n\n    /**\n     * Register diagonal movement rule setting\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.DiagonalMovement, {\n        name: 'SETTINGS.DiagonalMovementName',\n        hint: 'SETTINGS.DiagonalMovementDescription',\n        scope: 'world',\n        config: true,\n        type: String,\n        default: 'EUCL',\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        choices: {\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\n            'EUCL': 'SETTINGS.Euclidean',\n        },\n        onChange: (rule) => {\n            // @ts-expect-error canvas grid should not be undefined here...\n            // Copy DnD5e's approach to movement measurement and add a custom field to the grid to be used in canvas.ts#measureDistances\n            canvas.grid.diagonalRule = rule\n        },\n    });\n\n    /**\n     * Default limit behavior\n     */\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\n        name: 'SETTINGS.ApplyLimitsName',\n        hint: 'SETTINGS.ApplyLimitsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    /**\n     * Track system version upon which a migration was last applied\n     */\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\n        name: 'System Data Version.',\n        scope: 'world',\n        config: false,\n        type: String,\n        default: '0',\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\n        name: 'SETTINGS.ShowGlitchAnimationName',\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput, {\n        name: 'SETTINGS.ShowTokenNameForChatOutputName',\n        hint: 'SETTINGS.ShowTokenNameForChatOutputDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAllowRollOnDefaultableSkills, {\n         name: 'SETTINGS.OnlyAllowRollOnDefaultableSkills',\n        hint: 'SETTINGS.OnlyAllowRollOnDefaultableSkillsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowSkillsWithDetails, {\n        name: 'SETTINGS.ShowSkillsWithDetails',\n        hint: 'SETTINGS.ShowSkillsWithDetailsDescription',\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat, {\n         name: 'SETTINGS.OnlyAutoRollNPCInCombat',\n        hint: 'SETTINGS.OnlyAutoRollNPCInCombatDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.TokenHealthBars, {\n        name: 'SETTINGS.TokenHealthBars',\n        hint: 'SETTINGS.TokenHealthBarsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: false,\n    });\n\n    /**\n     * Control if GM triggered chat messages should hide critical message parts.\n     *\n     * These parts will only show to players that have appropriate permissions on the used\n     * actor for testing.\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.HideGMOnlyChatContent, {\n        name: 'SETTINGS.HideGMOnlyChatContent',\n        hint: 'SETTINGS.HideGMOnlyChatContentDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: false\n    });\n\n    /**\n     * Control Test behaviour and consumption of necessary ressources for it.\n     *\n     * When set to true tests will NOT roll should one ressource be missing.\n     *\n     * This can be used to prevent edge rules to be used, when an actor doesn't have edge\n     * and other ressources.\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.MustHaveRessourcesOnTest, {\n        name: 'SETTINGS.MustHaveRessourcesOnTest',\n        hint: 'SETTINGS.MustHaveRessourcesOnTestDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: false\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.UseDamageCondition, {\n        name: 'SETTINGS.UseDamageConditionName',\n        hint: 'SETTINGS.UseDamageConditionDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    /**\n     * Control automation of creating the defense modification after mulitple attacks\n     * on an actor unti their next action phase.\n     *\n     * See SR6.189 'Defender has defended against previous attacks'\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.AutomateMultiDefenseModifier, {\n        name: 'SETTINGS.AutomateMultiDefenseModifier',\n        hint: 'SETTINGS.AutomateMultiDefenseModifierDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true\n    });\n\n    /**\n     * Control automation of progressive recoil when continuously firing\n     *\n     * See SR6.175 'Progressive Recoil'\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.AutomateProgressiveRecoil, {\n        name: 'SETTINGS.AutomateProgressiveRecoil',\n        hint: 'SETTINGS.AutomateProgressiveRecoilDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true\n    });\n\n    /**\n     * Control automatic or manual casting of dice in any success test.\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.ManualRollOnSuccessTest, {\n        name: 'SETTINGS.ManualRollOnSuccessTest',\n        hint: 'SETTINGS.ManualRollOnSuccessTestDescription',\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false\n    });\n\n    /**\n     * Control default behavior for opposed test actors\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.DefaultOpposedTestActorSelection, {\n        name: 'SETTINGS.DefaultOpposedTestActorSelection',\n        hint: 'SETTINGS.DefaultOpposedTestActorSelectionDescription',\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false\n    });\n\n    /**\n     * Determines whether freshly imported items should be marked with an icon and/or modified text color\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.MarkImports, {\n        name: 'SETTINGS.MarkImportsName',\n        hint: 'SETTINGS.MarkImportsDescription',\n        scope: 'client',\n        config: true,\n        type: String,\n        default: 'BOTH',\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        choices: {\n            'BOTH': 'SETTINGS.FreshColorAndIcon',\n            'COLOR': 'SETTINGS.FreshColor',\n            'ICON': 'SETTINGS.FreshIcon',\n            'NONE': 'SETTINGS.NoMarking'\n        }\n    });\n\n    /**\n     * Sets the default importer icon folder\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.ImportIconFolder, {\n        name: 'SETTINGS.ImportIconFolderName',\n        hint: 'SETTINGS.ImportIconFolderDescription',\n        scope: 'world',\n        config: true,\n        type: String,\n        default: 'systems/shadowrun6-elysium/dist/icons/importer/'\n    });\n\n    /**\n     * Use the default icon overrides setting\n     */\n    game.settings.register(SYSTEM_NAME, FLAGS.UseImportIconOverrides, {\n        name: 'SETTINGS.UseImportIconOverridesName',\n        hint: 'SETTINGS.UseImportIconOverridesDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true\n    });\n\n    game.settings.register('shadowrun6-elysium', 'migrateWeaponRanges', {\n        name: 'Migrate to Standard Weapon Ranges',\n        hint: 'Updates all weapons to use the standard SR6e range categories.',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: value => {\n            if (value) {\n                MigrationRunner.migrateToNewRanges().then(() => {\n                    // Reset the setting after migration\n                    game.settings.set('shadowrun6-elysium', 'migrateWeaponRanges', false);\n                });\n            }\n        }\n    });\n\n};\n", "import { RangedWeaponRules } from '../rules/RangedWeaponRules';\nimport { Helpers } from '../helpers';\nimport { SR6Item } from './SR6Item';\nimport { SR6 } from \"../config\";\nimport { onManageActiveEffect, prepareSortedEffects, prepareSortedItemEffects } from \"../effects\";\nimport { createTagify, parseDropData } from '../utils/sheets';\nimport { SR6Actor } from '../actor/SR6Actor';\nimport { SR6ActiveEffect } from '../effect/SR6ActiveEffect';\nimport { ActionFlow } from './flows/ActionFlow';\nimport RangeData = Shadowrun.RangeData;\n\n/**\n * FoundryVTT ItemSheetData typing\n */\ninterface FoundryItemSheetData {\n    // Item type\n    type: string\n    // Legacy Item Document Data\n    data: Shadowrun.ShadowrunItemData\n    // Item Document System Data\n    system: Shadowrun.ShadowrunItemDataData\n    // A descriptive document  reference\n    item: SR6Item\n    document: SR6Item\n\n    cssClass: string\n    editable: boolean\n    limited: boolean\n    owner: boolean\n    title: string\n}\n\n/**\n * Shadowrun 5e ItemSheetData typing shared across all item types\n */\nexport interface SR6BaseItemSheetData extends FoundryItemSheetData {\n    // SR5-FoundryVTT configuration\n    config: typeof SR6\n    effects: SR6ActiveEffect[]\n    itemEffects: SR6ActiveEffect[]\n    // FoundryVTT rollmodes\n    rollModes: CONFIG.Dice.RollModes\n}\n\n// @ts-ignore\n// @ts-ignore\n/**\n * Template fields for item sheet\n */\ninterface SR6ItemSheetData extends SR6BaseItemSheetData {\n    // Nested item typing for different sheets\n    ammunition: Shadowrun.AmmoItemData[]\n    weaponMods: Shadowrun.ModificationItemData[]\n    armorMods: Shadowrun.ModificationItemData[]\n    vehicleMods: Shadowrun.ModificationItemData[]\n    droneMods: Shadowrun.ModificationItemData[]\n\n    // Sorted lists for usage in select elements.\n    activeSkills: Record<string, string> // skill id: label\n    attributes: Record<string, string>  // key: label\n\n    // Host Item.\n    markedDocuments: Shadowrun.MarkedDocument[]\n    networkDevices: (SR6Item | SR6Actor)[]\n    networkController: SR6Item | undefined\n\n    // Contact Item\n    linkedActor: SR6Actor | undefined\n\n    // Action Items. (not only type = action)\n    //@ts-expect-error\n    tests: typeof game['shadowrun6-elysium'].tests\n    // @ts-expect-error\n    opposedTests: typeof game['shadowrun6-elysium'].opposedTests\n    // @ts-expect-error\n    activeTests: typeof game['shadowrun6-elysium'].activeTests\n    // @ts-expect-error\n    resistTests: typeof game['shadowrun6-elysium'].resistTests\n\n    // Rendered description field\n    descriptionHTML: string\n\n    // Can be used to check if the source field contains a URL.\n    sourceIsURL: boolean\n    sourceIsPDF: boolean\n    sourceIsUuid: boolean\n\n    isUsingRangeCategory: boolean\n}\n\n/**\n * Extend the basic ItemSheet with some very simple modifications\n */\nexport class SR6ItemSheet extends ItemSheet {\n    private _shownDesc: any[] = [];\n    private _scroll: string;\n\n    /**\n     * Extend and override the default options used by the Simple Item Sheet\n     * @returns {Object}\n     */\n    static override get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: ['sr6', 'sheet', 'item'],\n            width: 735,\n            height: 450,\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\n        });\n    }\n\n    override get template() {\n        return `systems/shadowrun6-elysium/dist/templates/item/${this.item.type}.html`;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Prepare data for rendering the Item sheet\n     * The prepared data object contains both the actor data as well as additional sheet options\n     */\n    override async getData(options): Promise<any> {\n        const data = super.getData(options) as unknown as SR6ItemSheetData;\n\n        // Rework v9 style data mapping to v10 style, while waiting for foundry-vtt-types to be update to v10.\n        data.type = data.data.type;\n        data.system = data.item.system;\n        //@ts-expect-error // TODO: remove TODO: foundry-vtt-types v10\n        data.data = data.item.system;\n        const itemData = this.item.system;\n\n        const linkedActor = await this.item.getLinkedActor();\n\n        if (itemData.action) {\n            try {\n                const action = itemData.action as any;\n                if (itemData.action.mod === 0) delete action.mod;\n                if (action.limit === 0) delete action.limit;\n                if (action.damage) {\n                    if (action.damage.mod === 0) delete action.damage.mod;\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\n                }\n                if (action.limit) {\n                    if (action.limit.mod === 0) delete action.limit.mod;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n\n        if (itemData.technology) {\n            try {\n                const technology = itemData.technology as any;\n                if (technology.rating === 0) delete technology.rating;\n                if (technology.quantity === 0) delete technology.quantity;\n                if (technology.cost === 0) delete technology.cost;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        data['config'] = SR6;\n\n        /**\n         * Reduce nested items into typed lists.\n         */\n        const itemTypes = this.item.items.reduce(\n            (sheetItemData: [Shadowrun.AmmoItemData[], Shadowrun.ModificationItemData[], Shadowrun.ModificationItemData[], Shadowrun.ModificationItemData[], Shadowrun.ModificationItemData[]], nestedItem: SR6Item) => {\n                const itemData = nestedItem.toObject();\n                // itemData.descriptionHTML = await TextEditor.enrichHTML(itemData.system.description.value);\n\n                //@ts-expect-error\n                if (nestedItem.type === 'ammo') sheetItemData[0].push(itemData); // TODO: foundry-vtt-types v10\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                if (nestedItem.type === 'modification' && \"type\" in nestedItem.system && nestedItem.system.type === 'weapon') sheetItemData[1].push(itemData);\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                if (nestedItem.type === 'modification' && \"type\" in nestedItem.system && nestedItem.system.type === 'armor') sheetItemData[2].push(itemData);\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                if (nestedItem.type === 'modification' && \"type\" in nestedItem.system && nestedItem.system.type === 'vehicle') sheetItemData[3].push(itemData);\n                //@ts-expect-error TODO: foundry-vtt-types v10\n                if (nestedItem.type === 'modification' && \"type\" in nestedItem.system && nestedItem.system.type === 'drone') sheetItemData[4].push(itemData);\n\n                return sheetItemData;\n            },\n            [[], [], [], [], []],\n        );\n\n        for (const itemType of itemTypes) {\n            for (const item of itemType) {\n                // @ts-expect-error\n                item.descriptionHTML = await TextEditor.enrichHTML(item.system.description.value);\n            }\n        }\n\n        const [ammunition, weaponMods, armorMods, vehicleMods, droneMods] = itemTypes;\n        data['ammunition'] = ammunition;\n        data['weaponMods'] = weaponMods;\n        data['armorMods'] = armorMods;\n        data['vehicleMods'] = vehicleMods;\n        data['droneMods'] = droneMods;\n        data['activeSkills'] = this._getSortedActiveSkillsForSelect();\n        data['attributes'] = this._getSortedAttributesForSelect();\n        data['limits'] = this._getSortedLimitsForSelect();\n\n        data['effects'] = prepareSortedEffects(this.item.effects.contents);\n        data['itemEffects'] = prepareSortedItemEffects(this.object);\n\n        if (this.item.isHost) {\n            data['markedDocuments'] = this.item.getAllMarkedDocuments();\n        }\n\n        if (this.item.canBeNetworkController) {\n            data['networkDevices'] = await this.item.networkDevices();\n        }\n\n        if (this.item.canBeNetworkDevice) {\n            data['networkController'] = await this.item.networkController();\n        }\n\n        if (this.item.isContact) {\n            data['linkedActor'] = await this.item.getLinkedActor() as SR6Actor;\n        }\n\n        // Provide action parts with all test variants.\n        data.tests = game['shadowrun6-elysium'].tests;\n        data.opposedTests = game['shadowrun6-elysium'].opposedTests;\n        data.activeTests = game['shadowrun6-elysium'].activeTests;\n        data.resistTests = game['shadowrun6-elysium'].resistTests;\n\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        data.descriptionHTML = await this.enrichEditorFieldToHTML(this.item.system.description.value);\n        data.sourceIsURL = this.item.sourceIsUrl;\n        data.sourceIsPDF = this.item.sourceIsPDF;\n        data.sourceIsUuid = this.item.sourceIsUuid\n\n        data.isUsingRangeCategory = this.item.isUsingRangeCategory;\n\n        data.rollModes = CONFIG.Dice.rollModes;\n\n\n\n        return {\n            ...data,\n            linkedActor\n        }\n    }\n\n    /**\n     * Help enriching editor field values to HTML used to display editor values as read-only HTML in sheets.\n     *\n     * @param editorValue A editor field value like Item.system.description.value\n     * @param options TextEditor, enrichHTML.options passed through\n     * @returns Enriched HTML result\n     */\n    async enrichEditorFieldToHTML(editorValue: string, options: any = { async: false }): Promise<string> {\n        return await TextEditor.enrichHTML(editorValue, options);\n    }\n\n    /**\n     * Action limits currently contain limits for all action types. Be it matrix, magic or physical.\n     */\n    _getSortedLimitsForSelect(): Record<string, string> {\n        return Helpers.sortConfigValuesByTranslation(SR6.limits);\n    }\n\n    /**\n     * Sorted (by translation) actor attributes.\n     */\n    _getSortedAttributesForSelect(): Record<string, string> {\n        return Helpers.sortConfigValuesByTranslation(SR6.attributes);\n    }\n\n    /**\n     * Sorted (by translation) active skills either from the owning actor or general configuration.\n     */\n    _getSortedActiveSkillsForSelect() {\n        // Instead of item.parent, use the actorOwner as NestedItems have an actor grand parent.\n        return ActionFlow.sortedActiveSkills(this.item.actorOwner, this.document.system.action?.skill);\n    }\n\n    _getNetworkDevices(): SR6Item[] {\n        // return NetworkDeviceFlow.getNetworkDevices(this.item);\n        return [];\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Activate event listeners using the prepared sheet HTML\n     * @param html -  The prepared HTML object ready to be rendered into the DOM\n     */\n    override activateListeners(html) {\n        super.activateListeners(html);\n\n        Helpers.setupCustomCheckbox(this, html);\n\n        /**\n         * Drag and Drop Handling\n         */\n        //@ts-expect-error\n        this.form.ondragover = (event) => {\n            this._onDragOver(event);\n        }\n        //@ts-expect-error\n        this.form.ondrop = (event) => this._onDrop(event);\n\n        // Active Effect management\n        html.find(\".effect-control\").click(event => onManageActiveEffect(event, this.item));\n\n        /**\n         * General item handling\n         */\n        html.find('.edit-item').click(this._onEditItem.bind(this));\n        html.find('.open-source').on('click', this._onOpenSource.bind(this));\n        html.find('.has-desc').click(this._onListItemToggleDescriptionVisibility.bind(this));\n        html.find('.hidden').hide();\n        html.find('.entity-remove').on('click', this._onEntityRemove.bind(this));\n\n        /**\n         * Contact item specific\n         */\n        html.find('.actor-remove').click(this.handleLinkedActorRemove.bind(this));\n\n        /**\n         * Weapon item specific\n         */\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\n        html.find('select[name=\"change-ammo\"]').on('change', async (event) => this._onAmmoEquip(event.target.value));\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\n        html.find('.ammo-reload').on('click', async (event) => this._onAmmoReload(event, false));\n        html.find('select[name=\"change-clip-type\"]').on('change', async (event) => this._onClipEquip(event.target.value));\n\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\n\n        /**\n         * SIN item specific\n         */\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\n\n        html.find('.network-clear').on('click', this._onRemoveAllNetworkDevices.bind(this));\n        html.find('.network-device-remove').on('click', this._onRemoveNetworkDevice.bind(this));\n\n        // Marks handling\n        html.find('.marks-qty').on('change', this._onMarksQuantityChange.bind(this));\n        html.find('.marks-add-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, 1));\n        html.find('.marks-remove-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, -1));\n        html.find('.marks-delete').on('click', this._onMarksDelete.bind(this));\n        html.find('.marks-clear-all').on('click', this._onMarksClearAll.bind(this));\n\n        // Origin Link handling\n        html.find('.origin-link').on('click', this._onOpenOriginLink.bind(this));\n        html.find('.controller-remove').on('click', this._onControllerRemove.bind(this));\n\n        html.find('.matrix-att-selector').on('change', this._onMatrixAttributeSelected.bind(this));\n\n        // Freshly imported item toggle\n        html.find('.toggle-fresh-import-off').on('click', async (event) => this._toggleFreshImportFlag(event, false));\n\n        html.find('.select-ranged-range-category').on('change', this._onSelectRangedRangeCategory.bind(this));\n        html.find('.select-thrown-range-category').on('change', this._onSelectThrownRangeCategory.bind(this));\n\n        html.find('input[name=\"system.technology.equipped\"').on('change', this._onToggleEquippedDisableOtherDevices.bind(this))\n\n        html.find('.list-item').each(this._addDragSupportToListItemTemplatePartial.bind(this));\n\n        this._activateTagifyListeners(html);\n    }\n\n    /**\n     * User requested removal of the linked actor.\n     */\n    async handleLinkedActorRemove(event: any) {\n        await this.item.update({ 'system.linkedActor': '' });\n    }\n\n    /**\n     * Updating the contacts linked actor.\n     *\n     * @param actor The prepared actor\n     */\n    async updateLinkedActor(actor: SR6Actor) {\n        await this.item.update({ 'system.linkedActor': actor.uuid });\n    }\n\n    _addDragSupportToListItemTemplatePartial(i, item) {\n        if (item.dataset && item.dataset.itemId) {\n            item.setAttribute('draggable', true);\n            item.addEventListener('dragstart', this._onDragStart.bind(this), false);\n        }\n    }\n\n    override async _onDragStart(event) {\n        const element = event.currentTarget;\n        if (element) {\n            // Create drag data object to use\n            const dragData = {\n                actor: this.item.actor,\n                actorId: this.item.actor?.id,\n                itemId: this.item.id,\n                type: '',\n                data: {}\n            };\n\n            switch (element.dataset.itemType) {\n                // if we are dragging an active effect, get the effect from our list of effects and set it in the data transfer\n                case 'ActiveEffect':\n                    {\n                        const effectId = element.dataset.itemId;\n                        const effect = this.item.effects.get(effectId);\n                        if (effect) {\n                            // Prepare data transfer\n                            dragData.type = 'ActiveEffect';\n                            dragData.data = effect; // this may blow up\n\n                            // Set data transfer\n                            event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n                            return;\n                        }\n                    }\n            }\n        }\n        return super._onDragStart(event);\n    }\n\n\n    override async _onDrop(event) {\n        if (!game.items || !game.actors || !game.scenes) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Parse drop data.\n        const data = parseDropData(event);\n        if (!data) return;\n\n        // CASE - Handle dropping of documents directly into the source field like urls and pdfs.\n        const targetElement = event.toElement || event.target;\n        if (targetElement?.name === 'system.description.source') {\n            this.item.setSource(data.uuid);\n            return;\n        }\n\n        // CASE - Handle ActiveEffects\n        if (data.type === 'ActiveEffect') {\n            if (data.itemId === this.item.id) {\n                return; // don't add effects to ourselves\n            }\n            // the effect should be just the data itself\n            const effect = data.data;\n            // delete the id on it so a new one is generated\n            delete effect._id;\n            // add this to the embedded ActiveEffect documents\n            await this.item.createEmbeddedDocuments('ActiveEffect', [effect]);\n\n            return;\n        }\n\n        // CASE - Add items to a weapons modification / ammo\n        if (this.item.isWeapon && data.type === 'Item') {\n            let item;\n            // Case 1 - Data explicitly provided\n            if (data.data) {\n                if (this.item.isOwned && data.actorId === this.item.actor?.id && data.data._id === this.item.id) {\n                    return console.warn('Shadowrun 6e | Cant drop items onto themselves');\n                }\n                item = data;\n                // Case 2 - From a Compendium Pack\n            } else if (data.pack) {\n                item = await Helpers.getEntityFromCollection(data.pack, data.id);\n                // Case 3 - From a World Entity\n            } else {\n                item = await fromUuid(data.uuid);\n            }\n\n            // Provide readable error for failing item retrieval assumptions.\n            if (!item) return console.error('Shadowrun 6e | Item could not be created from DropData', data);\n\n            return await this.item.createNestedItem(item._source);\n        }\n\n        // Add items to hosts WAN.\n        if (this.item.isHost && data.type === 'Actor') {\n            const actor = await fromUuid(data.uuid);\n            if (!actor || !actor.id) return console.error('Shadowrun 6e | Actor could not be retrieved from DropData', data);\n            return await this.item.addIC(actor.id, data.pack);\n        }\n\n        // Add items to a network (PAN/WAN).\n        if (this.item.canBeNetworkController && data.type === 'Item') {\n            const item = await fromUuid(data.uuid) as SR6Item;\n\n            if (!item || !item.id) return console.error('Shadowrun 6e | Item could not be retrieved from DropData', data);\n\n            return await this.item.addNetworkDevice(item);\n        }\n\n        // Add vehicles to a network (PAN/WAN).\n        if (this.item.canBeNetworkController && data.type === 'Actor') {\n            const actor = await fromUuid(data.uuid) as SR6Actor;\n\n            if (!actor || !actor.id) return console.error('Shadowrun 6e | Actor could not be retrieved from DropData', data);\n\n            if (!actor.isVehicle()) {\n                return ui.notifications?.error(game.i18n.localize('SR6.Errors.CanOnlyAddTechnologyItemsToANetwork'));\n            }\n\n            return await this.item.addNetworkDevice(actor);\n        }\n\n        // link actors in existing contacts\n        if (this.item.isContact && data.type === 'Actor') {\n            const actor = await fromUuid(data.uuid) as SR6Actor;\n\n            if (!actor || !actor.id) return console.error('Shadowrun 6e | Actor could not be retrieved from DropData', data);\n\n            return this.updateLinkedActor(actor);\n        }\n    }\n\n    _eventId(event) {\n        event.preventDefault();\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    async _onOpenSource(event) {\n        event.preventDefault();\n        await this.item.openSource();\n    }\n\n    async _onSelectRangedRangeCategory(event) {\n        await this._onSelectRangeCategory(\"system.range.ranges\", event);\n    }\n\n    async _onSelectThrownRangeCategory(event) {\n        await this._onSelectRangeCategory(\"system.thrown.ranges\", event);\n    }\n\n    async _onSelectRangeCategory(key: string, event) {\n        event.stopPropagation();\n        const selectedRangeCategory = event.currentTarget.value as keyof typeof SR6.weaponRangeCategories;\n\n        if (selectedRangeCategory === \"manual\") {\n            await this.item.update({\n                [key]: {\n                    category: selectedRangeCategory,\n                },\n            });\n        } else {\n            const ranges: Omit<RangeData, 'category'> = SR6.weaponRangeCategories[selectedRangeCategory].ranges;\n\n            await this.item.update({\n                [key]: {\n                    ...ranges,\n                    attribute: ranges.attribute || null, //Clear attribute if necessary\n                    category: selectedRangeCategory,\n                },\n            });\n        }\n    }\n\n    //Swap slots (att1, att2, etc.) for ASDF matrix attributes\n    async _onMatrixAttributeSelected(event) {\n        if (!this.item.system.atts) return;\n\n        // sleaze, attack, etc.\n        const selectedAtt = event.currentTarget.value;\n        // att1, att2, etc..\n        const changedSlot = event.currentTarget.dataset.att;\n\n        const oldValue = this.item.system.atts[changedSlot].att;\n\n        let data = {}\n\n        Object.entries(this.item.system.atts).forEach(([slot, { att }]) => {\n            if (slot === changedSlot) {\n                data[`system.atts.${slot}.att`] = selectedAtt;\n            } else if (att === selectedAtt) {\n                data[`system.atts.${slot}.att`] = oldValue;\n            }\n        });\n\n        await this.item.update(data);\n    }\n\n    async _onEditItem(event) {\n        const item = this.item.getOwnedItem(this._eventId(event));\n        if (item) {\n            item.sheet?.render(true);\n        }\n    }\n\n    async _onEntityRemove(event) {\n        event.preventDefault();\n\n        // Grab the data position to remove the correct entity from the list.\n        const entityRemove = $(event.currentTarget).closest('.entity-remove');\n        const list = entityRemove.data('list');\n        const position = entityRemove.data('position');\n\n        if (!list) return;\n\n        switch (list) {\n            // Handle Host item lists...\n            case 'ic':\n                await this.item.removeIC(position);\n                break;\n        }\n    }\n\n    async _onAddLicense(event) {\n        event.preventDefault();\n        await this.item.addNewLicense();\n    }\n\n    async _onRemoveLicense(event) {\n        event.preventDefault();\n        const index = event.currentTarget.dataset.index;\n        if (index >= 0) await this.item.removeLicense(index);\n    }\n\n    async _onWeaponModRemove(event) {\n        await this._onOwnedItemRemove(event);\n    }\n\n    async _onWeaponModEquip(event) {\n        await this.item.equipWeaponMod(this._eventId(event));\n    }\n\n    async _onAddWeaponMod(event) {\n        event.preventDefault();\n        const type = 'modification';\n        // TODO: Move this into DataDefaults...\n        const itemData = {\n            name: `${game.i18n.localize('SR6.New')} ${Helpers.label(game.i18n.localize(SR6.itemTypes[type]))}`,\n            type: type,\n            system: { type: 'weapon' }\n        };\n        // @ts-expect-error\n        const item = new SR6Item(itemData, { parent: this.item });\n        //@ts-expect-error TODO: foundry-vtt-types v10\n        await this.item.createNestedItem(item._source);\n    }\n\n    async _onAmmoReload(event, partialReload: boolean) {\n        event.preventDefault();\n        await this.item.reloadAmmo(partialReload);\n    }\n\n    async _onAmmoRemove(event) {\n        await this._onOwnedItemRemove(event);\n    }\n\n    async _onAmmoEquip(input) {\n        let id;\n\n        if (input.currentTarget) {\n            id = this._eventId(input);\n        } else {\n            id = input;\n        }\n\n        await this.item.equipAmmo(id);\n    }\n\n    async _onAddNewAmmo(event) {\n        event.preventDefault();\n        const type = 'ammo';\n        const itemData = {\n            name: `${game.i18n.localize('SR6.New')} ${Helpers.label(game.i18n.localize(SR6.itemTypes[type]))}`,\n            type: type\n        };\n        // @ts-expect-error\n        const item = new SR6Item(itemData, { parent: this.item });\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        await this.item.createNestedItem(item._source);\n    }\n\n    async _onClipEquip(clipType: string) {\n        if (!clipType || !Object.keys(SR6.weaponCliptypes).includes(clipType)) return;\n\n        const agilityValue = this.item.actor ? this.item.actor.getAttribute('agility').value : 0;\n        await this.item.update({\n            'system.ammo.clip_type': clipType,\n            'system.ammo.partial_reload_value': RangedWeaponRules.partialReload(clipType, agilityValue)\n        }, { render: true });\n    }\n\n    async _onOwnedItemRemove(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.item.deleteOwnedItem(this._eventId(event));\n    }\n\n    async _onRemoveAllNetworkDevices(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.item.removeAllNetworkDevices();\n    }\n\n    async _onRemoveNetworkDevice(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const networkDeviceIndex = Helpers.parseInputToNumber(event.currentTarget.closest('.list-item').dataset.listItemIndex);\n\n        await this.item.removeNetworkDevice(networkDeviceIndex);\n    }\n\n    /**\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    /**\n     * Add a tagify element for an action-modifier dom element.\n     *\n     * Usage: Call method after render with a singular item's html sub-dom-tree.\n     *\n     * Only action items will trigger the creation of a tagify element.\n     *\n     * @param html see DocumentSheet.activateListeners#html param for documentation.\n     */\n    _createActionModifierTagify(html) {\n        const inputElement = html.find('input#action-modifier').get(0);\n\n        if (!inputElement) {\n            console.error('Shadowrun 6e | Action item sheet does not contain an action-modifier input element');\n            return;\n        }\n\n        // Tagify expects this format for localized tags.\n        const whitelist = Object.keys(SR6.modifierTypes).map(modifier => ({\n            value: game.i18n.localize(SR6.modifierTypes[modifier]),\n            id: modifier\n        }));\n\n        // Tagify dropdown should show all whitelist tags.\n        const maxItems = Object.keys(SR6.modifierTypes).length;\n\n        // Use localized label as value, and modifier as the later to be extracted value\n        const modifiers = this.item.system.action?.modifiers ?? [];\n        const tags = modifiers.map(modifier => ({\n            value: game.i18n.localize(SR6.modifierTypes[modifier]),\n            id: modifier\n        }));\n\n        const tagify = createTagify(inputElement, { whitelist, maxItems, tags });\n\n        html.find('input#action-modifier').on('change', async (event) => {\n            const modifiers = tagify.value.map(tag => tag.id);\n            // render would loose tagify input focus. submit on close will save.\n            await this.item.update({ 'system.action.modifiers': modifiers }, { render: false });\n        });\n    }\n\n    /**\n     * Add a tagify element for an action-categories dom element.\n     *\n     * Usage: Call method after render with a singular item's html sub-dom-tree.\n     *\n     * Only action items will trigger the creation of a tagify element.\n     * @param html\n     */\n    _createActionCategoriesTagify(html) {\n        const inputElement = html.find('input#action-categories').get(0) as HTMLInputElement;\n\n        if (!inputElement) {\n            console.error('Shadowrun 6e | Action item sheet does not contain an action-categories input element');\n            return;\n        }\n\n        // Tagify expects this format for localized tags.\n        const whitelist = Object.keys(SR6.actionCategories).map(category => ({\n            value: game.i18n.localize(SR6.actionCategories[category]),\n            id: category\n        }));\n\n        // Tagify dropdown should show all whitelist tags.\n        const maxItems = Object.keys(SR6.actionCategories).length;\n\n        // Use localized label as value, and category as the later to be extracted value\n        const categories = this.item.system.action?.categories ?? [];\n        const tags = categories.map(category => ({\n            value: game.i18n.localize(SR6.actionCategories[category]) ?? category,\n            id: category\n        }));\n\n        const tagify = createTagify(inputElement, { whitelist, maxItems, tags });\n\n        html.find('input#action-categories').on('change', async (event) => {\n            // Custom tags will not have an id, so use value as id.\n            const categories = tagify.value.map(tag => tag.id ?? tag.value);\n            // render would loose tagify input focus. submit on close will save.\n            await this.item.update({ 'system.action.categories': categories }, { render: false });\n        });\n    }\n\n    /**\n     * @private\n     */\n    override async _render(force = false, options = {}) {\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\n        // this.fixStaleRenderedState();\n\n        this._saveScrollPositions();\n        await super._render(force, options);\n        this._restoreScrollPositions();\n    }\n\n    /**\n     * @private\n     */\n    override _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * @private\n     */\n    override _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n\n    async _onMarksQuantityChange(event) {\n        event.stopPropagation();\n\n        if (!this.item.isHost) return;\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const markedIdDocuments = Helpers.getMarkIdDocuments(markId);\n        if (!markedIdDocuments) return;\n        const { scene, target, item } = markedIdDocuments;\n        if (!scene || !target) return; // item can be undefined.\n\n        const marks = parseInt(event.currentTarget.value);\n        await this.item.setMarks(target, marks, { scene, item, overwrite: true });\n    }\n\n    async _onMarksQuantityChangeBy(event, by: number) {\n        event.stopPropagation();\n\n        if (!this.item.isHost) return;\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const markedIdDocuments = Helpers.getMarkIdDocuments(markId);\n        if (!markedIdDocuments) return;\n        const { scene, target, item } = markedIdDocuments;\n        if (!scene || !target) return; // item can be undefined.\n\n        await this.item.setMarks(target, by, { scene, item });\n    }\n\n    async _onMarksDelete(event) {\n        event.stopPropagation();\n\n        if (!this.item.isHost) return;\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.item.clearMark(markId);\n    }\n\n    async _onMarksClearAll(event) {\n        event.stopPropagation();\n\n        if (!this.item.isHost) return;\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.item.clearMarks();\n    }\n\n    async _onOpenOriginLink(event) {\n        event.preventDefault();\n\n        console.log('Shadowrun 6e | Opening PAN/WAN network controller');\n\n        const originLink = event.currentTarget.dataset.originLink;\n        const device = await fromUuid(originLink);\n        if (!device) return;\n\n        // @ts-expect-error\n        device.sheet.render(true);\n    }\n\n    async _onControllerRemove(event) {\n        event.preventDefault();\n\n        await this.item.disconnectFromNetwork();\n    }\n\n    /**\n     * Activate listeners for tagify elements for item types that allow changing action\n     * modifiers.\n     *\n     * @param html The JQuery HTML as given by the activateListeners method.\n     */\n    _activateTagifyListeners(html) {\n        if (!['action', 'metamagic', 'bioware', 'cyberware', 'equipment', 'quality', 'ritual', 'call_in_action', 'sprite_power', 'critter_power', 'adept_power'].includes(this.document.type)) return;\n\n        this._createActionModifierTagify(html);\n        this._createActionCategoriesTagify(html);\n    }\n\n    /**\n     * Show / hide the items description within a sheet item l ist.\n     */\n    async _onListItemToggleDescriptionVisibility(event) {\n        event.preventDefault();\n        const item = $(event.currentTarget).parents('.list-item');\n        const iid = $(item).data().item;\n        const field = item.find('.list-item-description');\n        field.toggle();\n        if (iid) {\n            if (field.is(':visible')) this._shownDesc.push(iid);\n            else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n        }\n    }\n\n    /**\n     * Toggle to isFreshImport property of importFlags for an item\n     *\n     * @param event\n     */\n    async _toggleFreshImportFlag(event, onOff: boolean) {\n        console.debug('Toggling isFreshImport on item to ->', onOff, event);\n        const item = this.item;\n        if (item.system.importFlags) {\n            await item.update({ 'system.importFlags.isFreshImport': onOff });\n        }\n    }\n\n    /**\n     * Clicking on equipped status should trigger unequipping all other devices of the same type.\n     * @param event Click event on the equipped checkbox.\n     */\n    async _onToggleEquippedDisableOtherDevices(event: PointerEvent) {\n        event.preventDefault();\n\n        // Assure owned item device.\n        if (!(this.document.parent instanceof SR6Actor)) return;\n        if (!this.document.isDevice) return;\n        if (!this.document.isEquipped()) return;\n\n        await this.document.parent.equipOnlyOneItemOfType(this.document);\n    }\n}\n", "import {FLAGS, SYSTEM_NAME} from \"../constants\";\nimport TrackType = Shadowrun.TrackType;\n\nexport class SR6Token extends Token {\n    // @ts-expect-error Ignore getBarAttribute from Token\n    override _drawBar(number: number, bar: PIXI.Graphics, data: ReturnType<Token['getBarAttribute']>){\n        const tokenHealthBars = game.settings.get(SYSTEM_NAME, FLAGS.TokenHealthBars);\n        // FoundryVTT draws resource bars as full/good when the value is the\n        // same as the max and empty/bad at 0 (colored along a gradient).\n        // Shadowrun condition trackers count up from 0 to the maximum.\n        // We flip the values from Shadowrun format to FoundryVTT format here\n        // for drawing.\n        if (tokenHealthBars && data && data.attribute.startsWith('track')) {\n            const track = data as unknown as TrackType;\n            track.value = track.max - track.value;\n        }\n        super._drawBar(number, bar, data);\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { FLAGS, SR, SYSTEM_NAME } from \"../constants\";\nimport { CombatRules } from \"../rules/CombatRules\";\nimport { SocketMessage } from \"../sockets\";\nimport SocketMessageData = Shadowrun.SocketMessageData;\n\n/**\n * Foundry combat implementation for Shadowrun5 rules.\n *\n * TODO: Store what combatants already acted and with what initiative base and dice they did. This can be used to alter\n *       initiative score without fully rerolling and maintain proper turn order after an actor raised they ini while\n *       stepping over other actors that already had their action phase in the current initiative pass.\n *       @PDF SR5#160 'Changing Initiative'\n */\nexport class SR6Combat extends Combat {\n    // Flag to prevent initiative from being rerolled\n    skipRollInitiative: boolean = false;\n\n    // Overwrite foundry-vtt-types v9 combatTrackerSettings type definitions.\n    override get settings() {\n        return super.settings as { resource: string, skipDefeated: boolean };\n    }\n\n    get initiativePass(): number {\n        return this.getFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass) as number || SR.combat.INITIAL_INI_PASS;\n    }\n\n    static async setInitiativePass(combat: SR6Combat, pass: number) {\n        await combat.unsetFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass);\n        await combat.setFlag(SYSTEM_NAME, FLAGS.CombatInitiativePass, pass);\n    }\n\n    /**\n     * Use the given actors token to get the combatant.\n     * NOTE: The token must be used, instead of just the actor, as unlinked tokens will all use the same actor id.\n     */\n    getActorCombatant(actor: SR6Actor): undefined | Combatant {\n        const token = actor.getToken();\n        if (!token) return;\n        return this.getCombatantByToken(token.id as string);\n    }\n\n    /**\n     * Add ContextMenu options to CombatTracker Entries -- adds the basic Initiative Subtractions\n     * @param html\n     * @param options\n     */\n    static addCombatTrackerContextOptions(html, options: any[]) {\n        options.push(\n            {\n                name: game.i18n.localize('SR6.COMBAT.RollInitiative'),\n                icon: '<i class=\"fas fa-dice-d6\"></i>',\n                callback: async (li) => {\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR6Combat = game.combat as unknown as SR6Combat;\n                        // Temporarily disable skipRollInitiative to allow rolling\n                        const oldSkipValue = combat.skipRollInitiative;\n                        combat.skipRollInitiative = false;\n                        await combat.rollInitiative(combatant.id);\n                        combat.skipRollInitiative = oldSkipValue;\n                    }\n                },\n            },\n            {\n                name: game.i18n.localize('SR6.COMBAT.ReduceInitByOne'),\n                icon: '<i class=\"fas fa-caret-down\"></i>',\n                callback: async (li) => {\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR6Combat = game.combat as unknown as SR6Combat;\n                        await combat.adjustInitiative(combatant, -1);\n                    }\n                },\n            },\n            {\n                name: game.i18n.localize('SR6.COMBAT.ReduceInitByFive'),\n                icon: '<i class=\"fas fa-angle-down\"></i>',\n                callback: async (li) => {\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR6Combat = game.combat as unknown as SR6Combat;\n                        await combat.adjustInitiative(combatant, -5);\n                    }\n                },\n            },\n            {\n                name: game.i18n.localize('SR6.COMBAT.ReduceInitByTen'),\n                icon: '<i class=\"fas fa-angle-double-down\"></i>',\n                callback: async (li) => {\n                    const combatant = await game.combat?.combatants.get(li.data('combatant-id'));\n                    if (combatant) {\n                        const combat: SR6Combat = game.combat as unknown as SR6Combat;\n                        await combat.adjustInitiative(combatant, -10);\n                    }\n                },\n            },\n        );\n        return options;\n    }\n\n    /**\n     * Helper method to adjust an actors combatants initiative.\n     *\n     * @param actor The actor that should have their ini score adjusted.\n     * @param adjustment The delta to adjust the ini score with.\n     */\n    async adjustActorInitiative(actor: SR6Actor, adjustment: number) {\n        const combatant = this.getActorCombatant(actor);\n        if (!combatant) return;\n\n        await this.adjustInitiative(combatant, adjustment);\n    }\n\n    /**\n     * Adjust a combatants initiative score in combat.\n     *\n     * @param combatant Combatant to adjust\n     * @param adjustment The adjustment that's to be added onto the current ini score.\n     */\n    async adjustInitiative(combatant: string | any, adjustment: number) {\n        combatant = typeof combatant === 'string' ? this.combatants.find((c) => c.id === combatant) : combatant;\n        if (!combatant || typeof combatant === 'string') {\n            console.error('Could not find combatant with id ', combatant);\n            return;\n        }\n        await combatant.update({\n            initiative: Number(combatant.initiative) + adjustment,\n        });\n    }\n\n    /**\n     * Handle the change of an initiative pass. This needs owner permissions on the combat document.\n     * @param combatId\n     */\n    static async handleIniPass(combatId: string) {\n        const combat = game.combats?.get(combatId) as unknown as SR6Combat;\n        if (!combat) return;\n\n        const initiativePass = combat.initiativePass + 1;\n        // Start at the top!\n        const turn = 0;\n\n        // Collect all combatants ini changes for singular update.\n        const combatants: { _id: string | null, initiative: number }[] = [];\n        for (const combatant of combat.combatants) {\n            const initiative = CombatRules.reduceIniResultAfterPass(Number(combatant.initiative));\n\n            combatants.push({\n                _id: combatant.id,\n                initiative\n            });\n        }\n\n        await combat.update({\n            turn,\n            combatants,\n            [`flags.${SYSTEM_NAME}.${FLAGS.CombatInitiativePass}`]: initiativePass\n        });\n\n        await combat.handleActionPhase();\n    }\n\n    /**\n     * Handle the change of a initiative round. This needs owner permission on the combat document.\n     * @param combatId\n     */\n    static async handleNextRound(combatId: string) {\n        const combat = game.combats?.get(combatId) as unknown as SR6Combat;\n        if (!combat) return;\n\n        // Don't call resetAll() as it resets initiative\n        // Instead, just reset what we need\n\n        // Reset actions for all combatants\n        await combat.resetCombatantActions();\n\n        // In Shadowrun 6th Edition, initiative is not rerolled each round\n        // Only roll initiative for combatants who don't have an initiative score yet\n        const unrolledCombatants = combat.combatants.filter(c => c.initiative === null);\n        if (unrolledCombatants.length > 0) {\n            console.log('Shadowrun 6e | Rolling initiative for new combatants only');\n            for (const combatant of unrolledCombatants) {\n                await combat.rollInitiative(combatant.id);\n            }\n        }\n\n        // Prevent any automatic initiative rolling that might happen in the base Combat class\n        combat.skipRollInitiative = true;\n\n        const turn = 0;\n        await combat.update({ turn });\n        await combat.handleActionPhase();\n    }\n\n    /**\n     * Reset actions for all combatants\n     */\n    async resetCombatantActions() {\n        console.log('Shadowrun 6e | Resetting actions for all combatants');\n\n        for (const combatant of this.combatants) {\n            if (!combatant.actor) continue;\n\n            // Only reset actions for actors with initiative\n            if (combatant.actor.system.initiative) {\n                await combatant.actor.resetActions();\n            }\n        }\n    }\n\n    /**\n     * New action phase might need changes on the actor that only the GM can reliable make.\n     */\n    async handleActionPhase() {\n        if (!game.user?.isGM)\n            await this._createNewActionPhaseSocketMessage();\n        else\n            await SR6Combat.handleActionPhase(this.id as string);\n    }\n\n    /**\n     * When combat enters a new combat phase, apply necessary changes.\n     *\n     * This action phase change can occur through phase/turn/round changes.\n     *\n     * @param combatId Combat with the current combatant entering it's next action phase.\n     */\n    static async handleActionPhase(combatId: string) {\n        const combat = game.combats?.get(combatId) as SR6Combat;\n        if (!combat) return;\n\n        const combatant = combat.combatant;\n        if (!combatant) return;\n\n        // Defense modifiers reset on a new action phase.\n        await combatant.actor?.removeDefenseMultiModifier();\n\n        const turnsSinceLastAttackSetting = combatant.getFlag(SYSTEM_NAME, FLAGS.TurnsSinceLastAttack);\n        if (foundry.utils.getType(turnsSinceLastAttackSetting) !== 'number') return await combatant.actor?.clearProgressiveRecoil();\n\n        const turnsSinceLastAttack = Number(turnsSinceLastAttackSetting);\n        if (turnsSinceLastAttack > 0) await combatant.actor?.clearProgressiveRecoil();\n        else await combatant.setFlag(SYSTEM_NAME, FLAGS.TurnsSinceLastAttack, 1);\n    }\n\n    /**\n     * Make sure Shadowrun initiative order is applied.\n     */\n    override setupTurns(): any[] {\n        const turns = super.setupTurns();\n        return turns.sort(SR6Combat.sortByRERIC);\n    }\n\n    /**\n     * Sort combatants by shadowrun6-elysium attribute order of\n     *  - initiative score\n     *  - edge\n     *  - reaction\n     *  - intuition\n     *  - coin toss\n     *\n     * @param left A combatant in order\n     * @param right A combatant in order\n     * @returns A Array.sort result determining sort order: -1, 1, 0\n     */\n    static sortByRERIC(left: Combatant, right: Combatant): number {\n        // Sanitize missing actors by not re-ordering\n        if (!left.actor) return 0;\n        if (!right.actor) return 0;\n\n        // First sort by initiative value if different\n        const leftInit = Number(left.initiative);\n        const rightInit = Number(right.initiative);\n        if (isNaN(leftInit)) return 1;\n        if (isNaN(rightInit)) return -1;\n        if (leftInit > rightInit) return -1;\n        if (leftInit < rightInit) return 1;\n\n        // now we sort by ERIC\n        const genData = (actor: SR6Actor): number[] => {\n            // There are broken scenes out there, which will try setting up a combat without valid actors.\n            if (!actor) return [0, 0, 0, 0];\n            // edge, reaction, intuition, coin flip\n            return [\n                Number(actor.getEdge().value),\n                Number(actor.findAttribute('reaction')?.value),\n                Number(actor.findAttribute('intuition')?.value),\n                new Roll('1d2').evaluate({ async: false }).total as number,\n            ];\n        };\n\n        const leftData = genData(left.actor);\n        const rightData = genData(right.actor);\n        // if we find a difference that isn't 0, return it\n        for (let index = 0; index < leftData.length; index++) {\n            const diff = rightData[index] - leftData[index];\n            if (diff !== 0) return diff;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Return the position in the current ini pass of the next undefeated combatant.\n     */\n    get nextUndefeatedTurnPosition(): number {\n        for (let [turnInPass, combatant] of this.turns.entries()) {\n            // Skipping is only interesting when moving forward.\n            if (this.turn !== null && turnInPass <= this.turn) continue;\n            // @ts-expect-error\n            if (!combatant.defeated && combatant.initiative > 0) {\n                return turnInPass;\n            }\n        }\n        // The current turn is the last undefeated combatant. So go to the end and beyond.\n        return this.turns.length;\n    }\n\n    /**\n     * Return the position in the current ini pass of the next combatant that has an action phase left.\n     */\n    get nextViableTurnPosition(): number {\n        // Start at the next position after the current one.\n        for (let [turnInPass, combatant] of this.turns.entries()) {\n            // Skipping is only interesting when moving forward.\n            if (this.turn !== null && turnInPass <= this.turn) continue;\n            // @ts-expect-error\n            if (combatant.initiative > 0) {\n                return turnInPass;\n            }\n        }\n        // The current turn is the last undefeated combatant. So go to the end and beyond.\n        return this.turns.length;\n    }\n\n    /**\n     * Determine whether the current combat situation (current turn order) needs and can have an initiative pass applied.\n     * @return true means that an initiative pass must be applied\n     */\n    doIniPass(nextTurn: number): boolean {\n        // In Shadowrun 6th Edition, there are no initiative passes\n        return false;\n    }\n\n    /**\n     * After all combatants have had their action phase (click on next 'turn') handle shadowrun rules for\n     * initiative pass and combat turn.\n     *\n     * As long as a combatant still has a positive initiative score left, go to the next pass.\n     *  Raise the Foundry turn and don't raise the Foundry round.\n     * As soon as all combatants have no initiative score left, go to the next combat round.\n     *  Reset the Foundry pass and don't raise the Foundry turn.\n     *\n     * Retrigger Initiative Rolls on each new Foundry round.\n     *\n     *\n     * * @Override\n     */\n    override async nextTurn(): Promise<this | undefined> {\n        // Maybe advance to the next round/init pass\n        let nextRound = this.round;\n        let initiativePass = this.initiativePass;\n        // Get the next viable turn position.\n        let nextTurn = this.settings?.skipDefeated ?\n            this.nextUndefeatedTurnPosition :\n            this.nextViableTurnPosition;\n\n        // Start of the combat Handling\n        if (nextRound === 0 && initiativePass === 0) {\n            await this.startCombat();\n            return;\n        }\n\n        // Just step from one combatant to the next!\n        if (nextTurn < this.turns.length) {\n            await this.update({ turn: nextTurn });\n            await this.handleActionPhase();\n            return;\n        }\n\n        // In Shadowrun 6th Edition, there are no initiative passes\n\n\n        // Initiative Round Handling.\n        // NOTE: It's not checked if the next is needed. This should result in the user noticing the turn going up, when it\n        //       maybe shouldn't and reporting a unhandled combat phase flow case.\n        return this.nextRound();\n    }\n\n    override async startCombat() {\n        // Roll initiative for all combatants.\n        // Disable Foundry behavior of keeping the 'current' combatants turn.\n        // Shadowrun 5 starts at the top of the ini order, this avoids an .update\n        if (game.settings.get(SYSTEM_NAME, FLAGS.OnlyAutoRollNPCInCombat)) {\n            await this.rollNPC({ updateTurn: false });\n        } else {\n            await this.rollAll({ updateTurn: false });\n        }\n\n        // Start at top of the ini order.\n        const turn = 0;\n        const round = SR.combat.INITIAL_INI_ROUND;\n\n        const updateData = {\n            turn,\n            round\n        }\n        await this.update(updateData);\n\n        // Implement super.startCombat behavior.\n        this._playCombatSound(\"startEncounter\");\n        Hooks.callAll(\"combatStart\", this, updateData);\n\n        // After starting combat immediately go to the first action phase.\n        await this.handleActionPhase();\n\n        return this;\n    }\n\n    //@ts-expect-error TODO: foundry-vtt-types v11\n    override _playCombatSound(name: string) {\n    //@ts-expect-error TODO: foundry-vtt-types v11\n        super._playCombatSound(name)\n    }\n\n    override async nextRound(): Promise<any> {\n        // Set skipRollInitiative to true before calling super.nextRound()\n        // This will prevent the base Combat class from rerolling initiative\n        this.skipRollInitiative = true;\n\n        // Let Foundry handle time and some other things.\n        await super.nextRound();\n\n        // Owner permissions are needed to change the shadowrun initiative round.\n        if (!game.user?.isGM) {\n            await this._createDoNextRoundSocketMessage();\n        } else {\n            await SR6Combat.handleNextRound(this.id as string);\n        }\n    }\n\n    /**\n     * Override rollInitiative to prevent rerolling initiative for combatants who already have an initiative score\n     * @param ids The IDs of combatants to roll\n     * @param options Options for the initiative roll\n     */\n    override async rollInitiative(ids: string | string[], options: any = {}): Promise<this> {\n        // Convert to an array of IDs\n        ids = typeof ids === 'string' ? [ids] : ids;\n\n        // If skipRollInitiative is true, only roll for combatants with null initiative\n        if (this.skipRollInitiative) {\n            console.log('Shadowrun 6e | skipRollInitiative is true, only rolling for combatants with null initiative');\n\n            // Filter out combatants who already have an initiative score\n            const combatantsToRoll = ids.filter(id => {\n                const combatant = this.combatants.get(id);\n                return combatant && combatant.initiative === null;\n            });\n\n            // If there are no combatants to roll, return\n            if (combatantsToRoll.length === 0) {\n                console.log('Shadowrun 6e | No combatants need initiative rolls');\n                return this;\n            }\n\n            // Roll initiative for combatants who don't have an initiative score\n            console.log('Shadowrun 6e | Rolling initiative for new combatants only:', combatantsToRoll);\n            return await super.rollInitiative(combatantsToRoll, options);\n        }\n\n        // If skipRollInitiative is false, roll for all specified combatants\n        console.log('Shadowrun 6e | Rolling initiative for all specified combatants:', ids);\n        return await super.rollInitiative(ids, options);\n    }\n\n    /**\n     * This handler handles FoundryVTT hook preUpdateCombatant\n     *\n     * @param combatant The Combatant to update\n     * @param changed The changedData (tends to a diff)\n     * @param options\n     * @param id\n     */\n    static onPreUpdateCombatant(combatant: Combatant, changed, options, id) {\n        console.log('SR6: Elysium | Handle preUpdateCombatant to apply system rules', combatant, changed);\n\n        // Disallow invalid ini scores to be applied by any source.\n        if (changed.initiative) changed.initiative = CombatRules.getValidInitiativeScore(changed.initiative);\n    }\n\n    /**\n     * Alter initiative formula to include initiative pass reduction.\n     *\n     * NOTE: Should this here fail or be buggy, there always is SR6Combat.updateNewCombatants which can be uncommented in SR6Combat.rollInitiative\n     * @deprecated since Foundry 0.8. Kept for possible Foundry 0.7 support. Might just be not needed anymore during 0.8 lifecycle.\n     * @param combatant\n     */\n    _getInitiativeFormula(combatant: Combatant) {\n        if (this.initiativePass === SR.combat.INITIAL_INI_PASS) { // @ts-expect-error\n            return super._getInitiativeFormula(combatant);\n        }\n\n        // Reduce for initiative passes until zero.\n        return SR6Combat._getSystemInitiativeFormula(this.initiativePass);\n    }\n\n    static _getSystemInitiativeBaseFormula() {\n        return String(CONFIG.Combat.initiative.formula || game.system.data.initiative);\n    }\n\n    static _getSystemInitiativeFormula(initiativePass: number): string {\n        initiativePass = initiativePass > 1 ? initiativePass : 1;\n        const baseFormula = SR6Combat._getSystemInitiativeBaseFormula();\n        const ongoingIniPassModified = (initiativePass - 1) * -SR.combat.INI_RESULT_MOD_AFTER_INI_PASS;\n        return `max(${baseFormula} - ${ongoingIniPassModified}[Pass], 0)`;\n    }\n\n    static async _handleDoNextRoundSocketMessage(message: SocketMessageData) {\n        if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\n            console.error(`SR5Combat Socket Message ${FLAGS.DoNextRound} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\n            return;\n        }\n\n        return await SR6Combat.handleNextRound(message.data.id);\n    }\n\n    static async _handleDoInitPassSocketMessage(message: SocketMessageData) {\n        if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\n            console.error(`SR5Combat Socket Message ${FLAGS.DoInitPass} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\n            return;\n        }\n\n        return await SR6Combat.handleIniPass(message.data.id);\n    }\n\n    /**\n     * Apply changes on the given combat for new action phase\n     * @param message\n     */\n    static async _handleDoNewActionPhaseSocketMessage(message: SocketMessageData) {\n        if (!message.data.hasOwnProperty('id') && typeof message.data.id !== 'string') {\n            console.error(`SR5Combat Socket Message ${FLAGS.DoNewActionPhase} data.id must be a string (combat id) but is ${typeof message.data} (${message.data})!`);\n            return;\n        }\n\n        return await SR6Combat.handleActionPhase(message.data.id);\n    }\n\n    async _createDoNextRoundSocketMessage() {\n        await SocketMessage.emitForGM(FLAGS.DoNextRound, { id: this.id });\n    }\n\n    async _createDoIniPassSocketMessage() {\n        await SocketMessage.emitForGM(FLAGS.DoInitPass, { id: this.id });\n    }\n\n    async _createNewActionPhaseSocketMessage() {\n        await SocketMessage.emitForGM(FLAGS.DoNewActionPhase, { id: this.id });\n    }\n\n    override delete(...args): Promise<this | undefined> {\n        // Remove all combat related modifiers.\n        this.combatants.contents.forEach(combatant => combatant.actor?.removeDefenseMultiModifier());\n        return super.delete(...args);\n    }\n}\n\n/**\n * Since Foundry 0.8 Combat._getInitiativeFormula has been moved to Combatant._getInitiativeFormula.\n *\n *  This method enhances Combatant#_getInitiativeFormula. Check hooks.ts#init for when it comes into play.\n *\n *  During initiative roll modify the initiative result depending on the current combats initiative pass.\n */\nexport function _combatantGetInitiativeFormula() {\n    const combat = this.parent;\n    return SR6Combat._getSystemInitiativeFormula(combat.initiativePass);\n}\n", "/**\n * A GM-Tool to keep track of all players overwatch scores\n */\nimport {Helpers} from \"../../helpers\";\n\nexport class OverwatchScoreTracker extends Application {\n    static MatrixOverwatchDiceCount = '2d6';\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'overwatch-score-tracker';\n        options.classes = ['sr6'];\n        options.title = game.i18n.localize('SR6.OverwatchScoreTrackerTitle');\n        options.template = 'systems/shadowrun6-elysium/dist/templates/apps/gmtools/overwatch-score-tracker.html';\n        options.width = 450;\n        options.height = 'auto';\n        options.resizable = true;\n        return options;\n    }\n\n    // Contains only non-user actors added manually by the GM.\n    static addedActors = [];\n\n    getData(options) {\n        // Get list of user character actors\n        const actors = this._prepareCharacterActorsData();\n\n        // get actors manually added to the tracker by GM\n        OverwatchScoreTracker.addedActors.forEach(id => {\n            const actor = game.actors.get(id)\n            if (actor) {\n                actors.push(actor.toObject());\n            }\n        });\n\n        // Reference the currently displayed actors for better access.\n        this.actors = actors;\n\n        return {\n            actors,\n        };\n    }\n\n    _prepareCharacterActorsData() {\n        return game.users.reduce((acc, user) => {\n            if (!user.isGM && user.character) {\n                acc.push(user.character.toObject());\n            }\n            return acc;\n        }, []);\n    }\n\n    activateListeners(html) {\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\n        html.find('.overwatch-score-roll-15-minutes').on('click', this._rollFor15Minutes.bind(this));\n        html.find('.overwatch-score-add-actor').on('click', this._onAddActor.bind(this));\n        html.find('.overwatch-score-delete').on('click', this._onDeleteActor.bind(this));\n    }\n\n    // returns the actor that this event is acting on\n    _getActorFromEvent(event) {\n        const id = $(event.currentTarget).closest('.list-item').data('actorId');\n        if (id) return game.actors.get(id);\n    }\n\n    _onAddActor(event) {\n        event.preventDefault();\n\n        const tokens = Helpers.getControlledTokens();\n        if (tokens.length === 0) {\n            return ui.notifications?.warn(game.i18n.localize('SR6.OverwatchScoreTracker.NotifyNoSelectedTokens'));\n        }\n\n        // Warn user about selected unlinked token actors.\n        const unlinkedActor = tokens.find(token => !token.document.actorLink);\n        if (unlinkedActor !== undefined) {\n            ui.notifications.warn(game.i18n.localize('SR6.OverwatchScoreTracker.OnlyLinkedActorsSupported'));\n        }\n\n        // Add linked token actors.\n        tokens.filter(token => token.document.actorLink).forEach(token => {\n            // Double check that the actor actually lives in the actors collection.\n            const actor = game.actors.get(token.document.actorId);\n            if (!actor) return;\n            if (this._isActorOnTracker(actor)) return;\n\n            OverwatchScoreTracker.addedActors.push(actor.id);\n        });\n\n        this.render();\n    }\n\n    /**\n     * Check if the given actor is already added and displayed on the current tracker.\n     *\n     * @param actor A actors collection actor.\n     * @returns {boolean} Will return true when the given actor already exists.\n     */\n    _isActorOnTracker(actor) {\n        return this.actors.find(actorData => actorData._id === actor.id) !== undefined;\n    }\n\n    _setOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = event.currentTarget.value;\n        if (amount && actor) {\n            actor.setOverwatchScore(amount).then(() => this.render());\n        }\n    }\n\n    _addOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = parseInt(event.currentTarget.dataset.amount);\n        if (amount && actor) {\n            const os = actor.getOverwatchScore();\n            actor.setOverwatchScore(os + amount).then(() => this.render());\n        }\n    }\n\n    _resetOverwatchScore(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            actor.setOverwatchScore(0).then(() => this.render());\n        }\n    }\n\n    /**\n     * Remove the connected actor from the tracker.\n     * @param {*} event\n     */\n    _onDeleteActor(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (!actor) return;\n\n\n        const index = OverwatchScoreTracker.addedActors.indexOf(actor.id);\n        if (index === -1) {\n            ui.notifications?.warn(game.i18n.localize('SR6.OverwatchScoreTracker.CantDeleteUserCharacter'), {localize: true});\n            return;\n        }\n\n        OverwatchScoreTracker.addedActors.splice(index, 1);\n\n        this.render();\n    }\n\n    async _rollFor15Minutes(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            //  use static value so it can be modified in modules\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\n            await roll.evaluate();\n\n            if (roll.total) {\n                const os = actor.getOverwatchScore();\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\n            }\n        }\n    }\n}\n", "import { SR6 } from '../../../config';\n\nexport class Constants {\n    public static readonly MAP_CATEGORY_TO_SKILL = {\n        'Assault Cannons': 'firearms',\n        'Assault Rifles': 'firearms',\n        'Blades': 'close_combat',\n        'Bows': 'exotic_ranged',\n        'Carbines': 'firearms',\n        'Clubs': 'close_combat',\n        'Crossbows': 'exotic_ranged',\n        'Exotic Melee Weapons': 'exotic_melee',\n        'Exotic Ranged Weapons': 'exotic_ranged',\n        'Flamethrowers': 'exotic_ranged',\n        'Grenade Launchers': 'exotic_ranged',\n        'Heavy Machine Guns': 'exotic_ranged',\n        'Heavy Pistols': 'firearms',\n        'Holdouts': 'firearms',\n        'Laser Weapons': 'exotic_ranged',\n        'Light Machine Guns': 'firearms',\n        'Light Pistols': 'firearms',\n        'Machine Pistols': 'firearms',\n        'Medium Machine Guns': 'firearms',\n        'Missile Launchers': 'exotic_ranged',\n        'Shotguns': 'firearms',\n        'Sniper Rifles': 'firearms',\n        'Sporting Rifles': 'firearms',\n        'Submachine Guns': 'firearms',\n        'Tasers': 'firearms',\n        'Unarmed': 'unarmed_combat',\n    };\n    public static readonly MAP_IMPORT_RANGE_CATEGORY_TO_SYSTEM_RANGE_CATEGORY: {\n        [key: string]: Exclude<keyof typeof SR6.weaponRangeCategories, \"manual\">;\n    } = {\n        'Tasers': 'taser',\n        'Holdouts': 'holdOutPistol',\n        'Light Pistols': 'lightPistol',\n        'Heavy Pistols': 'heavyPistol',\n        'Machine Pistols': 'machinePistol',\n        'Submachine Guns': 'smg',\n        'Assault Rifles': 'assaultRifle',\n        'Shotguns': 'shotgunSlug',\n        'Shotguns (slug)': 'shotgunSlug',\n        'Shotguns (flechette)': 'shotgunFlechette',\n        'Sniper Rifles': 'sniperRifle',\n        'Sporting Rifles': 'sportingRifle',\n        'Light Machine Guns': 'lightMachinegun',\n        'Medium/Heavy Machinegun': 'mediumHeavyMachinegun',\n        'Assault Cannons': 'assaultCannon',\n        'Grenade Launchers': 'grenadeLauncher',\n        'Missile Launchers': 'missileLauncher',\n        'Bows': 'bow',\n        'Light Crossbows': 'lightCrossbow',\n        'Medium Crossbows': 'mediumCrossbow',\n        'Heavy Crossbows': 'heavyCrossbow',\n        'Thrown Knife': 'thrownKnife',\n        'Net': 'net',\n        'Shuriken': 'shuriken',\n        'Standard Grenade': 'standardThrownGrenade',\n        'Aerodynamic Grenade': 'aerodynamicThrownGrenade',\n        'Harpoon Gun': 'harpoonGun',\n        'Harpoon Gun (Underwater)': 'harpoonGunUnderwater',\n        'Flamethrowers': 'flamethrower',\n    } as const;\n\n    public static readonly ROOT_IMPORT_FOLDER_NAME = 'SR5e';\n\n    public static readonly MAP_CHUMMER_PROGRAMM_CATEGORY = {\n        'Hacking Programs': 'hacking_program',\n        'Common Programs': 'common_program'\n    }\n}\n", "export abstract class ImportStrategy {\n    public abstract intValue(jsonData: object, key: string, fallback: number | undefined): number;\n    public abstract stringValue(jsonData: object, key: string | number, fallback: string | undefined): string;\n    public abstract objectValue(jsonData: object, key: string | number, fallback: object | null | undefined): object | null;\n}\nexport type ItemComparer = (item: Item) => boolean;\n", "import { ImportHelper } from './ImportHelper';\nimport { ImportStrategy } from './ImportStrategy';\n\nexport class XMLStrategy extends ImportStrategy {\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        try {\n            return parseInt(jsonData[key][ImportHelper.CHAR_KEY]);\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        try {\n            return jsonData[key][ImportHelper.CHAR_KEY];\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        try {\n            return jsonData[key];\n        } catch (e) {\n            if (fallback !== undefined) {\n                return fallback;\n            } else {\n                throw e;\n            }\n        }\n    }\n}\n", "import { ImportStrategy } from './ImportStrategy';\n\nexport class JSONStrategy extends ImportStrategy {\n    public intValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        throw new Error('Unimplemented');\n    }\n\n    public stringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        throw new Error('Unimplemented');\n    }\n\n    public objectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        throw new Error('Unimplemented');\n    }\n}\n", "import { Constants } from '../importer/Constants';\nimport { XMLStrategy } from './XMLStrategy';\nimport { JSONStrategy } from './JSONStrategy';\nimport { ImportStrategy } from './ImportStrategy';\nimport {SR6Item} from \"../../../item/SR6Item\";\n\nexport enum ImportMode {\n    XML = 1,\n    JSON = 2,\n}\nexport enum LookupMode {\n    Directory = 0,\n    Actor = 1,\n}\n\n/**\n * An import helper to standardize data extraction.\n * Mostly conceived to reduced required refactoring if Chummer changes data file layout.\n * Also contains helper methods to safely parse values to appropriate types.\n */\nexport class ImportHelper {\n    public static readonly CHAR_KEY = '_TEXT';\n\n    private static s_Strategy: ImportStrategy = new XMLStrategy();\n\n    public static SetMode(mode: ImportMode) {\n        switch (mode) {\n            case ImportMode.XML:\n                ImportHelper.s_Strategy = new XMLStrategy();\n                break;\n            case ImportMode.JSON:\n                ImportHelper.s_Strategy = new JSONStrategy();\n                break;\n        }\n    }\n\n    private constructor() {}\n\n    /**\n     * Helper method to create a new folder.\n     * @param name The name of the folder.\n     * @param folder The parent folder.\n     * @returns {Promise<Folder>} A promise that resolves with the folder object when the folder is created.\n     */\n    public static async NewFolder(name: string, folder: Folder | null = null) {\n        return await Folder.create({\n            type: 'Item',\n            folder: folder === null ? null : folder.id,\n            name: name,\n        });\n    }\n\n    /**\n     * Get / create a folder at a path in the items directory.\n     *\n     * Traverse path and match folder structure to the last and current path segments.\n     *\n     * @param path The absolute path of the folder.\n     * @param mkdirs If true, will make all folders along the hierarchy if they do not exist.\n     * @returns A promise that will resolve with the found folder.\n     */\n    public static async GetFolderAtPath(path: string, mkdirs: boolean = false): Promise<Folder> {\n        let currentFolder,\n            lastFolder = null;\n        const pathSegments = path.split('/');\n        for (const pathSegment of pathSegments) {\n             // Check if the path structure matches the folder structure.\n            currentFolder = game.folders?.find((folder) => {\n                return folder.folder === lastFolder && folder.name === pathSegment\n            });\n\n            // Only create when allowed to. Otherwise abort with error.\n            if (!currentFolder && !mkdirs) return Promise.reject(`Unable to find folder: ${path}`);\n            // Create the missing folder for the current segment\n            if (!currentFolder) currentFolder = await ImportHelper.NewFolder(pathSegment, lastFolder);\n\n            lastFolder = currentFolder;\n        }\n\n        return Promise.resolve(currentFolder);\n    }\n\n    /**\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found\n     * or is unable to be parsed to an integer.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static IntValue(jsonData: object, key: string, fallback: number | undefined = undefined): number {\n        return ImportHelper.s_Strategy.intValue(jsonData, key, fallback);\n    }\n\n    /**\n     * Get a value from the the provided jsonData, optionally returning a default value if it is not found.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static StringValue(jsonData: object, key: string | number, fallback: string | undefined = undefined): string {\n        return ImportHelper.s_Strategy.stringValue(jsonData, key, fallback);\n    }\n\n    /**\n     * Get an object from the the provided jsonData, optionally returning a default value if it is not found.\n     * @param jsonData The data to get the keyed value in.\n     * @param key The key to check for the value under.\n     * @param fallback An optional default value to return if the key is not found.\n     */\n    public static ObjectValue(jsonData: object, key: string | number, fallback: object | null | undefined = undefined): object | null {\n        return ImportHelper.s_Strategy.objectValue(jsonData, key, fallback);\n    }\n\n    public static findItem(nameOrCmp: string | ItemComparer): SR6Item {\n        let result: any | null;\n        if (typeof nameOrCmp === 'string') {\n            result = game.items?.find((item) => item.name == nameOrCmp);\n        } else {\n            result = game.items?.find(nameOrCmp);\n        }\n        return result;\n    }\n\n    public static TranslateCategory(name, jsonCategoryTranslations?) {\n        if (jsonCategoryTranslations && jsonCategoryTranslations.hasOwnProperty(name)) {\n            return jsonCategoryTranslations[name];\n        }\n\n        return name;\n    }\n    public static async MakeCategoryFolders(\n        jsonData: object,\n        path: string,\n        jsonCategoryTranslations?: object | undefined,\n    ): Promise<{ [name: string]: Folder }> {\n        let folders = {};\n        let jsonCategories = jsonData['categories']['category'];\n\n        for (let i = 0; i < jsonCategories.length; i++) {\n            let categoryName = jsonCategories[i][ImportHelper.CHAR_KEY];\n            // use untranslated category name for easier mapping during DataImporter.Parse implementations.\n            let origCategoryName = categoryName;\n            categoryName = ImportHelper.TranslateCategory(categoryName, jsonCategoryTranslations);\n            folders[origCategoryName.toLowerCase()] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${path}/${categoryName}`, true);\n        }\n\n        return folders;\n    }\n\n    /** Extract the correct <chummer file=\"${dataFileName}>[...]</chummer> element from xx-xx_data.xml translations.\n     *\n     * @param jsoni18n\n     * @param dataFileName Expected translation target file name\n     */\n    public static ExtractDataFileTranslation(jsoni18n, dataFileName): object {\n        for (let i = 0; i < jsoni18n.length; i++) {\n            const translation = jsoni18n[i];\n            if (translation.$.file === dataFileName) {\n                return translation;\n            }\n        }\n        return {};\n    }\n\n    /** Extract categories translations within xx-xx_data.xml <chummer/> translation subset.\n     *\n     *  Note: Not all file translations provide categories.\n     *\n     * @param jsonChummeri18n Translations as given by ExtractDataFileTranslations\n     */\n    public static ExtractCategoriesTranslation(jsonChummeri18n) {\n        const categoryTranslations = {};\n        if (jsonChummeri18n && jsonChummeri18n.hasOwnProperty('categories')) {\n            jsonChummeri18n.categories.category.forEach((category) => {\n                const name = category[ImportHelper.CHAR_KEY];\n                const translate = category.$.translate;\n                categoryTranslations[name] = translate;\n            });\n        }\n        return categoryTranslations;\n    }\n\n    /** Extract item type translations within xx-xx_data.xml <chummer/> translation subset.\n     *\n     * @param jsonItemsi18n Translations as given by ExtractDataFileTranslations\n     * @param typeKey The item type to translate. Tends to be plural.\n     * @param listKey The item to translate. Tends to be singular.\n     */\n    public static ExtractItemTranslation(jsonItemsi18n, typeKey, listKey) {\n        const itemTranslation = {};\n        if (jsonItemsi18n && jsonItemsi18n[typeKey] && jsonItemsi18n[typeKey][listKey] && jsonItemsi18n[typeKey][listKey].length > 0) {\n            jsonItemsi18n[typeKey][listKey].forEach((item) => {\n                const name = item.name[ImportHelper.CHAR_KEY];\n                const translate = item.translate[ImportHelper.CHAR_KEY];\n                const altpage = item.altpage[ImportHelper.CHAR_KEY];\n                itemTranslation[name] = { translate, altpage };\n            });\n        }\n\n        return itemTranslation;\n    }\n\n    static MapNameToTranslationKey(translationMap, name, key, fallbackValue = ''): string {\n        if (translationMap && translationMap.hasOwnProperty(name) && translationMap[name].hasOwnProperty(key)) {\n            return translationMap[name][key];\n        }\n\n        return fallbackValue;\n    }\n\n    public static MapNameToTranslation(translationMap, name): string {\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'translate', name);\n    }\n\n    public static MapNameToPageSource(translationMap, name, fallback='?'): string {\n        return ImportHelper.MapNameToTranslationKey(translationMap, name, 'altpage', fallback);\n    }\n}\nexport type ItemComparer = (item: Item) => boolean;\n", "import { SR6 } from \"../../config\";\nimport { FLAGS, SYSTEM_NAME } from './../../constants';\n\nexport async function getIconFiles(): Promise<string[]> {\n\n    if (!game.user?.can(\"FILES_BROWSE\")) {\n        return []\n    }\n\n    // Icon locations\n    const imgFolder = game.settings.get(SYSTEM_NAME, FLAGS.ImportIconFolder) as string || \"systems/shadowrun6-elysium/dist/icons/importer/\";\n    const folderList = await FilePicker.browse(\"data\", imgFolder).then(picker => picker.dirs);\n    let fileList = await FilePicker.browse(\"data\", imgFolder).then(picker => picker.files);\n\n    for (const folder of folderList) {\n        const newFiles = await FilePicker.browse(\"data\", folder).then(picker => picker.files);\n        fileList = fileList.concat(newFiles);\n    }\n\n    return fileList\n}\n\nexport async function iconAssign(importFlags: Shadowrun.ImportFlagData, system: Shadowrun.ShadowrunItemDataData, iconList: string[]): Promise<string> {\n\n    const defaultImg = \"icons/svg/item-bag.svg\";\n    const imgFolder = game.settings.get(SYSTEM_NAME, FLAGS.ImportIconFolder) as string || \"systems/shadowrun6-elysium/dist/icons/importer/\";\n    const imgExtensionOptions = ['.svg', '.webp', '.png', '.jpg', '.jpeg', '.avif'];\n    const imgName = importFlags.name;\n    const imgType = importFlags.type;\n    const imgSubType = importFlags.subType;\n    const useOverrides = game.settings.get(SYSTEM_NAME, FLAGS.UseImportIconOverrides) as boolean;\n\n    // Get the override, if any\n    let override = ''\n    if (imgSubType && useOverrides) override = SR6.itemSubTypeIconOverrides[imgType][imgSubType];\n\n    // Priority of file names to check\n    let fileNamePriority = [\n        imgFolder + override,\n        imgFolder + imgType + (imgSubType ? '/' : '') + imgSubType,\n        imgFolder + imgType + '/' + imgType,\n        imgFolder + imgSubType,\n        imgFolder + imgType\n    ]\n    switch (imgType) {\n        case 'armor':\n            // TODO: Add separation by if it's an accessory\n\n            break;\n\n        case 'weapon':\n            fileNamePriority = [\n                imgFolder + override,\n                imgFolder + imgType + (imgSubType ? '/' : '') + imgSubType,\n                imgFolder + imgType + '/' + system.category,\n                imgFolder + imgType + '/' + imgType,\n                imgFolder + imgSubType,\n                imgFolder + imgType\n            ]\n            break;\n\n        default:\n            break;\n    }\n\n    // Run through potential file names, taking the first one that has an icon that exists\n    for (const iconFileName of fileNamePriority) {\n        for (const imgExtension of imgExtensionOptions) {\n            const withExtension = iconFileName + imgExtension;\n            if (iconList.includes(withExtension)) {\n                return withExtension\n            }\n        }\n    }\n\n    return defaultImg\n}\n", "import { DataDefaults } from '.././../../data/DataDefaults';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport * as IconAssign from '../../../apps/iconAssigner/iconAssign';\nimport { SR6 } from \"../../../config\";\n\nconst xml2js = require('xml2js');\n\n/**\n * The most basic chummer item data importer, meant to handle one or more Chummer5a data <type>.xml file.\n *\n * Generic type ItemDataType is the items data type DataImporter creates per entry in that Chummer5a data .xml file.\n */\nexport abstract class DataImporter<ItemDataType, ItemSystemDataType> {\n    public abstract files: string[];\n    public static jsoni18n: any;\n    public categoryTranslations: any;\n    public itemTranslations: any;\n    public static unsupportedBooks: string[] = ['2050'];\n    public iconList: string[];\n    public static SR6: object = SR6;\n\n    // Used to filter down a files entries based on category.\n    // See filterObjects for use.\n    // Leave on null to support all categories.\n    public unsupportedCategories: string[]|null = [];\n\n    /**\n     * Get complete item data.\n     *\n     * NOTE: We use temporary items to have a full set of item data instead of just\n     *       system model data that game.model.Item would give us.\n     */\n    public GetDefaultData({type}:{type:any}) {\n        return DataDefaults.baseItemData<ItemDataType, ItemSystemDataType>({type});\n    }\n\n    /**\n     *\n     * @param jsonObject JSON Data with all data translations for one language.\n     */\n    public static CanParseI18n(jsonObject: any): boolean {\n        return jsonObject.hasOwnProperty('chummer') && jsonObject.chummer.length > 0 && jsonObject.chummer[0].$.hasOwnProperty('file');\n    }\n\n    /**\n     * Stores translations as a whole for all implementing classes to extract from without reparsing.\n     * @param jsonObject JSON Data with all data translations for one language.\n     */\n    public static ParseTranslation(jsonObject: object) {\n        if (jsonObject && jsonObject.hasOwnProperty('chummer')) {\n            DataImporter.jsoni18n = jsonObject['chummer'];\n        }\n    }\n    /**\n     * Implementing classes can use ExtractTranslation to only extract needed translations.\n     */\n    public abstract ExtractTranslation(fileName?: string);\n\n    /**\n     * Validate if this importer is capable of parsing the provided JSON data.\n     * @param jsonObject JSON data to check import capability for.\n     * @returns boolean True if the importer is capable of parsing the provided XML data.\n     */\n    public abstract CanParse(jsonObject: object): boolean;\n\n    /**\n     * Parse the specified jsonObject and return Item representations.\n     * @param chummerData The JSON data to parse.\n     * @returns An array of created objects.\n     */\n    public abstract Parse(chummerData: object, setIcons: boolean): Promise<Item>;\n\n    /**\n     * Get the appropriate default icon\n     * @param importFlags The importFlags data of an item\n     * @param system The item's system data\n     */\n    public iconAssign(importFlags: Shadowrun.ImportFlagData, system: any, iconList: string[]): Promise<string> {\n        // if (!this.iconList) this.getIconFiles();\n        return IconAssign.iconAssign(importFlags, system, iconList);\n    }\n\n    /**\n     * Gets a list of icons available in the importer's folder\n     */\n    public async getIconFiles(): Promise<string[]> {\n        return IconAssign.getIconFiles();\n    }\n\n    /**\n     * Reformat the name or subtype name so it matches the categories in config.ts\n     * @param name The item's name or subtype name to reformat\n     */\n    public formatAsSlug(name: string): string {\n        return name.trim().toLowerCase().replace((/'|,|\\[|\\]|\\(|\\)/g), '').split((/-|\\s|\\//g)).join('-');\n    }\n\n    /**\n     * Set the subtype\n     * @param name The item's English name\n     * @param type The item's type\n     * @param subType The item's subtype\n     */\n    public genImportFlags(name: string, type: string, subType: string): Shadowrun.ImportFlagData {\n        const flags = {\n            name: this.formatAsSlug(name), // original english name\n            type: type,\n            subType: '',\n            isFreshImport: true\n        }\n        if (subType && Object.keys(SR6.itemSubTypeIconOverrides[type]).includes(subType)) {\n            flags.subType = subType;\n        }\n        return flags;\n    }\n\n    /**\n     * Parse an XML string into a JSON object.\n     * @param xmlString The string to parse as XML.\n     * @returns A json object converted from the string.\n     */\n    public static async xml2json(xmlString: string): Promise<object> {\n        const parser = xml2js.Parser({\n            explicitArray: false,\n            explicitCharkey: true,\n            charkey: ImportHelper.CHAR_KEY,\n        });\n\n        return (await parser.parseStringPromise(xmlString))['chummer'];\n    }\n\n    public static unsupportedBookSource(jsonObject) {\n        if (!jsonObject.hasOwnProperty('source')) return false;\n        const source = ImportHelper.StringValue(jsonObject, 'source', '');\n        return DataImporter.unsupportedBooks.includes(source);\n    }\n\n    public static unsupportedEntry(jsonObject) {\n        if (DataImporter.unsupportedBookSource(jsonObject)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Filter down objects to those actaully imported.\n     *\n     * Sometimes a single Chummer xml file contains mulitple 'categories' that don't mix with system types\n     *\n     * @param objects\n     * @returns A subset of objects\n     */\n    filterObjects(objects: any[]) {\n        if (!this.unsupportedCategories) return objects;\n        //@ts-expect-error\n        return objects.filter(object => !this.unsupportedCategories.includes(ImportHelper.StringValue(object, 'category', '')));\n    }\n}\n", "import { ImportHelper } from \"../helper/ImportHelper\";\nimport { DataImporter } from \"./DataImporter\";\nimport { Constants } from './Constants';\n\n/**\n * Programs are part of the Chummer5 gear.xml\n */\nexport class ProgramImporter extends DataImporter<Shadowrun.ProgramItemData, Shadowrun.ProgramData> {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    ExtractTranslation(fileName?: string) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    filterGearToPrograms(jsonObject: object) {\n        const categories = [\n            'Hacking Programs',\n            'Common Programs',\n        ]\n\n        return jsonObject['gears']['gear'].filter(gear => categories.includes(ImportHelper.StringValue(gear, 'category', '')));\n    }\n\n    async parsePrograms(programs: object[], setIcons: boolean) {\n        const items: Shadowrun.ProgramItemData[] = [];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'program';\n\n        for (const program of programs) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(program)) continue;\n\n            // Create the item\n            const item = this.GetDefaultData({type: parserType});\n            item.name = ImportHelper.StringValue(program, 'name');\n            item.system.type = Constants.MAP_CHUMMER_PROGRAMM_CATEGORY[ImportHelper.StringValue(program, 'category')]\n\n            // Get the program category\n            const categoryEN = ImportHelper.StringValue(program, 'category')\n\n            // Get the item's folder information\n            const category = ImportHelper.TranslateCategory(categoryEN, this.categoryTranslations).replace('/', ' ');\n            let categoryFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR6.Programs')}/${category}`, true);\n            //@ts-expect-error TODO: foundry-vtt-types v10\n            item.folder = categoryFolder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, item.system.type);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Finish the importing\n            item.system.technology.rating = ImportHelper.IntValue(program, 'rating', 0);\n            item.system.description.source = `${ImportHelper.StringValue(program, 'source')} ${ImportHelper.MapNameToPageSource(this.itemTranslations, ImportHelper.StringValue(program, 'name'), ImportHelper.StringValue(program, 'page'))}`;\n            item.system.technology.availability = ImportHelper.StringValue(program, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(program, 'cost', 0);\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            items.push(item);\n        }\n\n        return items;\n    }\n\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const programs = this.filterGearToPrograms(jsonObject);\n        const items = await this.parsePrograms(programs, setIcons);\n        // @ts-expect-error I have bigger issues than fully typing this.\n        return await Item.create(items);\n    }\n}\n", "export abstract class Parser<TResult> {\n    public abstract Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult;\n}\n", "import { Parser } from '../Parser';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport ShadowrunItemData = Shadowrun.ShadowrunItemData;\n\nexport abstract class ItemParserBase<TResult extends ShadowrunItemData> extends Parser<TResult> {\n    Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\n        item.name = ImportHelper.StringValue(jsonData, 'name');\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return item;\n    }\n}\n", "import { ItemParserBase } from './ItemParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport ShadowrunTechnologyItemData = Shadowrun.ShadowrunTechnologyItemData;\n\nexport abstract class TechnologyItemParserBase<TResult extends ShadowrunTechnologyItemData> extends ItemParserBase<TResult> {\n    override Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        item.system.technology.availability = ImportHelper.StringValue(jsonData, 'avail', '0');\n        item.system.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\n        item.system.technology.rating = ImportHelper.IntValue(jsonData, 'rating', 0);\n\n        return item;\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { Constants } from '../../importer/Constants';\nimport WeaponCategory = Shadowrun.WeaponCategory;\nimport SkillName = Shadowrun.SkillName;\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport WeaponItemData = Shadowrun.WeaponItemData;\nimport DamageElement = Shadowrun.DamageElement;\nimport DamageType = Shadowrun.DamageType;\nimport { DataDefaults } from '../../../../data/DataDefaults';\nimport PhysicalAttribute = Shadowrun.PhysicalAttribute;\nimport DamageData = Shadowrun.DamageData;\nimport { SR6 } from '../../../../config';\nimport RangeData = Shadowrun.RangeData;\n\nexport class WeaponParserBase extends TechnologyItemParserBase<WeaponItemData> {\n    private GetSkill(weaponJson: object): SkillName {\n        if (weaponJson.hasOwnProperty('useskill')) {\n            let jsonSkill = ImportHelper.StringValue(weaponJson, 'useskill');\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(jsonSkill)) {\n                return Constants.MAP_CATEGORY_TO_SKILL[jsonSkill];\n            }\n            return jsonSkill.replace(/[\\s\\-]/g, '_').toLowerCase();\n        } else {\n            let category = ImportHelper.StringValue(weaponJson, 'category');\n            if (Constants.MAP_CATEGORY_TO_SKILL.hasOwnProperty(category)) {\n                return Constants.MAP_CATEGORY_TO_SKILL[category];\n            }\n\n            let type = ImportHelper.StringValue(weaponJson, 'type').toLowerCase();\n            return type === 'ranged' ? 'exotic_range' : 'exotic_melee';\n        }\n    }\n\n    public static GetWeaponType(weaponJson: object): WeaponCategory {\n        let type = ImportHelper.StringValue(weaponJson, 'type');\n        //melee is the least specific, all melee entries are accurate\n        if (type === 'Melee') {\n            return 'melee';\n        } else {\n            // skill takes priorities over category\n            if (weaponJson.hasOwnProperty('useskill')) {\n                let skill = ImportHelper.StringValue(weaponJson, 'useskill');\n                if (skill === 'Throwing Weapons') return 'thrown';\n            }\n\n            // category is the fallback\n            let category = ImportHelper.StringValue(weaponJson, 'category');\n            if (category === 'Throwing Weapons') return 'thrown';\n            // ranged is everything else\n            return 'range';\n        }\n    }\n\n    public override Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        let category = ImportHelper.StringValue(jsonData, 'category');\n        // A single item does not meet normal rules, thanks Chummer!\n        // TODO: Check these rules after localization using a generic, non-english approach.\n        if (category === 'Hold-outs') {\n            category = 'Holdouts';\n        }\n\n        item.system.category = WeaponParserBase.GetWeaponType(jsonData);\n        item.system.subcategory = category.toLowerCase();\n\n        item.system.action.skill = this.GetSkill(jsonData);\n        item.system.action.damage = this.GetDamage(jsonData);\n\n        item.system.action.limit.value = ImportHelper.IntValue(jsonData, 'accuracy');\n        item.system.action.limit.base = ImportHelper.IntValue(jsonData, 'accuracy');\n\n        item.system.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal');\n\n        return item;\n    }\n\n    protected GetDamage(jsonData: object): DamageData {\n        const jsonDamage = ImportHelper.StringValue(jsonData, 'damage');\n        // ex. 15S(e)\n        const simpleDamage = /^([0-9]+)([PSM])? ?(\\([a-zA-Z]+\\))?/g.exec(jsonDamage);\n        // ex. ({STR}+1)P(fire)\n        const strengthDamage = /^\\({STR}([+-]?[0-9]*)\\)([PSM])? ?(\\([a-zA-Z]+\\))?/g.exec(jsonDamage);\n\n        let damageType: DamageType = '';\n        let damageAttribute: PhysicalAttribute | '' = '';\n        let damageBase: number = 0;\n        let damageElement: DamageElement = '';\n\n        if(simpleDamage !== null) {\n            damageAttribute = '';\n            damageBase = parseInt(simpleDamage[1], 10);\n            damageType = this.parseDamageType(simpleDamage[2]);\n            damageElement = this.parseDamageElement(simpleDamage[3])\n        } else if (strengthDamage !== null) {\n            damageAttribute = 'strength';\n            damageBase = parseInt(strengthDamage[1], 10) || 0;\n            damageType = this.parseDamageType(strengthDamage[2]);\n            damageElement = this.parseDamageElement(strengthDamage[3]);\n        }\n\n        const damageAp = ImportHelper.IntValue(jsonData, 'ap', 0);\n\n        const partialDamageData: RecursivePartial<DamageData> = {\n            type: {\n                base: damageType || 'physical',\n                value: damageType || 'physical',\n            },\n            base: damageBase,\n            value: damageBase,\n            ap: {\n                base: damageAp,\n                value: damageAp,\n                mod: [],\n            },\n            attribute: damageAttribute,\n            element: {\n                base: damageElement,\n                value: damageElement,\n            }\n        }\n        return DataDefaults.damageData(partialDamageData);\n    }\n\n    protected parseDamageType(parsedType: string | undefined): DamageType {\n        switch(parsedType) {\n            case 'S':\n                return 'stun';\n            case 'M':\n                return 'matrix';\n            case 'P':\n                return 'physical';\n            default:\n                return '';\n        }\n    }\n\n    protected parseDamageElement(parsedElement: string | undefined): DamageElement {\n        switch(parsedElement?.toLowerCase()) {\n            case '(e)':\n                return 'electricity';\n            case '(fire)':\n                return 'fire';\n            default:\n                return '';\n        }\n    }\n\n    protected GetRangeDataFromImportedCategory(category: string): RangeData|undefined {\n        const systemRangeCategory: Exclude<keyof typeof SR6.weaponRangeCategories, \"manual\"> | undefined = Constants.MAP_IMPORT_RANGE_CATEGORY_TO_SYSTEM_RANGE_CATEGORY[category];\n        if(systemRangeCategory === undefined) {\n            return undefined;\n        }\n        return {\n            ...SR6.weaponRangeCategories[systemRangeCategory].ranges,\n            category: systemRangeCategory,\n        };\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport WeaponItemData = Shadowrun.WeaponItemData;\nimport { DataDefaults } from '../../../../data/DataDefaults';\n\nexport class RangedParser extends WeaponParserBase {\n    protected GetAmmo(weaponJson: object) {\n        let jsonAmmo = ImportHelper.StringValue(weaponJson, 'ammo');\n        let match = jsonAmmo.match(/([0-9]+)/g)?.[0];\n        return match !== undefined ? parseInt(match) : 0;\n    }\n\n    override Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        // Some new weapons don't have any rc defined in XML.\n        if (jsonData.hasOwnProperty('rc')) {\n            item.system.range.rc.base = ImportHelper.IntValue(jsonData, 'rc');\n            item.system.range.rc.value = ImportHelper.IntValue(jsonData, 'rc');\n        } else {\n            item.system.range.rc.base = 0;\n            item.system.range.rc.value = 0;\n        }\n\n        const rangeCategory = ImportHelper.StringValue(jsonData, jsonData.hasOwnProperty('range') ? 'range' : 'category');\n        item.system.range.ranges = DataDefaults.weaponRangeData(this.GetRangeDataFromImportedCategory(rangeCategory));\n\n        item.system.ammo.current.value = this.GetAmmo(jsonData);\n        item.system.ammo.current.max = this.GetAmmo(jsonData);\n\n        const modeData = ImportHelper.StringValue(jsonData, 'mode');\n        item.system.range.modes = {\n            single_shot: modeData.includes('SS'),\n            semi_auto: modeData.includes('SA'),\n            burst_fire: modeData.includes('BF'),\n            full_auto: modeData.includes('FA'),\n        };\n\n        return item;\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport WeaponItemData = Shadowrun.WeaponItemData;\n\nexport class MeleeParser extends WeaponParserBase {\n    override Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        item.system.melee.reach = ImportHelper.IntValue(jsonData, 'reach');\n\n        // Check if the weapon has a specific attribute set\n        const attribute = ImportHelper.StringValue(jsonData, 'attribute');\n        if (attribute === 'agility') {\n            item.system.melee.attribute = 'agility';\n        }\n\n        return item;\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { WeaponParserBase } from './WeaponParserBase';\nimport BlastData = Shadowrun.BlastData;\nimport WeaponItemData = Shadowrun.WeaponItemData;\nimport { DataDefaults } from '../../../../data/DataDefaults';\n\nexport class ThrownParser extends WeaponParserBase {\n    public GetBlast(jsonData: object, item: WeaponItemData): BlastData {\n        let blastData: BlastData = {\n            radius: 0,\n            dropoff: 0,\n        };\n\n        let blastCode = ImportHelper.StringValue(jsonData, 'damage');\n\n        let radiusMatch = blastCode.match(/([0-9]+m)/)?.[0];\n        if (radiusMatch !== undefined) {\n            radiusMatch = radiusMatch.match(/[0-9]+/)?.[0];\n            if (radiusMatch !== undefined) {\n                blastData.radius = parseInt(radiusMatch);\n            }\n        }\n\n        let dropoffMatch = blastCode.match(/(-[0-9]+\\/m)/)?.[0];\n        if (dropoffMatch !== undefined) {\n            dropoffMatch = dropoffMatch.match(/-[0-9]+/)?.[0];\n            if (dropoffMatch !== undefined) {\n                blastData.dropoff = parseInt(dropoffMatch);\n            }\n        }\n\n        if (blastData.dropoff && !blastData.radius) {\n            blastData.radius = -(item.system.action.damage.base / blastData.dropoff);\n        }\n\n        return blastData;\n    }\n\n    override Parse(jsonData: object, item: WeaponItemData, jsonTranslation?: object): WeaponItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        const rangeCategory = ImportHelper.StringValue(jsonData, jsonData.hasOwnProperty('range') ? 'range' : 'category');\n        item.system.thrown.ranges = DataDefaults.weaponRangeData(this.GetRangeDataFromImportedCategory(rangeCategory));\n\n        item.system.thrown.blast = this.GetBlast(jsonData, item);\n\n        return item;\n    }\n}\n", "import { Parser } from './Parser';\nimport { ImportHelper } from '../helper/ImportHelper';\n\nexport class ParserMap<TResult> extends Parser<TResult> {\n    private readonly m_BranchKey: string | BranchFunc<TResult>;\n    private readonly m_Map: Map<string, Parser<TResult>>;\n\n    public constructor(branchKey: string | BranchFunc<TResult>, elements: CArg<TResult>[]) {\n        super();\n\n        this.m_BranchKey = branchKey;\n\n        this.m_Map = new Map();\n        for (const { key, value } of elements) {\n            this.m_Map.set(key, value);\n        }\n    }\n\n    public Parse(jsonData: object, item: TResult, jsonTranslation?: object): TResult {\n        let key;\n        if (typeof this.m_BranchKey === 'function') {\n            key = this.m_BranchKey(jsonData);\n        } else {\n            key = this.m_BranchKey;\n            key = ImportHelper.StringValue(jsonData, key);\n        }\n\n        const parser = this.m_Map.get(key);\n        if (parser === undefined) {\n            console.warn(`Could not find mapped parser for category ${key}.`);\n            return item;\n        }\n        return parser.Parse(jsonData, item, jsonTranslation);\n    }\n}\n\ntype CArg<TResult> = {\n    key: string;\n    value: Parser<TResult>;\n};\ntype BranchFunc<TResult> = (TResult) => string;\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { RangedParser } from '../parser/weapon/RangedParser';\nimport { MeleeParser } from '../parser/weapon/MeleeParser';\nimport { ThrownParser } from '../parser/weapon/ThrownParser';\nimport { ParserMap } from '../parser/ParserMap';\nimport { WeaponParserBase } from '../parser/weapon/WeaponParserBase';\nimport { DataDefaults } from '../../../data/DataDefaults';\nimport WeaponItemData = Shadowrun.WeaponItemData;\nimport WeaponData = Shadowrun.WeaponData;\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class WeaponImporter extends DataImporter<WeaponItemData, WeaponData> {\n    public override categoryTranslations: any;\n    public override itemTranslations: any;\n    public files = ['weapons.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('weapons') && jsonObject['weapons'].hasOwnProperty('weapon');\n    }\n\n    public override GetDefaultData({ type }: { type: any; }): WeaponItemData {\n        const systemData = {action: {type: 'varies', attribute: 'agility'}} as WeaponData;\n        return DataDefaults.baseItemData<WeaponItemData, WeaponData>({type}, systemData);\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonWeaponi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonWeaponi18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponi18n, 'weapons', 'weapon');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Weapons', this.categoryTranslations);\n\n        folders['gear'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Gear`, true);\n        folders['quality'] = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Weapons/Quality`, true);\n\n        const parser = new ParserMap<WeaponItemData>(WeaponParserBase.GetWeaponType, [\n            { key: 'range', value: new RangedParser() },\n            { key: 'melee', value: new MeleeParser() },\n            { key: 'thrown', value: new ThrownParser() },\n        ]);\n\n        let items: WeaponItemData[] = [];\n        let jsonDatas = jsonObject['weapons']['weapon'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'weapon';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported and the correct category\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}), this.itemTranslations);\n            // @ts-expect-error // TODO: Foundry Where is my foundry base data?\n            item.folder = folders[item.system.subcategory].id;\n\n            // Figure out item subtype\n            let subType = '';\n            // range/melee/thrown\n            if (item.system.category) {\n                subType = this.formatAsSlug(item.system.category);\n            }\n            // exception for thrown weapons and explosives\n            const weaponCategory = this.formatAsSlug(item.system.subcategory);\n            if (!(subType && ( weaponCategory == 'gear'))) {\n                subType = weaponCategory;\n            }\n            // deal with explosives and their weird formatting\n            if (weaponCategory == 'gear' && item.name.includes(':')) {\n                subType = this.formatAsSlug(item.name.split(':')[0]);\n            }\n\n            // Set Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, subType);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: This should be removed after typing of SR6Item\n        return await Item.create(items);\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport ArmorItemData = Shadowrun.ArmorItemData;\n\nexport class ArmorParserBase extends TechnologyItemParserBase<ArmorItemData> {\n    override Parse(jsonData: object, item: ArmorItemData): ArmorItemData {\n        item = super.Parse(jsonData, item);\n\n        item.system.armor.value = ImportHelper.IntValue(jsonData, 'armor', 0);\n        item.system.armor.mod = ImportHelper.StringValue(jsonData, 'armor').includes('+');\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { ArmorParserBase } from '../parser/armor/ArmorParserBase';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class ArmorImporter extends DataImporter<Shadowrun.ArmorItemData, Shadowrun.ArmorData> {\n    public armorTranslations: any;\n    public override categoryTranslations: any;\n    public files = ['armor.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('armors') && jsonObject['armors'].hasOwnProperty('armor');\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonArmori18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonArmori18n);\n        this.armorTranslations = ImportHelper.ExtractItemTranslation(jsonArmori18n, 'armors', 'armor');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Armor', this.categoryTranslations);\n        const parser = new ArmorParserBase();\n        let datas: Shadowrun.ArmorItemData[] = [];\n        let jsonDatas = jsonObject['armors']['armor'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'armor';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported and the correct category\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}));\n            const category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\n            // @ts-expect-error TODO: Foundry Where is my foundry base data?\n            item.folder = folders[category].id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(category));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate the name\n            item.name = ImportHelper.MapNameToTranslation(this.armorTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            datas.push(item);\n        }\n\n        // @ts-expect-error\n        return await Item.create(datas) as Item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class AmmoImporter extends DataImporter<Shadowrun.AmmoItemData, Shadowrun.AmmoData> {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        let ammoDatas: Shadowrun.AmmoItemData[] = [];\n        let jsonAmmos = jsonObject['gears']['gear'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'ammo';\n\n        for (let i = 0; i < jsonAmmos.length; i++) {\n            let jsonData = jsonAmmos[i];\n\n            // Check to ensure the data entry is supported and the correct category\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n            if (ImportHelper.StringValue(jsonData, 'category', '') !== 'Ammunition') {\n                continue;\n            }\n\n            // Create the item\n            let item = this.GetDefaultData({type: parserType});\n            item.name = ImportHelper.StringValue(jsonData, 'name');\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(item.name.split(':')[0]));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Parse the item information from the xml\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n            item.system.technology.rating = 2;\n            item.system.technology.availability = ImportHelper.StringValue(jsonData, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(jsonData, 'cost', 0);\n\n            let bonusData = ImportHelper.ObjectValue(jsonData, 'weaponbonus', null);\n            if (bonusData !== undefined && bonusData !== null) {\n                item.system.ap = ImportHelper.IntValue(bonusData, 'ap', 0);\n                item.system.damage = ImportHelper.IntValue(bonusData, 'damage', 0);\n\n                let damageType = ImportHelper.StringValue(bonusData, 'damagetype', '');\n                if (damageType.length > 0) {\n                    if (damageType.includes('P')) {\n                        item.system.damageType = 'physical';\n                    } else if (damageType.includes('S')) {\n                        item.system.damageType = 'stun';\n                    } else if (damageType.includes('M')) {\n                        item.system.damageType = 'matrix';\n                    }\n                }\n            }\n\n            // TODO: This can be improved by using the stored english name in item.system.importFlags.name\n            let shouldLookForWeapons = false;\n            let nameLower = item.name.toLowerCase();\n            ['grenade', 'rocket', 'missile'].forEach((compare) => {\n                shouldLookForWeapons = shouldLookForWeapons || nameLower.includes(compare);\n            });\n            // NOTE: Should either weapons or gear not have been imported with translation, this will fail.\n            if (shouldLookForWeapons) {\n                let foundWeapon = ImportHelper.findItem((item) => {\n                    if (!item || !item.name) return false;\n                    // Filter for weapon type due to possible double naming giving other item types.\n                    return item.type === 'weapon' && item.name.toLowerCase() === nameLower;\n                });\n\n                if (foundWeapon != null && \"action\" in foundWeapon.system) {\n                    const weaponData = foundWeapon.system as Shadowrun.WeaponData;\n                    item.system.damage = weaponData.action.damage.value;\n                    item.system.ap =weaponData.action.damage.ap.value;\n                }\n            }\n\n            // ammo doesn't have conceal rating from looking at the data\n            // system.technology.conceal.base = ImportHelper.intValue(jsonData, \"conceal\");\n            item.system.technology.conceal.base = 0;\n\n            // Translate Item Name\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            ammoDatas.push(item);\n        }\n\n        for (let i = 0; i < ammoDatas.length; i++) {\n            let folderName = 'Misc';\n            let ammo = ammoDatas[i];\n\n            let splitName = ammo.name.split(':');\n            if (splitName.length > 1) {\n                folderName = splitName[0].trim();\n            }\n\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Ammo/${folderName}`, true);\n            // @ts-expect-error TODO: Foundry Where is my foundry base data?\n            ammo.folder = folder.id;\n        }\n\n        // @ts-expect-error\n        return await Item.create(ammoDatas) as Item;\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport MountType = Shadowrun.MountType;\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport ModificationItemData = Shadowrun.ModificationItemData;\n\nexport class ModParserBase extends TechnologyItemParserBase<ModificationItemData> {\n    override Parse(jsonData: object, item: ModificationItemData): ModificationItemData {\n        item = super.Parse(jsonData, item);\n\n        item.system.type = 'weapon';\n\n        item.system.mount_point = ImportHelper.StringValue(jsonData, 'mount') as MountType;\n\n        item.system.rc = ImportHelper.IntValue(jsonData, 'rc', 0);\n        item.system.accuracy = ImportHelper.IntValue(jsonData, 'accuracy', 0);\n\n        item.system.technology.conceal.base = ImportHelper.IntValue(jsonData, 'conceal', 0);\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { ModParserBase } from '../parser/mod/ModParserBase';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class ModImporter extends DataImporter<Shadowrun.ModificationItemData, Shadowrun.ModificationData> {\n    public override categoryTranslations: any;\n    public accessoryTranslations: any;\n    public files = ['weapons.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('accessories') && jsonObject['accessories'].hasOwnProperty('accessory');\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonWeaponsi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        // Parts of weapon accessory translations are within the application translation. Currently only data translation is used.\n        this.accessoryTranslations = ImportHelper.ExtractItemTranslation(jsonWeaponsi18n, 'accessories', 'accessory');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const parser = new ModParserBase();\n        let datas: Shadowrun.ModificationItemData[] = [];\n        let jsonDatas = jsonObject['accessories']['accessory'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'modification';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}));\n\n            // Get the item's folder information\n            let folderName = item.system.mount_point !== undefined ? item.system.mount_point : 'Other';\n            if (folderName.includes('/')) {\n                let splitName = folderName.split('/');\n                folderName = splitName[0];\n            }\n            let folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Mods/${folderName}`, true);\n            //@ts-expect-error TODO: Foundry Where is my foundry base data?\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(folderName));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.accessoryTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            datas.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(datas);\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport SpellCateogry = Shadowrun.SpellCateogry;\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class SpellParserBase extends ItemParserBase<SpellItemData> {\n    public override Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\n        item.name = ImportHelper.StringValue(jsonData, 'name');\n\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n        item.system.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as SpellCateogry;\n\n        let damage = ImportHelper.StringValue(jsonData, 'damage');\n        if (damage === 'P') {\n            item.system.action.damage.type.base = 'physical';\n            item.system.action.damage.type.value = 'physical';\n        } else if (damage === 'S') {\n            item.system.action.damage.type.base = 'stun';\n            item.system.action.damage.type.value = 'stun';\n        }\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'I') {\n            item.system.duration = 'instant';\n        } else if (duration === 'S') {\n            item.system.duration = 'sustained';\n        } else if (duration === 'P') {\n            item.system.duration = 'permanent';\n        }\n\n        let drain = ImportHelper.StringValue(jsonData, 'dv');\n        if (drain.includes('+') || drain.includes('-')) {\n            item.system.drain = parseInt(drain.substring(1, drain.length));\n        }\n\n        let range = ImportHelper.StringValue(jsonData, 'range');\n        if (range === 'T') {\n            item.system.range = 'touch';\n        } else if (range === 'LOS') {\n            item.system.range = 'los';\n        } else if (range === 'LOS (A)') {\n            item.system.range = 'los_a';\n        }\n\n        let type = ImportHelper.StringValue(jsonData, 'type');\n        if (type === 'P') {\n            item.system.type = 'physical';\n        } else if (type === 'M') {\n            item.system.type = 'mana';\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return item;\n    }\n}\n", "import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class CombatSpellParser extends SpellParserBase {\n    override Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        // Lower case is needed for the system.\n        item.system.combat.type = descriptor.includes('Indirect') ? 'indirect' : 'direct';\n\n        return item;\n    }\n}\n", "import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class ManipulationSpellParser extends SpellParserBase {\n    override Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        // Sometimes the field misses altogether.\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor', '');\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        item.system.manipulation.environmental = descriptor.includes('Environmental');\n        // Generally no resistance roll.\n\n        item.system.manipulation.mental = descriptor.includes('Mental');\n        if (item.system.manipulation.mental) {\n            item.system.action.opposed.type = 'custom';\n            item.system.action.opposed.attribute = 'logic';\n            item.system.action.opposed.attribute2 = 'willpower';\n        }\n\n        item.system.manipulation.physical = descriptor.includes('Physical');\n        if (item.system.manipulation.physical) {\n            item.system.action.opposed.type = 'custom';\n            item.system.action.opposed.attribute = 'body';\n            item.system.action.opposed.attribute2 = 'strength';\n        }\n        item.system.manipulation.damaging = descriptor.includes('Damaging');\n        if (item.system.manipulation.damaging) {\n            item.system.action.opposed.type = 'soak';\n        }\n\n        return item;\n    }\n}\n", "import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class IllusionSpellParser extends SpellParserBase {\n    override Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        if (item.system.type === 'mana') {\n            item.system.action.opposed.type = 'custom';\n            item.system.action.opposed.attribute = 'logic';\n            item.system.action.opposed.attribute2 = 'willpower';\n        } else if (item.system.type === 'physical') {\n            item.system.action.opposed.type = 'custom';\n            item.system.action.opposed.attribute = 'intuition';\n            item.system.action.opposed.attribute2 = 'logic';\n        }\n\n        return item;\n    }\n}\n", "import { SpellParserBase } from './SpellParserBase';\nimport { ImportHelper } from '../../helper/ImportHelper';\nimport SpellItemData = Shadowrun.SpellItemData;\n\nexport class DetectionSpellImporter extends SpellParserBase {\n    override Parse(jsonData: object, item: SpellItemData, jsonTranslation?: object): SpellItemData {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        let descriptor = ImportHelper.StringValue(jsonData, 'descriptor');\n        // A few spells have a missing descriptor instead of an empty string.\n        // The field is <descriptor /> rather than <descriptor></descriptor>\n        // which gets imported as undefined rather than empty string (sigh)\n        // Rather than refactor our ImportHelper we'll handle it in here.\n        if (descriptor === undefined) {\n            descriptor = '';\n        }\n\n        item.system.detection.passive = descriptor.includes('Passive');\n        if (!item.system.detection.passive) {\n            item.system.action.opposed.type = 'custom';\n            item.system.action.opposed.attribute = 'willpower';\n            item.system.action.opposed.attribute2 = 'logic';\n        }\n\n        item.system.detection.extended = descriptor.includes('Extended');\n\n        if (descriptor.includes('Psychic')) {\n            item.system.detection.type = 'psychic';\n        } else if (descriptor.includes('Directional')) {\n            item.system.detection.type = 'directional';\n        } else if (descriptor.includes('Area')) {\n            item.system.detection.type = 'area';\n        }\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { SpellParserBase } from '../parser/spell/SpellParserBase';\nimport { CombatSpellParser } from '../parser/spell/CombatSpellParser';\nimport { ManipulationSpellParser } from '../parser/spell/ManipulationSpellParser';\nimport { IllusionSpellParser } from '../parser/spell/IllusionSpellParser';\nimport { DetectionSpellImporter } from '../parser/spell/DetectionSpellImporter';\nimport { ParserMap } from '../parser/ParserMap';\nimport { DataDefaults } from '../../../data/DataDefaults';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class SpellImporter extends DataImporter<Shadowrun.SpellItemData, Shadowrun.SpellData> {\n    public override categoryTranslations: any;\n    public override itemTranslations: any;\n    public files = ['spells.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('spells') && jsonObject['spells'].hasOwnProperty('spell');\n    }\n\n    public override GetDefaultData({ type }: { type: any; }): Shadowrun.SpellItemData {\n        const systemData = {action: {type: 'varies', attribute: 'magic', skill: 'spellcasting'}} as Shadowrun.SpellData;\n        return DataDefaults.baseItemData<Shadowrun.SpellItemData, Shadowrun.SpellData>({type}, systemData);\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonSpelli18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonSpelli18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonSpelli18n, 'spells', 'spell');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Spells', this.categoryTranslations);\n\n        const parser = new ParserMap<Shadowrun.SpellItemData>('category', [\n            { key: 'Combat', value: new CombatSpellParser() },\n            { key: 'Manipulation', value: new ManipulationSpellParser() },\n            { key: 'Illusion', value: new IllusionSpellParser() },\n            { key: 'Detection', value: new DetectionSpellImporter() },\n            { key: 'Health', value: new SpellParserBase() },\n            { key: 'Enchantments', value: new SpellParserBase() },\n            { key: 'Rituals', value: new SpellParserBase() },\n        ]);\n\n        let items: Shadowrun.SpellItemData[] = [];\n        let jsonDatas = jsonObject['spells']['spell'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'spell';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}), this.itemTranslations);\n            //@ts-expect-error TODO: Foundry Where is my foundry base data?\n            item.folder = folders[item.system.category].id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, item.system.category);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport QualityItemData = Shadowrun.QualityItemData;\n\nexport class QualityParserBase extends ItemParserBase<QualityItemData> {\n    public override Parse(jsonData: object, item: QualityItemData, jsonTranslation?): QualityItemData {\n        item.name = ImportHelper.StringValue(jsonData, 'name');\n\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        item.system.type = ImportHelper.StringValue(jsonData, 'category') === 'Positive' ? 'positive' : 'negative';\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { QualityParserBase } from '../parser/quality/QualityParserBase';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class QualityImporter extends DataImporter<Shadowrun.QualityItemData, Shadowrun.QualityData> {\n    public override categoryTranslations: any;\n    public override itemTranslations: any;\n    public files = ['qualities.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('qualities') && jsonObject['qualities'].hasOwnProperty('quality');\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonQualityi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonQualityi18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonQualityi18n, 'qualities', 'quality');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const jsonNameTranslations = {};\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, 'Qualities', this.categoryTranslations);\n        const parser = new QualityParserBase();\n        let items: Shadowrun.QualityItemData[] = [];\n        let jsonDatas = jsonObject['qualities']['quality'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'quality';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported and the correct category\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}), this.itemTranslations);\n            let category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\n            //@ts-expect-error TODO: Foundry Where is my foundry base data?\n            item.folder = folders[category].id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(category));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate the name\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport ComplexFormTarget = Shadowrun.ComplexFormTarget;\nimport ComplexFormItemData = Shadowrun.ComplexFormItemData;\n\nexport class ComplexFormParserBase extends ItemParserBase<ComplexFormItemData> {\n    override Parse(jsonData: object, item: ComplexFormItemData, jsonTranslation?: object): ComplexFormItemData {\n        item.name = ImportHelper.StringValue(jsonData, 'name');\n\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n\n        let fade = ImportHelper.StringValue(jsonData, 'fv');\n        if (fade.includes('+') || fade.includes('-')) {\n            item.system.fade = parseInt(fade.substring(1, fade.length));\n        }\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'I') {\n            item.system.duration = 'instant';\n        } else if (duration === 'S') {\n            item.system.duration = 'sustained';\n        } else if (duration === 'P') {\n            item.system.duration = 'permanent';\n        }\n\n        let target = ImportHelper.StringValue(jsonData, 'target');\n        switch (target) {\n            case 'Device':\n            case 'File':\n            case 'Host':\n            case 'Persona':\n            case 'Self':\n            case 'Sprite':\n                item.system.target = target.toLowerCase() as ComplexFormTarget;\n                break;\n            default:\n                item.system.target = 'other';\n                break;\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { Constants } from './Constants';\nimport { ComplexFormParserBase } from '../parser/complex-form/ComplexFormParserBase';\nimport { DataDefaults } from '../../../data/DataDefaults';\n\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class ComplexFormImporter extends DataImporter<Shadowrun.ComplexFormItemData, Shadowrun.ComplexFormData> {\n    public override categoryTranslations: any;\n    public nameTranslations: any;\n    public files = ['complexforms.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('complexforms') && jsonObject['complexforms'].hasOwnProperty('complexform');\n    }\n\n    public override GetDefaultData({ type }: { type: any; }): Shadowrun.ComplexFormItemData {\n        const systemData = {action: {type: 'complex', attribute: 'resonance', skill: 'compiling'}} as Shadowrun.ComplexFormData;\n        return DataDefaults.baseItemData<Shadowrun.ComplexFormItemData, Shadowrun.ComplexFormData>({type}, systemData);\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        // Complexforms don't provide a category translation.\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.nameTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, 'complexforms', 'complexform');\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const parser = new ComplexFormParserBase();\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/Complex Forms`, true);\n        let items: Shadowrun.ComplexFormItemData[] = [];\n        let jsonDatas = jsonObject['complexforms']['complexform'];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'complex_form';\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(jsonData, this.GetDefaultData({type: parserType}), this.nameTranslations);\n\n            // Get the item's folder information\n            // @ts-expect-error TODO: Foundry Where is my foundry base data?\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, '');\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // TODO: Follow ComplexFormParserBase approach.\n            // Item name translation\n            item.name = ImportHelper.MapNameToTranslation(this.nameTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error\n        return await Item.create(items) as Item;\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport { TechnologyItemParserBase } from '../item/TechnologyItemParserBase';\nimport Ware = Shadowrun.WareItemData;\n\nexport class CyberwareParser extends TechnologyItemParserBase<Ware> {\n    override Parse(jsonData: object, item: Ware, jsonTranslation?: object): Ware {\n        item = super.Parse(jsonData, item, jsonTranslation);\n\n        const essence = ImportHelper.StringValue(jsonData, 'ess', '0').match(/[0-9]\\.?[0-9]*/g);\n        if (essence !== null) {\n            item.system.essence = parseFloat(essence[0]);\n        }\n\n        const capacity = ImportHelper.StringValue(jsonData, 'capacity', '0').match(/[0-9]+/g);\n        if (capacity !== null) {\n            item.system.capacity = parseInt(capacity[0]);\n        }\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { CyberwareParser } from '../parser/ware/CyberwareParser';\nimport WareData = Shadowrun.WareData\nimport WareItemData = Shadowrun.WareItemData;\nimport CyberwareItemData = Shadowrun.CyberwareItemData;\nimport BiowareItemData = Shadowrun.BiowareItemData;\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class WareImporter extends DataImporter<WareItemData, WareData> {\n    public override categoryTranslations: any;\n    public override itemTranslations: any;\n    public files = ['cyberware.xml', 'bioware.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('cyberwares') && jsonObject['cyberwares'].hasOwnProperty('cyberware') ||\n               jsonObject.hasOwnProperty('biowares') && jsonObject['biowares'].hasOwnProperty('bioware');\n    }\n\n    GetDefaultCyberwareData(): CyberwareItemData {\n        return this.GetDefaultData({type: 'cyberware'}) as CyberwareItemData;\n    }\n\n    GetDefaultBiowareData(): BiowareItemData {\n        return this.GetDefaultData({type: 'bioware'}) as BiowareItemData;\n\n    }\n\n    ExtractTranslation(fileName) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonItemi18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, fileName);\n         // TODO: Move ExtractTranslation phase before the parsing phase and initiate it with the filename to parse.\n            if (this.files.length !== 2) console.error('Lazily hacked code will fail for more or less than two files.');\n\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonItemi18n);\n\n        const {typeKey, listKey} = fileName === 'cyberware.xml' ?\n                {typeKey: 'cyberwares', listKey: 'cyberware'} :\n                {typeKey: 'biowares', listKey: 'bioware'};\n\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonItemi18n, typeKey, listKey);\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const cyberParser = new CyberwareParser();\n\n        let key = jsonObject.hasOwnProperty('cyberwares') ? 'Cyberware' : 'Bioware';\n        const folders = await ImportHelper.MakeCategoryFolders(jsonObject, key);\n\n        key = key.toLowerCase();\n        let items: WareItemData[] = [];\n        let jsonDatas = jsonObject[key + 's'][key];\n\n        this.iconList = await this.getIconFiles();\n\n        for (let i = 0; i < jsonDatas.length; i++) {\n            let jsonData = jsonDatas[i];\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(jsonData)) {\n                continue;\n            }\n\n            // Create the item\n            const defaultData = key === 'cyberware' ? this.GetDefaultCyberwareData() : this.GetDefaultBiowareData();\n            let item = cyberParser.Parse(jsonData, defaultData, this.itemTranslations);\n            const category = ImportHelper.StringValue(jsonData, 'category').toLowerCase();\n            // TODO: Does this type mixture cause later issues? Will it carry over?\n            //@ts-expect-error\n            item.folder = folders[category].id;\n\n            // Bioware has no wireless feature, so disable it by default\n            if (key === 'bioware') {\n                item.system.technology.wireless = false;\n            }\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(category));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}\n", "import { ImportHelper } from '../../helper/ImportHelper';\nimport CritterPowerCategory = Shadowrun.CritterPowerCategory;\nimport { ItemParserBase } from '../item/ItemParserBase';\nimport CritterPowerItemData = Shadowrun.CritterPowerItemData;\n\nexport class CritterPowerParserBase extends ItemParserBase<CritterPowerItemData> {\n    public override Parse(jsonData: object, item: CritterPowerItemData, jsonTranslation?: object): CritterPowerItemData {\n        item.name = ImportHelper.StringValue(jsonData, 'name');\n\n        item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.StringValue(jsonData, 'page')}`;\n        item.system.category = ImportHelper.StringValue(jsonData, 'category').toLowerCase() as CritterPowerCategory;\n\n        let duration = ImportHelper.StringValue(jsonData, 'duration');\n        if (duration === 'Always') {\n            item.system.duration = 'always';\n        } else if (duration === 'Instant') {\n            item.system.duration = 'instant';\n        } else if (duration === 'Sustained') {\n            item.system.duration = 'sustained';\n        } else if (duration === 'Permanent') {\n            item.system.duration = 'permanent';\n        } else {\n              item.system.duration = 'special';\n        }\n\n        let range = ImportHelper.StringValue(jsonData, 'range');\n        if (range === 'T') {\n            item.system.range = 'touch';\n        } else if (range === 'LOS') {\n            item.system.range = 'los';\n        } else if (range === 'LOS (A)') {\n            item.system.range = 'los_a';\n        } else if (range === 'Self') {\n           item.system.range = 'self';\n        } else {\n          item.system.range = 'special';\n        }\n\n        let type = ImportHelper.StringValue(jsonData, 'type');\n        if (type === 'P') {\n            item.system.powerType = 'physical';\n        } else if (type === 'M') {\n            item.system.powerType = 'mana';\n        }\n\n        if (jsonTranslation) {\n            const origName = ImportHelper.StringValue(jsonData, 'name');\n            item.name = ImportHelper.MapNameToTranslation(jsonTranslation, origName);\n            item.system.description.source = `${ImportHelper.StringValue(jsonData, 'source')} ${ImportHelper.MapNameToPageSource(jsonTranslation, origName)}`;\n        }\n\n        return item;\n    }\n}\n", "import { DataImporter } from './DataImporter';\nimport { ImportHelper } from '../helper/ImportHelper';\nimport { CritterPowerParserBase } from '../parser/critter-power/CritterPowerParserBase';\nimport { Constants } from './Constants';\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\nexport class CritterPowerImporter extends DataImporter<Shadowrun.CritterPowerItemData, Shadowrun.CritterPowerData> {\n    public files = ['critterpowers.xml'];\n\n    public override unsupportedCategories = [\n        'Emergent',\n    ];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('powers') && jsonObject['powers'].hasOwnProperty('power');\n    }\n\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonCritterPoweri18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonCritterPoweri18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonCritterPoweri18n, 'powers', 'power');\n    }\n\n\n    async Parse(chummerPowers: object, setIcons: boolean): Promise<Item> {\n        const parser = new CritterPowerParserBase();\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('TYPES.Item.critter_power')}`, true);\n        const items: Shadowrun.CritterPowerItemData[] = [];\n        const chummerCritterPowers = this.filterObjects(chummerPowers['powers']['power']);\n        this.iconList = await this.getIconFiles();\n        const parserType = 'critter_power';\n\n        for (const chummerCritterPower of chummerCritterPowers) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(chummerCritterPower)) {\n                continue;\n            }\n\n            // Create the item\n            const item = parser.Parse(chummerCritterPower, this.GetDefaultData({type: parserType}), this.itemTranslations);\n            // @ts-expect-error TODO: foundry-vtt-type v10\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, item.system.powerType);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}\n", "import { DataImporter } from \"./DataImporter\";\nimport { ImportHelper } from \"../helper/ImportHelper\";\nimport { Constants } from \"./Constants\";\nimport { UpdateActionFlow } from \"../../../item/flows/UpdateActionFlow\";\n\nexport class DeviceImporter extends DataImporter<Shadowrun.DeviceItemData, Shadowrun.DeviceData> {\n    public files = ['gear.xml'];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    ExtractTranslation(fileName?: string) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    async ParseCommlinkDevices(commlinks, folder, setIcons) {\n        const entries = [];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'device';\n\n        for (const commlink of commlinks) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(commlink)) {\n                continue;\n            }\n\n            // Create the item\n            const item = this.GetDefaultData({type: parserType});\n            item.name = ImportHelper.StringValue(commlink, 'name');\n\n            // Get the item's folder information\n            // @ts-expect-error\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, parserType, item.system.category);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Finish the importing\n            item.system.description.source = `${ImportHelper.StringValue(commlink, 'source')} ${ImportHelper.MapNameToPageSource(this.itemTranslations, ImportHelper.StringValue(commlink, 'name'), ImportHelper.StringValue(commlink, 'page'))}`;\n            item.system.technology.rating = ImportHelper.IntValue(commlink, 'devicerating', 0);\n            item.system.technology.availability = ImportHelper.StringValue(commlink, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(commlink, 'cost', 0);\n            item.system.atts.att3.value = ImportHelper.IntValue(commlink, 'dataprocessing', 0);\n            item.system.atts.att4.value = ImportHelper.IntValue(commlink, 'firewall', 0);\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            //@ts-expect-error\n            entries.push(item);\n        }\n\n        return entries;\n    }\n\n    async ParseRCCDevices(rccs, folder, setIcons) {\n        const entries = [];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'device';\n\n        for (const rcc of rccs) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(rcc)) {\n                continue;\n            }\n\n            // Create the item\n            const item = this.GetDefaultData({type: parserType});\n            item.system.category = 'rcc';\n            item.name = ImportHelper.StringValue(rcc, 'name');\n\n            // Get the item's folder information\n            // @ts-expect-error\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, parserType, item.system.category);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Finish the importing\n            item.system.description.source = `${ImportHelper.StringValue(rcc, 'source')} ${ImportHelper.MapNameToPageSource(this.itemTranslations, ImportHelper.StringValue(rcc, 'name'), ImportHelper.StringValue(rcc, 'page'))}`;\n            item.system.technology.rating = ImportHelper.IntValue(rcc, 'devicerating', 0);\n            item.system.technology.availability = ImportHelper.StringValue(rcc, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(rcc, 'cost', 0);\n            item.system.atts.att3.value = ImportHelper.IntValue(rcc, 'dataprocessing', 0);\n            item.system.atts.att4.value = ImportHelper.IntValue(rcc, 'firewall', 0);\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            //@ts-expect-error\n            entries.push(item);\n        }\n\n        return entries;\n    }\n\n    async ParseCyberdeckDevices(cyberdecks, folder, setIcons) {\n        const items = [];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'device';\n\n        for (const cyberdeck of cyberdecks) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(cyberdeck)) {\n                continue;\n            }\n\n            // Create the item\n            const item = this.GetDefaultData({type: parserType});\n            item.system.category = 'cyberdeck';\n            item.name = ImportHelper.StringValue(cyberdeck, 'name');\n\n            // Get the item's folder information\n            // @ts-expect-error\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, parserType, item.system.category);\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Finish the importing\n            item.system.description.source = `${ImportHelper.StringValue(cyberdeck, 'source')} ${ImportHelper.MapNameToPageSource(this.itemTranslations, ImportHelper.StringValue(cyberdeck, 'name'), ImportHelper.StringValue(cyberdeck, 'page'))}`;\n            item.system.technology.rating = ImportHelper.IntValue(cyberdeck, 'devicerating', 0);\n            item.system.technology.availability = ImportHelper.StringValue(cyberdeck, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(cyberdeck, 'cost', 0);\n\n            // Some cyberdecks have a flexible attribute order\n            // attributearray is a ',' separated list of values. Since it's hacky, be very unforgiving.\n            if (cyberdeck.hasOwnProperty('attributearray')) {\n                const attributeOrder = ImportHelper.StringValue(cyberdeck, 'attributearray').split(',');\n                const att1 = Number(attributeOrder[0]);\n                const att2 = Number(attributeOrder[1]);\n                const att3 = Number(attributeOrder[2]);\n                const att4 = Number(attributeOrder[3]);\n                item.system.atts.att1.value = att1;\n                item.system.atts.att2.value = att2;\n                item.system.atts.att3.value = att3;\n                item.system.atts.att4.value = att4;\n\n            // Some cyberdecks have a fixed attribute order\n            } else if (cyberdeck.hasOwnProperty('attack')) {\n                item.system.atts.att1.value = ImportHelper.IntValue(cyberdeck, 'attack', 0);\n                item.system.atts.att2.value = ImportHelper.IntValue(cyberdeck, 'sleaze', 0);\n                item.system.atts.att3.value = ImportHelper.IntValue(cyberdeck, 'dataprocessing', 0);\n                item.system.atts.att4.value = ImportHelper.IntValue(cyberdeck, 'firewall', 0);\n            }\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            //@ts-expect-error\n            items.push(item);\n        }\n\n        return items;\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        let entries = [];\n        const commlinks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Commlinks');\n        const cyberdecks = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Cyberdecks');\n        const rccs = jsonObject['gears']['gear'].filter(gear => ImportHelper.StringValue(gear, 'category', '') === 'Rigger Command Consoles');\n\n        let commlinksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR6.DeviceCatCommlink')}`, true);\n        let cyberdecksFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR6.DeviceCatCyberdeck')}`, true);\n        let rccsFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR6.DeviceCatRCC')}`, true);\n\n        entries = entries.concat(await this.ParseCommlinkDevices(commlinks, commlinksFolder, setIcons));\n        entries = entries.concat(await this.ParseCyberdeckDevices(cyberdecks, cyberdecksFolder, setIcons));\n        entries = entries.concat(await this.ParseRCCDevices(rccs, rccsFolder, setIcons));\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(entries)\n    }\n\n    /* List of unsupported Commlinks, due to dynamics value calculations.\n     */\n    static override unsupportedEntry(jsonData): boolean {\n        if (DataImporter.unsupportedEntry(jsonData)) {\n            return true;\n        }\n\n        const unsupportedIds = [\n            'd63eb841-7b15-4539-9026-b90a4924aeeb',  // Dynamic rating value.\n        ];\n        return unsupportedIds.includes(ImportHelper.StringValue(jsonData, 'id'));\n    }\n}\n", "import { DataImporter } from \"./DataImporter\";\nimport { ImportHelper } from \"../helper/ImportHelper\";\nimport { Constants } from \"./Constants\";\nimport { UpdateActionFlow } from \"../../../item/flows/UpdateActionFlow\";\n\nexport class EquipmentImporter extends DataImporter<Shadowrun.EquipmentItemData, Shadowrun.EquipmentData> {\n    files = ['gear.xml'];\n    override unsupportedCategories = [\n        'Ammunition',\n        'Commlinks',\n        'Cyberdecks',\n        'Hacking Programs',\n        'Common Programs',\n        'Rigger Command Consoles',\n        'Custom'\n    ];\n\n    CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('gears') && jsonObject['gears'].hasOwnProperty('gear');\n    }\n\n    ExtractTranslation(fileName?: string) {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let jsonGeari18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(jsonGeari18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(jsonGeari18n, 'gears', 'gear');\n    }\n\n    async ParseEquipment(equipments, setIcons) {\n        const items = [];\n        this.iconList = await this.getIconFiles();\n        const parserType = 'equipment';\n\n        for (const equipment of equipments) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(equipment)) {\n                continue;\n            }\n\n            // It might be advantageous to not double import rockets, grenades, or mini-torpedos, which also show up as weapons\n            // They should probably be removed from one category or the other\n\n            // Create the item\n            const item = this.GetDefaultData({type: parserType});\n            item.name = ImportHelper.StringValue(equipment, 'name');\n\n            // Get the equipment category\n            const categoryEN = ImportHelper.StringValue(equipment, 'category');\n\n            // Get the item's folder information\n            // Replace / as it's used as a separator in GetFolderAtPath.\n            const category = ImportHelper.TranslateCategory(categoryEN, this.categoryTranslations).replace('/', ' ');\n            let categoryFolder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('SR6.Gear')}/${category}`, true);\n            // @ts-expect-error\n            item.folder = categoryFolder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, this.formatAsSlug(categoryEN));\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Finish the importing\n            item.system.description.source = `${ImportHelper.StringValue(equipment, 'source')} ${ImportHelper.MapNameToPageSource(this.itemTranslations, ImportHelper.StringValue(equipment, 'name'), ImportHelper.StringValue(equipment, 'page'))}`;\n            item.system.technology.rating = ImportHelper.IntValue(equipment, 'rating', 0);\n            item.system.technology.availability = ImportHelper.StringValue(equipment, 'avail');\n            item.system.technology.cost = ImportHelper.IntValue(equipment, 'cost', 0);\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            //@ts-expect-error\n            items.push(item);\n        }\n\n        return items;\n    }\n\n    async Parse(jsonObject: object, setIcons: boolean): Promise<Item> {\n        const equipment = this.filterObjects(jsonObject['gears']['gear']);\n        const items = await this.ParseEquipment(equipment, setIcons);\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}\n", "import { ImportHelper } from \"../../helper/ImportHelper\";\nimport { ItemParserBase } from \"../item/ItemParserBase\";\n\n\n/**\n * Handle a Chummer5a critterpower.xml power element subset for emergent powers to system spirte_power documents.\n * \n * TODO: Use in Chummer5 character import\n */\nexport class SpritePowerParser extends ItemParserBase<Shadowrun.SpritePowerItemData> {\n    _parseSpritePowerActionType(chummerData): string {\n        const action = ImportHelper.StringValue(chummerData, 'action', undefined);\n        if (foundry.utils.getType(action) === 'string') return action.toLowerCase();\n        else return '';\n    }\n\n    public override Parse(chummerData: object, itemData: Shadowrun.SpritePowerItemData, dataTranslation?: object): Shadowrun.SpritePowerItemData {\n        itemData = super.Parse(chummerData, itemData, dataTranslation);\n\n        // Chummer has camel case for action, system uses lowercase for type. ('Complex' => 'complex', ...)\n        // xml2js returns action as string, and category as Element._TEXT... Unsure why.\n        itemData.system.action.type = this._parseSpritePowerActionType(chummerData);\n\n        return itemData;\n    }\n}", "import { SpritePowerParser } from '../parser/critter-power/SpritePowerParser';\nimport { ImportHelper } from \"../helper/ImportHelper\";\nimport { Constants } from \"./Constants\";\nimport { DataImporter } from \"./DataImporter\";\nimport { UpdateActionFlow } from '../../../item/flows/UpdateActionFlow';\n\n\n/**\n * Handle importing Chummer5a sprite powers as system items\n */\nexport class SpritePowerImporter extends DataImporter<Shadowrun.SpritePowerItemData, Shadowrun.SpritePowerData> {\n    public files = ['critterpowers.xml'];\n    public override unsupportedCategories = [\n        'Drake',\n        'Echoes',\n        'Free Spirit',\n        'Infected',\n        'Mundane',\n        'Paranormal',\n        'Paranormal/Infected',\n        'Toxic Critter Powers',\n        'Weakness',\n        'Chimeric Modification',\n        'Shapeshifter'\n    ];\n\n    /**\n     * Sprite translations is included in the crittwerpowers lang section.\n     */\n    ExtractTranslation() {\n        if (!DataImporter.jsoni18n) {\n            return;\n        }\n\n        let powerI18n = ImportHelper.ExtractDataFileTranslation(DataImporter.jsoni18n, this.files[0]);\n        this.categoryTranslations = ImportHelper.ExtractCategoriesTranslation(powerI18n);\n        this.itemTranslations = ImportHelper.ExtractItemTranslation(powerI18n, 'powers', 'power');\n    }\n\n    /**\n     * Sprite powers are included in critterpowers.xml via the category 'Emergent'\n     *\n     * @param jsonObject Chummer critterpower structure\n     */\n    public CanParse(jsonObject: object): boolean {\n        return jsonObject.hasOwnProperty('powers') && jsonObject['powers'].hasOwnProperty('power');\n    }\n\n    public async Parse(chummerData: object, setIcons: boolean): Promise<Item> {\n        const parser = new SpritePowerParser();\n        const folder = await ImportHelper.GetFolderAtPath(`${Constants.ROOT_IMPORT_FOLDER_NAME}/${game.i18n.localize('TYPES.Item.sprite_power')}`, true);\n\n        const items: Shadowrun.SpritePowerItemData[] = [];\n        const chummerSpritePowers = this.filterObjects(chummerData['powers']['power']);\n        this.iconList = await this.getIconFiles();\n        const parserType = 'sprite_power';\n\n        for (const chummerSpritePower of chummerSpritePowers) {\n\n            // Check to ensure the data entry is supported\n            if (DataImporter.unsupportedEntry(chummerSpritePower)) {\n                continue;\n            }\n\n            // Create the item\n            let item = parser.Parse(chummerSpritePower, this.GetDefaultData({type: parserType}), this.itemTranslations);\n            // @ts-expect-error TODO: foundry-vtt-type v10\n            item.folder = folder.id;\n\n            // Import Flags\n            item.system.importFlags = this.genImportFlags(item.name, item.type, '');\n\n            // Default icon\n            if (setIcons) {item.img = await this.iconAssign(item.system.importFlags, item.system, this.iconList)};\n\n            // Translate name if needed\n            item.name = ImportHelper.MapNameToTranslation(this.itemTranslations, item.name);\n\n            // Add relevant action tests\n            UpdateActionFlow.injectActionTestsIntoChangeData(item.type, item, item);\n\n            items.push(item);\n        }\n\n        // @ts-expect-error // TODO: TYPE: Remove this.\n        return await Item.create(items);\n    }\n}", "import { ProgramImporter } from './../importer/ProgramImporter';\nimport { WeaponImporter } from '../importer/WeaponImporter';\nimport { ArmorImporter } from '../importer/ArmorImporter';\nimport { DataImporter } from '../importer/DataImporter';\nimport { AmmoImporter } from '../importer/AmmoImporter';\nimport { ModImporter } from '../importer/ModImporter';\nimport { SpellImporter } from '../importer/SpellImporter';\nimport { QualityImporter } from '../importer/QualityImporter';\nimport { ComplexFormImporter } from '../importer/ComplexFormImporter';\nimport { WareImporter } from '../importer/WareImporter';\nimport { CritterPowerImporter } from '../importer/CritterPowerImporter';\nimport { ImportHelper, ImportMode } from '../helper/ImportHelper';\nimport { DeviceImporter } from \"../importer/DeviceImporter\";\nimport { EquipmentImporter } from \"../importer/EquipmentImporter\";\nimport { SpritePowerImporter } from '../importer/SpritePowerImporter';\n\n\nexport class Import extends Application {\n    private supportedDataFiles: string[] = [];\n    private dataFiles: File[] = [];\n    private langDataFile: File;\n    private parsedFiles: string[] = [];\n    private disableImportButton: boolean = true;\n    private currentParsedFile: string;\n    private icons: boolean;\n\n    constructor() {\n        super();\n\n        this.collectDataImporterFileSupport();\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'chummer-data-import';\n        options.classes = ['app', 'window-app', 'filepicker'];\n        options.title = 'Chummer/Data Import';\n        options.template = 'systems/shadowrun6-elysium/dist/templates/apps/compendium-import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    override getData(options?: any) {\n        const data = super.getData(options) as any;\n\n        data.dataFiles = {};\n        this.supportedDataFiles.forEach((supportedFileName: string) => {\n            const missing = !this.dataFiles.some((dataFile) => supportedFileName === dataFile.name);\n            const parsed = this.parsedFiles.some((parsedFileName) => supportedFileName === parsedFileName);\n            const parsing = supportedFileName === this.currentParsedFile;\n\n            data.dataFiles[supportedFileName] = {\n                name: supportedFileName,\n                missing,\n                parsed,\n                parsing\n            };\n        });\n        data.langDataFile = this.langDataFile ? this.langDataFile.name : '';\n        data.finishedOverallParsing = this.supportedDataFiles.length === this.parsedFiles.length;\n        data.disableImportButton = this.disableImportButton;\n\n        return { ...data };\n    }\n\n    private collectDataImporterFileSupport() {\n        this.supportedDataFiles = [];\n        Import.Importers.forEach(importer => {\n            if (this.supportedDataFiles.some(supported => importer.files.includes(supported))) {\n                return;\n            }\n            this.supportedDataFiles = this.supportedDataFiles.concat(importer.files);\n        });\n    }\n\n    private clearParsingStatus() {\n        this.parsedFiles = [];\n    }\n\n    //Order is important, ex. some weapons need mods to fully import\n    static Importers: DataImporter<Shadowrun.ShadowrunItemData, Shadowrun.ShadowrunItemDataData>[] = [\n        new ModImporter(),\n        new WeaponImporter(),\n        new ArmorImporter(),\n        new AmmoImporter(),\n        new SpellImporter(),\n        new ComplexFormImporter(),\n        new QualityImporter(),\n        new WareImporter(),\n        new CritterPowerImporter(),\n        new SpritePowerImporter(),\n        new DeviceImporter(),\n        new EquipmentImporter(),\n        new ProgramImporter()\n    ];\n\n    async parseXML(xmlSource, fileName, setIcons) {\n        let jsonSource = await DataImporter.xml2json(xmlSource);\n        ImportHelper.SetMode(ImportMode.XML);\n\n        for (const di of Import.Importers) {\n            if (di.CanParse(jsonSource)) {\n                di.ExtractTranslation(fileName);\n                await di.Parse(jsonSource, setIcons);\n            }\n        }\n    }\n\n    async parseXmli18n(xmlSource) {\n        if (!xmlSource) {\n            return;\n        }\n        let jsonSource = await DataImporter.xml2json(xmlSource);\n\n        if (DataImporter.CanParseI18n(jsonSource)) {\n            DataImporter.ParseTranslation(jsonSource);\n        }\n    }\n\n    isDataFile = (file: File): boolean => {\n        return this.supportedDataFiles.some((supported) => supported === file.name);\n    };\n\n    isLangDataFile = (file: File): boolean => {\n        const pattern = /[a-zA-Z]{2}-[a-zA-Z]{2}_data\\.xml/;\n        return file.name.match(pattern) !== null;\n    };\n\n    override activateListeners(html) {\n        html.find(\"button[type='submit']\").on('click', async (event) => {\n            event.preventDefault();\n\n            this.clearParsingStatus();\n            this.disableImportButton = true;\n\n            await this.render();\n\n            if (this.langDataFile) {\n                const text = await this.langDataFile.text();\n                await this.parseXmli18n(text);\n            }\n\n            const setIcons = $('.setIcons').is(':checked');\n\n            // Use 'for of'-loop to allow await to actually pause.\n            // don't use .forEach as it won't await for async callbacks.\n            // iterate over supportedDataFiles to adhere to Importer order\n            for (const supportedFile of this.supportedDataFiles) {\n                // Only try supported files.\n                const dataFile = this.dataFiles.find((dataFile) => dataFile.name === supportedFile);\n                if (dataFile) {\n                    const text = await dataFile.text();\n\n                     // Show status for current parsing progression.\n                    this.currentParsedFile = dataFile.name;\n                    await this.render();\n\n\n                    await this.parseXML(text, dataFile.name, setIcons);\n\n                    // Store status to show parsing progression.\n                    if (!this.parsedFiles.some((parsedFileName) => parsedFileName === dataFile.name)) {\n                        this.parsedFiles.push(dataFile.name);\n                    }\n\n                    await this.render();\n                }\n            }\n\n            this.disableImportButton = false;\n\n            await this.render();\n\n            ui.notifications?.warn('SR6.Warnings.BulkImportPerformanceWarning', {localize: true});\n        });\n\n        html.find(\"input[type='file'].langDataFileDrop\").on('change', async (event) => {\n            Array.from(event.target.files).forEach((file: File) => {\n                if (this.isLangDataFile(file)) {\n                    this.langDataFile = file;\n                    this.render();\n                }\n            });\n            return true;\n        });\n\n        html.find(\"input[type='file'].filedatadrop\").on('change', async (event) => {\n            Array.from(event.target.files).forEach((file: File) => {\n                if (this.isDataFile(file)) {\n                    // Allow user to overwrite an already added file, they have their reasons.\n                    const existingIdx = this.dataFiles.findIndex((dataFile) => dataFile.name === file.name);\n                    if (existingIdx === -1) {\n                        this.dataFiles.push(file);\n                    } else {\n                        this.dataFiles[existingIdx] = file;\n                    }\n                }\n            });\n\n            if (this.dataFiles.length > 0) {\n                this.disableImportButton = false;\n            }\n\n            this.render();\n        });\n    }\n}\n", "import {FLAGS, SYSTEM_NAME} from \"../constants\";\n\nexport class ChangelogApplication extends Application {\n    override get template(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/changelog.html';\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.classes = ['shadowrun6-elysium'];\n        options.title = game.i18n.localize('SR6.ChangelogApplication.Title');\n        options.width = 500;\n        options.height = 'auto';\n        return options;\n    }\n\n    override render(force?: boolean, options?: Application.RenderOptions) {\n        ChangelogApplication.setRenderForCurrentVersion();\n        return super.render(force, options);\n    }\n\n    // Let the async operation happen in background.\n    private static setRenderForCurrentVersion() {\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        game.user?.setFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion, game.system.version);\n    }\n\n    static get showApplication(): boolean {\n        if (!game.user?.isGM || !game.user?.isTrusted) return false;\n\n        const shownForVersion = game.user?.getFlag(SYSTEM_NAME, FLAGS.ChangelogShownForVersion);\n        //@ts-expect-error // TODO: foundry-vtt-types v10\n        return shownForVersion !== game.system.version;\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SYSTEM_NAME } from \"../constants\";\nimport { Helpers } from \"../helpers\";\nimport { ModifiableDocumentTypes, DocumentSituationModifiers } from \"../rules/DocumentSituationModifiers\";\n\nimport EnvironmentalModifierLevels = Shadowrun.EnvironmentalModifierLevels;\nimport EnvironmentalModifierCategories = Shadowrun.EnvironmentalModifierCategories;\n\n\ninterface SituationalModifiersTemplateData extends FormApplication.Data<{}> {\n    targetType: string\n    targetName: string\n    modifiers: DocumentSituationModifiers\n    environmentalLevels: EnvironmentalModifierLevels\n}\n\n\n/**\n * General abstract handler for sheet actions for a specific situational modifier category.\n */\nclass ModifiersHandler {\n    app: SituationModifiersApplication\n\n    constructor(situationModifiersApp: SituationModifiersApplication) {\n        this.app = situationModifiersApp;\n    }\n\n    /**\n     * Provide template data fields necessary for the extending modifier type to be added to a\n     * general template data object.\n     */\n    getData(options?: object) {\n        return {}\n    };\n    /**\n     * Define what event listeners to register for the extending modifier type.\n     */\n    activateListeners(html: JQuery<HTMLElement>) {};\n    /**\n     * Define what token hud buttons to register for the extending modifier type.\n     *\n     * NOTE: TypeScript doesn't support abstract static method definitions as of yet.\n     */\n    static addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR6Actor, modifiers: DocumentSituationModifiers): void {\n        console.error(`SR6: Elysium | Class ${this.constructor.name} must implement static method onRenderTokenHUD`);\n    };\n}\n\n/**\n * Handle all sheet action for environmental modifiers.\n */\nclass EnvironmentalModifiersHandler extends ModifiersHandler {\n\n    override activateListeners(html: JQuery<HTMLElement>) {\n        console.log(`SR6: Elysium | Registering modifier handler ${this.constructor.name} listeners`);\n        $(html).find('button.env-modifier').on('click', this._handleModifierChange.bind(this));\n    }\n\n    static override addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR6Actor, modifiers: DocumentSituationModifiers): void {\n        console.log(`${SYSTEM_NAME} | Environmental modifier HUD on renderTokenHUD`);\n\n        // Setup and connect tokenHUD elements.\n        const modifier = $('<div class=\"modifier-row\"></div>');\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-matrix\">${modifiers.environmental.applied.total}</div>`);\n        const modifierDescription = $(`<div class=\"modifier-description open-matrix-modifier\">${game.i18n.localize(\"SR6.ModifierTypes.Environmental\")}</div>`);\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'environmental'));\n\n        modifierColumn.append(modifier);\n        modifier.append(modifierValue);\n        modifier.append(modifierDescription);\n    }\n\n    async _handleModifierChange(event: Event) {\n        event.preventDefault();\n\n        // Retrieve data from HTML datasets.\n        const element = event.currentTarget as HTMLElement;\n        if (!element.dataset.category || !element.dataset.value) return;\n\n        const category = element.dataset.category as keyof EnvironmentalModifierCategories;\n        const value = Number(element.dataset.value);\n\n        this.app.modifiers.environmental.toggleSelection(category, value);\n        await this.app.modifiers.updateDocument();\n\n        await this.app.render();\n    }\n\n    async _handleRemoveModifiersFromTarget(event: Event) {\n        event.preventDefault();\n\n        this.app.modifiers.environmental.clear();\n        await this.clearModifiersOnTarget();\n\n        await this.app.render();\n    }\n\n    async clearModifiersOnTarget() {\n        await DocumentSituationModifiers.clearTypeOn(this.app.target, 'environmental');\n        // Refresh modifiers. This can be necessary for Actor targets without modifiers when Scene modifiers are present.\n        this.app.modifiers = this.app._getModifiers();\n    }\n}\n\n\nclass MatrixModifiersHandler extends ModifiersHandler {\n    override getData(options?: object | undefined) {\n        return {}\n    }\n\n    override activateListeners(html: JQuery<HTMLElement>) {\n    }\n\n    static override addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR6Actor, modifiers: DocumentSituationModifiers): void {\n        console.log(`${SYSTEM_NAME} | Matrix modifier HUD on renderTokenHUD`);\n\n        // Setup and connect tokenHUD elements.\n        const modifier = $('<div class=\"modifier-row\"></div>');\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-matrix\">${modifiers.noise.applied.total}</div>`);\n        const modifierDescription = $(`<div class=\"modifier-description open-matrix-modifier\">${game.i18n.localize(\"SR6.ModifierTypes.Noise\")}</div>`);\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'matrix'));\n\n        modifierColumn.append(modifier);\n        modifier.append(modifierValue);\n        modifier.append(modifierDescription);\n    }\n}\n\nclass MagicModifiersHandler extends ModifiersHandler {\n    override getData(options?: object | undefined) {\n        return {}\n    }\n\n    override activateListeners(html: JQuery<HTMLElement>) {\n        html.find('.remove-magical-from-target').on('click', this.handleClearMagicModifiers.bind(this));\n    }\n\n    static override addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR6Actor, modifiers: DocumentSituationModifiers): void {\n        console.log(`${SYSTEM_NAME} | Magic modifier HUD on renderTokenHUD`);\n\n        // Don't add awakened modifiers to token hud for mundane actors.\n        if (!actor.isAwakened) return;\n\n        // Setup and connect tokenHUD elements.\n        const modifier = $('<div class=\"modifier-row\"></div>');\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-magic\">${modifiers.background_count.applied.total}</div>`);\n        const modifierDescription = $(`<div class=\"modifier-description open-magic-modifier\">${game.i18n.localize(\"SR6.ModifierTypes.BackgroundCount\")}</div>`);\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'magic'));\n\n        modifierColumn.append(modifier);\n        modifier.append(modifierValue);\n        modifier.append(modifierDescription);\n    }\n\n    async handleClearMagicModifiers(event) {\n        event.preventDefault();\n\n        this.app.modifiers = await DocumentSituationModifiers.clearTypeOn(this.app.target, 'background_count');\n        this.app.render();\n    }\n}\n\n\n/**\n * Recoil Modifier is a physical combat modifier for Ranged Weapon Attacks.\n *\n */\nclass RecoilModifiersHandler extends ModifiersHandler {\n    override getData(options?: object | undefined) {\n        return {}\n    }\n\n    override activateListeners(html: JQuery<HTMLElement>): void {\n        html.find('.recoil-delta button').on('click', this.applyRecoilDelta.bind(this));\n        html.find('button#modifiers-recoil-total').on('click', async event => {\n            if (this.app.modifiers.documentIsScene) return;\n            const actor = this.app.modifiers.document as SR6Actor;\n            await actor.clearProgressiveRecoil();\n            ui.notifications?.info('SR6.Infos.ResetProgressiveRecoil', {localize: true});\n\n            this.app.render();\n        })\n    }\n\n    /**\n     * Apply actor system recoil data back to the actor.\n     *\n     * A delta is a numerical difference to be applied onto the base value\n     *\n     * This method is related to SituationModifierApplication#applyModifierDelta\n     */\n    async applyRecoilDelta(event) {\n        event.preventDefault();\n\n        if (!this.app.modifiers.documentIsActor) return;\n\n        const actor = this.app.modifiers.document as SR6Actor;\n\n        // Expect the element group to siblings.\n        // Triggering DOMElement should contain the delta...\n        const triggerElement = event.target;\n        if (!triggerElement || !triggerElement.dataset.hasOwnProperty('delta'))\n            return console.error('SR6: Elysium | Expected a DOMElement with a different structure');\n\n        const delta = Number(triggerElement.dataset['delta']);\n        if (delta === 0) return;\n\n        // Update source data and update display information.\n        await actor.addRecoil(delta);\n\n        this.app.modifiers.applyAll();\n        this.app.render();\n    }\n\n    static override addTokenHUDElements(modifierColumn: JQuery<HTMLElement>, tokenId: string, actor: SR6Actor, modifiers: DocumentSituationModifiers): void {\n        console.log(`${SYSTEM_NAME} | Recoil modifier HUD on renderTokenHUD`);\n\n        // Setup and connect tokenHUD elements.\n        const modifier = $('<div class=\"modifier-row\"></div>');\n        const modifierValue = $(`<div class=\"modifier-value modifier-value-recoil\">${modifiers.recoil.applied.total}</div>`);\n        const modifierDescription = $(`<div class=\"modifier-description open-recoil-modifier\">${game.i18n.localize(\"SR6.ModifierTypes.Recoil\")}</div>`);\n        modifierDescription.on('click', SituationModifiersApplication.openForTokenHUD(tokenId, 'recoil'));\n\n        modifierColumn.append(modifier);\n        modifier.append(modifierValue);\n        modifier.append(modifierDescription);\n    }\n}\n\n/**\n * Give a GM and user access all situational modifiers.\n *\n * A situational modifiers is anything that doesn't directly depend on the actor but what 'situation' that actor is in:\n * - matrix noise\n * - magic background noise\n * - environmental\n * - ...\n */\nexport class SituationModifiersApplication extends FormApplication {\n    // Static Handlers contain the class references used for both static method calls and to setup the instance handlers.\n    static _staticHandlers: typeof ModifiersHandler[] = [\n        MatrixModifiersHandler,\n        MagicModifiersHandler,\n        EnvironmentalModifiersHandler,\n        RecoilModifiersHandler\n    ];\n    // The default sheet tab to open.\n    static _defaultTabId: string = 'physical';\n\n    // Manage modifiers stored on this target document. This might not be the document meant for those modifiers to be applied to.\n    // While a scene can store modifiers, actors have them applied\n    target: ModifiableDocumentTypes\n    // The modifiers as stored onto the target document.\n    modifiers: DocumentSituationModifiers\n    // Instance handlers contain all functionality for modifier categories as not to clutter the general application.\n    handlers: ModifiersHandler[]\n\n    constructor(target: ModifiableDocumentTypes) {\n        super(target);\n\n        this.target = target;\n        this.modifiers = this._getModifiers();\n        this.handlers = this._prepareHandlers();\n    }\n\n    /**\n     * Prepare all handlers used for the different modifier categories.\n     */\n    _prepareHandlers(): ModifiersHandler[] {\n        return SituationModifiersApplication._staticHandlers.map(staticHandler => new staticHandler(this));\n    }\n\n    override get template() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/situational-modifiers.hbs';\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n\n        options.classes = ['sr6'];\n        options.id = 'situational-modifiers-application';\n        options.title = game.i18n.localize('SR6.SituationalModifiersApplication.Title');\n\n        //@ts-expect-error\n        options.width = 'auto';\n        options.height = 'auto';\n        options.resizable = false;\n\n        options.tabs = [\n            {\n                navSelector: '.tabs',\n                contentSelector: '.sheetbody',\n                initial: SituationModifiersApplication._defaultTabId\n            },\n        ];\n\n        options.submitOnChange = true;\n        options.closeOnSubmit = false;\n\n        return options;\n    }\n\n    override async getData(options?: any): Promise<SituationalModifiersTemplateData> {\n        // Update all modifiers before displaying.\n        this.modifiers.applyAll();\n\n        return {\n            ...await super.getData(options),\n\n            targetType: this._targetTypeLabel,\n            targetName: this.target.name || 'Unknown target',\n\n            modifiers: this.modifiers,\n            environmentalLevels: this.modifiers.environmental.levels\n        }\n    }\n\n    override activateListeners(html: JQuery<HTMLElement>): void {\n        super.activateListeners(html);\n\n        this.handlers.forEach(handler => handler.activateListeners(html));\n\n        html.find('.modifier-delta button').on('click', this.applyModifierDelta.bind(this));\n        html.find('.remove-modifiers-from-target').on('click', this.clearModifierData.bind(this));\n        html.find('.remove-token-modifiers-from-scene').on('click', this.clearTokenModifiersData.bind(this));\n    }\n\n    /**\n     * Apply a formData change based on a custom numerical input element.\n     */\n    async applyModifierDelta(event) {\n        event.preventDefault();\n\n        // Expect the element group to siblings.\n        // Triggering DOMElement should contain the delta...\n        const triggerElement = event.target;\n        if (!triggerElement || !triggerElement.dataset.hasOwnProperty('delta'))\n            return console.error('SR6: Elysium | Expected a DOMElement with a different structure');\n\n        const delta = Number(triggerElement.dataset['delta']);\n        if (delta === 0) return;\n\n        // Value DOMElement should contain the data key...\n        const valueElement = $(triggerElement).siblings().closest('input');\n        if (!valueElement || !valueElement.attr('name'))\n            return console.error('SR6: Elysium | Expected a DOMElement with a name attribute');\n\n        // Extract value from data using value DOMElement data key...\n        const sourceKey = valueElement.attr('name') as string;\n        const appliedKey = sourceKey.includes('source') ? sourceKey.replace('source', 'applied') : sourceKey;\n\n        const currentValue = foundry.utils.getProperty(this, appliedKey) ?? 0;\n        if (isNaN(currentValue))\n            return console.error('SR6: Elysium | Expected data property is not a number', sourceKey, currentValue);\n\n        const value = currentValue + delta;\n\n        const formData = {\n            [sourceKey]: value\n        }\n\n        // Update source data and update display information.\n        await this._updateObject(event, formData);\n        this.modifiers.applyAll();\n\n        this.render();\n    }\n\n    /**\n     * Clear all modifiers from this document\n     */\n    async clearModifierData() {\n        await this.modifiers.clearAll();\n        this.render(true);\n    }\n\n    /**\n     * Clear all modifiers from all tokens on this scene.\n     */\n    async clearTokenModifiersData() {\n        await this.modifiers.clearAllTokensOnScene();\n        this.render(true);\n    }\n\n    async _updateObject(event: Event, formData?: object | undefined): Promise<void> {\n            if (!formData) return;\n\n            for (const [key, value] of Object.entries(formData)) {\n                foundry.utils.setProperty(this, key, value);\n            }\n\n            // Save source selection\n            await DocumentSituationModifiers.setDocumentModifiers(this.target, this.modifiers.source);\n    }\n\n    /**\n     * Override _onChangeInput to include a render on changing modifier values.\n     */\n    override async _onChangeInput(event) {\n        await super._onChangeInput(event);\n        this.render(true);\n    }\n\n    _getModifiers(): DocumentSituationModifiers {\n        return DocumentSituationModifiers.fromDocument(this.target);\n    }\n\n    get _targetTypeLabel(): string {\n        if (this.target instanceof Scene) {\n            return game.i18n.localize('SR6.FOUNDRY.Scene');\n        }\n        if (this.target instanceof SR6Actor) {\n            return game.i18n.localize('SR6.FOUNDRY.Actor');\n        }\n\n        return '';\n    }\n\n    static getControl() {\n        return {\n            name: 'situational-modifiers-application',\n            title: 'CONTROLS.SR6.SituationalModifiers',\n            icon: 'fas fa-list',\n            onClick: SituationModifiersApplication.openForCurrentScene,\n            button: true\n        }\n    }\n\n    // TODO: Implement system wide token HUD management...\n    /**\n     * Add buttons to both show and open global modifiers currently applied to this token when showing the\n     * tokenHUD.\n     */\n    static onRenderTokenHUD(app: TokenHUD, html: JQuery, data: any) {\n        if (!data._id) return;\n\n        // Generate general structure for ModifierHandlers to connect to.\n        const token = Helpers.getToken(data._id);\n        if (!token) return;\n\n        const actor = token.actor as SR6Actor;\n        const modifiers = actor.getSituationModifiers();\n        modifiers.applyAll();\n\n        // Setup and connect tokenHUD elements.\n        const container = $('<div class=\"col far-right sr-modifier-container\"></div>');\n        const column = $('<div class=\"col modifier-column\"></div>');\n\n        container.append(column);\n\n        // Connect SR-FoundryVTT tokenHUD elements to FoundryVTT tokenHUD column structure.\n        html.find('.col.right').after(container);\n\n        // Hand DOM element over and let ModifierHandlers add their TokenHUDElements.\n        SituationModifiersApplication._staticHandlers.forEach(handler => handler.addTokenHUDElements(column, data._id, actor, modifiers));\n    }\n\n    static openForCurrentScene() {\n        if (!canvas || !canvas.ready || !canvas.scene) return;\n        new SituationModifiersApplication(canvas.scene).render(true);\n    }\n\n    /**\n     * Part of the tokenHUD workflow makes it necessary to have the token id piped in\n     * @param tokenId\n     */\n    static openForTokenHUD(tokenId: string, tab?: string) {\n        const token = Helpers.getToken(tokenId);\n\n        // When the token hud control is activated, this inline handler will be called with it.\n        return async (event) => {\n            event.preventDefault();\n\n            if (!token || !token.actor) return;\n            const app = new SituationModifiersApplication(token.actor);\n            // Use async render as activateTab needs tabs to bind to rendered result.\n            await app._render(true);\n            // if (tab) app.activateTab(tab);\n        }\n    }\n\n    /**\n     * Open the application when the system registered keybinding has been pressed.\n     *\n     * If the user is a player => open selection or character\n     * If the user is a gm => open selection or scene\n     */\n    static openForKeybinding() {\n        console.debug(`Shadowrun 6e | Trying to open ${this.name}`);\n\n        let document: ModifiableDocumentTypes|null = null;\n\n        const controlledActors = Helpers.getControlledTokenActors();\n        // Only open on selection for a single token.\n        if (controlledActors.length === 1) document = controlledActors[0];\n\n        // For GMs try scene for no selection.\n        if (!document && game.user?.isGM) {\n            document = canvas.scene;\n        }\n\n        // Try user character as last fallback.\n        if (!document) {\n            document = game.user?.character as SR6Actor;\n        }\n\n        if (!document) return console.debug(`Shadowrun 6e | ...aborting, as no suitable document could be found`);\n        console.debug(`Shadowrun 6e | ...opening with document ${document.uuid}`, document);\n\n        const app = new SituationModifiersApplication(document);\n        // Force, as it may already be open.\n        app.render(true);\n    }\n}\n", "import SkillEditFormData = Shadowrun.SkillEditFormData;\nimport {SR6Actor} from \"../../actor/SR6Actor\";\nimport {SR6} from \"../../config\";\nimport { LinksHelpers } from \"../../utils/links\";\nimport { parseDropData } from \"../../utils/sheets\";\nimport { Translation } from '../../utils/strings';\n\nexport class SkillEditSheet extends DocumentSheet {\n    skillId: string;\n\n    override get document(): SR6Actor {\n        return super.document as SR6Actor;\n    }\n\n    constructor(actor, options, skillId) {\n        super(actor, options);\n        this.skillId = skillId;\n    }\n\n    _updateString() {\n        return `system.skills.active.${this.skillId}`;\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        return foundry.utils.mergeObject(options, {\n            id: 'skill-editor',\n            classes: ['sr6', 'sheet', 'skill-edit-window'],\n            template: 'systems/shadowrun6-elysium/dist/templates/apps/skill-edit.html',\n            width: 300,\n            height: 'auto',\n            submitOnClose: true,\n            submitOnChange: true,\n            closeOnSubmit: false,\n            resizable: true,\n        });\n    }\n\n    override get title(): string {\n        const label = this.document.getSkillLabel(this.skillId);\n        return `${game.i18n.localize('SR6.EditSkill')} - ${game.i18n.localize(label as Translation)}`;\n    }\n\n    _onUpdateObject(event, formData, updateData) {\n        // get skill name.\n        // NOTE: This differs from the skill id, which is used to identify the skill internally.\n        const name = formData['skill.name'];\n\n        const link = formData['skill.link'];\n\n        // get attribute name\n        const attribute = formData['skill.attribute'];\n\n        // get base value\n        const base = formData['skill.base'];\n\n        // get can default\n        const canDefault = formData['skill.canDefault'];\n\n        // process specializations\n        const specsRegex = /skill\\.specs\\.(\\d+)/;\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\n            const found = key.match(specsRegex);\n            if (found && found[0]) {\n                running.push(val);\n            }\n            return running;\n        }, [] as any[]);\n\n        // process bonuses\n        const bonusKeyRegex = /skill\\.bonus\\.(\\d+).key/;\n        const bonusValueRegex = /skill\\.bonus\\.(\\d+).value/;\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\n            const foundKey = key.match(bonusKeyRegex);\n            const foundVal = key.match(bonusValueRegex);\n            if (foundKey && foundKey[0] && foundKey[1]) {\n                const index = foundKey[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].key = value;\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\n                const index = foundVal[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].value = value;\n            }\n\n            return running;\n        }, [] as any[]);\n\n        updateData[this._updateString()] = {\n            specs,\n            bonus,\n            name,\n            attribute,\n            canDefault,\n            link\n        };\n\n        // Avoid re-applying active effects without actual base level changes.\n        // An actual base level change will come without an active effect, since it's user input.\n        if (event.currentTarget.name === 'skill.base') updateData[this._updateString()].base = base;\n    }\n\n\n    /** @override */\n    // @ts-expect-error // SkillEditSheet vs DocumentSheet typing, I don't quite get it...\n    async _updateObject(event, formData) {\n        // Without an actual input field used, avoid a unneeded update...\n        // ...the update would happen due to how _onUpdateObject works.\n        if (event.currentTarget) {\n            const updateData = {};\n            this._onUpdateObject(event, formData, updateData);\n            await this.document.update(updateData);\n        }\n    }\n\n    override activateListeners(html) {\n        super.activateListeners(html);\n\n        /**\n         * Drag and Drop Handling\n         */\n        //@ts-expect-error\n        this.form.ondragover = (event) => this._onDragOver(event);\n        //@ts-expect-error\n        this.form.ondrop = (event) => this._onDrop(event);\n\n        $(html).find('.open-source').on('click', this._onOpenSource.bind(this));\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\n    }\n\n    async _addNewBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const skill = this.getData().skill;\n        if (!skill) return;\n        const { bonus = [] } = skill;\n        // add blank line for new bonus\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\n        await this.document.update(updateData);\n    }\n\n    override async _onDrop(event) {\n        if (!game.items || !game.actors || !game.scenes) return;\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Parse drop data.\n        const data = parseDropData(event);\n        if (!data) return;\n\n        this.document.update({[`${this._updateString()}.link`]: data.uuid});\n    }\n\n    async _removeBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().skill;\n        if (data?.bonus) {\n            const { bonus } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                bonus.splice(index, 1);\n                updateData[`${this._updateString()}.bonus`] = bonus;\n                await this.document.update(updateData);\n            }\n        }\n    }\n\n    /**\n     * Open a source document connected to this skill.\n     */\n    async _onOpenSource(event) {\n        event.preventDefault();\n        LinksHelpers.openSource(this.getData().skill.link);\n    }\n\n    async _addNewSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().skill;\n        if (data?.specs) {\n            // add a blank line to specs\n            const { specs } = data;\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\n        }\n        await this.document.update(updateData);\n    }\n\n    async _removeSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().skill;\n        if (data?.specs) {\n            const { specs } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                specs.splice(index, 1);\n                updateData[`${this._updateString()}.specs`] = specs;\n                await this.document.update(updateData);\n            }\n        }\n    }\n\n    /** Enhance attribute selection by an empty option to allow newly created skills to have no attribute selected.\n     */\n    _getSkillAttributesForSelect() {\n        return {...SR6.attributes, '': ''};\n    }\n\n    _allowSkillNameEditing(): boolean {\n        const skill = this.document.getSkill(this.skillId);\n        // Typescript sees string here? Double negate for boolean type cast...\n        return !!((!skill?.name && !skill?.label) || (skill?.name && !skill?.label));\n    }\n\n    // @ts-expect-error // Missing DocumentSheetData typing\n    getData(): SkillEditFormData {\n        const data = super.getData();\n\n        //@ts-expect-error TODO: foundry-vtt-types v10'\n        // skill property will hold a direct skill reference\n        data['skill'] = foundry.utils.getProperty(data.data, this._updateString());\n        data['editable_name'] = this._allowSkillNameEditing();\n        data['editable_canDefault'] = true;\n        data['editable_attribute'] = true;\n        data['attributes'] = this._getSkillAttributesForSelect();\n        return data as unknown as SkillEditFormData;\n    }\n}\n", "import { SkillEditSheet } from './SkillEditSheet';\nimport SkillEditFormData = Shadowrun.SkillEditFormData;\n\nexport class LanguageSkillEditSheet extends SkillEditSheet {\n    override _updateString() {\n        return `system.skills.language.value.${this.skillId}`;\n    }\n\n    override getData() {\n        return foundry.utils.mergeObject(super.getData(), {\n            editable_name: true,\n            editable_canDefault: false,\n            editable_attribute: false\n        } as SkillEditFormData);\n    }\n\n    /** @override */\n    override _onUpdateObject(event, formData, updateData) {\n        super._onUpdateObject(event, formData, updateData);\n        const name = formData['skill.name'];\n        const currentData = updateData[this._updateString()] || {};\n        updateData[this._updateString()] = {\n            ...currentData,\n            name,\n        };\n    }\n}\n", "import { LanguageSkillEditSheet } from './LanguageSkillEditSheet';\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\n\nexport class KnowledgeSkillEditSheet extends LanguageSkillEditSheet {\n    category: KnowledgeSkillCategory;\n    constructor(actor, options, skillId, category) {\n        super(actor, options, skillId);\n        this.category = category;\n    }\n    override _updateString() {\n        return `system.skills.knowledge.${this.category}.value.${this.skillId}`;\n    }\n}\n", "import { FormDialog, FormDialogData } from \"./FormDialog\";\nimport { SR6Actor } from \"../../actor/SR6Actor\";\nimport { SR6Item } from '../../item/SR6Item';\n\n/**\n * Show a list of the SR6Actor inventories to the user and let them choose one.\n *\n * @returns The inventory name selected.\n */\nexport class MoveInventoryDialog extends FormDialog {\n    /**\n     * @param actor Use this actor's inventories to select from.\n     * @param item The item to be moved between inventories\n     * @param sourceInventory The currently selected inventory, which won't be displayed.\n     * @param options\n     */\n    constructor(actor: SR6Actor, item: SR6Item, sourceInventory: string, options?) {\n        const dialogData = MoveInventoryDialog.getDialogData(actor, item, sourceInventory) as unknown as FormDialogData;\n\n        super(dialogData, options);\n    }\n\n    static override get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'move-inventory-application';\n        options.classes = ['sr6', 'form-dialog'];\n        options.height = 'auto';\n        return options;\n    }\n\n    static getDialogData(actor: SR6Actor, item: SR6Item, sourceInventory: string) {\n        const inventories = MoveInventoryDialog.selectableInventories(actor, item, sourceInventory);\n\n        return {\n            title: game.i18n.localize('SR6.MoveInventoryDialog.Title'),\n            buttons: {\n                move: {\n                    label: game.i18n.localize('SR6.MoveInventoryDialog.Move')\n                },\n                cancel: {\n                    label: game.i18n.localize('SR6.MoveInventoryDialog.Cancel')\n                }\n            },\n            default: 'cancel',\n            templateData: { inventories },\n            templatePath: 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/move-inventory-dialog.html',\n            onAfterClose: async html => {\n                return html.find('input[name=\"inventories\"]:checked').val();\n            }\n        }\n    }\n\n    /**\n     * Depending on actor and item different intenvories are selectable.\n     *\n     * @param actor Actor to check for inventories\n     * @param item Item that is to be moved to a new inventory\n     * @param sourceInventory Inventory that is to be moved from\n     * @returns List of inventories\n     */\n    static selectableInventories(actor: SR6Actor, item: SR6Item, sourceInventory: string) {\n        // The current item may be shown in all inventories, so show the currently active inventory as well.\n        if (sourceInventory !== actor.allInventories.name && actor.inventory.isItemInInventory(actor.allInventories.name, item)) {\n            const inventories = Object.values(actor.inventory.getAll())\n                .filter(inventory => inventory.name !== actor.allInventories.name)\n                .sort();\n\n            inventories.unshift(actor.defaultInventory);\n            return inventories;\n        }\n\n\n        // The current item is shown in one inventory, so hide the currently active inventory.\n        const inventories = Object.values(actor.inventory.getAll())\n            .filter(inventory => inventory.name !== sourceInventory)\n            .sort();\n\n        // Add the default inventories for selection when necessary.\n        if (sourceInventory !== actor.defaultInventory.name) inventories.unshift(actor.defaultInventory);\n\n        return inventories;\n    }\n}\n", "import { DataDefaults } from \"../../../../../data/DataDefaults\";\nimport { SR6 } from \"../../../../../config\";\n\nexport const getValues = (val) => {\n    const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\n    const l = val.match(regex);\n    return l || ['0'];\n};\n\nexport const getArray = (value) => {\n    if(value) {\n        return Array.isArray(value) ? value : [value];\n    }\n    return []\n};\n\n/**\n *  Creates the description data from the chummer entry\n *  @param chummerEntry The chummer entry (the item)\n */\nexport const parseDescription = (chummerEntry) => {\n    const parsedDescription = DataDefaults.descriptionData();\n\n    if (chummerEntry.source && chummerEntry.page) {\n        parsedDescription.source = `${chummerEntry.source} ${chummerEntry.page}`\n    }\n\n    if (chummerEntry.description) {\n        parsedDescription.value = chummerEntry.description;\n    }\n\n    if (chummerEntry.notes) {\n        parsedDescription.value = chummerEntry.notes;\n    }\n\n    return parsedDescription\n}\n\n/**\n *  Creates the technology data from the chummer entry\n *  @param chummerEntry The chummer entry (the item)\n */\nexport const parseTechnology = (chummerEntry) => {\n    const parsedTechnology = DataDefaults.technologyData();\n\n    if (chummerEntry.rating) {\n        parsedTechnology.rating = chummerEntry.rating;\n    }\n\n    if (chummerEntry.avail) {\n        parsedTechnology.availability = chummerEntry.avail;\n    }\n\n    if (chummerEntry.qty) {\n        parsedTechnology.quantity = chummerEntry.qty;\n    }\n\n    if (chummerEntry.cost) {\n        parsedTechnology.cost = parseFloat(chummerEntry.cost.replace(/[^\\d\\.\\-]/g, \"\"));\n    }\n\n    if (chummerEntry.equipped?.toLowerCase() === 'true') {\n        parsedTechnology.equipped = true;\n    }\n\n    if (chummerEntry.conditionmonitor) {\n        parsedTechnology.condition_monitor.max = Number(chummerEntry.conditionmonitor);\n    }\n\n    if (chummerEntry.conceal) {\n        parsedTechnology.conceal.base = Number(chummerEntry.conceal);\n    }\n\n    return parsedTechnology\n}\n\nexport const setSubType = (parsedItem, parserType, subType) => {\n    if (Object.keys(SR6.itemSubTypeIconOverrides[parserType]).includes(subType)) {\n        parsedItem.importFlags.subType = formatAsSlug(subType);\n    }\n}\n\nexport const createItemData = (name, type, system) => {\n    return {\n        name: name,\n        _id: '',\n        folder: '',\n        flags: {},\n        type: type,\n        system,\n        permission: {\n            default: 2,\n        },\n    };\n}\n\n// formatAsSlug and genImportFlags copied from original implementation in bulk importer DataImporter.ts\n/**\n* Reformat the name or subtype name so it matches the categories in config.ts\n* @param name The item's name or subtype name to reformat\n*/\nexport const formatAsSlug = (name) => {\n    return name.trim().toLowerCase().replace((/'|,|\\[|\\]|\\(|\\)|:/g), '').split((/-|\\s|\\//g)).join('-');\n }\n\n /**\n * Generate default import flags\n * @param name The item's English name, formatted as a slug using formatAsSlug\n * @param type The item's type\n */\n export const genImportFlags = (name, type) => {\n    const flags = {\n        name: name, // original english name\n        type: type,\n        subType: '',\n        isFreshImport: true,\n        isImported: true\n    }\n    return flags;\n }\n", "import { getArray } from \"../importHelper/BaseParserFunctions\";\n\nexport class InitiationParser {\n    parseInitiation(chummerChar, system) {\n        const initiationgrades = getArray(chummerChar.initiationgrade.initiationgrade);\n        \n        system.magic.initiation = Math.max(...initiationgrades.filter(grade => grade.technomancer == \"False\").map(grade => grade.grade))\n    }\n}", "import { getArray } from \"../importHelper/BaseParserFunctions\";\n\nexport class SubmersionParser {\n    parseSubmersions(chummerChar, system) {\n        const initiationgrades = getArray(chummerChar.initiationgrade.initiationgrade);\n        \n        system.technomancer.submersion = Math.max(...initiationgrades.filter(grade => grade.technomancer == \"True\").map(grade => grade.grade))\n    }\n}", "import {_mergeWithMissingSkillFields} from \"../../../../actor/prep/functions/SkillsPrep\";\nimport { InitiationParser } from \"../itemImporter/magicImport/InitiationParser\";\nimport { SubmersionParser } from \"../itemImporter/technoImport/SubmersionParser\";\n\n/**\n * Parses all non-item character information from a chummer character object.\n */\nexport class CharacterInfoUpdater {\n\n    /**\n     *  Maps the chummer attribute name to our sr5-foundry attribute name\n     *  @param attName name of the chummer attribute\n     */\n    parseAttName = (attName) =>  {\n        if (attName.toLowerCase() === 'bod') {\n            return 'body';\n        }\n        if (attName.toLowerCase() === 'agi') {\n            return 'agility';\n        }\n        if (attName.toLowerCase() === 'rea') {\n            return 'reaction';\n        }\n        if (attName.toLowerCase() === 'str') {\n            return 'strength';\n        }\n        if (attName.toLowerCase() === 'cha') {\n            return 'charisma';\n        }\n        if (attName.toLowerCase() === 'int') {\n            return 'intuition';\n        }\n        if (attName.toLowerCase() === 'log') {\n            return 'logic';\n        }\n        if (attName.toLowerCase() === 'wil') {\n            return 'willpower';\n        }\n        if (attName.toLowerCase() === 'edg') {\n            return 'edge';\n        }\n        if (attName.toLowerCase() === 'mag') {\n            return 'magic';\n        }\n        if (attName.toLowerCase() === 'res') {\n            return 'resonance';\n        }\n    };\n\n    getArray = (value) => {\n        return Array.isArray(value) ? value : [value];\n    };\n\n\n    /**\n     *  Converts the chummer attribute value to our sr5-foundry attribute value\n     *  @param att the chummer attribute\n     */\n    parseAttBaseValue = (att) => {\n        if (att.name.toLowerCase() === 'edg') {\n            // The edge attribute value is stored in the \"base\" field instead of the total field\n            // In chummer, the \"total\" field is used for the amount of edge remaining to a character\n            return parseInt(att.base);\n        }\n        else {\n            return parseInt(att.total);\n        }\n    }\n\n    /**\n     * Parses the actor data from the chummer file and returns an updated clone of the actor data.\n     * @param {*} actorSource The actor data (actor not actor.system) that is used as the basis for the import. Will not be changed.\n     * @param {*} chummerChar The chummer character to parse.\n     */\n    async update(actorSource, chummerChar) {\n\n        const clonedActorSource = foundry.utils.duplicate(actorSource);\n\n        // Name is required, so we need to always set something (even if the chummer field is empty)\n        if (chummerChar.alias) {\n            clonedActorSource.name = chummerChar.alias;\n        }\n        else {\n            clonedActorSource.name = chummerChar.name ? chummerChar.name : '[Name not found]';\n        }\n        clonedActorSource.prototypeToken.name = clonedActorSource.name;\n\n        this.importBasicData(clonedActorSource.system, chummerChar);\n        await this.importBio(clonedActorSource.system, chummerChar);\n        this.importAttributes(clonedActorSource.system, chummerChar)\n        this.importInitiative(clonedActorSource.system, chummerChar);\n        this.importSkills(clonedActorSource.system, chummerChar);\n\n        if(chummerChar.critterpowers?.critterpower) {\n            clonedActorSource.system.is_critter = true;\n        }\n\n        return clonedActorSource;\n    }\n\n    importBasicData(system, chummerChar) {\n\n        try {\n            if (chummerChar.metatype) {\n                // Avoid i18n metatype field issues. Chummer metatype aren't lowercase but foundry system metatypes are.\n                system.metatype = chummerChar.metatype_english.toLowerCase();\n            }\n            if (chummerChar.sex) {\n                system.sex = chummerChar.sex;\n            }\n            if (chummerChar.age) {\n                system.age = chummerChar.age;\n            }\n            if (chummerChar.height) {\n                system.height = chummerChar.height;\n            }\n            if (chummerChar.weight) {\n                system.weight = chummerChar.weight;\n            }\n            if (chummerChar.calculatedstreetcred) {\n                system.street_cred = chummerChar.calculatedstreetcred;\n            }\n            if (chummerChar.calculatednotoriety) {\n                system.notoriety = chummerChar.calculatednotoriety;\n            }\n            if (chummerChar.calculatedpublicawareness) {\n                system.public_awareness = chummerChar.calculatedpublicawareness;\n            }\n            if (chummerChar.karma) {\n                system.karma.value = chummerChar.karma;\n            }\n            if (chummerChar.totalkarma) {\n                system.karma.max = chummerChar.totalkarma;\n            }\n            if (chummerChar.technomancer?.toLowerCase() === 'true') {\n                system.special = 'resonance';\n                \n                if(chummerChar.initiationgrade) {\n                    new SubmersionParser().parseSubmersions(chummerChar, system)\n               }\n            }\n            if (\n                chummerChar.magician?.toLowerCase() === 'true' ||\n                chummerChar.adept?.toLowerCase() === 'true'\n            ) {\n                system.special = 'magic';\n                let attr = [];\n                if (chummerChar.tradition?.drainattribute?.attr) {\n                    attr = chummerChar.tradition.drainattribute.attr;\n                } else if (chummerChar.tradition?.drainattributes) {\n                    attr = chummerChar.tradition.drainattributes\n                        .split('+')\n                        .map((item) => item.trim());\n                }\n                attr.forEach((att) => {\n                    const attName = this.parseAttName(att);\n                    if (attName !== 'willpower') {\n                        system.magic.attribute = attName;\n                    }\n                });\n\n                if(chummerChar.initiationgrade) {\n                     new InitiationParser().parseInitiation(chummerChar, system)\n                }\n\n            }\n            if (chummerChar.totaless) {\n                system.attributes.essence.value = chummerChar.totaless;\n            }\n            if (chummerChar.nuyen) {\n                system.nuyen = parseInt(chummerChar.nuyen.replace(',', '').replace('.', ''));\n            }\n        } catch (e) {\n            console.error(`Error while parsing character information ${e}`);\n        }\n    }\n\n    async importBio(system, chummerChar) {\n        system.description.value = '';\n\n        // Adding the option async.true is necessary for the pdf-pager module not to cause an error on import.\n\n        // Chummer outputs html and wraps every section in <p> tags,\n        // so we just concat everything with an additional linebreak in between\n        if (chummerChar.description) {\n            system.description.value += await TextEditor.enrichHTML(chummerChar.description + '<br/>', {async: true});\n        }\n\n        if (chummerChar.background) {\n            system.description.value += await TextEditor.enrichHTML(chummerChar.background + '<br/>', {async: true});\n        }\n\n        if (chummerChar.concept) {\n            system.description.value += await TextEditor.enrichHTML(chummerChar.concept + '<br/>', {async: true});\n        }\n\n        if (chummerChar.notes) {\n            system.description.value += await TextEditor.enrichHTML(chummerChar.notes + '<br/>', {async: true});\n        }\n    }\n\n    importAttributes(system, chummerChar) {\n        if(!chummerChar.attributes) {\n            return;\n        }\n\n        const atts = chummerChar.attributes[1].attribute;\n        atts.forEach((att) => {\n            try {\n                const attName = this.parseAttName(att.name_english);\n                if (attName) {\n                    system.attributes[attName].base = this.parseAttBaseValue(att);\n                }\n\n            } catch (e) {\n                console.error(`Error while parsing attributes ${e}`);\n            }\n        });\n    }\n\n    // TODO: These modifiers are very unclear in how they're used here and where they come from.\n    importInitiative(system, chummerChar) {\n        try {\n            system.modifiers.meat_initiative = chummerChar.initbonus;\n\n            // 'initdice' contains the total amount of initiative dice, not just the bonus.\n            system.modifiers.meat_initiative_dice = chummerChar.initdice - 1;\n        } catch (e) {\n            console.error(`Error while parsing initiative ${e}`);\n        }\n    }\n\n    importSkills(system, chummerChar) {\n        const chummerSkills = chummerChar.skills?.skill;\n\n        try {\n            let languageSkills = chummerSkills?.filter(skill => skill.islanguage && skill.islanguage.toLowerCase() === 'true') ?? []\n            this.handleLanguageSkills(system, languageSkills)\n    \n            let knowledgeSkills = chummerSkills?.filter(skill => skill.rating > 0 && skill.knowledge && skill.knowledge.toLowerCase() === 'true') ?? []\n            this.handleKnowledgeSkills(system, knowledgeSkills)\n    \n            let activeSkills = chummerSkills?.filter( skill => skill.rating > 0 && !languageSkills.includes(skill) && !knowledgeSkills.includes(skill) ) ?? [];\n            this.handleActiveSkills(system, activeSkills)\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    handleActiveSkills(system, activeSkills) {\n\n        for (let skill of activeSkills) {\n            let name = skill.name_english\n                .toLowerCase()\n                .trim()\n                .replace(/\\s/g, '_')\n                .replace(/-/g, '_');\n\n            if (name.includes('exotic') && name.includes('_weapon')) {\n                name = name.replace('_weapon', '');\n            }\n\n            if (name.includes('exotic') && name.includes('_ranged')) {\n                name = name.replace('_ranged', '_range');\n            }\n               \n            if (name === 'pilot_watercraft') {\n                name = 'pilot_water_craft';\n            }\n                \n            let parsedSkill = system.skills.active[name];\n\n            parsedSkill.base = parseInt(skill.rating);\n\n            if (skill.skillspecializations) {\n                parsedSkill.specs = this.getArray(skill.skillspecializations.skillspecialization).map(spec => spec.name);\n            }\n\n            // Precaution to later only deal with complete SkillField data models.\n            _mergeWithMissingSkillFields(parsedSkill);\n        }\n    }\n\n    handleLanguageSkills(system, languageSkills) {\n        system.skills.language.value = {}\n\n        for (let skill of languageSkills) {\n            let parsedSkill = {};\n            const id = randomID(16);\n            system.skills.language.value[id] = parsedSkill;\n\n            // Transform native rating into max rating.\n            if (skill.isnativelanguage.toLowerCase() === 'true') {\n                skill.rating = 6;\n            }\n\n            parsedSkill.name = skill.name;\n            parsedSkill.base = parseInt(skill.rating);\n    \n            if (skill.skillspecializations) {\n                parsedSkill.specs = this.getArray(skill.skillspecializations.skillspecialization).map(spec => spec.name);\n            }\n    \n            // Precaution to later only deal with complete SkillField data models.\n            _mergeWithMissingSkillFields(parsedSkill);\n        }\n    }\n\n    handleKnowledgeSkills(system, knowledgeSkills) {\n        system.skills.knowledge.academic.value = {}\n        system.skills.knowledge.interests.value = {}\n        system.skills.knowledge.professional.value = {}\n        system.skills.knowledge.street.value = {}\n\n        for (let skill of knowledgeSkills) {\n            const id = randomID(16);\n            let parsedSkill = {};\n    \n            \n            // Determine the correct knowledge skill category and assign the skill to it\n            let skillCategory;\n            if (skill.skillcategory_english) {\n                const cat = skill.skillcategory_english.toLowerCase();\n                if (cat === 'street')\n                    skillCategory = system.skills.knowledge.street.value;\n                if (cat === 'academic')\n                    skillCategory = system.skills.knowledge.academic.value;\n                if (cat === 'professional')\n                    skillCategory = system.skills.knowledge.professional.value;\n                if (cat === 'interest')\n                    skillCategory = system.skills.knowledge.interests.value;\n                if (skillCategory)\n                    skillCategory[id] = parsedSkill;\n            }\n            else {\n                if (skill.attribute.toLowerCase() === 'int') {\n                    system.skills.knowledge.street.value[id] = parsedSkill;\n                }\n                if (skill.attribute.toLowerCase() === 'log') {\n                    system.skills.knowledge.professional.value[id] = parsedSkill;\n                }\n            }\n\n            parsedSkill.name = skill.name;\n            parsedSkill.base = parseInt(skill.rating);\n\n            if (skill.skillspecializations) {\n                parsedSkill.specs = this.getArray(skill.skillspecializations.skillspecialization).map(spec => spec.name);\n            }\n\n            // Precaution to later only deal with complete SkillField data models.\n            _mergeWithMissingSkillFields(parsedSkill);\n        }\n    }\n}\n\n", "import { parseDescription, parseTechnology, formatAsSlug, genImportFlags } from \"./BaseParserFunctions.js\"\nimport { DataDefaults } from \"../../../../../data/DataDefaults.js\";\nimport { SR6 } from \"../../../../../config.js\";\n\n/**\n * Parses a certain class of gear (depending on the implementation).\n */\nexport interface GearParser {\n    /**\n     * Parses a gear entry and returns the corresponding foundry sr item data.\n     * @param chummerGear A chummer gear entry\n     */\n    parse(chummerGear : any) : any\n}\n\n/**\n * Base class for all gear parsers. Parses common information across all gear.\n */\nexport class BaseGearParser implements GearParser {\n    parse(chummerGear : any) : any {\n        const parsedGear = this.getDefaultData();\n        const parserType = 'equipment';\n        parsedGear.name = chummerGear.name;\n        if (chummerGear.extra)\n        {\n            parsedGear.name += ` (${chummerGear.extra})`;\n        }\n\n        parsedGear.system.technology = parseTechnology(chummerGear);\n        parsedGear.system.description = parseDescription(chummerGear);\n\n        // Assign import flags\n        parsedGear.system.importFlags = genImportFlags(formatAsSlug(chummerGear.name), parserType);\n\n        return parsedGear;\n    }\n\n    setSubType(parsedGear: any, parserType: string, subType: string) {\n        if (Object.keys(SR6.itemSubTypeIconOverrides[parserType]).includes(subType)) {\n            parsedGear.system.importFlags.subType = formatAsSlug(subType);\n        }\n    }\n\n    private getDefaultData() {\n        return DataDefaults.baseItemData<Shadowrun.EquipmentItemData, Shadowrun.EquipmentData>({type: 'equipment'});\n    }\n}\n", "import { BaseGearParser } from \"../importHelper/BaseGearParser\"\nimport { formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\n\n/**\n * Parses SINs and the attached licenses.\n * Licenses that are not attached to a SIN are not handled.\n */\nexport class SinParser extends BaseGearParser {\n    override parse(chummerGear : any) : any {\n        const parserType = 'sin';\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = parserType;\n\n        // Create licenses if there are any\n        if (chummerGear.children) {\n\n            // \"gear\" is either  a single gear entry or an array of gear entries depending on the number of licenses\n            const chummerLicenses : any[] = [];\n            if (!Array.isArray(chummerGear.children.gear)) {\n                chummerLicenses.push(chummerGear.children.gear)\n            }\n            else {\n                chummerLicenses.push(...chummerGear.children.gear);\n            }\n\n            parsedGear.system.licenses = this.parseLicenses(chummerLicenses);\n        }\n\n        // Assign import flags\n        parsedGear.system.importFlags = genImportFlags(formatAsSlug(chummerGear.name_english), parserType);\n\n        return parsedGear;\n    }\n\n    private parseLicenses(chummerLicenses : any) : any[] {\n        const parsedLicenses : any[] = [];\n\n        chummerLicenses.forEach(chummerLicense => {\n            if (chummerLicense.category_english === 'ID/Credsticks')\n            {\n                parsedLicenses.push(\n                    {\n                        name: chummerLicense.extra, // 'extra' holds the type of license from chummer\n                        rtg: chummerLicense.rating,\n                        description: ''\n                    }\n                );\n            }\n        });\n\n        return parsedLicenses;\n    }\n}\n", "import { BaseGearParser } from \"../importHelper/BaseGearParser\"\nimport { formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\n\n/**\n * Parses devices (commlinks, decks, and RCCs)\n */\nexport class DeviceParser extends BaseGearParser {\n\n    override parse(chummerGear : any) : any {\n        const parserType = 'device';\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = parserType;\n        parsedGear.system.technology.rating = chummerGear.devicerating;\n\n        parsedGear.system.atts = {\n            att1:\n            {\n                value: parseInt(chummerGear.attack),\n                att: 'attack'\n            },\n\n            att2:\n            {\n                value: parseInt(chummerGear.sleaze),\n                att: 'sleaze'\n            },\n\n            att3:\n            {\n                value: parseInt(chummerGear.dataprocessing),\n                att: 'data_processing'\n            },\n\n            att4:\n            {\n                value: parseInt(chummerGear.firewall),\n                att: 'firewall'\n            }\n        };\n\n        if (chummerGear.category_english === 'Cyberdecks')\n        {\n            parsedGear.system.category = 'cyberdeck';\n        }\n\n        if (chummerGear.category_english === 'Commlinks')\n        {\n            parsedGear.system.category = 'commlink';\n        }\n\n        if (chummerGear.category_english === 'Rigger Command Consoles')\n        {\n            parsedGear.system.category = 'rcc';\n        }\n        if (chummerGear.category_english === 'Entertainment')\n        {\n            // Chummer has prepaid commlinks set up as Entertainment category\n            parsedGear.system.category = 'commlink';\n        }\n\n        // Assign import flags\n        parsedGear.system.importFlags = genImportFlags(formatAsSlug(chummerGear.name_english), parserType);\n        this.setSubType(parsedGear, parserType, parsedGear.system.category);\n\n        return parsedGear;\n    }\n}", "import { BaseGearParser } from \"../importHelper/BaseGearParser\"\nimport { formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\n\n/**\n * Parses common, hacking and agent programs.\n */\nexport class ProgramParser extends BaseGearParser {\n    override parse(chummerGear : any) : any {\n        const parserType = 'program';\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = parserType;\n\n        if (chummerGear.category_english === 'Common Programs')\n        {\n            parsedGear.system.type = 'common_program'\n        }\n        else if (chummerGear.category_english === 'Hacking Programs')\n        {\n            parsedGear.system.type = 'hacking_program'\n        }\n        else if (chummerGear.category_english === 'Software')\n        {\n            parsedGear.system.type = 'agent'\n        }\n\n        // Assign import flags\n        parsedGear.system.importFlags = genImportFlags(formatAsSlug(chummerGear.name_english), parserType);\n        this.setSubType(parsedGear, parserType, parsedGear.system.type);\n\n        return parsedGear;\n    }\n}", "import { BaseGearParser } from \"../importHelper/BaseGearParser\"\nimport { formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\n\n/**\n * Parses ammunition\n */\nexport class AmmoParser extends BaseGearParser {\n\n    override parse(chummerGear : any) : any {\n        const parserType = 'ammo';\n        const parsedGear =  super.parse(chummerGear);\n        parsedGear.type = parserType;\n\n        if (chummerGear.weaponbonusap) {\n            parsedGear.system.ap = parseInt(chummerGear.weaponbonusap);\n        }\n\n        if (chummerGear.weaponbonusdamage) {\n            parsedGear.system.damage = parseInt(chummerGear.weaponbonusdamage_english);\n\n           if (chummerGear.weaponbonusdamage.includes('S')) {\n                parsedGear.system.damageType = 'stun';\n            } else if (chummerGear.weaponbonusdamage.includes('M')) {\n                parsedGear.system.damageType = 'matrix';\n            }\n            else {\n                parsedGear.system.damageType = 'physical';\n            }\n\n            parsedGear.system.element = chummerGear.weaponbonusdamage_english.match(/\\(e\\)/)?.pop() == '(e)' ? 'electricity' : '';\n        }\n\n        parsedGear.system.accuracy = parseInt(chummerGear.weaponbonusacc);\n        parsedGear.system.blast = {\n                        radius: 0,\n                        dropoff: 0\n                    };\n        parsedGear.system.replaceDamage = false;\n\n\n        // Assign import flags\n        parsedGear.system.importFlags = genImportFlags(formatAsSlug(chummerGear.name_english), parserType);\n        this.setSubType(parsedGear, parserType, formatAsSlug(chummerGear.name_english.split(':')[0]));\n\n        return parsedGear;\n    }\n}\n", "import { GearParser, BaseGearParser } from \"./BaseGearParser\";\nimport { SinParser } from \"../bioImport/SinParser\";\nimport { DeviceParser } from \"../matrixImport/DeviceParser\";\nimport { ProgramParser } from \"../matrixImport/ProgramParser\";\nimport { AmmoParser } from \"../weaponImport/AmmoParser\";\n\n/**\n * Responsible for selecting the correct GearParser depending on the gear.\n */\nexport class ParserSelector {\n\n    /**\n     * Selects the correct GearParser depending on the gear.\n     * @param chummerGear The gear that needs to be parsed\n     * The correct GearParser for this gear entry.\n     */ \n    select(chummerGear : any) : GearParser {\n        if (chummerGear.issin === 'True')\n        {\n            return new SinParser();\n        }\n\n        if (chummerGear.iscommlink === 'True')\n        {\n            return new DeviceParser();\n        }\n\n        if (chummerGear.isammo === 'True')\n        {\n            return new AmmoParser();\n        }\n\n        if (chummerGear.category_english === 'Common Programs' || \n            chummerGear.category_english === 'Hacking Programs' || \n            chummerGear.category_english === 'Software')\n        {\n            return new ProgramParser();\n        }\n\n        return new BaseGearParser();\n    }\n}", "import { ParserSelector } from \"./ParserSelector\";\nimport * as IconAssign from '../../../../iconAssigner/iconAssign';\n\n/**\n * Parses all gear from a chummer character file and turns them into foundry sr item data objects\n */\nexport class GearsParser {\n\n    /**\n     * Parses all chummer gear entries\n     * @param chummerGears Array of chummer gear entries\n     */\n    async parseGears(chummerGears : any, assignIcons : boolean) : Promise<any> {\n        let items : any[] = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        chummerGears.forEach(async (chummerGear) => {\n            try {\n                // First filter out gear entries, that we do not want to handle.\n                if (!this.gearShouldBeParsed(chummerGear)) {\n                    return;\n                }\n\n                const itemData = this.parseGearEntry(chummerGear);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                items.push(itemData);\n            }\n\n            catch (e) {\n                console.error(e);\n            }\n        });\n\n        return items;\n    }\n\n    private parseGearEntry(chummerGear : any) : any {\n        const parserSelector = new ParserSelector();\n        const parser = parserSelector.select(chummerGear);\n        return parser.parse(chummerGear);\n    }\n\n    private gearShouldBeParsed(chummerGear : any) : boolean {\n        // We do not handle grenades and rockets here since they are also in the weapons section with more info.\n        const englishGearName = (chummerGear.name_english as string).toLowerCase();\n        if (englishGearName.startsWith('grenade') ||\n            englishGearName.startsWith('minigrenade') ||\n            englishGearName.startsWith('rocket'))\n        {\n            return false;\n        }\n\n        return true;\n    }\n}\n", "import { parseDescription, getArray, parseTechnology, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class ArmorParser {\n\n    async parseArmors(chummerChar, assignIcons) {\n        const armors = getArray(chummerChar.armors?.armor);\n        const parsedArmors = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        armors.forEach(async (chummerArmor) => {\n            try {\n                const itemData = this.parseArmor(chummerArmor);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedArmors.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        const otherArmors = getArray(chummerChar.otherarmors?.otherarmor)\n\n        otherArmors.forEach(async (chummerArmor) => {\n            try {\n                const itemData = this.parseOtherArmor(chummerArmor);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedArmors.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedArmors;\n    }\n\n    parseArmor(chummerArmor) {\n        const parserType = 'armor';\n        const system = {\n            armor: {}\n        };\n        const armor = system.armor;\n\n        armor.mod = chummerArmor.armor.includes('+');\n        armor.value = parseInt(chummerArmor.armor);\n\n        if (chummerArmor.armormods?.armormod) {\n            armor.fire = 0;\n            armor.electricity = 0;\n            armor.cold = 0;\n            armor.acid = 0;\n            armor.radiation = 0;\n\n            const mods = getArray(chummerArmor.armormods.armormod);\n            mods.forEach((mod) => {\n                if (mod.name_english.toLowerCase().includes('fire resistance')) {\n                    armor.fire += parseInt(mod.rating);\n                } else if (mod.name_english.toLowerCase().includes('nonconductivity')) {\n                    armor.electricity += parseInt(mod.rating);\n                } else if (mod.name_english.toLowerCase().includes('insulation')) {\n                    armor.cold += parseInt(mod.rating);\n                } else if (mod.name_english.toLowerCase().includes('radiation shielding')) {\n                    armor.radiation += parseInt(mod.rating);\n                }\n            });\n        }\n\n        system.technology = parseTechnology(chummerArmor);\n        system.description = parseDescription(chummerArmor);\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerArmor.name_english), parserType);\n        setSubType(system, parserType, formatAsSlug(chummerArmor.category_english));\n\n        return createItemData(chummerArmor.name, parserType, system);\n    }\n\n    parseOtherArmor(chummerArmor) {\n        const parserType = 'armor';\n        const system = {\n            armor: {}\n        };\n        const armor = system.armor;\n\n        armor.mod = chummerArmor.armor.includes('+');\n        armor.value = parseInt(chummerArmor.armor);\n\n        system.technology = parseTechnology(chummerArmor);\n        system.technology.equipped = true;\n        system.description = parseDescription(chummerArmor);\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerArmor.objectname_english), parserType);\n        setSubType(system, parserType, formatAsSlug(chummerArmor.improvesource));\n\n        return createItemData(chummerArmor.objectname_english, parserType, system);\n    }\n}", "import { parseDescription, getArray, parseTechnology, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class WareParser {\n\n    async parseWares(chummerChar, assignIcons) {\n        const chummerWares = getArray(chummerChar.cyberwares.cyberware);\n        const parsedWare = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        await chummerWares.forEach( async (chummerWare) => {\n            try {\n                const itemData = this.parseWare(chummerWare);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedWare.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedWare;\n    }\n\n    parseWare(chummerWare) {\n        // set based on if this is cyberware or bioware\n        let parserType = chummerWare.improvementsource.toLowerCase();\n        if (!['cyberware', 'bioware'].includes(parserType)) {parserType = 'cyberware'}; //default to cyberware if no match\n        const system = {};\n        system.description = parseDescription(chummerWare);\n        system.technology = parseTechnology(chummerWare);\n\n        // Cyberware and Bioware have no equipped flag in chummer so it cannot be parsed - we consider it as always equipped\n        system.technology.equipped = true;\n        system.essence = chummerWare.ess;\n        system.grade = chummerWare.grade;\n\n        // Bioware has no wireless feature, so disable it by default\n        if (parserType == 'bioware') {\n            system.technology.wireless = false;\n        }\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerWare.name_english), parserType);\n        setSubType(system, parserType, formatAsSlug(chummerWare.category_english));\n\n        return createItemData(chummerWare.name, parserType, system);\n    }\n}", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class QualityParser {\n\n    async parseQualities(chummerChar, assignIcons) {\n        const qualities = getArray(chummerChar.qualities.quality);\n        const parsedQualities = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        await qualities.forEach(async (chummerQuality) => {\n            try {\n                const itemData = this.parseQuality(chummerQuality);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedQualities.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedQualities;\n    }\n\n    parseQuality(chummerQuality) {\n        const parserType = 'quality';\n        const system = {};\n        system.type = chummerQuality.qualitytype_english.toLowerCase();\n        system.rating = parseInt(chummerQuality.extra) || 0;\n        system.description = parseDescription(chummerQuality);\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerQuality.name_english), parserType);\n        setSubType(system, parserType, formatAsSlug(system.type)); // positive or negative\n\n        // Create the item\n        let quality = createItemData(chummerQuality.name, parserType, system);\n\n        return quality;\n    }\n}", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class PowerParser {\n\n    async parsePowers(chummerChar, assignIcons) {\n        const powers = getArray(chummerChar.powers.power);\n        const parsedPowers = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        powers.forEach(async (chummerPower) => {\n            try {\n                const itemData = this.parsePower(chummerPower);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedPowers.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedPowers;\n    }\n\n    parsePower(chummerPower) {\n        const parserType = 'adept_power';\n        const system = {};\n        system.description = parseDescription(chummerPower);\n\n        system.level = parseInt(chummerPower.rating);\n        system.pp = parseFloat(chummerPower.totalpoints);\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerPower.fullname), parserType);\n        if (chummerPower.name != chummerPower.fullname) {\n            setSubType(system, parserType, formatAsSlug(chummerPower.name));\n            if (system.importFlags.subType) {\n                system.importFlags.name = formatAsSlug(chummerPower.extra);\n            }\n        }\n\n        return createItemData(chummerPower.fullname, parserType, system);\n    }\n}", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport { DataDefaults } from \"../../../../../data/DataDefaults\";\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class SpellParser {\n    async parseSpells(chummerChar, assignIcons) {\n        const spells = getArray(chummerChar.spells.spell).filter(chummerSpell => !chummerSpell.category_english.includes(\"Rituals\"));\n        const parsedSpells = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        spells.forEach(async (chummerSpell) => {\n            try {\n                if (chummerSpell.alchemy.toLowerCase() !== 'true') {\n                    const itemData = await this.parseSpell(chummerSpell);\n\n                    // Assign the icon if enabled\n                    if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                    parsedSpells.push(itemData);\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedSpells;\n    }\n\n    async parseSpell(chummerSpell) {\n        const parserType = 'spell';\n        const system = {};\n\n        this.prepareSystem(system, chummerSpell)\n\n        let description = '';\n        if (chummerSpell.descriptors) description = chummerSpell.descriptors;\n        if (chummerSpell.description) description += `\\n${chummerSpell.description}`;\n        system.description.value = await TextEditor.enrichHTML(description);\n\n        this.parseDuration(chummerSpell, system)\n        this.prepareAction(system)\n        this.handleSpellTypeSpecifics(system, chummerSpell)\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerSpell.name_english), parserType);\n        setSubType(system, parserType, formatAsSlug(chummerSpell.category_english));\n\n        return createItemData(chummerSpell.name, parserType, system);\n    }\n\n    prepareSystem(system, chummerSpell) {\n\n        system.category = chummerSpell.category_english.toLowerCase().replace(/\\s/g, '_');\n        system.name = chummerSpell.name;\n        system.type = chummerSpell.type === 'M' ? 'mana' : 'physical';\n        system.range =\n            chummerSpell.range === 'T'\n                ? 'touch'\n                : chummerSpell.range\n                        .toLowerCase()\n                        .replace(/\\s/g, '_')\n                        .replace('(', '')\n                        .replace(')', '');\n        system.drain = parseInt(chummerSpell.dv.replace(/[A-Z]*/g, ''));\n        system.description = parseDescription(chummerSpell);\n    }\n\n    parseDuration(chummerSpell, system) {\n        if (chummerSpell.duration.toLowerCase() === 's') {\n            system.duration = 'sustained';\n        }\n        else if (chummerSpell.duration.toLowerCase() === 'i') {\n            system.duration = 'instant';\n        }\n        else if (chummerSpell.duration.toLowerCase() === 'p') {\n            system.duration = 'permanent';\n        }\n    }\n\n    prepareAction(system) {\n        system.action = {};\n        system.action.type = 'varies';\n        system.action.skill = 'spellcasting';\n        system.action.attribute = 'magic';\n        system.action.damage = DataDefaults.damageData();\n        system.action.damage.type.base = '';\n        system.action.damage.type.value = '';\n    }\n\n    handleSpellTypeSpecifics(system, chummerSpell) {\n        let category = chummerSpell.category_english;\n        if (chummerSpell.descriptors) {\n            const desc = chummerSpell.descriptors.toLowerCase();\n            if (category.toLowerCase() === 'combat') {\n                this.handleCombatSpellSpecifics(system, desc, chummerSpell.damage)\n            }\n            if (category.toLowerCase() === 'detection') {\n                this.handleDetectionSpellSpecifics(system, desc)\n            }\n            if (category.toLowerCase() === 'illusion') {\n                this.handleIllusionSpellSpecifics(system, desc)\n            }\n            if (category.toLowerCase() === 'manipulation') {\n                this.handleManipulationSpellSpecifics(system, desc)\n            }\n        }\n    }\n\n    handleCombatSpellSpecifics(system, desc, damage) {\n        system.combat = {};\n        if (desc.includes('indire')) {\n            system.combat.type = 'indirect';\n            system.action.opposed = {\n                type: 'defense',\n            };\n        } else {\n            system.combat.type = 'direct';\n            if (system.type === 'mana') {\n                system.action.opposed = {\n                    type: 'soak',\n                    attribute: 'willpower',\n                };\n            } else if (system.type === 'physical') {\n                system.action.opposed = {\n                    type: 'soak',\n                    attribute: 'body',\n                };\n            }\n        }\n\n        if(damage.includes(\"0\")) {\n            system.action.damage.type.base = damage.match(/[SG]/) !== null  ? 'stun' : 'physical' ;\n            system.action.damage.type.value = system.action.damage.type.base;\n        }\n    }\n\n    handleDetectionSpellSpecifics(system, desc) {\n        system.detection = {};\n        const split = desc.split(',');\n        split.forEach((token) => {\n            token = token || '';\n            token = token.replace(' detection spell', '');\n            if (!token) return;\n            if (token.includes('area')) return;\n\n            if (token.includes('passive'))\n                system.detection.passive = true;\n            else if (token.includes('active'))\n                system.detection.passive = false;\n            else if (token)\n                system.detection.type = token.toLowerCase();\n        });\n        if (!system.detection.passive) {\n            system.action.opposed = {\n                type: 'custom',\n                attribute: 'willpower',\n                attribute2: 'logic',\n            };\n        }\n    }\n\n    handleIllusionSpellSpecifics(system, desc) {\n        system.illusion = {};\n        const split = desc.split(',');\n        split.forEach((token) => {\n            token = token || '';\n            token = token.replace(' illusion spell', '');\n            if (!token) return;\n            if (token.includes('area')) return;\n\n            if (token.includes('sense'))\n                system.illusion.sense = token.toLowerCase();\n            else if (token)\n                system.illusion.type = token.toLowerCase();\n        });\n        if (system.type === 'mana') {\n            system.action.opposed = {\n                type: 'custom',\n                attribute: 'willpower',\n                attribute2: 'logic',\n            };\n        } else {\n            system.action.opposed = {\n                type: 'custom',\n                attribute: 'intuition',\n                attribute2: 'logic',\n            };\n        }\n    }\n\n    handleManipulationSpellSpecifics(system, desc){\n        system.manipulation = {};\n        if (desc.includes('environmental'))\n            system.manipulation.environmental = true;\n        if (desc.includes('physical'))\n            system.manipulation.physical = true;\n        if (desc.includes('mental'))\n            system.manipulation.mental = true;\n        // TODO figure out how to parse damaging\n\n        if (system.manipulation.mental) {\n            system.action.opposed = {\n                type: 'custom',\n                attribute: 'willpower',\n                attribute2: 'logic',\n            };\n        }\n        if (system.manipulation.physical) {\n            system.action.opposed = {\n                type: 'custom',\n                attribute: 'body',\n                attribute2: 'strength',\n            };\n        }\n    }\n}", "import { parseDescription, getArray, getValues, parseTechnology, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class WeaponParser {\n    parseDamage = (val) => {\n        const damage = {\n            damage: 0,\n            type: '',\n            radius: 0,\n            dropoff: 0,\n        };\n\n        const split = val.split(' ');\n\n        if (split.length > 0) {\n            const l = split[0].match(/(\\d+)(\\w+)/);\n            \n            if (l && l[1]) {\n                damage.damage = parseInt(l[1]);\n            }\n\n            if (l && l[2]) {\n                damage.type = l[2] === 'P' ? 'physical' : 'stun';\n            }\n        }\n\n        for (let i = 1; i < split.length; i++) {\n            const l = split[i].match(/(-?\\d+)(.*)/);\n            if (l && l[2]) {\n                if (l[2].toLowerCase().includes('/m')) { \n                    damage.dropoff = parseInt(l[1]);\n                    damage.radius = damage.damage / Math.abs(damage.dropoff)\n                }\n                else {\n                    damage.radius = parseInt(l[1]);\n                }\n            }\n        }\n\n        return damage;\n    };\n\n    async parseWeapons(chummerChar, assignIcons) {\n        return this.parseWeaponArray(getArray(chummerChar.weapons?.weapon), assignIcons)\n    }\n\n    async parseWeaponArray(weapons, assignIcons) {\n        const parsedWeapons = [];\n        const iconList = await IconAssign.getIconFiles();\n        weapons.forEach(async (chummerWeapon) => {\n            try {\n                const itemData = this.parseWeapon(chummerWeapon);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedWeapons.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedWeapons;\n    }\n\n    parseWeapon(chummerWeapon) {\n        const parserType = 'weapon';\n        const system = {\n            action: {\n                damage: {\n\n                }\n            }\n        };\n\n        const action = system.action;\n        const damage = system.action.damage;\n\n        system.description = parseDescription(chummerWeapon);\n        system.technology = parseTechnology(chummerWeapon);\n\n        damage.ap = {\n            base: parseInt(getValues(chummerWeapon.rawap)[0])\n        };\n        action.type = 'varies';\n\n        // Transform Chummer skill naming schema to shadowrun6-elysium naming schema.\n        // NOTE: chummerWeapon.skill CAN be null. Don't rely on it.\n        if (chummerWeapon.skill) {\n            action.skill = chummerWeapon.skill.toLowerCase().replace(/\\s/g, '_');\n        // Instead of direct skill, rely on a category mapping by the rules.\n        } else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('exotic')) {\n            action.skill = chummerWeapon.category\n                .toLowerCase()\n                .replace(' weapons', '')\n                .replace(/\\s/g, '_');\n        } else if (chummerWeapon.category && chummerWeapon.category.toLowerCase().includes('laser weapons')) {\n            action.skill = 'exotic_range';\n        }\n\n        if (action.skill.includes('exotic')) {\n            action.skill = action.skill.replace('_weapon', '');\n        }\n\n        action.attribute = 'agility';\n        action.limit = {\n            base: parseInt(getValues(chummerWeapon.rawaccuracy)[0])\n        };\n\n        if (chummerWeapon.type.toLowerCase() === 'melee') {\n            this.handleMeleeWeapon(chummerWeapon, system)\n        } \n\n        if (chummerWeapon.type.toLowerCase() === 'ranged') {\n            this.handledRangedWeapon(chummerWeapon, system)\n        } else if (chummerWeapon.type.toLowerCase() === 'thrown') {\n            system.category = 'thrown';\n            const ranges = chummerWeapon.ranges[0]\n            if (ranges && ranges.short && ranges.medium && ranges.long && ranges.extreme) {\n                system.thrown = {\n                    ...system.thrown,\n                    ranges: {\n                        short: parseInt(ranges.short.split('-')[1]),\n                        medium: parseInt(ranges.medium.split('-')[1]),\n                        long: parseInt(ranges.long.split('-')[1]),\n                        extreme: parseInt(ranges.extreme.split('-')[1]),\n                    }\n                };\n            }\n        }\n\n        {\n            //TODO change this to 'rawdamage' when mods can have damage value\n            const chummerDamage = this.parseDamage(chummerWeapon.damage_noammo_english);\n            damage.base = chummerDamage.damage;\n            damage.type = {\n                base: chummerDamage.type\n            };\n            if (chummerDamage.dropoff || chummerDamage.radius) {\n                system.thrown = {\n                    ...system.thrown,\n                    blast: {\n                        radius: chummerDamage.radius,\n                        dropoff: chummerDamage.dropoff,\n                    },\n                };\n            }\n        }\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerWeapon.name_english), parserType);\n\n        // Assign item subtype\n        let subType = '';\n        // range/melee/thrown\n        if (system.category) {\n            subType = formatAsSlug(system.category);\n        }\n        // exception for thrown weapons and explosives\n        const weaponCategory = formatAsSlug(chummerWeapon.category_english);\n        if (!(subType && ( weaponCategory == 'gear'))) {\n            subType = weaponCategory;\n        }\n        // deal with explosives\n        if (weaponCategory == 'gear' && chummerWeapon.name_english.includes(':')) {\n            subType = formatAsSlug(chummerWeapon.name_english.split(':')[0]);\n        }\n        setSubType(system, parserType, subType);\n\n        // Create the item\n        const itemData = createItemData(chummerWeapon.name, 'weapon', system);\n\n        this.handleClips(itemData, chummerWeapon)\n        this.handleAccessories(itemData, chummerWeapon) \n        return itemData;\n    }\n\n    handleMeleeWeapon(chummerWeapon, system) {\n        system.action.type = 'complex';\n        system.category = 'melee';\n        system.melee = {\n            reach:  parseInt(chummerWeapon.reach)\n        };\n    }\n\n    handledRangedWeapon(chummerWeapon, system) {\n        system.category = 'range';\n\n        if (system.action.skill.toLowerCase().includes('throw')) {\n            system.category = 'thrown';\n        }\n\n        const range = {};\n        system.range = range;\n        range.rc = { base: parseInt(getValues(chummerWeapon.rawrc)[0]) };\n\n        if (chummerWeapon.mode) {\n            // HeroLab export doesn't have mode\n            const modes = chummerWeapon.mode_noammo.toLowerCase();\n            range.modes = {\n                single_shot: modes.includes('ss'),\n                semi_auto: modes.includes('sa'),\n                burst_fire: modes.includes('bf'),\n                full_auto: modes.includes('fa'),\n            };\n        }\n\n        if (chummerWeapon.clips?.clip != null) {\n            system.ammo = {}\n            let ammo = system.ammo\n            \n            // HeroLab export doesn't have clips\n            const chummerClips = getArray(chummerWeapon.clips.clip);\n            let clips = chummerClips.filter(clip => !clip.name.toLowerCase().includes(\"inter\"))\n\n            ammo.spare_clips = {\n                value: clips?.length -1 || 0,\n                max: clips?.length -1 || 0\n            }\n\n            let loadedClip = clips.filter(clip => clip.location === \"loaded\")[0]\n            \n            ammo.current = {\n                max: loadedClip?.count || 0,\n                value: loadedClip?.count || 0\n            }\n        }\n\n        const ranges = chummerWeapon.ranges[0]\n        if (ranges && ranges.short && ranges.medium && ranges.long && ranges.extreme) {\n            const rangeData = {\n                short: parseInt(ranges.short.split('-')[1]),\n                medium: parseInt(ranges.medium.split('-')[1]),\n                long: parseInt(ranges.long.split('-')[1]),\n                extreme: parseInt(ranges.extreme.split('-')[1]),\n            };\n            if(system.category === \"range\") {\n                range.ranges = rangeData;\n            }\n            if(system.category === \"thrown\") {\n                system.thrown = {\n                    ...system.thrown,\n                    ranges: rangeData,\n                };\n            }\n        }\n\n    }\n\n    handleClips(item, chummerWeapon) {\n        if (chummerWeapon.clips?.clip != null) {\n            \n            // HeroLab export doesn't have clips\n            const chummerClips = getArray(chummerWeapon.clips.clip);\n            let clips = chummerClips.filter(clip => !clip.name.toLowerCase().includes(\"inter\"))\n\n            let ammo = []\n            clips.forEach((clip) => {\n                let ammobonus = clip.ammotype\n                let systemAmmo = {\n                    accuracy: parseInt(ammobonus.weaponbonusacc),\n                    ap: parseInt(ammobonus.weaponbonusap),\n                    blast: {\n                        radius: 0,\n                        dropoff: 0\n                    },\n                    damage: ammobonus.weaponbonusdamage_english.match(/(\\d+)/).pop(),\n                    damageType: ammobonus.weaponbonusdamage_english.match(/S/)?.pop() === 'S' ? 'stun' : 'physical' ,\n                    element: ammobonus.weaponbonusdamage_english.match(/\\(e\\)/)?.pop() == '(e)' ? 'electricity' : '',\n                    importFlags: {\n                        isFreshImport: true\n                    },\n                    replaceDamage: false,\n                    technology: {\n                        equipped: clip.name === chummerWeapon.currentammo\n                    }\n                }\n                let currentAmmo = createItemData(clip.name, 'ammo', systemAmmo);\n                currentAmmo._id = randomID(16)\n                ammo.push(currentAmmo);\n            });\n\n            if(!item.flags?.shadowrun6-elysium?.embeddedItems) {\n                item.flags = {\n                    \"shadowrun6-elysium\": {\n                        embeddedItems: ammo\n                    }\n                }\n            }\n            else {\n                item.flags.shadowrun6-elysium.embeddedItems.push(...ammo)\n            }            \n        }\n    }\n\n    handleAccessories(itemData, chummerWeapon) {\n        if (chummerWeapon.clips?.clip != null) {\n            \n            let chummerAccessories = getArray(chummerWeapon.accessories.accessory);\n\n            let accessories = []\n            chummerAccessories.forEach((item) => {\n                let system = {\n                    type: \"weapon\",\n                    mount_point: item.mount.toLowerCase(),\n                    dice_pool: 0,\n                    accuracy: parseInt(item.accuracy),\n                    rc: parseInt(item.rc) || 0,\n                    conceal: parseInt(item.conceal),\n                    technology: {\n                        equipped: true\n                    }\n                }\n                let current = createItemData(item.name, 'modification', system);\n                current._id = randomID(16)\n                accessories.push(current);\n            });\n\n            if(!itemData.flags?.shadowrun6-elysium?.embeddedItems) {\n                itemData.flags = {\n                    \"shadowrun6-elysium\": {\n                        embeddedItems: accessories\n                    }\n                }\n            }\n            else {\n                itemData.flags.shadowrun6-elysium.embeddedItems.push(...accessories)\n            }            \n        }\n    }\n}\n", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\nimport { SR6 } from \"../../../../../config.js\";\n\n\nexport class LifestyleParser {\n    async parseLifestyles(chummerChar, assignIcons) {\n\n        const chummerLifestyle = getArray(chummerChar.lifestyles.lifestyle);\n        const parsedLifestyle = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        chummerLifestyle.forEach(async (chummerLifestyle) => {\n            try {\n                const itemData = this.parseLifestyle(chummerLifestyle);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedLifestyle.push(itemData);\n            }\n             catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedLifestyle;\n    }\n\n    parseLifestyle(chummerLifestyle) {\n        const parserType = 'lifestyle';\n        const system = {};\n\n        // Advanced lifestyles and lifestyle qualities are not supported at the moment\n        // Map the chummer lifestyle type to our sr5 foundry type.\n        const chummerLifestyleType = chummerLifestyle.baselifestyle.toLowerCase();\n        if ((chummerLifestyleType in SR6.lifestyleTypes)) {\n            system.type = chummerLifestyleType;\n        }\n        else {\n            // This is necessary because of a typo in SR5 config.\n            if (chummerLifestyleType === 'luxury') {\n                system.type = 'luxory';\n            }\n            else {\n                system.type = 'other';\n            }\n        }\n\n        system.cost = chummerLifestyle.totalmonthlycost;\n        system.permanent = chummerLifestyle.purchased;\n        system.description = parseDescription(chummerLifestyle);\n\n        // The name of the lifestyle is optional, so we use a fallback here.\n        const itemName = chummerLifestyle.name ? chummerLifestyle.name : chummerLifestyle.baselifestyle;\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(itemName), parserType);\n\n        const itemData = createItemData(itemName, parserType, system);\n        return itemData;\n    }\n}\n", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class ContactParser {\n\n    async parseContacts(chummerChar, assignIcons) {\n\n        const chummerContacts = getArray(chummerChar.contacts.contact);\n        const parsedContacts = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        chummerContacts.forEach(async (chummerContact) => {\n            try {\n                const itemData = this.parseContact(chummerContact);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedContacts.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedContacts;\n    }\n\n    parseContact(chummerContact) {\n        const parserType = 'contact';\n        const system = {};\n        system.type = chummerContact.role;\n\n        // Group contacts are stored in chummer as 'Group(connectionRating)', e.g. 'Group(5)'\n        // We handle group contacts as normal contacts until they are supported in the codebase.\n        if (chummerContact.connection.toLowerCase().includes('group')) {\n            system.connection = chummerContact.connection\n                .toLowerCase()\n                .replace('group(', '')\n                .replace(')', '');\n        }\n        else {\n            system.connection = chummerContact.connection;\n        }\n\n        system.loyalty = chummerContact.loyalty;\n        system.family = (chummerContact.family.toLowerCase() === 'true');\n        system.blackmail = (chummerContact.blackmail.toLowerCase() === 'true');\n        system.description = parseDescription(chummerContact);\n\n        const itemName = chummerContact.name ? chummerContact.name : '[Unnamed connection]';\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(itemName), parserType);\n\n        const itemData = createItemData(itemName, 'contact', system);\n        return itemData;\n    }\n}", "import { parseDescription, createItemData, genImportFlags, formatAsSlug } from \"./BaseParserFunctions\";\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport default class SimpleParser {\n    async parseCollection(parsingCollection, parserType, assignIcons) {\n        const parsed = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        parsingCollection.forEach(async (toParse) => {\n            try {\n                const itemData = this.parseItem(toParse, parserType);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsed.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsed;\n    }\n\n    parseItem(toParse, parserType) {\n        const system = {};\n        system.description = parseDescription(toParse);\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(toParse.name_english), parserType);\n\n        return createItemData(toParse.fullname, parserType, system);\n    }\n}", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class CritterPowerParser {\n\n    async parseCritterPowers(chummerChar, assignIcons) {\n        const powers = getArray(chummerChar.critterpowers?.critterpower);\n        const parsedItems = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        powers.forEach(async (chummerPower) => {\n            try {\n                const itemData = this.parseCritterPower(chummerPower);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsedItems.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedItems;\n    }\n\n    parseCritterPower(chummerCritterPower) {\n        const parserType = 'critter_power';\n        const system = {};\n        system.description = parseDescription(chummerCritterPower);\n\n\n        system.rating = parseFloat(chummerCritterPower.extra);\n        system.powerType = chummerCritterPower.type === \"P\" ? 'physical' : 'mana';\n        system.range = chummerCritterPower.range;\n        system.duration = chummerCritterPower.duration;\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerCritterPower.fullname), parserType);\n        if (chummerCritterPower.name_english != chummerCritterPower.fullname) {\n            setSubType(system, parserType, formatAsSlug(chummerCritterPower.name_english));\n            if (system.importFlags.subType) {\n                system.importFlags.name = formatAsSlug(chummerCritterPower.extra);\n            }\n        }\n\n        return createItemData(chummerCritterPower.fullname, parserType, system);\n    }\n}", "import { parseDescription, getArray, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport class RitualParser {\n    async parseRituals(chummerChar, assignIcons) {\n        const items = getArray(chummerChar.spells.spell).filter(chummerSpell => chummerSpell.category_english.includes(\"Rituals\"));\n        const parsedItems = [];\n        const iconList = await IconAssign.getIconFiles();\n\n        items.forEach(async (item) => {\n            try {\n                if (item.alchemy.toLowerCase() !== 'true') {\n                    const itemData = this.parseRitual(item);\n\n                    // Assign the icon if enabled\n                    if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                    parsedItems.push(itemData);\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        });\n\n        return parsedItems;\n    }\n\n    parseRitual(chummerRitual) {\n        const parserType = 'ritual';\n        const system = {};\n\n        this.prepareSystem(system, chummerRitual)\n        this.prepareAction(system)\n\n        // Assign import flags\n        system.importFlags = genImportFlags(formatAsSlug(chummerRitual.name_english), parserType);\n        setSubType(system, parserType, formatAsSlug(chummerRitual.category_english));\n\n        return createItemData(chummerRitual.name, parserType, system);\n    }\n\n    prepareSystem(system, chummerRitual) {\n        system.name = chummerRitual.name;\n        system.type = chummerRitual.type === 'M' ? 'mana' : 'physical';\n        system.descriptors = chummerRitual.descriptors;\n        system.description = parseDescription(chummerRitual);\n    }\n\n\n    prepareAction(system) {\n        system.action = {};\n        system.action.type = 'varies';\n        system.action.skill = 'ritual_spellcasting';\n        system.action.attribute = 'magic';\n    }\n}", "import { getArray } from \"./importHelper/BaseParserFunctions.js\"\nimport { GearsParser } from \"./importHelper/GearsParser.js\"\nimport { ArmorParser } from \"./armorImport/ArmorParser.js\";\nimport { WareParser } from \"./wareImport/WareParser.js\";\nimport { QualityParser } from \"./bioImport/QualityParser.js\";\nimport { PowerParser } from \"./magicImport/PowerParser.js\";\nimport { SpellParser } from \"./magicImport/SpellParser.js\";\nimport { WeaponParser } from \"./weaponImport/WeaponParser.js\";\nimport { LifestyleParser } from \"./bioImport/LifestyleParser.js\";\nimport { ContactParser } from \"./bioImport/ContactParser.js\";\nimport SimpleParser from \"./importHelper/SimpleParser.js\";\nimport { CritterPowerParser } from \"./magicImport/CritterPowerParser.js\";\nimport { RitualParser } from \"./magicImport/RitualParser.js\";\n\n/**\n * Parses all items (qualities, weapons, gear, ...) from a chummer character.\n */\nexport class ItemsParser {\n\n    /**\n     * Parses all items from a chummer char and returns an array of the corresponding foundry items.\n     * @param {*} chummerChar The chummer char holding the items\n     * @param {*} importOptions Additional import option that specify what items will be imported.\n     */\n    async parse(chummerChar, importOptions) {\n        const promises = [];\n        Object.freeze(chummerChar)\n\n        if (importOptions.qualities && chummerChar.qualities?.quality) {\n            promises.push(new QualityParser().parseQualities(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.weapons && chummerChar.weapons?.weapon) {\n            promises.push(new WeaponParser().parseWeapons(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.armor && (chummerChar.armors?.armor || chummerChar.otherarmors?.otherarmor)) {\n            promises.push(new ArmorParser().parseArmors(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.cyberware && chummerChar.cyberwares?.cyberware) {\n            promises.push(new WareParser().parseWares(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.powers && chummerChar.powers?.power) {\n            promises.push(new PowerParser().parsePowers(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.equipment && chummerChar.gears?.gear) {\n            const gears = getArray(chummerChar.gears.gear);\n            promises.push(new GearsParser().parseGears(gears, importOptions.assignIcons));\n        }\n\n        if (importOptions.spells && chummerChar.spells?.spell) {\n            promises.push(new SpellParser().parseSpells(chummerChar, importOptions.assignIcons));\n            promises.push(new RitualParser().parseRituals(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.contacts && chummerChar.contacts?.contact) {\n            promises.push(new ContactParser().parseContacts(chummerChar, importOptions.assignIcons));\n        }\n\n        if (importOptions.lifestyles && chummerChar.lifestyles?.lifestyle) {\n            promises.push( new LifestyleParser().parseLifestyles(chummerChar, importOptions.assignIcons));\n        }\n\n        if(chummerChar.metamagics?.metamagic) {\n            let metamagics = getArray(chummerChar.metamagics.metamagic).filter(meta => meta.improvementsource.toLowerCase().includes(\"metamagic\"))\n            promises.push(new SimpleParser().parseCollection(metamagics, \"metamagic\", importOptions.assignIcons));\n        }\n\n        if(chummerChar.metamagics?.metamagic) {\n            let echoes = getArray(chummerChar.metamagics.metamagic).filter(meta => meta.improvementsource.toLowerCase().includes(\"echo\"))\n            promises.push(new SimpleParser().parseCollection(echoes, \"echo\", importOptions.assignIcons));\n        }\n\n        promises.push(new CritterPowerParser().parseCritterPowers(chummerChar, importOptions.assignIcons))\n\n        return  (await Promise.all(promises)).flat();\n    }\n}\n", "import { getArray } from \"../importHelper/BaseParserFunctions.js\"\nimport { WeaponParser } from \"../weaponImport/WeaponParser.js\";\n\nexport default class MountedWeaponParser {\n\n    async parseWeapons(vehicle, assignIcons) {\n        const mods = getArray(vehicle.mods?.mod);\n        const weapons = mods.filter(mod => mod.weapons != null).map(mod => getArray(mod.weapons?.weapon)).flat()\n\n        return  new WeaponParser().parseWeaponArray(weapons, assignIcons)\n    }\n}", "import { parseDescription, getArray, parseTechnology, createItemData, formatAsSlug, genImportFlags, setSubType } from \"../importHelper/BaseParserFunctions.js\"\nimport * as IconAssign from '../../../../iconAssigner/iconAssign.js';\n\nexport default class VehicleModsParser {\n\n    async parseMods(vehicle, assignIcons) {\n        const mods = getArray(vehicle.mods?.mod);\n        let parsed = []\n\n        const iconList = await IconAssign.getIconFiles();\n        mods.forEach(async (toParse) => {\n            try {\n                const itemData = this.parseMod(toParse);\n\n                // Assign the icon if enabled\n                if (assignIcons) {itemData.img = await IconAssign.iconAssign(itemData.system.importFlags, itemData.system, iconList)};\n\n                parsed.push(itemData);\n            } catch (e) {\n                console.error(e);\n            }\n        });\n       \n\n        return parsed;\n    }\n\n    parseMod(mod) {\n        const parserType = 'modification';\n        const system = {};\n\n        system.description = parseDescription(mod);\n        system.technology = parseTechnology(mod);\n\n       // Assign import flags\n       system.importFlags = genImportFlags(formatAsSlug(mod.name_english), parserType);\n       setSubType(system, parserType, formatAsSlug(mod.category_english));\n\n        // Create the item\n        const itemData = createItemData(mod.name, parserType, system);\n\n        return itemData;\n    }\n}", "import { getArray } from \"../importHelper/BaseParserFunctions.js\";\nimport { WeaponParser } from \"../weaponImport/WeaponParser\";\nimport { GearsParser } from \"../importHelper/GearsParser.js\";\nimport MountedWeaponParser from \"./MountedWeaponParser\";\nimport VehicleModsParser from \"./VehicleModsParser\";\nimport { SR6Actor } from '../../../../../actor/SR6Actor';\n\nexport default class VehicleParser {\n\n    async parseVehicles(actor, chummerChar, importOptions): Promise<Array<SR6Actor>|undefined> {\n        if(!importOptions.vehicles) {\n            return;\n        }\n\n        if(!game.user?.can(\"ACTOR_CREATE\")) {\n            ui.notifications?.error(game.i18n.format(\"SR6.VehicleImport.MissingPermission\"))\n            return;\n        }\n\n        const vehicles = getArray(chummerChar.vehicles?.vehicle);\n\n        return await Promise.all<SR6Actor>(vehicles.map<Promise<SR6Actor>>(async (vehicle) => {\n            const vehicleActor = (await Actor.create({\n                name: vehicle.name,\n                type: \"vehicle\"\n            }))!;\n\n            const promises : Array<Promise<any>> = [];\n            promises.push(new WeaponParser().parseWeapons(vehicle, importOptions.assignIcons));\n            promises.push(new GearsParser().parseGears(getArray(vehicle.gears?.gear),  importOptions.assignIcons));\n            promises.push(new MountedWeaponParser().parseWeapons(vehicle, importOptions.assignIcons))\n            promises.push(new VehicleModsParser().parseMods(vehicle, importOptions.assignIcons))\n\n            let handling;\n            let off_road_handling;\n            if(vehicle.handling.includes(\"/\")) {\n                handling = vehicle.handling.split(\"/\")[0];\n                off_road_handling =  vehicle.handling.split(\"/\")[1]\n            } else {\n                handling = vehicle.handling\n                off_road_handling =  vehicle.handling\n            }\n\n            let speed;\n            let off_road_speed;\n            if(vehicle.speed.includes(\"/\")) {\n                speed = vehicle.speed.split(\"/\")[0];\n                off_road_speed =  vehicle.speed.split(\"/\")[1]\n            } else {\n                speed = vehicle.speed\n                off_road_speed =  vehicle.speed\n            }\n\n            await vehicleActor.update({\n                'system.driver': actor.id,\n                'system.vehicle_stats.pilot.base': vehicle.pilot,\n                'system.vehicle_stats.handling.base': handling,\n                'system.vehicle_stats.off_road_handling.base': off_road_handling,\n                'system.vehicle_stats.speed.base': speed,\n                'system.vehicle_stats.off_road_speed.base': off_road_speed,\n                'system.vehicle_stats.acceleration.base': vehicle.accel,\n                'system.vehicle_stats.sensor.base': vehicle.sensor,\n                'system.vehicle_stats.seats.base': vehicle.seats,\n                'system.attributes.body.base': vehicle.body,\n                'system.armor.base': vehicle.armor,\n                'system.isDrone': vehicle.isdrone === \"True\",\n                'folder': actor.folder?.id\n            });\n\n            await vehicleActor.createEmbeddedDocuments('Item', (await Promise.all(promises)).flat());\n\n            return vehicleActor;\n        }));\n    }\n}\n", "import { CharacterInfoUpdater } from \"./CharacterInfoUpdater\"\nimport { ItemsParser } from \"../itemImporter/ItemsParser\";\nimport VehicleParser from \"../itemImporter/vehicleImport/VehicleParser.ts\";\n\n\n/**\n * Imports characters from other tools into an existing foundry actor.\n */\nexport class CharacterImporter {\n\n    /**\n     * Imports a chummer character into an existing actor. The actor will be updated. This might lead to duplicate items.\n     * @param {*} actor The actor that will be updated with the chummer character.\n     * @param {*} chummerFile The complete chummer file as json object. The first character will be selected for import.\n     * @param {*} importOptions Additional import option that specify what parts of the chummer file will be imported.\n     */\n    async importChummerCharacter(actor, chummerFile, importOptions) {\n        console.log('Importing the following character file content:');\n        console.log(chummerFile);\n\n        console.log('Using the following import options:')\n        console.log(importOptions);\n\n        if (!chummerFile.characters?.character) {\n            console.log('Did not find a valid character to import  - aborting import');\n            return;\n        }\n\n        await this.resetCharacter(actor)\n\n        const chummerCharacter = chummerFile.characters.character;\n        const infoUpdater = new CharacterInfoUpdater();\n        const updatedActorData = infoUpdater.update(actor._source, chummerCharacter);\n        const items = new ItemsParser().parse(chummerCharacter, importOptions);\n\n        new VehicleParser().parseVehicles(actor, chummerCharacter, importOptions)\n\n        await actor.update(await updatedActorData);\n        await actor.createEmbeddedDocuments('Item', await items);\n    }\n\n    async resetCharacter(actor) {\n        let toDeleteItems = actor.items?.filter(item => item.type !== \"action\")\n            //filter items that were not imported\n            //first line is for legacy items, user need to delete these manually\n            .filter(item => item.system.importFlags != undefined)\n            .filter(item => item.system.importFlags.isImported)\n            .filter(item => item.effects.size == 0)\n            .map(item => item.id)\n\n        let deletedItems = actor.deleteEmbeddedDocuments(\"Item\", toDeleteItems);\n\n        let removed = {\n            'system.skills.language.-=value': null,\n            'system.skills.knowledge.academic.-=value': null,\n            'system.skills.knowledge.interests.-=value': null,\n            'system.skills.knowledge.professional.-=value': null,\n            'system.skills.knowledge.street.-=value': null\n        }\n        let removeSkills = actor.update(removed)\n\n        //await as late as possible to save time\n        await deletedItems\n        await removeSkills\n    }\n}\n", "import {_mergeWithMissingSkillFields} from \"../../../../actor/prep/functions/SkillsPrep\";\n\n/**\n * Parses all non-item character information from a chummer character object.\n */\nexport class SpiritInfoUpdater {\n\n    /**\n     * Parses the actor data from the chummer file and returns an updated clone of the actor data.\n     * @param {*} actorSource The actor data (actor not actor.system) that is used as the basis for the import. Will not be changed.\n     * @param {*} chummerChar The chummer character to parse.\n     */\n    async update(actorSource, chummerChar) {\n\n        const clonedActorSource = foundry.utils.duplicate(actorSource);\n\n        // Name is required, so we need to always set something (even if the chummer field is empty)\n        if (chummerChar.alias) {\n            clonedActorSource.name = chummerChar.alias;\n        }\n        else {\n            clonedActorSource.name = chummerChar.name ? chummerChar.name : '[Name not found]';\n        }\n        clonedActorSource.prototypeToken.name = clonedActorSource.name;\n\n\n        clonedActorSource.system.special = 'magic';\n        const magic = (Number) (chummerChar.attributes[1]?.attribute.filter(att => att.name_english.toLowerCase() == 'mag')[0].total);\n        clonedActorSource.system.force = magic;\n        this.importSpiritType(clonedActorSource.system, chummerChar)\n\n        return clonedActorSource;\n    }\n\n    importSpiritType(system, chummerChar) {\n        let chummerType = chummerChar.metatype_english\n\n        let spiritTypes = [\n            'air',\n            'aircraft',\n            'airwave',\n            'automotive',\n            'beasts',\n            'ceramic',\n            'earth',\n            'energy',\n            'fire',\n            'guardian',\n            'guidance',\n            'man',\n            'metal',\n            'plant',\n            'ship',\n            'task',\n            'train',\n            'water',\n            'toxic_air',\n            'toxic_beasts',\n            'toxic_earth',\n            'toxic_fire',\n            'toxic_man',\n            'toxic_water',\n            'blood',\n            'muse',\n            'nightmare',\n            'shade',\n            'succubus',\n            'wraith',\n            'shedim',\n            'master_shedim',\n            // insect\n            'caretaker',\n            'nymph',\n            'scout',\n            'soldier',\n            'worker',\n            'queen',\n\n            \"carcass\",\n            \"corpse\",\n            \"rot\",\n            \"palefile\",\n            \"detritus\",\n\n             // Howling Shadow\n             \"anarch\",\n             \"arboreal\",\n             \"blackjack\",\n             \"boggle\",\n             \"bugul\",\n             \"chindi\",\n             \"corpselight\",\n             \"croki\",\n             \"duende\",\n             \"elvar\",\n             \"erinyes\",\n             \"greenman\",\n             \"imp\",\n             \"jarl\",\n             \"kappa\",\n             \"kokopelli\",\n             \"morbi\",\n             \"nocnitasa\",\n             \"phantom\",\n             \"preta\",\n             \"stabber\",\n             \"tungak\",\n             \"vucub\",\n        ]\n\n        let specialMapping = new Map([\n            ['Noxious Spirit', 'toxic_air'],\n            ['Abomination Spirit', 'toxic_beasts'],\n            ['Barren Spirit', 'toxic_earth'],\n            ['Nuclear Spirit', 'toxic_fire'],\n            ['Plague Spirit', 'toxic_man'],\n            ['Sludge Spirit', 'toxic_water']\n        ])\n\n        const type = spiritTypes.find(v => chummerType?.toLowerCase().includes(v)) ?? specialMapping.get(chummerType);\n       \n        if(type == undefined) {\n            ui.notifications?.error(game.i18n.format(\"SR6.Import.Spirit.SpiritTypeNotFound\"))\n            return;\n        }\n\n        system.spiritType = type;\n    }\n}\n\n", "import {SpiritInfoUpdater} from \"./SpiritInfoUpdater.js\"\nimport {ItemsParser} from \"../itemImporter/ItemsParser.js\";\n\n\n/**\n * Imports characters from other tools into an existing foundry actor.\n */\nexport class SpiritImporter {\n\n    /**\n     * Imports a chummer character into an existing actor. The actor will be updated. This might lead to duplicate items.\n     * @param {*} actor The actor that will be updated with the chummer character.\n     * @param {*} chummerFile The complete chummer file as json object. The first character will be selected for import.\n     * @param {*} importOptions Additional import option that specify what parts of the chummer file will be imported.\n     */\n    async importChummerCharacter(actor, chummerFile, importOptions) {\n        console.log('Importing the following character file content:');\n        console.log(chummerFile);\n\n        console.log('Using the following import options:')\n        console.log(importOptions);\n\n        if (!chummerFile.characters?.character) {\n            console.log('Did not find a valid character to import  - aborting import');\n            return;\n        }\n\n        if(actor.type !== \"spirit\") {\n            return;\n        }\n\n        await this.resetCharacter(actor)\n\n        const chummerCharacter = chummerFile.characters.character;\n        const infoUpdater = new SpiritInfoUpdater();\n        const updatedActorData = infoUpdater.update(actor._source, chummerCharacter);\n        const items = new ItemsParser().parse(chummerCharacter, importOptions);\n\n        await actor.update(await updatedActorData);\n        await actor.createEmbeddedDocuments('Item', await items);\n    }\n\n    async resetCharacter(actor) {\n        let toDeleteItems = actor.items?.filter(item => item.type !== \"action\").map(item => item.id)\n        let deletedItems = actor.deleteEmbeddedDocuments(\"Item\", toDeleteItems );\n\n        let removed = {\n            'system.skills.language.-=value' : null,\n            'system.skills.knowledge.academic.-=value' : null,\n            'system.skills.knowledge.interests.-=value' : null,\n            'system.skills.knowledge.professional.-=value' : null,\n            'system.skills.knowledge.street.-=value' : null\n        }\n        let removeSkills = actor.update(removed)\n\n        //await as late as possible to save time\n        await deletedItems\n        await removeSkills\n    }\n}", "import {_mergeWithMissingSkillFields} from \"../actor/prep/functions/SkillsPrep\";\nimport { CharacterImporter } from \"./importer/actorImport/characterImporter/CharacterImporter\"\nimport { SpiritImporter } from \"./importer/actorImport/spiritImporter/SpiritImporter\"\n\nexport class ChummerImportForm extends FormApplication {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'chummer-import';\n        options.classes = ['shadowrun6-elysium'];\n        options.title = 'Chummer/Hero Lab Import';\n        options.template = 'systems/shadowrun6-elysium/dist/templates/apps/import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    getData() {\n        return {};\n    }\n\n    activateListeners(html) {\n        html.find('.submit-chummer-import').click(async (event) => {\n            event.preventDefault();\n\n            const chummerFile = JSON.parse($('.chummer-text').val());\n            const importOptions = {\n                weapons: $('.weapons').is(':checked'),\n                armor: $('.armor').is(':checked'),\n                cyberware: $('.cyberware').is(':checked'),\n                equipment: $('.gear').is(':checked'),\n                qualities: $('.qualities').is(':checked'),\n                powers: $('.powers').is(':checked'),\n                spells: $('.spells').is(':checked'),\n                contacts: $('.contacts').is(':checked'),\n                lifestyles: $('.lifestyles').is(':checked'),\n                vehicles: $('.vehicles').is(':checked'),\n                assignIcons: $('.assignIcons').is(':checked'),\n            }\n\n            let importer;\n            switch(this.object.type) {\n                case 'character': importer = new CharacterImporter(); break;\n                case 'spirit': importer = new SpiritImporter(); break;\n            }\n            await importer.importChummerCharacter(this.object, chummerFile, importOptions);\n\n            ui.notifications?.info(\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\n            );\n            this.close();\n        });\n    }\n}\n", "import { CharacterInfoUpdater } from \"./CharacterInfoUpdater.js\";\n\n/**\n * Updates actor data with Genesis character information.\n */\nexport class GenesisInfoUpdater extends CharacterInfoUpdater {\n    /**\n     * Updates the actor data with Genesis character information.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     * @returns The updated actor data.\n     */\n    update(actorData, genesisCharacter) {\n        console.log('Updating actor data with Genesis character information');\n\n        // Create a copy of the actor data to avoid modifying the original\n        const updatedData = duplicate(actorData);\n\n        // Update basic character information\n        this.updateBasicInfo(updatedData, genesisCharacter);\n\n        // Update attributes\n        this.updateAttributes(updatedData, genesisCharacter);\n\n        // Update skills\n        this.updateSkills(updatedData, genesisCharacter);\n\n        // Update derived stats\n        this.updateDerivedStats(updatedData, genesisCharacter);\n\n        // Update matrix stats if available\n        if (genesisCharacter.matrix) {\n            this.updateMatrixStats(updatedData, genesisCharacter);\n        }\n\n        // Update magic stats if available\n        if (genesisCharacter.magic) {\n            this.updateMagicStats(updatedData, genesisCharacter);\n        }\n\n        return updatedData;\n    }\n\n    /**\n     * Updates basic character information.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateBasicInfo(actorData, genesisCharacter) {\n        // Update character name\n        actorData.name = genesisCharacter.name || actorData.name;\n\n        // Update character description\n        if (genesisCharacter.description) {\n            actorData.system.description.value = genesisCharacter.description;\n        }\n\n        // Update character alias/street name\n        if (genesisCharacter.streetName) {\n            actorData.system.alias = genesisCharacter.streetName;\n        }\n\n        // Update character metatype\n        if (genesisCharacter.metaType) {\n            // Convert first letter to uppercase, rest to lowercase\n            const formattedMetatype = genesisCharacter.metaType.charAt(0).toUpperCase() +\n                                     genesisCharacter.metaType.slice(1).toLowerCase();\n            actorData.system.metatype = formattedMetatype;\n        }\n\n        // Update character gender\n        if (genesisCharacter.gender) {\n            actorData.system.gender = genesisCharacter.gender;\n        }\n\n        // Update character age\n        if (genesisCharacter.age) {\n            actorData.system.age = genesisCharacter.age;\n        }\n\n        // Update character height (size in cm)\n        if (genesisCharacter.size) {\n            actorData.system.height = genesisCharacter.size + ' cm';\n        }\n\n        // Update character weight (in kg)\n        if (genesisCharacter.weight) {\n            actorData.system.weight = genesisCharacter.weight + ' kg';\n        }\n\n        // Update character nuyen\n        if (genesisCharacter.nuyen) {\n            actorData.system.nuyen = genesisCharacter.nuyen;\n        }\n\n        // Update character karma\n        if (genesisCharacter.karma) {\n            actorData.system.karma.value = genesisCharacter.karma;\n        }\n\n        // Update character street cred, notoriety, and public awareness\n        if (genesisCharacter.reputation !== undefined) {\n            actorData.system.street_cred = genesisCharacter.reputation;\n        }\n\n        if (genesisCharacter.heat !== undefined) {\n            actorData.system.notoriety = genesisCharacter.heat;\n        }\n    }\n\n    /**\n     * Updates character attributes.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateAttributes(actorData, genesisCharacter) {\n        if (!genesisCharacter.attributes) return;\n\n        // Map Genesis attribute IDs to Foundry attribute names\n        const attributeMap = {\n            'BODY': 'body',\n            'AGILITY': 'agility',\n            'REACTION': 'reaction',\n            'STRENGTH': 'strength',\n            'WILLPOWER': 'willpower',\n            'LOGIC': 'logic',\n            'INTUITION': 'intuition',\n            'CHARISMA': 'charisma',\n            'EDGE': 'edge',\n            'MAGIC': 'magic',\n            'RESONANCE': 'resonance'\n        };\n\n        // Update each attribute\n        for (const attribute of genesisCharacter.attributes) {\n            const foundryAttr = attributeMap[attribute.id];\n            if (foundryAttr && actorData.system.attributes[foundryAttr]) {\n                actorData.system.attributes[foundryAttr].base = attribute.points || 0;\n            }\n        }\n\n        // Set essence (not directly in attributes array)\n        actorData.system.attributes.essence.base = 6; // Default value\n\n        // Calculate essence loss from augmentations if present\n        if (genesisCharacter.augmentations && genesisCharacter.augmentations.length > 0) {\n            let essenceLoss = 0;\n            for (const aug of genesisCharacter.augmentations) {\n                essenceLoss += parseFloat(aug.essence) || 0;\n            }\n            actorData.system.attributes.essence.base = Math.max(0, 6 - essenceLoss);\n        }\n    }\n\n    /**\n     * Updates character skills.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateSkills(actorData, genesisCharacter) {\n        if (!genesisCharacter.skills) return;\n\n        // Map Genesis skill IDs to Foundry skill names\n        const skillMap = {\n            'biotech': 'biotech',\n            'electronics': 'electronics',\n            'engineering': 'engineering',\n            'firearms': 'firearms',\n            'stealth': 'stealth',\n            'piloting': 'pilot_ground_craft',\n            'perception': 'perception',\n            'close_combat': 'close_combat',\n            'athletics': 'athletics',\n            'influence': 'influence',\n            'conjuring': 'conjuring',\n            'sorcery': 'sorcery',\n            'enchanting': 'enchanting',\n            'tasking': 'tasking',\n            'astral': 'astral',\n            'cracking': 'cracking',\n            'exotic_weapons': 'exotic_weapons'\n        };\n\n        // Update active skills\n        for (const skill of genesisCharacter.skills) {\n            // Skip knowledge and language skills for now\n            if (skill.id === 'knowledge' || skill.id === 'language') {\n                continue;\n            }\n\n            const foundrySkill = skillMap[skill.id] || skill.id;\n\n            if (actorData.system.skills.active[foundrySkill]) {\n                actorData.system.skills.active[foundrySkill].base = skill.rating || 0;\n\n                // Update specializations if available\n                if (skill.specializations && skill.specializations.length > 0) {\n                    actorData.system.skills.active[foundrySkill].specs = skill.specializations.map(spec => spec.name);\n                }\n            }\n            // Special case for piloting with aircraft specialization\n            else if (skill.id === 'piloting' && skill.specializations) {\n                const hasAircraft = skill.specializations.some(spec => spec.id === 'aircraft');\n                if (hasAircraft && actorData.system.skills.active['pilot_aircraft']) {\n                    actorData.system.skills.active['pilot_aircraft'].base = skill.rating || 0;\n                }\n            }\n        }\n\n        // Update knowledge skills\n        this.updateKnowledgeSkills(actorData, genesisCharacter);\n\n        // Update language skills\n        this.updateLanguageSkills(actorData, genesisCharacter);\n    }\n\n    /**\n     * Updates character knowledge skills.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateKnowledgeSkills(actorData, genesisCharacter) {\n        // Initialize knowledge skill categories\n        actorData.system.skills.knowledge.academic.value = {};\n        actorData.system.skills.knowledge.street.value = {};\n        actorData.system.skills.knowledge.professional.value = {};\n        actorData.system.skills.knowledge.interests.value = {};\n\n        // Find knowledge skills in the skills array\n        const knowledgeSkills = genesisCharacter.skills.filter(skill => skill.id === 'knowledge');\n\n        for (const skill of knowledgeSkills) {\n            const id = randomID(16);\n            const skillName = skill.name;\n\n            // Default to professional category\n            let category = actorData.system.skills.knowledge.professional.value;\n\n            // Try to determine the category based on the skill name or description\n            if (skillName.includes('Academic') || skillName.includes('Science')) {\n                category = actorData.system.skills.knowledge.academic.value;\n            } else if (skillName.includes('Street') || skillName.includes('Gang')) {\n                category = actorData.system.skills.knowledge.street.value;\n            } else if (skillName.includes('Interest') || skillName.includes('Hobby')) {\n                category = actorData.system.skills.knowledge.interests.value;\n            }\n\n            // Add the skill to the appropriate category\n            category[id] = {\n                name: skillName,\n                base: skill.rating || 0,\n                specs: (skill.specializations || []).map(spec => spec.name)\n            };\n        }\n    }\n\n    /**\n     * Updates character language skills.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateLanguageSkills(actorData, genesisCharacter) {\n        // Initialize language skills\n        actorData.system.skills.language.value = {};\n\n        // Find language skills in the skills array\n        const languageSkills = genesisCharacter.skills.filter(skill => skill.id === 'language');\n\n        for (const skill of languageSkills) {\n            const id = randomID(16);\n\n            // Add the language skill\n            actorData.system.skills.language.value[id] = {\n                name: skill.name,\n                base: skill.rating || 0,\n                specs: (skill.specializations || []).map(spec => spec.name)\n            };\n        }\n    }\n\n    /**\n     * Updates character derived stats.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateDerivedStats(actorData, genesisCharacter) {\n        // Update initiative\n        if (genesisCharacter.initiatives) {\n            // Find the physical initiative\n            const physicalInit = genesisCharacter.initiatives.find(init => init.id === 'INITIATIVE_PHYSICAL');\n            if (physicalInit) {\n                // Extract dice from the dice string (e.g., \"+1D6\" -> 1)\n                const diceMatch = physicalInit.dice.match(/\\+(\\d+)D6/);\n                if (diceMatch && diceMatch[1]) {\n                    actorData.system.initiative.dice = parseInt(diceMatch[1]);\n                }\n            }\n        }\n\n        // Calculate physical track based on body attribute\n        const bodyAttr = genesisCharacter.attributes.find(attr => attr.id === 'BODY');\n        if (bodyAttr) {\n            const bodyValue = bodyAttr.points || 0;\n            actorData.system.track.physical.max = 8 + Math.ceil(bodyValue / 2);\n            // Default to full health\n            actorData.system.track.physical.value = 0;\n        }\n\n        // Calculate stun track based on willpower attribute\n        const willpowerAttr = genesisCharacter.attributes.find(attr => attr.id === 'WILLPOWER');\n        if (willpowerAttr) {\n            const willpowerValue = willpowerAttr.points || 0;\n            actorData.system.track.stun.max = 8 + Math.ceil(willpowerValue / 2);\n            // Default to full health\n            actorData.system.track.stun.value = 0;\n        }\n\n        // Set overflow track\n        if (bodyAttr) {\n            const bodyValue = bodyAttr.points || 0;\n            actorData.system.track.physical.overflow.max = bodyValue;\n            actorData.system.track.physical.overflow.value = 0;\n        }\n    }\n\n    /**\n     * Updates character matrix stats.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateMatrixStats(actorData, genesisCharacter) {\n        if (!genesisCharacter.matrix) return;\n\n        // Update matrix attributes\n        if (genesisCharacter.matrix.attributes) {\n            actorData.system.matrix.attack = genesisCharacter.matrix.attributes.attack || 0;\n            actorData.system.matrix.sleaze = genesisCharacter.matrix.attributes.sleaze || 0;\n            actorData.system.matrix.data_processing = genesisCharacter.matrix.attributes.data_processing || 0;\n            actorData.system.matrix.firewall = genesisCharacter.matrix.attributes.firewall || 0;\n        }\n\n        // Update matrix condition monitor\n        if (genesisCharacter.matrix.condition_monitor) {\n            actorData.system.matrix.condition_monitor.max = genesisCharacter.matrix.condition_monitor.max || 0;\n            actorData.system.matrix.condition_monitor.value = genesisCharacter.matrix.condition_monitor.value || 0;\n        }\n    }\n\n    /**\n     * Updates character magic stats.\n     * @param {*} actorData The actor data to update.\n     * @param {*} genesisCharacter The Genesis character data.\n     */\n    updateMagicStats(actorData, genesisCharacter) {\n        if (!genesisCharacter.magic) return;\n\n        // Update magic tradition\n        if (genesisCharacter.magic.tradition) {\n            actorData.system.magic.tradition = genesisCharacter.magic.tradition;\n        }\n\n        // Update magic attributes\n        actorData.system.magic.magic = genesisCharacter.attributes.magic || 0;\n\n        // Update drain attribute\n        if (genesisCharacter.magic.drain_attribute) {\n            actorData.system.magic.drain_attribute = genesisCharacter.magic.drain_attribute;\n        }\n    }\n}\n", "import { ItemsParser } from \"../itemImporter/ItemsParser.js\";\n\n/**\n * Parses items from a Genesis character file.\n */\nexport class GenesisItemsParser extends ItemsParser {\n    /**\n     * Parses items from a Genesis character file.\n     * @param {*} genesisCharacter The Genesis character data.\n     * @param {*} importOptions Import options.\n     * @returns An array of items.\n     */\n    parse(genesisCharacter, importOptions) {\n        console.log('Parsing items from Genesis character');\n\n        const items = [];\n\n        // Parse weapons\n        if (importOptions.weapons && genesisCharacter.longRangeWeapons) {\n            this.parseWeapons(items, genesisCharacter.longRangeWeapons, importOptions);\n        }\n\n        // Parse close combat weapons\n        if (importOptions.weapons && genesisCharacter.closeCombatWeapons) {\n            this.parseCloseCombatWeapons(items, genesisCharacter.closeCombatWeapons, importOptions);\n        }\n\n        // Parse armor\n        if (importOptions.armor && genesisCharacter.armors) {\n            this.parseArmor(items, genesisCharacter.armors, importOptions);\n        }\n\n        // Parse cyberware\n        if (importOptions.cyberware && genesisCharacter.augmentations) {\n            this.parseCyberware(items, genesisCharacter.augmentations, importOptions);\n        }\n\n        // Parse equipment\n        if (importOptions.equipment && genesisCharacter.items) {\n            this.parseEquipment(items, genesisCharacter.items, importOptions);\n        }\n\n        // Parse matrix devices\n        if (importOptions.equipment && genesisCharacter.matrixItems) {\n            this.parseMatrixDevices(items, genesisCharacter.matrixItems, importOptions);\n        }\n\n        // Parse qualities\n        if (importOptions.qualities && genesisCharacter.qualities) {\n            this.parseQualities(items, genesisCharacter.qualities, importOptions);\n        }\n\n        // Parse powers\n        if (importOptions.powers && genesisCharacter.adeptPowers) {\n            this.parsePowers(items, genesisCharacter.adeptPowers, importOptions);\n        }\n\n        // Parse spells\n        if (importOptions.spells && genesisCharacter.spells) {\n            this.parseSpells(items, genesisCharacter.spells, importOptions);\n        }\n\n        // Parse contacts\n        if (importOptions.contacts && genesisCharacter.contacts) {\n            this.parseContacts(items, genesisCharacter.contacts, importOptions);\n        }\n\n        // Parse lifestyles\n        if (importOptions.lifestyles && genesisCharacter.lifestyles) {\n            this.parseLifestyles(items, genesisCharacter.lifestyles, importOptions);\n        }\n\n        // Parse SINs\n        if (importOptions.equipment && genesisCharacter.sins) {\n            this.parseSINs(items, genesisCharacter.sins, genesisCharacter.licenses, importOptions);\n        }\n\n        // Vehicles and drones are now handled as actors in GenesisImporter.js\n\n        return items;\n    }\n\n    /**\n     * Parses weapons from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} weapons The weapons data.\n     * @param {*} importOptions Import options.\n     */\n    parseWeapons(items, weapons, importOptions) {\n        for (const weapon of weapons) {\n            // Determine weapon type based on subtype\n            let weaponType = 'ranged';\n            let weaponCategory = '';\n\n            if (weapon.subtype === 'PISTOLS_HEAVY') {\n                weaponCategory = 'heavy_pistol';\n            } else if (weapon.subtype === 'PISTOLS_LIGHT') {\n                weaponCategory = 'light_pistol';\n            } else if (weapon.subtype === 'RIFLES_ASSAULT') {\n                weaponCategory = 'assault_rifle';\n            } else if (weapon.subtype === 'RIFLES_SNIPER') {\n                weaponCategory = 'sniper_rifle';\n            } else if (weapon.subtype === 'SHOTGUNS') {\n                weaponCategory = 'shotgun';\n            } else if (weapon.subtype === 'SMGS') {\n                weaponCategory = 'smg';\n            } else if (weapon.subtype === 'MACHINE_GUNS') {\n                weaponCategory = 'machine_gun';\n            }\n\n            // Parse damage value and type\n            let damageValue = 0;\n            let damageType = 'physical';\n\n            if (weapon.damage) {\n                const damageMatch = weapon.damage.match(/(\\d+)([PS])/);\n                if (damageMatch) {\n                    damageValue = parseInt(damageMatch[1]) || 0;\n                    damageType = damageMatch[2] === 'P' ? 'physical' : 'stun';\n                }\n            }\n\n            // Parse attack rating\n            let attackRating = { close: 0, near: 0, medium: 0, far: 0, extreme: 0 };\n\n            if (weapon.attackRating) {\n                const arValues = weapon.attackRating.split('/');\n                if (arValues.length >= 5) {\n                    attackRating.close = parseInt(arValues[0]) || 0;\n                    attackRating.near = parseInt(arValues[1]) || 0;\n                    attackRating.medium = parseInt(arValues[2]) || 0;\n                    attackRating.far = parseInt(arValues[3]) || 0;\n                    attackRating.extreme = parseInt(arValues[4]) || 0;\n                }\n            }\n\n            // Parse fire modes\n            let fireModes = [];\n\n            if (weapon.mode) {\n                if (weapon.mode.includes('SA')) fireModes.push('single_shot');\n                if (weapon.mode.includes('BF')) fireModes.push('burst_fire');\n                if (weapon.mode.includes('FA')) fireModes.push('full_auto');\n            }\n\n            const weaponItem = {\n                name: weapon.name,\n                type: 'weapon',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/gun.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: weapon.description || ''\n                    },\n                    technology: {\n                        rating: 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    action: {\n                        type: 'major',\n                        attribute: 'agility',\n                        skill: weapon.skill || 'firearms',\n                        test: 'ranged_attack',\n                        limit: {\n                            value: 0,\n                            attribute: ''\n                        }\n                    },\n                    range: {\n                        category: 'standard',\n                        ranges: {\n                            short: { value: attackRating.close },\n                            medium: { value: attackRating.near },\n                            long: { value: attackRating.medium },\n                            extreme: { value: attackRating.far }\n                        }\n                    },\n                    damage: {\n                        type: {\n                            value: damageType\n                        },\n                        element: {\n                            value: ''\n                        },\n                        value: damageValue,\n                        ap: {\n                            value: 0\n                        }\n                    },\n                    category: weaponCategory,\n                    type: weaponType,\n                    firingModes: fireModes,\n                    ammo: {\n                        current: weapon.ammunition ? parseInt(weapon.ammunition) || 0 : 0,\n                        max: weapon.ammunition ? parseInt(weapon.ammunition) || 0 : 0\n                    },\n                    roll_mode: 'publicroll',\n                    source: weapon.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            // Add weapon accessories if they exist\n            if (weapon.accessories && weapon.accessories.length > 0) {\n                weaponItem.system.accessories = [];\n\n                for (const accessory of weapon.accessories) {\n                    weaponItem.system.accessories.push({\n                        name: accessory.name,\n                        rating: accessory.rating || 0,\n                        description: accessory.description || '',\n                        equipped: true\n                    });\n                }\n            }\n\n            items.push(weaponItem);\n        }\n    }\n\n    /**\n     * Parses close combat weapons from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} weapons The weapons data.\n     * @param {*} importOptions Import options.\n     */\n    parseCloseCombatWeapons(items, weapons, importOptions) {\n        for (const weapon of weapons) {\n            // Determine weapon type and category\n            let weaponType = 'melee';\n            let weaponCategory = '';\n\n            if (weapon.subtype === 'UNARMED') {\n                weaponCategory = 'unarmed';\n            } else if (weapon.subtype === 'BLADES') {\n                weaponCategory = 'blade';\n            } else if (weapon.subtype === 'CLUBS') {\n                weaponCategory = 'club';\n            } else {\n                weaponCategory = 'other';\n            }\n\n            // Parse damage value and type\n            let damageValue = 0;\n            let damageType = 'physical';\n\n            if (weapon.damage) {\n                const damageMatch = weapon.damage.match(/(\\d+)([PS])/);\n                if (damageMatch) {\n                    damageValue = parseInt(damageMatch[1]) || 0;\n                    damageType = damageMatch[2] === 'P' ? 'physical' : 'stun';\n                }\n            }\n\n            // Parse attack rating\n            let attackRating = { close: 0, near: 0, medium: 0, far: 0, extreme: 0 };\n\n            if (weapon.attackRating) {\n                const arValues = weapon.attackRating.split('/');\n                if (arValues.length >= 1) {\n                    attackRating.close = parseInt(arValues[0]) || 0;\n                }\n            }\n\n            const weaponItem = {\n                name: weapon.name,\n                type: 'weapon',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/melee.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: weapon.description || ''\n                    },\n                    technology: {\n                        rating: 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    action: {\n                        type: 'major',\n                        attribute: 'agility',\n                        skill: weapon.skill || 'close_combat',\n                        test: 'melee_attack',\n                        limit: {\n                            value: 0,\n                            attribute: ''\n                        }\n                    },\n                    range: {\n                        category: 'melee',\n                        ranges: {\n                            short: { value: attackRating.close },\n                            medium: { value: 0 },\n                            long: { value: 0 },\n                            extreme: { value: 0 }\n                        }\n                    },\n                    damage: {\n                        type: {\n                            value: damageType\n                        },\n                        element: {\n                            value: ''\n                        },\n                        value: damageValue,\n                        ap: {\n                            value: 0\n                        }\n                    },\n                    category: weaponCategory,\n                    type: weaponType,\n                    roll_mode: 'publicroll',\n                    source: weapon.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            // Add weapon accessories if they exist\n            if (weapon.accessories && weapon.accessories.length > 0) {\n                weaponItem.system.accessories = [];\n\n                for (const accessory of weapon.accessories) {\n                    weaponItem.system.accessories.push({\n                        name: accessory.name,\n                        rating: accessory.rating || 0,\n                        description: accessory.description || '',\n                        equipped: true\n                    });\n                }\n            }\n\n            items.push(weaponItem);\n        }\n    }\n\n    /**\n     * Parses armor from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} armors The armor data.\n     * @param {*} importOptions Import options.\n     */\n    parseArmor(items, armors, importOptions) {\n        for (const armor of armors) {\n            if (armor.isIgnored) continue;\n\n            const armorItem = {\n                name: armor.name,\n                type: 'armor',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/armor.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: armor.description || ''\n                    },\n                    technology: {\n                        rating: armor.rating || 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    armor: {\n                        value: armor.rating || 0,\n                        base: armor.rating || 0,\n                        mod: 0\n                    },\n                    source: armor.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(armorItem);\n        }\n    }\n\n    /**\n     * Parses cyberware from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} cyberware The cyberware data.\n     * @param {*} importOptions Import options.\n     */\n    parseCyberware(items, cyberware, importOptions) {\n        for (const ware of cyberware) {\n            const cyberwareItem = {\n                name: ware.name,\n                type: 'cyberware',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/cyberware.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: ware.description || ''\n                    },\n                    technology: {\n                        rating: ware.level ? parseInt(ware.level) || 0 : 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    essence: ware.essence || 0,\n                    grade: ware.quality ? ware.quality.toLowerCase() : 'standard',\n                    source: ware.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(cyberwareItem);\n        }\n    }\n\n    /**\n     * Parses equipment from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} equipment The equipment data.\n     * @param {*} importOptions Import options.\n     */\n    parseEquipment(items, equipment, importOptions) {\n        for (const gear of equipment) {\n            const gearItem = {\n                name: gear.name,\n                type: 'equipment',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/gear.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: gear.description || ''\n                    },\n                    technology: {\n                        rating: gear.rating || 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    quantity: gear.count || 1,\n                    source: gear.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(gearItem);\n        }\n    }\n\n    /**\n     * Parses qualities from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} qualities The qualities data.\n     * @param {*} importOptions Import options.\n     */\n    parseQualities(items, qualities, importOptions) {\n        for (const quality of qualities) {\n            const qualityItem = {\n                name: quality.name,\n                type: 'quality',\n                img: importOptions.assignIcons ?\n                    (quality.positive ? 'systems/shadowrun6-elysium/dist/icons/redist/quality-positive.svg' : 'systems/shadowrun6-elysium/dist/icons/redist/quality-negative.svg') :\n                    'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: quality.description || ''\n                    },\n                    type: quality.positive ? 'positive' : 'negative',\n                    rating: quality.rating || 1,\n                    source: quality.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(qualityItem);\n        }\n    }\n\n    /**\n     * Parses powers from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} powers The powers data.\n     * @param {*} importOptions Import options.\n     */\n    parsePowers(items, powers, importOptions) {\n        for (const power of powers) {\n            const powerItem = {\n                name: power.name,\n                type: 'adept_power',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/adept.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: power.description || ''\n                    },\n                    action: {\n                        type: 'major',\n                        skill: '',\n                        attribute: ''\n                    },\n                    pp: power.pp || 0,\n                    rating: power.rating || 1,\n                    source: power.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(powerItem);\n        }\n    }\n\n    /**\n     * Parses spells from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} spells The spells data.\n     * @param {*} importOptions Import options.\n     */\n    parseSpells(items, spells, importOptions) {\n        for (const spell of spells) {\n            const spellItem = {\n                name: spell.name,\n                type: 'spell',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/spell.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: spell.description || ''\n                    },\n                    action: {\n                        type: 'major',\n                        skill: 'spellcasting',\n                        attribute: 'magic'\n                    },\n                    drain: spell.drain || 0,\n                    category: spell.category || 'combat',\n                    type: spell.type || 'physical',\n                    range: spell.range || 'los',\n                    duration: spell.duration || 'instant',\n                    source: spell.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(spellItem);\n        }\n    }\n\n    /**\n     * Parses contacts from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} contacts The contacts data.\n     * @param {*} importOptions Import options.\n     */\n    parseContacts(items, contacts, importOptions) {\n        for (const contact of contacts) {\n            const contactItem = {\n                name: contact.name,\n                type: 'contact',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/contact.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: contact.description || ''\n                    },\n                    connection: contact.influence || 1,\n                    loyalty: contact.loyalty || 1,\n                    type: contact.type || '',\n                    source: contact.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(contactItem);\n        }\n    }\n\n    /**\n     * Parses lifestyles from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} lifestyles The lifestyles data.\n     * @param {*} importOptions Import options.\n     */\n    parseLifestyles(items, lifestyles, importOptions) {\n        for (const lifestyle of lifestyles) {\n            // Map lifestyle type\n            let lifestyleType = 'medium';\n            if (lifestyle.type === 'STREET') {\n                lifestyleType = 'street';\n            } else if (lifestyle.type === 'SQUATTER') {\n                lifestyleType = 'squatter';\n            } else if (lifestyle.type === 'LOW') {\n                lifestyleType = 'low';\n            } else if (lifestyle.type === 'MEDIUM') {\n                lifestyleType = 'medium';\n            } else if (lifestyle.type === 'HIGH') {\n                lifestyleType = 'high';\n            } else if (lifestyle.type === 'LUXURY') {\n                lifestyleType = 'luxury';\n            }\n\n            const lifestyleItem = {\n                name: lifestyle.customName || lifestyle.name,\n                type: 'lifestyle',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/lifestyle.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: lifestyle.description || ''\n                    },\n                    nuyen: lifestyle.cost || 0,\n                    type: lifestyleType,\n                    months: lifestyle.paidMonths || 1,\n                    source: lifestyle.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            items.push(lifestyleItem);\n        }\n    }\n\n    /**\n     * Parses matrix devices from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} matrixItems The matrix items data.\n     * @param {*} importOptions Import options.\n     */\n    parseMatrixDevices(items, matrixItems, importOptions) {\n        for (const device of matrixItems) {\n            // Determine device type based on subType\n            let deviceType = 'device';\n            let deviceCategory = '';\n            let deviceIcon = 'systems/shadowrun6-elysium/dist/icons/redist/commlink.svg';\n\n            if (device.subType === 'RIGGER_CONSOLE') {\n                deviceCategory = 'rigger_console';\n                deviceIcon = 'systems/shadowrun6-elysium/dist/icons/redist/rigger-console.svg';\n            } else if (device.subType === 'CYBERDECK') {\n                deviceCategory = 'cyberdeck';\n                deviceIcon = 'systems/shadowrun6-elysium/dist/icons/redist/cyberdeck.svg';\n            } else if (device.subType === 'COMMLINK') {\n                deviceCategory = 'commlink';\n                deviceIcon = 'systems/shadowrun6-elysium/dist/icons/redist/commlink.svg';\n            }\n\n            const deviceItem = {\n                name: device.name,\n                type: 'device',\n                img: importOptions.assignIcons ? deviceIcon : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: device.description || ''\n                    },\n                    technology: {\n                        rating: device.deviceRating || 0,\n                        availability: {\n                            value: 0,\n                            mod: ''\n                        },\n                        cost: 0\n                    },\n                    category: deviceCategory,\n                    type: deviceType,\n                    matrix: {\n                        attack: device.attack || 0,\n                        sleaze: device.sleaze || 0,\n                        data_processing: device.dataProcessing || 0,\n                        firewall: device.firewall || 0\n                    },\n                    programs: {\n                        max: device.concurrentPrograms || 0,\n                        value: []\n                    },\n                    roll_mode: 'publicroll',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            // Add programs if they exist\n            if (device.accessories && device.accessories.length > 0) {\n                for (const accessory of device.accessories) {\n                    if (accessory.subType === 'RIGGER_PROGRAM' ||\n                        accessory.subType === 'HACKING_PROGRAM' ||\n                        accessory.subType === 'COMMON_PROGRAM' ||\n                        accessory.subType === 'OTHER_PROGRAMS') {\n                        deviceItem.system.programs.value.push({\n                            name: accessory.name,\n                            rating: accessory.rating || 0,\n                            equipped: true\n                        });\n                    }\n                }\n            }\n\n            items.push(deviceItem);\n        }\n    }\n\n    /**\n     * Parses SINs and licenses from a Genesis character file.\n     * @param {*} items The array to add items to.\n     * @param {*} sins The SINs data.\n     * @param {*} licenses The licenses data.\n     * @param {*} importOptions Import options.\n     */\n    parseSINs(items, sins, licenses, importOptions) {\n        for (const sin of sins) {\n            // Map SIN quality to rating\n            let sinRating = 0;\n            if (sin.quality === 'STANDARD') {\n                sinRating = 2;\n            } else if (sin.quality === 'NATIONAL') {\n                sinRating = 3;\n            } else if (sin.quality === 'CRIMINAL') {\n                sinRating = 4;\n            } else if (sin.quality === 'CORPORATE_LIMITED') {\n                sinRating = 5;\n            } else if (sin.quality === 'CORPORATE') {\n                sinRating = 6;\n            }\n\n            const sinItem = {\n                name: sin.name,\n                type: 'sin',\n                img: importOptions.assignIcons ? 'systems/shadowrun6-elysium/dist/icons/redist/sin.svg' : 'icons/svg/item-bag.svg',\n                system: {\n                    description: {\n                        value: sin.description || ''\n                    },\n                    rating: sinRating,\n                    licenses: [],\n                    source: sin.source || '',\n                    importFlags: {\n                        isImported: true\n                    }\n                }\n            };\n\n            // Add licenses associated with this SIN\n            if (licenses) {\n                const sinLicenses = licenses.filter(license => license.sin === sin.name);\n                for (const license of sinLicenses) {\n                    // Map license rating\n                    let licenseRating = 0;\n                    if (license.rating === 'STANDARD') {\n                        licenseRating = 2;\n                    } else if (license.rating === 'SUPERFICIALLY_PLAUSIBLE') {\n                        licenseRating = 4;\n                    } else if (license.rating === 'COMPLETELY_LEGITIMATE') {\n                        licenseRating = 6;\n                    }\n\n                    sinItem.system.licenses.push({\n                        name: license.name,\n                        rating: licenseRating,\n                        type: license.type || ''\n                    });\n                }\n            }\n\n            items.push(sinItem);\n        }\n    }\n\n    // Vehicle and drone parsing methods have been moved to GenesisImporter.js\n\n}\n", "import { GenesisInfoUpdater } from \"./GenesisInfoUpdater.js\"\nimport { ItemsParser } from \"../itemImporter/ItemsParser.js\";\nimport { GenesisItemsParser } from \"./GenesisItemsParser.js\";\nimport VehicleParser from \"../itemImporter/vehicleImport/VehicleParser.ts\";\n\n/**\n * Imports characters from Genesis character creator into an existing foundry actor.\n */\nexport class GenesisImporter {\n\n    /**\n     * Imports a Genesis character into an existing actor. The actor will be updated. This might lead to duplicate items.\n     * @param {*} actor The actor that will be updated with the Genesis character.\n     * @param {*} genesisFile The complete Genesis file as json object.\n     * @param {*} importOptions Additional import option that specify what parts of the Genesis file will be imported.\n     */\n    async importGenesisCharacter(actor, genesisFile, importOptions) {\n        console.log('Importing the following Genesis character file content:');\n        console.log(genesisFile);\n\n        console.log('Using the following import options:')\n        console.log(importOptions);\n\n        if (!genesisFile) {\n            console.log('Did not find a valid character to import - aborting import');\n            return;\n        }\n\n        await this.resetCharacter(actor)\n\n        const genesisCharacter = genesisFile;\n        const infoUpdater = new GenesisInfoUpdater();\n        const updatedActorData = infoUpdater.update(actor._source, genesisCharacter);\n        const items = new GenesisItemsParser().parse(genesisCharacter, importOptions);\n\n        // Create vehicles as actors if they exist in Genesis format\n        if (genesisCharacter.vehicles && importOptions.vehicles) {\n            await this.createVehicleActors(genesisCharacter.vehicles, actor);\n        }\n\n        // Create drones as actors if they exist in Genesis format\n        if (genesisCharacter.drones && importOptions.vehicles) {\n            await this.createDroneActors(genesisCharacter.drones, actor);\n        }\n\n        await actor.update(await updatedActorData);\n        await actor.createEmbeddedDocuments('Item', await items);\n    }\n\n    async resetCharacter(actor) {\n        let toDeleteItems = actor.items?.filter(item => item.type !== \"action\")\n            //filter items that were not imported\n            //first line is for legacy items, user need to delete these manually\n            .filter(item => item.system.importFlags != undefined)\n            .filter(item => item.system.importFlags.isImported)\n            .filter(item => item.effects.size == 0)\n            .map(item => item.id)\n\n        let deletedItems = actor.deleteEmbeddedDocuments(\"Item\", toDeleteItems);\n\n        let removed = {\n            'system.skills.language.-=value': null,\n            'system.skills.knowledge.academic.-=value': null,\n            'system.skills.knowledge.interests.-=value': null,\n            'system.skills.knowledge.professional.-=value': null,\n            'system.skills.knowledge.street.-=value': null\n        }\n        let removeSkills = actor.update(removed)\n\n        //await as late as possible to save time\n        await deletedItems\n        await removeSkills\n    }\n\n    /**\n     * Creates vehicle actors from Genesis vehicle data.\n     * @param {*} vehicles The Genesis vehicles data.\n     * @param {*} ownerActor The actor that owns the vehicles.\n     */\n    async createVehicleActors(vehicles, ownerActor) {\n        for (const vehicle of vehicles) {\n            console.log('Creating vehicle from Genesis data:', vehicle);\n\n            // Determine vehicle category based on subtype\n            let vehicleCategory = 'ground';\n            if (vehicle.subtype === 'WATER') {\n                vehicleCategory = 'water';\n            } else if (vehicle.subtype === 'AIR') {\n                vehicleCategory = 'air';\n            }\n\n            // Create the vehicle actor data\n            const vehicleData = {\n                name: vehicle.name,\n                type: 'vehicle',\n                img: 'systems/shadowrun6-elysium/dist/icons/redist/vehicle.svg',\n                system: {\n                    description: {\n                        value: vehicle.description || ''\n                    },\n                    handling: {\n                        base: this.extractNumericValue(vehicle.handlOn),\n                        off_road: this.extractNumericValue(vehicle.handlOff)\n                    },\n                    speed: {\n                        base: this.extractNumericValue(vehicle.speed)\n                    },\n                    acceleration: {\n                        base: this.extractNumericValue(vehicle.accelOn),\n                        off_road: this.extractNumericValue(vehicle.accelOff)\n                    },\n                    body: this.extractNumericValue(vehicle.body),\n                    armor: this.extractNumericValue(vehicle.armor),\n                    pilot: this.extractNumericValue(vehicle.pilot),\n                    sensor: this.extractNumericValue(vehicle.sensor),\n                    seats: this.extractNumericValue(vehicle.seats),\n                    mod_slots: {\n                        power: this.extractNumericValue(vehicle.powerTrainSlots),\n                        protection: this.extractNumericValue(vehicle.protectionSlots),\n                        weapon: this.extractNumericValue(vehicle.weaponSlots),\n                        body: this.extractNumericValue(vehicle.bodySlots),\n                        electromagnetic: this.extractNumericValue(vehicle.electronicSlots),\n                        cosmetic: this.extractNumericValue(vehicle.cosmeticSlots)\n                    },\n                    category: vehicleCategory,\n                    isDrone: false,  // Explicitly mark as not a drone\n                    owner: ownerActor.id,\n                    source: vehicle.source || ''\n                },\n                folder: await this.getOrCreateFolder('Vehicles'),\n                permission: { default: 0 }\n            };\n\n            // Set the owner's permission to owner\n            vehicleData.permission[ownerActor.id] = 3;\n\n            // Create the vehicle actor\n            const createdVehicle = await Actor.create(vehicleData);\n\n            // Add vehicle mods as items if they exist\n            if (vehicle.accessories && vehicle.accessories.length > 0) {\n                const modItems = [];\n\n                for (const accessory of vehicle.accessories) {\n                    modItems.push({\n                        name: accessory.name,\n                        type: 'modification',  // Use modification type\n                        img: 'systems/shadowrun6-elysium/dist/icons/redist/vehicle-mod.svg',\n                        system: {\n                            description: {\n                                value: accessory.description || ''\n                            },\n                            technology: {\n                                rating: this.extractNumericValue(accessory.rating),\n                                availability: {\n                                    value: 0,\n                                    mod: ''\n                                },\n                                cost: 0\n                            },\n                            category: 'vehicle_mod',  // Set category to vehicle_mod\n                            equipped: true,\n                            source: accessory.source || '',\n                            importFlags: {\n                                isImported: true\n                            }\n                        }\n                    });\n                }\n\n                await createdVehicle.createEmbeddedDocuments('Item', modItems);\n            }\n\n            // Add vehicle weapons if they exist\n            // In Genesis format, weapons might be stored in the accessories array with a specific subType\n            const weaponAccessories = vehicle.accessories ? vehicle.accessories.filter(acc => acc.subType === 'WEAPON' || acc.subType === 'MOD_WEAPON') : [];\n\n            if ((vehicle.weapons && vehicle.weapons.length > 0) || weaponAccessories.length > 0) {\n                const weaponItems = [];\n\n                // Process regular weapons if they exist\n                if (vehicle.weapons && vehicle.weapons.length > 0) {\n                    for (const weapon of vehicle.weapons) {\n                        // Parse damage value and type\n                        let damageValue = 0;\n                        let damageType = 'physical';\n\n                        if (weapon.damage) {\n                            const damageMatch = weapon.damage.match(/(\\d+)([PS])/);\n                            if (damageMatch) {\n                                damageValue = parseInt(damageMatch[1]) || 0;\n                                damageType = damageMatch[2] === 'P' ? 'physical' : 'stun';\n                            }\n                        }\n\n                        weaponItems.push({\n                            name: weapon.name,\n                            type: 'weapon',\n                            img: 'systems/shadowrun6-elysium/dist/icons/redist/vehicle-weapon.svg',\n                            system: {\n                                description: {\n                                    value: weapon.description || ''\n                                },\n                                technology: {\n                                    rating: 0,\n                                    availability: {\n                                        value: 0,\n                                        mod: ''\n                                    },\n                                    cost: 0\n                                },\n                                action: {\n                                    type: 'major',\n                                    attribute: 'agility',\n                                    skill: 'gunnery',\n                                    test: 'vehicle_weapon',\n                                    limit: {\n                                        value: 0,\n                                        attribute: ''\n                                    }\n                                },\n                                range: {\n                                    category: 'standard',\n                                    ranges: {\n                                        short: { value: 0 },\n                                        medium: { value: 0 },\n                                        long: { value: 0 },\n                                        extreme: { value: 0 }\n                                    }\n                                },\n                                damage: {\n                                    type: {\n                                        value: damageType\n                                    },\n                                    element: {\n                                        value: ''\n                                    },\n                                    value: damageValue,\n                                    ap: {\n                                        value: this.extractNumericValue(weapon.ap)\n                                    }\n                                },\n                                category: 'vehicle_weapon',\n                                type: 'vehicle',\n                                roll_mode: 'publicroll',\n                                source: weapon.source || '',\n                                importFlags: {\n                                    isImported: true\n                                }\n                            }\n                        });\n                    }\n                }\n\n                // Process weapon accessories\n                for (const weaponAcc of weaponAccessories) {\n                    weaponItems.push({\n                        name: weaponAcc.name,\n                        type: 'weapon',\n                        img: 'systems/shadowrun6-elysium/dist/icons/redist/vehicle-weapon.svg',\n                        system: {\n                            description: {\n                                value: weaponAcc.description || ''\n                            },\n                            technology: {\n                                rating: this.extractNumericValue(weaponAcc.rating),\n                                availability: {\n                                    value: 0,\n                                    mod: ''\n                                },\n                                cost: 0\n                            },\n                            action: {\n                                type: 'major',\n                                attribute: 'agility',\n                                skill: 'gunnery',\n                                test: 'vehicle_weapon',\n                                limit: {\n                                    value: 0,\n                                    attribute: ''\n                                }\n                            },\n                            range: {\n                                category: 'standard',\n                                ranges: {\n                                    short: { value: 0 },\n                                    medium: { value: 0 },\n                                    long: { value: 0 },\n                                    extreme: { value: 0 }\n                                }\n                            },\n                            damage: {\n                                type: {\n                                    value: 'physical'\n                                },\n                                element: {\n                                    value: ''\n                                },\n                                value: 0,\n                                ap: {\n                                    value: 0\n                                }\n                            },\n                            category: 'vehicle_weapon',\n                            type: 'vehicle',\n                            roll_mode: 'publicroll',\n                            source: weaponAcc.source || '',\n                            importFlags: {\n                                isImported: true\n                            }\n                        }\n                    });\n                }\n\n                await createdVehicle.createEmbeddedDocuments('Item', weaponItems);\n            }\n        }\n    }\n\n    /**\n     * Creates drone actors from Genesis drone data.\n     * @param {*} drones The Genesis drones data.\n     * @param {*} ownerActor The actor that owns the drones.\n     */\n    async createDroneActors(drones, ownerActor) {\n        for (const drone of drones) {\n            console.log('Creating drone from Genesis data:', drone);\n\n            // Get drone category\n            const droneCategory = this.getDroneCategory(drone);\n\n            // Create the drone actor data (as vehicle type)\n            const droneData = {\n                name: drone.name,\n                type: 'vehicle',  // Use vehicle type for drones\n                img: 'systems/shadowrun6-elysium/dist/icons/redist/drone.svg',\n                system: {\n                    description: {\n                        value: drone.description || ''\n                    },\n                    handling: {\n                        base: this.extractNumericValue(drone.handlOn),\n                        off_road: this.extractNumericValue(drone.handlOff)\n                    },\n                    speed: {\n                        base: this.extractNumericValue(drone.speed)\n                    },\n                    acceleration: {\n                        base: this.extractNumericValue(drone.accelOn),\n                        off_road: this.extractNumericValue(drone.accelOff)\n                    },\n                    body: this.extractNumericValue(drone.body),\n                    armor: this.extractNumericValue(drone.armor),\n                    pilot: this.extractNumericValue(drone.pilot),\n                    sensor: this.extractNumericValue(drone.sensor),\n                    mod_slots: {\n                        power: this.extractNumericValue(drone.powerTrainSlots),\n                        protection: this.extractNumericValue(drone.protectionSlots),\n                        weapon: this.extractNumericValue(drone.weaponSlots),\n                        body: this.extractNumericValue(drone.bodySlots),\n                        electromagnetic: this.extractNumericValue(drone.electronicSlots),\n                        cosmetic: this.extractNumericValue(drone.cosmeticSlots)\n                    },\n                    category: droneCategory,  // Use the drone category as the vehicle category\n                    isDrone: true,  // Explicitly mark as a drone\n                    owner: ownerActor.id,\n                    source: drone.source || ''\n                },\n                folder: await this.getOrCreateFolder('Drones'),\n                permission: { default: 0 }\n            };\n\n            // Set the owner's permission to owner\n            droneData.permission[ownerActor.id] = 3;\n\n            // Create the drone actor\n            const createdDrone = await Actor.create(droneData);\n\n            // Add drone mods as items if they exist\n            if (drone.accessories && drone.accessories.length > 0) {\n                const modItems = [];\n\n                for (const accessory of drone.accessories) {\n                    modItems.push({\n                        name: accessory.name,\n                        type: 'modification',  // Use modification type\n                        img: 'systems/shadowrun6-elysium/dist/icons/redist/drone-mod.svg',\n                        system: {\n                            description: {\n                                value: accessory.description || ''\n                            },\n                            technology: {\n                                rating: this.extractNumericValue(accessory.rating),\n                                availability: {\n                                    value: 0,\n                                    mod: ''\n                                },\n                                cost: 0\n                            },\n                            category: 'drone_mod',  // Set category to drone_mod\n                            equipped: true,\n                            source: accessory.source || '',\n                            importFlags: {\n                                isImported: true\n                            }\n                        }\n                    });\n                }\n\n                await createdDrone.createEmbeddedDocuments('Item', modItems);\n            }\n\n            // Add drone weapons if they exist\n            // In Genesis format, weapons might be stored in the accessories array with a specific subType\n            const weaponAccessories = drone.accessories ? drone.accessories.filter(acc => acc.subType === 'WEAPON' || acc.subType === 'MOD_WEAPON') : [];\n\n            if ((drone.weapons && drone.weapons.length > 0) || weaponAccessories.length > 0) {\n                const weaponItems = [];\n\n                // Process regular weapons if they exist\n                if (drone.weapons && drone.weapons.length > 0) {\n                    for (const weapon of drone.weapons) {\n                        // Parse damage value and type\n                        let damageValue = 0;\n                        let damageType = 'physical';\n\n                        if (weapon.damage) {\n                            const damageMatch = weapon.damage.match(/(\\d+)([PS])/);\n                            if (damageMatch) {\n                                damageValue = parseInt(damageMatch[1]) || 0;\n                                damageType = damageMatch[2] === 'P' ? 'physical' : 'stun';\n                            }\n                        }\n\n                        weaponItems.push({\n                            name: weapon.name,\n                            type: 'weapon',\n                            img: 'systems/shadowrun6-elysium/dist/icons/redist/drone-weapon.svg',\n                            system: {\n                                description: {\n                                    value: weapon.description || ''\n                                },\n                                technology: {\n                                    rating: 0,\n                                    availability: {\n                                        value: 0,\n                                        mod: ''\n                                    },\n                                    cost: 0\n                                },\n                                action: {\n                                    type: 'major',\n                                    attribute: 'agility',\n                                    skill: 'gunnery',\n                                    test: 'vehicle_weapon',\n                                    limit: {\n                                        value: 0,\n                                        attribute: ''\n                                    }\n                                },\n                                range: {\n                                    category: 'standard',\n                                    ranges: {\n                                        short: { value: 0 },\n                                        medium: { value: 0 },\n                                        long: { value: 0 },\n                                        extreme: { value: 0 }\n                                    }\n                                },\n                                damage: {\n                                    type: {\n                                        value: damageType\n                                    },\n                                    element: {\n                                        value: ''\n                                    },\n                                    value: damageValue,\n                                    ap: {\n                                        value: this.extractNumericValue(weapon.ap)\n                                    }\n                                },\n                                category: 'drone_weapon',\n                                type: 'vehicle',\n                                roll_mode: 'publicroll',\n                                source: weapon.source || '',\n                                importFlags: {\n                                    isImported: true\n                                }\n                            }\n                        });\n                    }\n                }\n\n                // Process weapon accessories\n                for (const weaponAcc of weaponAccessories) {\n                    weaponItems.push({\n                        name: weaponAcc.name,\n                        type: 'weapon',\n                        img: 'systems/shadowrun6-elysium/dist/icons/redist/drone-weapon.svg',\n                        system: {\n                            description: {\n                                value: weaponAcc.description || ''\n                            },\n                            technology: {\n                                rating: this.extractNumericValue(weaponAcc.rating),\n                                availability: {\n                                    value: 0,\n                                    mod: ''\n                                },\n                                cost: 0\n                            },\n                            action: {\n                                type: 'major',\n                                attribute: 'agility',\n                                skill: 'gunnery',\n                                test: 'vehicle_weapon',\n                                limit: {\n                                    value: 0,\n                                    attribute: ''\n                                }\n                            },\n                            range: {\n                                category: 'standard',\n                                ranges: {\n                                    short: { value: 0 },\n                                    medium: { value: 0 },\n                                    long: { value: 0 },\n                                    extreme: { value: 0 }\n                                }\n                            },\n                            damage: {\n                                type: {\n                                    value: 'physical'\n                                },\n                                element: {\n                                    value: ''\n                                },\n                                value: 0,\n                                ap: {\n                                    value: 0\n                                }\n                            },\n                            category: 'drone_weapon',\n                            type: 'vehicle',\n                            roll_mode: 'publicroll',\n                            source: weaponAcc.source || '',\n                            importFlags: {\n                                isImported: true\n                            }\n                        }\n                    });\n                }\n\n                await createdDrone.createEmbeddedDocuments('Item', weaponItems);\n            }\n        }\n    }\n\n    /**\n     * Gets the drone category based on the drone type.\n     * @param {*} drone The drone data.\n     * @returns The drone category.\n     */\n    getDroneCategory(drone) {\n        console.log('Getting drone category for:', drone);\n\n        // Check for subtype property\n        if (drone.subtype) {\n            if (drone.subtype === 'AIR') {\n                return 'air';\n            } else if (drone.subtype === 'GROUND') {\n                return 'ground';\n            } else if (drone.subtype === 'WATER') {\n                return 'water';\n            } else if (drone.subtype === 'ANTHROFORM') {\n                return 'anthroform';\n            }\n        }\n\n        // If no subtype or unrecognized, try to determine from name or description\n        const name = (drone.name || '').toLowerCase();\n        const description = (drone.description || '').toLowerCase();\n\n        if (name.includes('air') || name.includes('fly') || name.includes('copter') ||\n            description.includes('air') || description.includes('fly') || description.includes('copter')) {\n            return 'air';\n        } else if (name.includes('water') || name.includes('boat') || name.includes('submarine') ||\n                  description.includes('water') || description.includes('boat') || description.includes('submarine')) {\n            return 'water';\n        } else if (name.includes('anthro') || name.includes('humanoid') ||\n                  description.includes('anthro') || description.includes('humanoid')) {\n            return 'anthroform';\n        } else {\n            return 'ground'; // Default to ground\n        }\n    }\n\n    /**\n     * Gets or creates a folder for the given name.\n     * @param {*} folderName The name of the folder.\n     * @returns The folder ID.\n     */\n    async getOrCreateFolder(folderName) {\n        // Check if the folder already exists\n        const folder = game.folders.find(f => f.name === folderName && f.type === 'Actor');\n\n        if (folder) {\n            return folder.id;\n        }\n\n        // Create the folder if it doesn't exist\n        const createdFolder = await Folder.create({\n            name: folderName,\n            type: 'Actor',\n            parent: null\n        });\n\n        return createdFolder.id;\n    }\n\n    /**\n     * Extracts a numeric value from a string or returns a default value.\n     * @param {*} value The value to extract a number from.\n     * @param {number} defaultValue The default value to return if extraction fails.\n     * @returns The extracted number or the default value.\n     */\n    extractNumericValue(value, defaultValue = 0) {\n        if (value === undefined || value === null) {\n            return defaultValue;\n        }\n\n        // If it's already a number, return it\n        if (typeof value === 'number') {\n            return value;\n        }\n\n        // If it's a string, try to extract a number\n        if (typeof value === 'string') {\n            // Try to extract a number from the string\n            const match = value.match(/-?\\d+/);\n            if (match) {\n                return parseInt(match[0]);\n            }\n        }\n\n        return defaultValue;\n    }\n}\n", "import { GenesisImporter } from \"./importer/actorImport/characterImporter/GenesisImporter.js\"\n\nexport class GenesisImportForm extends FormApplication {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'genesis-import';\n        options.classes = ['shadowrun6-elysium'];\n        options.title = 'Genesis Import';\n        options.template = 'systems/shadowrun6-elysium/dist/templates/apps/genesis-import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    getData() {\n        return {};\n    }\n\n    activateListeners(html) {\n        html.find('.submit-genesis-import').click(async (event) => {\n            event.preventDefault();\n\n            const genesisFile = JSON.parse($('.genesis-text').val());\n            const importOptions = {\n                weapons: $('.weapons').is(':checked'),\n                armor: $('.armor').is(':checked'),\n                cyberware: $('.cyberware').is(':checked'),\n                equipment: $('.gear').is(':checked'),\n                qualities: $('.qualities').is(':checked'),\n                powers: $('.powers').is(':checked'),\n                spells: $('.spells').is(':checked'),\n                contacts: $('.contacts').is(':checked'),\n                lifestyles: $('.lifestyles').is(':checked'),\n                vehicles: $('.vehicles').is(':checked'),\n                assignIcons: $('.assignIcons').is(':checked'),\n            }\n\n            const importer = new GenesisImporter();\n            await importer.importGenesisCharacter(this.object, genesisFile, importOptions);\n\n            ui.notifications?.info(\n                'Genesis import complete! Please check everything to ensure it was imported correctly.'\n            );\n            this.close();\n        });\n    }\n}\n", "import { SituationModifier } from '../../rules/modifiers/SituationModifier';\nimport { SituationModifiersApplication } from '../../apps/SituationModifiersApplication';\nimport { Helpers } from \"../../helpers\";\nimport { SR6Item } from \"../../item/SR6Item\";\nimport { onManageActiveEffect, onManageItemActiveEffect, prepareSortedItemEffects, prepareSortedEffects } from \"../../effects\";\nimport { SR6 } from \"../../config\";\nimport { SkillEditSheet } from \"../../apps/skills/SkillEditSheet\";\nimport { SR6Actor } from \"../SR6Actor\";\nimport { KnowledgeSkillEditSheet } from \"../../apps/skills/KnowledgeSkillEditSheet\";\nimport { LanguageSkillEditSheet } from \"../../apps/skills/LanguageSkillEditSheet\";\n// Forward reference for type checking\ntype SR6CharacterSheet = import('./SR6CharacterSheet').SR6CharacterSheet;\nimport { MoveInventoryDialog } from \"../../apps/dialogs/MoveInventoryDialog\";\nimport { ChummerImportForm } from '../../apps/chummer-import-form';\nimport { GenesisImportForm } from '../../apps/genesis-import-form';\nimport SR6SheetFilters = Shadowrun.SR6SheetFilters;\nimport SR6ActorSheetData = Shadowrun.SR6ActorSheetData;\nimport SkillField = Shadowrun.SkillField;\nimport Skills = Shadowrun.Skills;\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\nimport DeviceData = Shadowrun.DeviceData;\nimport KnowledgeSkills = Shadowrun.KnowledgeSkills;\nimport { LinksHelpers } from '../../utils/links';\nimport { SR6ActiveEffect } from '../../effect/SR6ActiveEffect';\nimport EffectApplyTo = Shadowrun.EffectApplyTo;\nimport { parseDropData } from '../../utils/sheets';\n\n/**\n * Designed to work with Item.toObject() but it's not fully implementing all ItemData fields.\n */\nexport interface SheetItemData {\n    type: string,\n    name: string,\n    data: Shadowrun.ShadowrunItemDataData\n    properties: any,\n    description: any\n}\n\nexport interface InventorySheetDataByType {\n    type: string;\n    label: string;\n    isOpen: boolean;\n    items: SheetItemData[];\n}\n\nexport interface InventorySheetData {\n    name: string,\n    label: string,\n    types: {\n        [type: string]: InventorySheetDataByType\n    }\n}\n\nexport type InventoriesSheetData = Record<string, InventorySheetData>;\n\n// Use SR6ActorSheet._showSkillEditForm to only ever render one SkillEditSheet instance.\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\n// when opened in succession, causing SkillEditSheet to wrongfully overwrite the wrong system.\nlet globalSkillAppId: number = -1;\n\n\n/**\n * Sort a list of items by name in ascending alphabetical order.\n *\n * @param a Any type of item data\n * @param b Any type of item data\n * @returns\n */\nconst sortByName = (a, b) => {\n    if (a.name > b.name) return 1;\n    if (a.name < b.name) return -1;\n    return 0;\n};\n\n/**\n * Sort a list of items by equipped and name in ascending alphabetical order.\n *\n * @param a Any type of item data\n * @param b Any type of item data\n * @returns\n */\nconst sortByEquipped = (a, b) => {\n    const leftEquipped = a.system?.technology?.equipped;\n    const rightEquipped = b.system?.technology?.equipped;\n\n    if (leftEquipped && !rightEquipped) return -1;\n    if (rightEquipped && !leftEquipped) return 1;\n    if (a.name > b.name) return 1;\n    if (a.name < b.name) return -1;\n    return 0;\n};\n\n/**\n * Sort a list of items by quality type and name in ascending alphabetical order.\n *\n * @param a A quality item data\n * @param b A quality item data\n * @returns\n */\nconst sortyByQuality = (a: any, b: any) => {\n    if (a.system.type === 'positive' && b.system.type === 'negative') return -1;\n    if (a.system.type === 'negative' && b.system.type === 'positive') return 1;\n    return a.name < b.name ? -1 : 1;\n}\n\nexport interface SR6BaseSheetDelays {\n    skills: ReturnType<typeof setTimeout> | null;\n}\n\n\n\n/**\n * This class should not be used directly but be extended for each actor type.\n *\n */\nexport class SR6BaseActorSheet extends ActorSheet {\n    // What document description is shown on sheet. Allow displaying multiple descriptions at the same time.\n    _shownDesc: string[] = [];\n    // If something needs filtering, store those filters here.\n    _filters: SR6SheetFilters = {\n        skills: '', // filter based on user input and skill name/label.\n        showUntrainedSkills: true, // filter based on pool size.\n    };\n    // Used together with _filters to delay textinput\n    _delays: SR6BaseSheetDelays = {\n        skills: null\n    }\n    // Used to store the scroll position on rerender. Needed as Foundry fully re-renders on Document update.\n    _scroll: string;\n    _inventoryOpenClose: Record<string, boolean> = {};\n\n    // Store the currently selected inventory.\n    selectedInventory: string;\n\n    constructor(...args) {\n        // @ts-expect-error // Since we don't need any actual data, don't define args to avoid breaking changes.\n        super(...args);\n\n        // Preselect default inventory.\n        this.selectedInventory = this.actor.defaultInventory.name;\n        this._setInventoryVisibility(true);\n    }\n\n    /**\n     * All actors will handle these item types specifically.\n     *\n     * All others will be collected somewhere.\n     *\n     * @return A string of item types from the template.json Item section.\n     */\n    getHandledItemTypes(): string[] {\n        return ['action'];\n    }\n\n    /**\n     * All actors will always show these in their 'inventory'.\n     * The inventory might be named differently for each actor.\n     *\n     * All other item types will only be shown when they've been added to that actor.\n     * This allows all players/GMs to add item types to each actor that the system may not find useful\n     * but the players/GMs might.\n     *\n     * @return An array of item types from the template.json Item section.\n     */\n    getInventoryItemTypes(): string[] {\n        return [];\n    }\n\n    /**\n     * These item types aren't allowed to be created on this actor sheet.\n     *\n     * This includes dropping them onto this actor.\n     */\n    getForbiddenItemTypes(): string[] {\n        return [];\n    }\n\n    /**\n     * Extend and override the default options used by the 5e Actor Sheet\n     * @returns {Object}\n     */\n    static override get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: ['sr6', 'sheet', 'actor'],\n            width: 930,\n            height: 690,\n            tabs: [\n                {\n                    navSelector: '.tabs',\n                    contentSelector: '.sheetbody',\n                    initial: 'skills',\n                },\n            ],\n        });\n    }\n\n    /**\n     * Decide which template to render both for actor types and user permissions.\n     *\n     *\n     * This could also be done within individual ActorType sheets, however, for ease of use, it's\n     * centralized here.\n     *\n     * @override\n     */\n    override get template() {\n        const path = 'systems/shadowrun6-elysium/dist/templates';\n\n        // v10 actor.limited doesn't take GM into account, so we have to do it ourselves.\n        if (!game.user?.isGM && this.actor.limited) {\n            return `${path}/actor-limited/${this.actor.type}.html`;\n        }\n\n        return `${path}/actor/${this.actor.type}.html`;\n    }\n\n    /** SheetData used by _all_ actor types! */\n    override async getData(options) {\n        // Remap Foundry default v8/v10 mappings to better match systems legacy foundry versions mapping accross it's templates.\n        // NOTE: If this is changed, you'll have to match changes on all actor sheets.\n        let data = super.getData() as any;\n        const actorData = this.actor.toObject(false);\n\n        data = {\n            ...data,\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            data: actorData.system,\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            system: actorData.system\n        }\n\n        // Sheet related general purpose fields. These aren't persistent.\n        data.config = SR6;\n        data.filters = this._filters;\n\n        this._prepareActorAttributes(data);\n        this._prepareActorModifiers(data);\n\n        // Valid data fields for all actor types.\n        this._prepareActorTypeFields(data);\n        this._prepareSpecialFields(data);\n        this._prepareSkillsWithFilters(data);\n\n        data.itemType = await this._prepareItemTypes(data);\n        data.effects = prepareSortedEffects(this.actor.effects.contents);\n        data.itemEffects = prepareSortedItemEffects(this.actor, { applyTo: this.itemEffectApplyTos });\n        data.inventories = await this._prepareItemsInventory();\n        data.inventory = this._prepareSelectedInventory(data.inventories);\n        data.hasInventory = this._prepareHasInventory(data.inventories);\n        data.selectedInventory = this.selectedInventory;\n\n        data.situationModifiers = this._prepareSituationModifiers();\n\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        data.biographyHTML = await TextEditor.enrichHTML(actorData.system.description.value, {\n            // secrets: this.actor.isOwner,\n            // rollData: this.actor.getRollData.bind(this.actor),\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            relativeTo: this.actor\n        });\n\n        data.bindings = this._prepareKeybindings();\n\n        return data;\n    }\n\n    /** Listeners used by _all_ actor types! */\n    override activateListeners(html) {\n        super.activateListeners(html);\n\n        Helpers.setupCustomCheckbox(this, html)\n\n        // Active Effect management\n        html.find(\".effect-control\").on('click', event => onManageActiveEffect(event, this.actor));\n        html.find(\".item-effect-control\").on('click', event => onManageItemActiveEffect(event));\n\n        // Inventory visibility switch\n        html.find('.item-toggle').on('click', this._onInventorySectionVisiblitySwitch.bind(this));\n\n        // General item CRUD management...\n        html.find('.item-create').on('click', this._onItemCreate.bind(this));\n        html.find('.item-edit').on('click', this._onItemEdit.bind(this));\n        html.find('.item-delete').on('click', this._onItemDelete.bind(this));\n\n        // General item header/list actions...\n        html.find('.item-qty').on('change', this._onListItemChangeQuantity.bind(this));\n        html.find('.item-rtg').on('change', this._onListItemChangeRating.bind(this));\n        html.find('.item-equip-toggle').on('click', this._onListItemToggleEquipped.bind(this));\n\n        // Item list description display handling...\n        html.find('.hidden').hide();\n        html.find('.has-desc').on('click', this._onListItemToggleDescriptionVisibility.bind(this));\n\n        // Folder toggling\n        html.find('.list-folder-header').on('click', this._onFolderToggle.bind(this));\n\n        // General item test rolling...\n        html.find('.item-roll').on('click', this._onItemRoll.bind(this));\n        html.find('.Roll').on('click', this._onRoll.bind(this));\n\n        // Actor inventory handling....\n        html.find('.inventory-inline-create').on('click', this._onInventoryCreate.bind(this));\n        html.find('.inventory-collapse').on('click', this._onInventorySectionVisibilityChange.bind(this, false));\n        html.find('.inventory-expand').on('click', this._onInventorySectionVisibilityChange.bind(this, true));\n        html.find('.inventory-remove').on('click', this._onInventoryRemove.bind(this));\n        html.find('.inventory-edit').on('click', this._onInplaceInventoryEdit.bind(this));\n        html.find('.inventory-input-cancel').on('click', this._onInplaceInventoryEditCancel.bind(this));\n        html.find('.inventory-input-save').on('click', this._onInplaceInventoryEditSave.bind(this));\n        html.find('input#input-inventory').on('keydown', this._onInplaceInventoryEditCancel.bind(this));\n        html.find('input#input-inventory').on('keydown', this._onInplaceInventoryEditSave.bind(this));\n        html.find('input#input-inventory').on('change', this._onInventoryChangePreventSheetSubmit.bind(this));\n        html.find('#select-inventory').on('change', this._onSelectInventory.bind(this));\n        html.find('.inventory-item-move').on('click', this._onItemMoveToInventory.bind(this));\n\n        // Condition monitor track handling...\n        html.find('.horizontal-cell-input .cell').on('click', this._onSetConditionTrackCell.bind(this));\n        html.find('.horizontal-cell-input .cell').on('contextmenu', this._onClearConditionTrack.bind(this));\n\n        // Matrix data handling...\n        html.find('.marks-qty').on('change', this._onMarksQuantityChange.bind(this));\n        html.find('.marks-add-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, 1));\n        html.find('.marks-remove-one').on('click', async (event) => this._onMarksQuantityChangeBy(event, -1));\n        html.find('.marks-delete').on('click', this._onMarksDelete.bind(this));\n        html.find('.marks-clear-all').on('click', this._onMarksClearAll.bind(this));\n\n        // Skill Filter handling...\n        html.find('.skill-header').find('.item-name').on('click', this._onFilterUntrainedSkills.bind(this));\n        html.find('.skill-header').find('.skill-spec-item').on('click', this._onFilterUntrainedSkills.bind(this));\n        html.find('.skill-header').find('.rtg').on('click', this._onFilterUntrainedSkills.bind(this));\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\n\n        // Skill CRUD handling...\n        html.find('.skill-opensource').on('click', this._onOpenSourceSkill.bind(this));\n        html.find('.knowledge-skill-opensource').on('click', this._onOpenSourceSkill.bind(this));\n        html.find('.language-skill-opensource').on('click', this._onOpenSourceSkill.bind(this));\n        html.find('.skill-edit').on('click', this._onShowEditSkill.bind(this));\n        html.find('.knowledge-skill-edit').on('click', this._onShowEditKnowledgeSkill.bind(this));\n        html.find('.language-skill-edit').on('click', this._onShowEditLanguageSkill.bind(this));\n        html.find('.add-knowledge').on('click', this._onAddKnowledgeSkill.bind(this));\n        html.find('.add-language').on('click', this._onAddLanguageSkill.bind(this));\n        html.find('.add-active').on('click', this._onAddActiveSkill.bind(this));\n        html.find('.remove-knowledge').on('click', this._onRemoveKnowledgeSkill.bind(this));\n        html.find('.remove-language').on('click', this._onRemoveLanguageSkill.bind(this));\n        html.find('.remove-active').on('click', this._onRemoveActiveSkill.bind(this));\n\n        // Attribute test rolling...\n        html.find('.attribute-roll').on('click', this._onRollAttribute.bind(this));\n\n        // Conditon monitor test rolling...\n        html.find('.cell-input-roll').on('click', this._onRollCellInput.bind(this));\n\n        // Skill test rolling...\n        html.find('.skill-roll').on('click', this._onRollSkill.bind(this));\n        html.find('.knowledge-skill').on('click', this._onRollSkill.bind(this));\n        html.find('.language-skill').on('click', this._onRollSkill.bind(this));\n        html.find('.skill-spec-roll').on('click', this._onRollSkillSpec.bind(this));\n\n        // Misc. actor actions...\n        html.find('.show-hidden-skills').on('click', this._onShowHiddenSkills.bind(this));\n        html.find('.open-source').on('click', this._onOpenSource.bind(this));\n        html.find('.list-item').each(this._addDragSupportToListItemTemplatePartial.bind(this));\n        html.find('.import-character').on('click', this._onShowImportCharacter.bind(this));\n\n        // Misc. item type actions...\n        html.find('.reload-ammo').on('click', async (event) => this._onReloadAmmo(event, false));\n        html.find('.partial-reload-ammo').on('click', async (event) => this._onReloadAmmo(event, true));\n        html.find('.matrix-att-selector').on('change', this._onMatrixAttributeSelected.bind(this));\n\n        // Situation modifiers application\n        html.find('.show-situation-modifiers-application').on('click', this._onShowSituationModifiersApplication.bind(this));\n\n        // Freshly imported item toggle\n        html.find('.toggle-fresh-import-all-off').on('click', async (event) => this._toggleAllFreshImportFlags(event, false));\n        html.find('.toggle-fresh-import-all-on').on('click', async (event) => this._toggleAllFreshImportFlags(event, true));\n\n        // Action tracker\n        html.find('.reset-actions').on('click', this._onResetActions.bind(this));\n        html.find('.convert-actions').on('click', this._onConvertActions.bind(this));\n\n        // Matrix actions\n        html.find('.ensure-matrix-actions').on('click', this._onEnsureMatrixActions.bind(this));\n\n        // Reset Actor Run Data\n        html.find('.reset-actor-run-data').on('click', this._onResetActorRunData.bind(this));\n    }\n\n    /**\n     * Handle display of item types within the actors inventory section.\n     *\n     * Unexpected means there is no use for this type but the user added it anyway.\n     * Inventory types means they should always be shown, even if there are none.\n     * All other item types will be collected at some tab / place on the sheet.\n     */\n    _addInventoryItemTypes(inventory) {\n        // Show all item types but remove empty unexpected item types.\n        const inventoryTypes = this.getInventoryItemTypes();\n        for (const type of Object.keys(inventory.types)) {\n            if (inventoryTypes.includes(type)) continue;\n            if (inventory.types[type].items.length === 0) delete inventory.types[type];\n        }\n\n        return inventory;\n    }\n\n    /**\n     * Add any item type to the inventory display that's configured for this actor sheet type.\n     *\n     * @param inventory The inventory to check and add types to.\n     */\n    _addInventoryTypes(inventory: InventorySheetData) {\n        for (const type of this.getInventoryItemTypes()) {\n            if (inventory.types.hasOwnProperty(type)) continue;\n\n            inventory.types[type] = {\n                type: type,\n                label: SR6.itemTypes[type],\n                isOpen: this._inventoryOpenClose[type],\n                items: []\n            };\n        }\n    }\n\n    /**\n     * @override Default drag start handler to add Skill support\n     * @param event\n     */\n    override async _onDragStart(event) {\n        // Create drag data\n        const dragData = {\n            actorId: this.actor.id,\n            sceneId: this.actor.isToken ? canvas.scene?.id : null,\n            tokenId: this.actor.isToken ? this.actor.token?.id : null,\n            type: '',\n            data: {}\n        };\n\n        // Handle different item type data transfers.\n        // These handlers depend on behavior of the template partial ListItem.html.\n        const element = event.currentTarget;\n        switch (element.dataset.itemType) {\n            // Skill data transfer. (Active and language skills)\n            case 'skill':\n                // Prepare data transfer\n                dragData.type = 'Skill';\n                dragData.data = {\n                    skillId: element.dataset.itemId,\n                    skill: this.actor.getSkill(element.dataset.itemId)\n                };\n\n                // Set data transfer\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n\n                return;\n\n            // Knowlege skill data transfer\n            case 'knowledgeskill':\n                // Knowledge skills have a multi purpose id built: <id>.<knowledge_category>\n                const skillId = element.dataset.itemId.includes('.') ? element.dataset.itemId.split('.')[0] : element.dataset.itemId;\n\n                dragData.type = 'Skill';\n                dragData.data = {\n                    skillId,\n                    skill: this.actor.getSkill(skillId)\n                };\n\n                // Set data transfer\n                event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n\n                return;\n\n            // if we are dragging an active effect, get the effect from our list of effects and set it in the data transfer\n            case 'ActiveEffect':\n                {\n                    const effectId = element.dataset.itemId;\n                    let effect = this.actor.effects.get(effectId);\n                    if (!effect) {\n                        // check to see if it belongs to an item we own\n                        effect = await fromUuid(effectId) as SR6ActiveEffect | undefined;\n                    }\n                    if (effect) {\n                        // Prepare data transfer\n                        dragData.type = 'ActiveEffect';\n                        dragData.data = effect;\n\n                        // Set data transfer\n                        event.dataTransfer.setData(\"text/plain\", JSON.stringify(dragData));\n                    }\n                    return;\n                }\n\n            // All default Foundry data transfer.\n            default:\n                // Let default Foundry handler deal with default drag cases.\n                return super._onDragStart(event);\n        }\n    }\n\n    /** Handle all document drops onto all actor sheet types.\n     *\n     * @param event\n     */\n    // @ts-expect-error\n    async _onDrop(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.dataTransfer) return;\n\n        const data = parseDropData(event);\n        if (data !== undefined) {\n            if (data.type === 'ActiveEffect' && data.actorId !== this.actor.id) {\n                const effect = data.data;\n                const applyTo = effect.flags['shadowrun6-elysium'].applyTo as EffectApplyTo;\n                // if the effect is just supposed to apply to the item's test, it won't work on an actor\n                if (applyTo === 'test_item') {\n                    ui.notifications?.warn(game.i18n.localize('SR6.ActiveEffect.CannotAddTestViaItemToActor'));\n                    return;\n                }\n                // delete the id so a new one is generated\n                delete effect._id;\n                await this.actor.createEmbeddedDocuments('ActiveEffect', [effect]);\n                // don't process anything else since we handled the drop\n                return;\n            }\n            if (data.type === 'Actor' && data.uuid !== this.actor.uuid) {\n                const actor = await fromUuid(data.uuid) as SR6Actor;\n                const itemData = {\n                    name: actor.name ?? `${game.i18n.localize('SR6.New')} ${game.i18n.localize(SR6.itemTypes['contact'])}`,\n                    type: 'contact',\n                    'system.linkedActor': actor.uuid\n                };\n                await this.actor.createEmbeddedDocuments('Item', [itemData], { renderSheet: true }) as SR6Item[];\n            }\n        }\n        // Keep upstream document created for actions base on it.\n        const documents = await super._onDrop(event);\n\n        // Handle specific system drop events.\n        // const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        // Add any created items to the selected inventory.\n        if (Array.isArray(documents)) {\n            const items = documents.filter(document => document instanceof SR6Item);\n            await this.actor.inventory.addItems(this.selectedInventory, items);\n        }\n\n        return documents;\n    }\n\n    /**\n     * Enhance Foundry state restore on rerender by more user interaction state.\n     * @override\n     */\n    override async _render(...args) {\n        const focus = this._saveInputCursorPosition();\n        this._saveScrollPositions();\n\n        await super._render(...args);\n\n        this._restoreScrollPositions();\n        this._restoreInputCursorPosition(focus);\n    }\n\n    /**\n     * Use together with _restoreInputCursorPosition during render calls.\n     * Without this the cursor will always be on the first character, causing writing in reverse.\n     */\n    _saveInputCursorPosition(): any | null {\n        const focusList = $(this.element).find('input:focus');\n        return focusList.length ? focusList[0] : null;\n    }\n\n    /**\n     * Use together with _restoreInputCursorPosition during render calls.\n     */\n    _restoreInputCursorPosition(focus) {\n        if (focus && focus.name) {\n            if (!this.form) return;\n\n            const element = this.form[focus.name];\n            if (element) {\n                // Set general focus for allem input types.\n                element.focus();\n\n                // Set selection range for supported input types.\n                if (['checkbox', 'radio'].includes(element.type)) return;\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\n            }\n        }\n\n    }\n\n    /**\n     * Used together with _restoreScrollPositions during render calls.\n     * @private\n     */\n    override _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n\n    /**\n     * Used together with _storeScrollPositions during render calls.\n     * @private\n     */\n    override _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * Return scroll area of the currently opened tab.\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    async _onInventorySectionVisibilityChange(isOpen: boolean, event) {\n        event.preventDefault();\n        this._setInventoryVisibility(isOpen);\n        this.render();\n    }\n\n    async _onInventorySectionVisiblitySwitch(event) {\n        event.preventDefault();\n        const type = Helpers.listHeaderId(event);\n\n        this._setInventoryTypeVisibility(type, !this._inventoryOpenClose[type]);\n        this.render();\n    }\n\n    _setInventoryVisibility(isOpen: boolean) {\n        Object.keys(CONFIG.Item.typeLabels)\n            .forEach(type => this._setInventoryTypeVisibility(type, isOpen));\n    }\n\n    _setInventoryTypeVisibility(type: string, isOpen: boolean) {\n        this._inventoryOpenClose[type] = isOpen\n    }\n\n    async _onItemCreate(event) {\n        event.preventDefault();\n        const type = event.currentTarget.closest('.list-header').dataset.itemId;\n\n        // Unhide section it it was\n        this._setInventoryTypeVisibility(type, true);\n\n        // TODO: Add translation for item names...\n        const itemData = {\n            name: `${game.i18n.localize('SR6.New')} ${Helpers.label(game.i18n.localize(SR6.itemTypes[type]))}`,\n            type: type,\n        };\n        const items = await this.actor.createEmbeddedDocuments('Item', [itemData], { renderSheet: true }) as SR6Item[];\n        if (!items) return;\n\n        // Add the item to the selected inventory.\n        if (this.selectedInventory !== this.actor.defaultInventory.name)\n            await this.actor.inventory.addItems(this.selectedInventory, items);\n    }\n\n    async _onItemEdit(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) await item.sheet?.render(true);\n    }\n\n    async _onItemDelete(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (!item) return;\n        await this.actor.inventory.removeItem(item);\n\n        return await this.actor.deleteEmbeddedDocuments('Item', [iid]);\n    }\n\n    async _onItemRoll(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) {\n            await item.castAction(event);\n        }\n    }\n\n    /**\n     * Setup all general system rolls after clicking on their roll on the sheet.\n     *\n     * @param event Must contain a currentTarget with a rollId dataset\n     */\n    async _onRoll(event) {\n        event.preventDefault();\n\n        // look for roll id data in the current line\n        let rollId = $(event.currentTarget).data()?.rollId;\n        // if that doesn't exist, look for a prent with RollId name\n        rollId = rollId ?? $(event.currentTarget).parent('.RollId').data().rollId;\n\n        const split = rollId.split('.');\n        const options = { event };\n        switch (split[0]) {\n            case 'prompt-roll':\n                await this.actor.promptRoll();\n                break;\n            case 'armor':\n                await this.actor.rollGeneralAction('armor', options);\n                break;\n            case 'fade':\n                await this.actor.rollGeneralAction('fade', options);\n                break;\n            case 'drain':\n                await this.actor.rollGeneralAction('drain', options);\n                break;\n            case 'defense':\n                // await this.actor.rollAttackDefense(options);\n                await this.actor.rollGeneralAction('physical_defense', options);\n                break;\n            case 'damage-resist':\n                await this.actor.rollGeneralAction('physical_damage_resist', options);\n                break;\n\n            // attribute only rolls\n            case 'composure':\n                await this.actor.rollGeneralAction('composure', options);\n                break;\n            case 'judge-intentions':\n                await this.actor.rollGeneralAction('judge_intentions', options);\n                break;\n            case 'lift-carry':\n                await this.actor.rollGeneralAction('lift_carry', options);\n                break;\n            case 'memory':\n                await this.actor.rollGeneralAction('memory', options);\n                break;\n\n            case 'vehicle-stat':\n                console.log('roll vehicle stat', rollId);\n                break;\n\n            case 'drone':\n                const droneRoll = split[1];\n                switch (droneRoll) {\n                    case 'perception':\n                        await this.actor.rollGeneralAction('drone_perception', options);\n                        break;\n                    case 'infiltration':\n                        await this.actor.rollGeneralAction('drone_infiltration', options);\n                        break;\n                    case 'pilot-vehicle':\n                        await this.actor.rollGeneralAction('drone_pilot_vehicle', options);\n                        break;\n                }\n                break;\n            // end drone\n\n            case 'attribute': {\n                const attribute = split[1];\n                if (attribute) {\n                    await this.actor.rollAttribute(attribute, options);\n                }\n                break;\n            }\n\n            case 'skill': {\n                const skillId = split[2];\n                await this.actor.rollSkill(skillId, options);\n                break;\n            }\n\n            case 'matrix':\n                const matrixRoll = split[1];\n                switch (matrixRoll) {\n                    case 'attribute':\n                        const attr = split[2];\n                        await this.actor.rollAttribute(attr, options);\n                        break;\n                    case 'device-rating':\n                        await this.actor.rollDeviceRating(options);\n                        break;\n                }\n\n                break;\n            // end matrix\n        }\n    }\n\n    /**\n     * Set any kind of condition monitor to a specific cell value.\n     *\n     * @event Most return a currentTarget with a value dataset\n     */\n    async _onSetConditionTrackCell(event) {\n        event.preventDefault();\n\n        const value = Number(event.currentTarget.dataset.value);\n        const track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n\n        if (track === 'stun' || track === 'physical') {\n            const property = `system.track.${track}.value`;\n            data[property] = value;\n        } else if (track === 'edge') {\n            const property = `system.attributes.edge.uses`;\n            data[property] = value;\n        } else if (track === 'overflow') {\n            const property = 'system.track.physical.overflow.value';\n            data[property] = value;\n        } else if (track === 'matrix') {\n            await this.actor.setMatrixDamage(value);\n        }\n\n        if (data) await this.actor.update(data);\n\n        await this.document.applyDefeatedStatus();\n    }\n\n    /**\n     * Reset all condition tracks to zero values.\n     * @param event\n     */\n    async _onClearConditionTrack(event) {\n        event.preventDefault();\n\n        const track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n        if (track === 'stun') {\n            data[`system.track.stun.value`] = 0;\n        }\n        // Clearing the physical monitor should also clear the overflow.\n        else if (track === 'physical') {\n            data[`system.track.physical.value`] = 0;\n            data['system.track.physical.overflow.value'] = 0;\n\n        } else if (track === 'edge') {\n            data[`system.attributes.edge.uses`] = 0;\n\n        } else if (track === 'overflow') {\n            data['system.track.physical.overflow.value'] = 0;\n\n        } else if (track === 'matrix') {\n            await this.actor.setMatrixDamage(0);\n        }\n\n        if (data) await this.actor.update(data);\n        await this.actor.applyDefeatedStatus();\n    }\n\n    /**\n     * Special fields are shared across all actor types.\n     *\n     * These are used as indicators about what kind of 'special' a character might be.\n     *\n     * @param sheetData ActorSheetData as created within getData method\n     */\n    _prepareSpecialFields(sheetData: SR6ActorSheetData) {\n        sheetData.awakened = sheetData.system.special === 'magic';\n        sheetData.emerged = sheetData.system.special === 'resonance';\n    }\n\n    /**\n     * Pretty up display of zero value actor modifiers.\n     *\n     * @param sheetData ActorSheetData as created within getData method\n     */\n    _prepareActorModifiers(sheetData: SR6ActorSheetData) {\n        // Empty zero value modifiers for display purposes.\n        const { modifiers } = sheetData.system;\n        for (let [key, value] of Object.entries(modifiers)) {\n            if (value === 0) modifiers[key] = '';\n        }\n\n        sheetData.woundTolerance = 3 + (Number(modifiers['wound_tolerance']) || 0);\n    }\n\n    _prepareActorAttributes(sheetData: SR6ActorSheetData) {\n        // Clear visible, zero value attributes temporary modifiers so they appear blank.\n        const attributes = sheetData.system.attributes;\n        for (let [, attribute] of Object.entries(attributes)) {\n            if (!attribute.hidden) {\n                if (attribute.temp === 0) delete attribute.temp;\n            }\n        }\n    }\n\n    _prepareMatrixAttributes(sheetData: SR6ActorSheetData) {\n        //@ts-expect-error Since we're field checking, we can ignore typing...\n        const { matrix } = sheetData.system;\n        if (matrix) {\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\n                const att = matrix[attribute];\n                if (att) {\n                    if (!att.mod) att.mod = [];\n                    if (att.temp === 0) delete att.temp;\n                }\n            };\n\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\n        }\n    }\n\n    /**\n     * Prepare Actor Sheet Inventory display.\n     *\n     * Each item can  be in one custom inventory or the default inventory.\n     */\n    async _prepareItemsInventory() {\n        // All custom and default actor inventories.\n        const inventoriesSheet: InventoriesSheetData = {};\n        // Simple item to inventory mapping.\n        const itemIdInventory: Record<string, Shadowrun.InventoryData> = {};\n\n        // All inventories for showing all items, but not as default\n        // Add first, for it to appear on top.\n        inventoriesSheet[this.actor.allInventories.name] = {\n            name: this.actor.allInventories.name,\n            label: this.actor.allInventories.label,\n            types: {}\n        };\n        this._addInventoryTypes(inventoriesSheet[this.actor.allInventories.name]);\n\n        // Default inventory for items without a defined one.\n        // Add first for display purposes on sheet.\n        inventoriesSheet[this.actor.defaultInventory.name] = {\n            name: this.actor.defaultInventory.name,\n            label: this.actor.defaultInventory.label,\n            types: {}\n        };\n        this._addInventoryTypes(inventoriesSheet[this.actor.defaultInventory.name]);\n\n        Object.values(this.actor.system.inventories).forEach(inventory => {\n            const { name, label, itemIds } = inventory\n\n            // Avoid re-adding default inventories.\n            if (!inventoriesSheet.hasOwnProperty(name)) {\n                inventoriesSheet[name] = {\n                    name,\n                    label,\n                    types: {}\n                }\n            }\n\n            // Add default inventory types for this sheet type first, so they appear on top.\n            this._addInventoryTypes(inventoriesSheet[name]);\n\n            // Inform user about duplicate inventory mapping for a single item.\n            itemIds.forEach(id => {\n                itemIdInventory[id] = inventory;\n            });\n        });\n\n        const handledTypes = this.getHandledItemTypes();\n\n        // Check all items and using the item to inventory mapping add them to that inventory.\n        for (const item of this.actor.items) {\n            if (!item.id) continue;\n\n            // Handled types are on the sheet outside the inventory.\n            if (handledTypes.includes(item.type)) continue;\n\n            const sheetItem = await this._prepareSheetItem(item);\n\n            // Determine what inventory the item sits in.\n            const inventory = itemIdInventory[item.id] || this.actor.defaultInventory;\n            // Build inventory list this item should be shown an.\n            const addTo: string[] = inventory.showAll ? Object.keys(inventoriesSheet) : [inventory.name];\n\n            addTo.forEach(name => {\n                const inventorySheet = inventoriesSheet[name];\n\n                // Should an item have been added to any inventory that wouldn't cary it's type normaly\n                // add missing type so the user can interact with it.\n                if (!inventorySheet.types[item.type]) {\n                    inventorySheet.types[item.type] = {\n                        type: item.type,\n                        label: SR6.itemTypes[item.type],\n                        isOpen: this._inventoryOpenClose[item.type],\n                        items: []\n                    };\n                }\n\n                inventorySheet.types[item.type].items.push(sheetItem);\n            })\n        }\n\n        Object.values(inventoriesSheet).forEach(inventory => {\n            this._addInventoryItemTypes(inventory);\n\n            // Sort the items.\n            Object.values(inventory.types).forEach((type) => {\n                type.items.sort(sortByName);\n            })\n        });\n\n        return inventoriesSheet;\n    }\n\n    /**\n     * Choose the selected inventory to actually display.\n     *\n     * @param inventories\n     */\n    _prepareSelectedInventory(inventories: InventoriesSheetData) {\n        return inventories[this.selectedInventory];\n    }\n\n    /**\n     * Show if any items are in the inventory or if the actor is supposed to have an inventory.\n     *\n     * A sheet is supposed to show an inventory if there are item types defined or an item of some\n     * type exists in any of its inventories.\n     *\n     * @param inventories\n     */\n    _prepareHasInventory(inventories: InventoriesSheetData) {\n        if (this.getInventoryItemTypes().length > 0) return true;\n\n        for (const inventory of Object.values(inventories)) {\n            if (Object.keys(inventory.types).length > 0) return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Enhance SR6Item data for display on actors sheets.\n     *\n     * @param item: The item to transform into a 'sheet item'\n     */\n    async _prepareSheetItem(item: SR6Item): Promise<SheetItemData> {\n        // Copy derived schema data instead of source data (false)\n        const sheetItem = item.toObject(false) as unknown as SheetItemData;\n\n        const chatData = await item.getChatData();\n        sheetItem.description = chatData.description;\n        // @ts-expect-error\n        sheetItem.properties = chatData.properties;\n\n        return sheetItem as unknown as SheetItemData;\n    }\n\n    /**\n     * Prepare items for easy type by type display on actors sheets with lists per item type.\n     *\n     * NOTE: This method uses sheet item types, instead of item types. A sheet item type allows\n     * to sub-group items of one type into separate lists as needed.\n     *\n     * @param data An object containing Actor Sheet data, as would be returned by ActorSheet.getData\n     * @returns Sorted item lists per sheet item type.\n     */\n    async _prepareItemTypes(data): Promise<Record<string, SheetItemData[]>> {\n        const itemsByType: Record<string, SheetItemData[]> = {};\n\n        // Most sheet items are raw item types, some are sub types.\n        // These are just for display purposes and has been done for call_in_action items.\n        const sheetItemTypes = [\n            ...Object.keys(CONFIG.Item.typeLabels),\n            'summoning',\n            'compilation'\n        ];\n\n        // Add all item types in system.\n        sheetItemTypes.forEach(type => {\n            itemsByType[type] = [];\n        });\n\n        // Add existing items to their sheet types as sheet items\n        for (const item of this.actor.items) {\n            const sheetItem = await this._prepareSheetItem(item);\n            itemsByType[sheetItem.type].push(sheetItem);\n\n            if (item.isSummoning) itemsByType['summoning'].push(sheetItem);\n            if (item.isCompilation) itemsByType['compilation'].push(sheetItem);\n        }\n\n        // Sort items for each sheet type.\n        Object.entries(itemsByType).forEach(([type, items]) => {\n            switch (type) {\n                case 'quality':\n                    items.sort(sortyByQuality);\n                    break;\n                case 'program':\n                    items.sort(sortByEquipped);\n                    break;\n                default:\n                    items.sort(sortByName);\n                    break;\n            }\n        });\n\n        return itemsByType\n    }\n\n    /**\n     * @param sheetData An object containing Actor Sheet data, as would be returned by ActorSheet.getData\n     */\n    _prepareActorTypeFields(sheetData: SR6ActorSheetData) {\n        sheetData.isCharacter = this.actor.isCharacter();\n        sheetData.isSpirit = this.actor.isSpirit();\n        sheetData.isCritter = this.actor.isCritter();\n        sheetData.isVehicle = this.actor.isVehicle();\n        sheetData.hasSkills = this.actor.hasSkills;\n        sheetData.canAlterSpecial = this.actor.canAlterSpecial;\n        sheetData.hasFullDefense = this.actor.hasFullDefense;\n    }\n\n    async _onMarksQuantityChange(event) {\n        event.stopPropagation();\n\n        if (this.actor.isIC() && this.actor.hasHost()) {\n            return ui.notifications?.info(game.i18n.localize('SR6.Infos.CantModifyHostContent'));\n        }\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const markedDocuments = Helpers.getMarkIdDocuments(markId);\n        if (!markedDocuments) return;\n        const { scene, target, item } = markedDocuments;\n        if (!scene || !target) return; // item can be undefined.\n\n        const marks = parseInt(event.currentTarget.value);\n        await this.actor.setMarks(target, marks, { scene, item, overwrite: true });\n    }\n\n    async _onMarksQuantityChangeBy(event, by: number) {\n        event.stopPropagation();\n\n        if (this.actor.isIC() && this.actor.hasHost()) {\n            return ui.notifications?.info(game.i18n.localize('SR6.Infos.CantModifyHostContent'));\n        }\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const markedDocuments = Helpers.getMarkIdDocuments(markId);\n        if (!markedDocuments) return;\n        const { scene, target, item } = markedDocuments;\n        if (!scene || !target) return; // item can be undefined.\n\n        await this.actor.setMarks(target, by, { scene, item });\n    }\n\n    async _onMarksDelete(event) {\n        event.stopPropagation();\n\n        if (this.actor.isIC() && this.actor.hasHost()) {\n            return ui.notifications?.info(game.i18n.localize('SR6.Infos.CantModifyHostContent'));\n        }\n\n        const markId = event.currentTarget.dataset.markId;\n        if (!markId) return;\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.actor.clearMark(markId);\n    }\n\n    async _onMarksClearAll(event) {\n        event.stopPropagation();\n\n        if (this.actor.isIC() && this.actor.hasHost()) {\n            return ui.notifications?.info(game.i18n.localize('SR6.Infos.CantModifyHostContent'));\n        }\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.actor.clearMarks();\n    }\n\n    /**\n     * Prepare skills with sorting and filtering given by this sheet.\n     *\n     * @param sheetData What is to be displayed on sheet.\n     */\n    _prepareSkillsWithFilters(sheetData: SR6ActorSheetData) {\n        this._filterActiveSkills(sheetData);\n    }\n\n    _filterSkills(data: SR6ActorSheetData, skills: Skills = {}) {\n        const filteredSkills = {};\n        for (let [key, skill] of Object.entries(skills)) {\n            // Don't show hidden skills.\n            if (skill.hidden) {\n                continue;\n            }\n            // Filter visible skills.\n            if (this._showSkill(key, skill, data)) {\n                filteredSkills[key] = skill;\n            }\n        }\n\n        return Helpers.sortSkills(filteredSkills);\n    }\n\n    _showSkill(key, skill, data) {\n        if (this._showMagicSkills(key, skill, data)) {\n            return true;\n        }\n        if (this._showResonanceSkills(key, skill, data)) {\n            return true;\n        }\n\n        return this._showGeneralSkill(key, skill);\n    }\n\n    _showGeneralSkill(skillId, skill: SkillField) {\n        return !this._isSkillMagic(skillId, skill) && !this._isSkillResonance(skill) && this._isSkillFiltered(skillId, skill);\n    }\n\n    _showMagicSkills(skillId, skill: SkillField, sheetData: SR6ActorSheetData) {\n        return this._isSkillMagic(skillId, skill) && sheetData.system.special === 'magic' && this._isSkillFiltered(skillId, skill);\n    }\n\n    _showResonanceSkills(skillId, skill: SkillField, sheetData: SR6ActorSheetData) {\n        return this._isSkillResonance(skill) && sheetData.system.special === 'resonance' && this._isSkillFiltered(skillId, skill);\n    }\n\n    _isSkillFiltered(skillId, skill) {\n        // a newly created skill shouldn't be filtered, no matter what.\n        // Therefore disqualify empty skill labels/names from filtering and always show them.\n        const isFilterable = this._getSkillLabelOrName(skill).length > 0;\n        const isHiddenForText = !this._doesSkillContainText(skillId, skill, this._filters.skills);\n        const isHiddenForUntrained = !this._filters.showUntrainedSkills && skill.value === 0;\n\n        return !(isFilterable && (isHiddenForUntrained || isHiddenForText));\n    }\n\n    _getSkillLabelOrName(skill) {\n        return Helpers.getSkillLabelOrName(skill);\n    }\n\n    _doesSkillContainText(key, skill, text) {\n        if (!text) {\n            return true;\n        }\n\n        // Search both english keys, localized labels and all specializations.\n        const name = this._getSkillLabelOrName(skill);\n        const searchKey = skill.name === undefined ? key : '';\n        // some \"specs\" were a string from old code I think\n        const specs = skill.specs !== undefined && Array.isArray(skill.specs) ? skill.specs.join(' ') : '';\n        let searchString = `${searchKey} ${name} ${specs}`;\n\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\n    }\n\n    _filterActiveSkills(sheetData: SR6ActorSheetData) {\n        // Handle active skills directly, as it doesn't use sub-categories.\n        sheetData.system.skills.active = this._filterSkills(sheetData, sheetData.system.skills.active);\n    }\n\n    _isSkillMagic(id, skill) {\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\n    }\n\n    _isSkillResonance(skill) {\n        return skill.attribute === 'resonance';\n    }\n\n    /** Setup untrained skill filter within getData */\n    async _onFilterUntrainedSkills(event) {\n        event.preventDefault();\n        this._filters.showUntrainedSkills = !this._filters.showUntrainedSkills;\n        await this.render();\n    }\n\n    /**\n     * Parameterize skill filtering within getData and implement a general delay around it.\n     *\n     * NOTE: Be aware of UTF-8/16 multi character input languages, using mulitple separate input symbol to form a single alphabet character.\n     * NOTE: This is ONLY necessary as shadowrun6-elysium filters through the render -> getData -> template chain instead of\n     *       hiding HTML elements based on their text.\n     */\n    async _onFilterSkills(event) {\n        if (this._delays.skills)\n            clearTimeout(this._delays.skills);\n\n        this._delays.skills = setTimeout(() => {\n            this._filters.skills = event.currentTarget.value;\n            this.render();\n        }, game['shadowrun6-elyium'].inputDelay);\n    }\n\n    async _onRollSkill(event) {\n        event.preventDefault();\n        const itemId = Helpers.listItemId(event);\n        // NOTE: Knowledge skills still use a combined id in order for the legacy skill editing dialog to work.\n        const skillId = itemId.includes('.') ? itemId.split('.')[0] : itemId;\n        if (!skillId) return console.error(`Shadowrun 6e | Rolling skill with item id (${itemId}). But (${skillId}) doesn't seem to be an id`);\n        return this.actor.rollSkill(skillId, { event });\n    }\n\n    async _onRollSkillSpec(event) {\n        event.preventDefault();\n        const itemId = Helpers.listItemId(event);\n        // NOTE: Knowledge skills still use a combined id in order for the legacy skill editing dialog to work.\n        const skillId = itemId.includes('.') ? itemId.split('.')[0] : itemId;\n        return this.actor.rollSkill(skillId, { event, specialization: true });\n    }\n\n    async _onOpenSourceSkill(event) {\n        event.preventDefault();\n        const [skillId,] = Helpers.listItemId(event).split('.');\n\n        const skill = this.actor.getSkill(skillId);\n        if (!skill) {\n            return console.error(`Shadowrun 6e | Editing skill failed due to missing skill ${skillId}`);\n        }\n\n        LinksHelpers.openSource(skill.link);\n    }\n\n    async _onShowEditSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n\n        if (!skill) {\n            return console.error(`Shadowrun 6e | Editing knowledge skill failed due to missing skill ${skill} id`);\n        }\n\n        // new SkillEditSheet(this.actor, skill, { event: event }).render(true);\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skill);\n    }\n\n    /** Keep track of each SkillEditSheet instance and close before opening another.\n     *\n     * @param skillEditFormImplementation Any extending class! of SkillEditSheet\n     * @param actor\n     * @param options\n     * @param args Collect arguments of the different renderWithSkill implementations.\n     */\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR6Actor, options: object, ...args) {\n        await this._closeOpenSkillApp();\n\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\n        globalSkillAppId = skillEditForm.appId;\n        await skillEditForm.render(true);\n    }\n\n    _onShowEditKnowledgeSkill(event) {\n        event.preventDefault();\n        const [skill, category] = Helpers.listItemId(event).split('.');\n\n        if (!skill || !category) {\n            return console.error(`Shadowrun 6e | Editing knowledge skill failed due to missing skill ${skill} or category id ${category}`);\n        }\n\n        this._showSkillEditForm(\n            KnowledgeSkillEditSheet,\n            this.actor,\n            {\n                event: event,\n            },\n            skill,\n            category,\n        );\n    }\n\n    async _onShowEditLanguageSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n\n        if (!skill) {\n            return console.error(`Shadowrun 6e | Editing knowledge skill failed due to missing skill ${skill} id`);\n        }\n\n        // new LanguageSkillEditSheet(this.actor, skill, { event: event }).render(true);\n        await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, { event: event }, skill);\n    }\n\n    async _closeOpenSkillApp() {\n        if (globalSkillAppId !== -1) {\n            if (ui.windows[globalSkillAppId]) {\n                await ui.windows[globalSkillAppId].close();\n            }\n            globalSkillAppId = -1;\n        }\n    }\n\n    async _onAddLanguageSkill(event) {\n        event.preventDefault();\n        const skillId = await this.actor.addLanguageSkill({ name: '' });\n        if (!skillId) return;\n\n        await this._showSkillEditForm(LanguageSkillEditSheet, this.actor, { event }, skillId);\n    }\n\n    async _onRemoveLanguageSkill(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const skillId = Helpers.listItemId(event);\n        await this.actor.removeLanguageSkill(skillId);\n    }\n\n    async _onAddKnowledgeSkill(event) {\n        event.preventDefault();\n        const category = Helpers.listHeaderId(event) as keyof KnowledgeSkills;\n        const skillId = await this.actor.addKnowledgeSkill(category);\n        if (!skillId) return;\n\n        await this._showSkillEditForm(KnowledgeSkillEditSheet, this.actor, { event }, skillId, category);\n    }\n\n    async _onRemoveKnowledgeSkill(event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const [skillId, category] = Helpers.listItemId(event).split('.') as [string, keyof KnowledgeSkills];\n        await this.actor.removeKnowledgeSkill(skillId, category);\n    }\n\n    /** Add an active skill and show the matching edit application afterwards.\n     *\n     * @param event The HTML event from which the action resulted.\n     */\n    async _onAddActiveSkill(event: Event) {\n        event.preventDefault();\n        const skillId = await this.actor.addActiveSkill();\n        if (!skillId) return;\n\n        await this._showSkillEditForm(SkillEditSheet, this.actor, { event: event }, skillId);\n    }\n\n    async _onRemoveActiveSkill(event: Event) {\n        event.preventDefault();\n\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        const skillId = Helpers.listItemId(event);\n        await this.actor.removeActiveSkill(skillId);\n    }\n\n    async _onRollAttribute(event) {\n        event.preventDefault();\n        const attribute = event.currentTarget.closest('.attribute').dataset.attribute;\n        return this.actor.rollAttribute(attribute, { event: event });\n    }\n\n    /**\n     * Handle interaction with a damage track title.\n     * @param event\n     */\n    async _onRollCellInput(event) {\n        event.preventDefault();\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n\n        switch (track) {\n            case 'stun':\n                await this.actor.rollGeneralAction('natural_recovery_stun', { event });\n                break;\n            case 'physical':\n                await this.actor.rollGeneralAction('natural_recovery_physical', { event });\n                break;\n            case 'edge':\n                await this.actor.rollAttribute('edge', { event });\n                break;\n        }\n    }\n\n    async _onShowHiddenSkills(event) {\n        event.preventDefault();\n\n        await this.actor.showHiddenSkills();\n    }\n\n    async _onOpenSource(event) {\n        event.preventDefault();\n        const field = $(event.currentTarget).parents('.list-item');\n        const iid = $(field).data().itemId;\n        const item = this.actor.items.get(iid);\n        if (item) {\n            await item.openSource();\n        }\n    }\n    /**\n     * Augment each item of the ListItem template partial with drag support.\n     * @param i\n     * @param item\n     */\n    _addDragSupportToListItemTemplatePartial(i, item) {\n        if (item.dataset && item.dataset.itemId) {\n            item.setAttribute('draggable', true);\n            item.addEventListener('dragstart', this._onDragStart.bind(this), false);\n        }\n    }\n\n    /**\n     * Change the quantity on an item shown within a sheet item list.\n     *\n     * @param event A DOM mouse/touch event\n     */\n    async _onListItemChangeQuantity(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        const quantity = parseInt(event.currentTarget.value);\n\n        // Inform users about issues with templating or programming.\n        if (item?.system.technology === undefined || !(item && quantity && item.system.technology)) {\n            return console.error(`Shadowrun 6e | Tried alterting technology quantity on an item without technology data: ${item?.id}`, item);\n        }\n\n        await item.update({ 'system.technology.quantity': quantity });\n    }\n\n    /**\n     * Change the rating on an item shown within a sheet item list.\n     */\n    async _onListItemChangeRating(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        const rtg = parseInt(event.currentTarget.value);\n        if (item && rtg) {\n            await item.update({ 'system.technology.rating': rtg });\n        }\n    }\n\n    /**\n     * Change the equipped status of an item shown within a sheet item list.\n     */\n    async _onListItemToggleEquipped(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (!item) return;\n\n        // Handle the equipped state.\n        if (item.isDevice) {\n            await this.document.equipOnlyOneItemOfType(item);\n        } else {\n            await this.actor.updateEmbeddedDocuments('Item', [{\n                '_id': iid,\n                'system.technology.equipped': !item.isEquipped(),\n            }]);\n        }\n\n        this.actor.render(false);\n    }\n\n    /**\n     * Show / hide the items description within a sheet item l ist.\n     */\n    async _onListItemToggleDescriptionVisibility(event) {\n        event.preventDefault();\n        const item = $(event.currentTarget).parents('.list-item');\n        const iid = $(item).data().item;\n        const field = item.find('.list-item-description');\n        field.toggle();\n        if (iid) {\n            if (field.is(':visible')) this._shownDesc.push(iid);\n            else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n        }\n    }\n\n    /**\n     * Create an inventory place on the actor for gear organization.\n     */\n    async _onInventoryCreate(event) {\n        event.preventDefault();\n\n        // Overwrite currently selected inventory.\n        $('#input-inventory').val('');\n        await this._onInplaceInventoryEdit(event, 'create');\n    }\n\n    /**\n     * Remove the currently selected inventory.\n     * @param event\n     */\n    async _onInventoryRemove(event) {\n        event.preventDefault();\n\n        // TODO: Allow for options overwriting title/message and so forth.\n        const userConsented = await Helpers.confirmDeletion();\n        if (!userConsented) return;\n\n        await this.actor.inventory.remove(this.selectedInventory);\n\n        // Preselect default instead of none.\n        this.selectedInventory = this.actor.defaultInventory.name;\n        this.render();\n    }\n\n    /**\n     * Hide inventory selection and show inline editing instead.\n     *\n     * @param event\n     * @param action What action to take during later saving event.\n     */\n    async _onInplaceInventoryEdit(event, action: 'edit' | 'create' = 'edit') {\n        event.preventDefault();\n\n        // Disallow editing of default inventory.\n        if (action === 'edit' && this.actor.inventory.disallowRename(this.selectedInventory))\n            return ui.notifications?.warn(game.i18n.localize('SR6.Warnings.CantEditDefaultInventory'));\n\n\n        $('.selection-inventory').hide();\n        $('.inline-input-inventory').show();\n\n        // Mark action and pre-select.\n        $('#input-inventory')\n            .data('action', action)\n            .select();\n    }\n\n    /**\n     * Hide inline inventory editing and show inventory selection instead.\n     *\n     * Cancel edit workflow and do nothing.\n     *\n     * @param event Can be an event of type click or keydown.\n     */\n    async _onInplaceInventoryEditCancel(event) {\n        if (event.type === 'keydown' && event.code !== 'Escape') return;\n\n        event.preventDefault();\n\n        $('.selection-inventory').show();\n        $('.inline-input-inventory').hide();\n\n        // Reset to selected inventory for next try.\n        $('#input-inventory')\n            .data('action', undefined)\n            .val(this.selectedInventory);\n    }\n\n    /**\n     * Complete inline editing and either save changes or create a missing inventory.\n     *\n     * @param event Either a click or keydown event.\n     */\n    async _onInplaceInventoryEditSave(event) {\n        if (event.type === 'keydown' && event.code !== 'Enter') return;\n\n        event.preventDefault();\n\n        const inputElement = $('#input-inventory');\n        const action = inputElement.data('action');\n        let inventory: string | void = String(inputElement.val());\n        if (!inventory) return;\n\n        switch (action) {\n            case 'edit':\n                inventory = await this.actor.inventory.rename(this.selectedInventory, inventory);\n                break;\n            case 'create':\n                inventory = await this.actor.inventory.create(inventory);\n                break;\n        }\n\n        await this._onInplaceInventoryEditCancel(event);\n\n        if (!inventory) return;\n\n        // Preselect the new or previous inventory.\n        this.selectedInventory = inventory;\n        this.render();\n    }\n\n    /**\n     * Change selected inventory for this sheet.\n     *\n     * @param event\n     */\n    async _onSelectInventory(event) {\n        event.preventDefault();\n\n        const inventory = String($(event.currentTarget).val());\n\n        if (inventory)\n            this.selectedInventory = inventory;\n\n        this.render();\n    }\n\n    /**\n     * Move an item between two inventories.\n     * @param event\n     */\n    async _onItemMoveToInventory(event) {\n        event.preventDefault();\n\n        const itemId = Helpers.listItemId(event);\n        const item = this.actor.items.get(itemId);\n        if (!item) return;\n\n        // Ask user about what inventory to move the item to.\n        const dialog = new MoveInventoryDialog(this.actor, item, this.selectedInventory);\n        const inventory = await dialog.select();\n        if (dialog.canceled) return;\n\n        await this.actor.inventory.addItems(inventory, item);\n    }\n\n    /**\n     * When editing an existing or new inventory on a new actor for the frist time,\n     * the initial change event (by leaving the element focus, i.e. leaving or clicking on submit)\n     * will cause a general form submit (Foundry FormApplication onChangeSubmit), causing a render\n     * and removing the inventory input box.\n     *\n     * Note: This ONLY happens on new actors and NOT on inventory changes on old actors. The root cause\n     * is unclear.\n     *\n     * As the inventory inpunt box lives outside of Foundries default form handling, prevent\n     * this by stopping propagation into Foundries onChange listeners.\n     *\n     * @param event Any event\n     */\n    _onInventoryChangePreventSheetSubmit(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Initiative a reload from a sheet event.\n     *\n     * @param event\n     */\n    async _onReloadAmmo(event, partialReload: boolean) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.items.get(iid);\n        if (item) return item.reloadAmmo(partialReload);\n    }\n\n    /**\n     * Sync matrix attribute changes (order) made on the actor sheet into item data of the selected cyberdeck.\n     *\n     * This is done whenever a user changes matrix attribute order directly from the actor sheet matrix section.\n     * Its intent is to also order matrix attribute order on the selected matrix device of that actor.\n     *\n     * @param event A mouse/pointer event\n     */\n    async _onMatrixAttributeSelected(event) {\n        if (!(\"matrix\" in this.actor.system)) return;\n\n        let iid = this.actor.system.matrix.device;\n        let item = this.actor.items.get(iid);\n        if (!item) {\n            console.error('could not find item');\n            return;\n        }\n        // grab matrix attribute (sleaze, attack, etc.)\n        let att = event.currentTarget.dataset.att;\n        // grab device attribute (att1, att2, ...)\n        let deviceAtt = event.currentTarget.value;\n\n        // get current matrix attribute on the device\n        const deviceData = item.system as DeviceData;\n        let oldVal = deviceData.atts[deviceAtt].att;\n        let data = {\n            _id: iid,\n        };\n\n        // go through atts on device, setup matrix attributes on it\n        // This logic swaps the two slots when a new one is selected\n        for (let i = 1; i <= 4; i++) {\n            let tmp = `att${i}`;\n            let key = `system.atts.att${i}.att`;\n            if (tmp === deviceAtt) {\n                data[key] = att;\n            } else if (deviceData.atts[`att${i}`].att === att) {\n                data[key] = oldVal;\n            }\n        }\n        await this.actor.updateEmbeddedDocuments('Item', [data]);\n    }\n\n    /**\n     * Open the Character import handling dialog.\n     * @param event\n     */\n    _onShowImportCharacter(event) {\n        event.preventDefault();\n\n        // Create a dialog to choose between Chummer and Genesis import\n        const content = `\n            <div style=\"text-align: center; margin-bottom: 10px;\">\n                <p>${game.i18n.localize('SR6.ImportCharacterChoose')}</p>\n            </div>\n            <div style=\"display: flex; justify-content: space-around;\">\n                <button class=\"chummer-import\">${game.i18n.localize('SR6.ChummerImport')}</button>\n                <button class=\"genesis-import\">${game.i18n.localize('SR6.GenesisImport')}</button>\n            </div>\n        `;\n\n        const dialog = new Dialog({\n            title: game.i18n.localize('SR6.ImportCharacter'),\n            content: content,\n            buttons: {},\n            render: html => {\n                html.find('.chummer-import').click(() => {\n                    dialog.close();\n                    const options = {\n                        name: 'chummer-import',\n                        title: game.i18n.localize('SR6.ChummerImport'),\n                    };\n                    new ChummerImportForm(this.actor, options).render(true);\n                });\n\n                html.find('.genesis-import').click(() => {\n                    dialog.close();\n                    const options = {\n                        name: 'genesis-import',\n                        title: game.i18n.localize('SR6.GenesisImport'),\n                    };\n                    new GenesisImportForm(this.actor, options).render(true);\n                });\n            }\n        });\n\n        dialog.render(true);\n    }\n\n    _setupCustomCheckbox(html) {\n        const setContent = (el) => {\n            const checkbox = $(el).children('input[type=checkbox]');\n            const checkmark = $(el).children('.checkmark');\n            if ($(checkbox).prop('checked')) {\n                $(checkmark).addClass('fa-check-circle');\n                $(checkmark).removeClass('fa-circle');\n            } else {\n                $(checkmark).addClass('fa-circle');\n                $(checkmark).removeClass('fa-check-circle');\n            }\n        };\n        html.find('label.checkbox').each(function () {\n            setContent(this);\n        });\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\n        html.find('.submit-checkbox').change((event) => this._onSubmit(event));\n    }\n\n    /**\n     * Prepare applied Situation Modifiers for display (read-only) on any actor sheet.\n     *\n     * Some modifiers might be hidden, when the document doesn't fullfill criterea for it.\n     *\n     * @returns List of prepare sit. mod data\n     */\n    _prepareSituationModifiers(): { category: string, label: string, value: number, hidden: boolean }[] {\n        const modifiers = this.actor.getSituationModifiers();\n        modifiers.applyAll();\n        if (!modifiers) return [];\n\n        return Object.entries(modifiers._modifiers).map(([category, modifier]: [Shadowrun.SituationModifierType, SituationModifier]) => {\n            const hidden = this._hideSituationModifier(category);\n\n            const label = SR6.modifierTypes[category];\n            return { category, value: modifier.total, hidden, label };\n        });\n    }\n\n    /**\n     * Determine if a situation modifier category should be hidden from an actor sheet.\n     *\n     * @param category Modifier category to maybe hide\n     * @returns true, hide this category from the actors sheet.\n     */\n    _hideSituationModifier(category: Shadowrun.SituationModifierType): boolean {\n        switch (category) {\n            case 'background_count':\n                return !this.actor.isAwakened;\n            case 'environmental':\n                return this.actor.isSprite();\n            // Defense modifier is already shown in general modifier section.\n            case 'defense':\n                return true;\n            case 'recoil':\n                return !this.actor.hasPhysicalBody\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Show the situation modifiers application for this actor doucment\n     *\n     * @param event\n     */\n    _onShowSituationModifiersApplication(event) {\n        new SituationModifiersApplication(this.actor).render(true);\n    }\n\n    /**\n     * Toggle to isFreshImport property of importFlags for all items on the character sheet\n     *\n     * @param event\n     */\n    async _toggleAllFreshImportFlags(event, onOff: boolean) {\n        const allItems = this.actor.items;\n        console.debug('Toggling all importFlags on owned items to ->', onOff, event);\n        for (const item of allItems) {\n            if (item.system.importFlags) {\n                await item.update({ 'system.importFlags.isFreshImport': onOff });\n            }\n        }\n    }\n\n    /**\n     * Handle clicking the reset actions button\n     * @param event The click event\n     */\n    async _onResetActions(event) {\n        event.preventDefault();\n        await this.actor.resetActions();\n    }\n\n    /**\n     * Handle clicking the convert actions button\n     * @param event The click event\n     */\n    async _onConvertActions(event) {\n        event.preventDefault();\n\n        // Log the actor information for debugging\n        console.log(`Shadowrun 6e | Converting actions for actor:`, {\n            name: this.actor.name,\n            id: this.actor.id,\n            actions: this.actor.system.initiative.actions\n        });\n\n        // Make sure we're using the correct actor\n        const actor = this.actor;\n        if (!actor) {\n            console.error(`Shadowrun 6e | No actor found for sheet`);\n            return;\n        }\n\n        await actor.convertMinorToMajorAction();\n    }\n\n    /**\n     * Trigger a full reset of all run related actor data.\n     *\n     * @param event\n     */\n    _onResetActorRunData(event) {\n        this.actor.resetRunData()\n    }\n\n    _onStartNewSchene(event) {\n        this.actor.newSceneSetup()\n    }\n\n    /**\n     * Prepare keybindings to be shown when hovering over a rolling icon\n     * in any list item view that has rolls.\n     */\n    _prepareKeybindings() {\n        return {\n            skip: game.keybindings.get('shadowrun6-elysium', 'hide-test-dialog').map(binding => binding.key.replace('Key', '').toUpperCase()).join(', '),\n            card: game.keybindings.get('shadowrun6-elysium', 'show-item-card').map(binding => binding.key.replace('Key', '').toUpperCase()).join(', '),\n        }\n    }\n\n    /**\n     * These effect apply to types are meant to be shown on the item effects section of the effects sheet.\n     *\n     * They are limited to those effects directly affecting this actor. Effects affecting other actors, aren't shown\n     * on the actors own sheet.\n     */\n    get itemEffectApplyTos() {\n        return ['actor', 'item', 'test_all', 'test_item', 'modifier'];\n    }\n\n    /**\n     * Handle toggling folder open/closed state\n     * @param event The click event\n     * @private\n     */\n    _onFolderToggle(event) {\n        event.preventDefault();\n\n        // Get the folder element\n        const folderHeader = event.currentTarget;\n        const folder = folderHeader.closest('.list-folder');\n        const folderContent = folder.querySelector('.list-folder-content');\n        const folderToggle = folder.querySelector('.folder-toggle i');\n\n        // Toggle the folder state\n        folder.classList.toggle('collapsed');\n        folderContent.classList.toggle('hidden');\n\n        // Update the folder icon\n        if (folder.classList.contains('collapsed')) {\n            folderToggle.classList.replace('fa-folder-open', 'fa-folder');\n        } else {\n            folderToggle.classList.replace('fa-folder', 'fa-folder-open');\n        }\n\n        // Store the folder state in user flags\n        const folderId = folder.dataset.folderId;\n        if (folderId) {\n            const key = `folders.${folderId}`;\n            const isCollapsed = folder.classList.contains('collapsed');\n            this.actor.setFlag('shadowrun6-elysium', key, isCollapsed);\n        }\n    }\n\n    /**\n     * Ensure the actor has all matrix actions.\n     * @param event\n     */\n    async _onEnsureMatrixActions(event) {\n        event.preventDefault();\n        await this.actor.ensureMatrixActions();\n        ui.notifications?.info(`Matrix actions have been ensured for ${this.actor.name}.`);\n\n        // Clear the matrix actions cache if this is a character sheet\n        if (this instanceof SR6CharacterSheet) {\n            (this as SR6CharacterSheet).clearMatrixActionsCache();\n        }\n\n        // Force a refresh of the sheet to update the UI\n        this.render(true);\n    }\n}\n", "import {SR6BaseActorSheet} from \"./SR6BaseActorSheet\";\nimport SR6ActorSheetData = Shadowrun.SR6ActorSheetData;\nimport {SR6Item} from \"../../item/SR6Item\";\nimport MarkedDocument = Shadowrun.MarkedDocument;\n\ninterface ICActorSheetData extends SR6ActorSheetData {\n    host: SR6Item|undefined\n    markedDocuments: MarkedDocument[]\n    disableMarksEdit: boolean\n}\n\nexport class SR6ICActorSheet extends SR6BaseActorSheet {\n    /**\n     * IC actors will handle these item types specifically.\n     *\n     * All others will be collected within the gear tab.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getHandledItemTypes(): string[] {\n        return super.getHandledItemTypes();\n    }\n\n    override async getData(options) {\n        const data = await super.getData(options) as ICActorSheetData;\n\n        // Fetch a connected host.\n        data.host = this.actor.getICHost();\n\n        // Display Matrix Marks\n        data.markedDocuments = this.actor.getAllMarkedDocuments();\n        data.disableMarksEdit = this.actor.hasHost();\n\n        return data;\n    }\n\n    override activateListeners(html) {\n        super.activateListeners(html);\n\n        html.find('.entity-remove').on('click', this._removeHost.bind(this));\n    }\n\n    /**\n     * Remove a connected host from the shown IC actor type.\n     * @param event\n     */\n    async _removeHost(event) {\n        event.stopPropagation();\n        await this.actor.removeICHost();\n    }\n\n    override async _onDrop(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Nothing to be dropped...\n        if (!event.dataTransfer) return;\n\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        // Some item types need special handling for IC Actors.\n        switch(dropData.type) {\n            case 'Item':\n                const item = await fromUuid(dropData.uuid) as SR6Item;\n\n                // Handle item types that aren't handled but are still useable.\n                switch (item.type) {\n                    case 'host':\n                        // We don't have to narrow down type here, the SR6Actor will handle this for us.\n                        return await this.actor.addICHost(item);\n                    }\n\n                // Avoid adding item types to the actor, that aren't handled on the sheet anywhere.\n                const handledTypes = [...this.getHandledItemTypes(), ...this.getInventoryItemTypes()];\n                if (!handledTypes.includes(item.type)) return;\n        }\n\n        // Default cases can be handled by the base class and Foundry.\n        return super._onDrop(event);\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR6 } from \"../config\";\nimport { SYSTEM_NAME } from \"../constants\";\nimport { ActionFlow } from \"../item/flows/ActionFlow\";\nimport { createTagifyOnInput } from \"../utils/sheets\";\nimport { Translation } from \"../utils/strings\";\nimport { SR6ActiveEffect } from \"./SR6ActiveEffect\";\n\n/**\n * Shadowrun system alters some behaviors of Active Effects, making a custom ActiveEffectConfig necessary.\n *\n * NOTE: A ActiveEffectConfig class is comparable to a DocumentSheet class, but Foundry differentiates between\n * 'Config' and 'Sheet'.\n *\n * The ActiveEffectConfig differs from other sheets in updating / submitting behavior due to changes needing a\n * multi step configuration process. If a change is partially configured it might break the underlying data structure\n * and sheet rendering. To prevent this, the config sheet is rendered with a manually triggered 'submit' button.\n *\n * The shadowrun6-elysium system uses ActiveEffects for more than only altering actor data.\n * Besides the default 'actor' apply-to type others are also supported, with all changes of an effect applying to that target only.\n *\n * Some apply-to types follow the default key-value change structure of altering data, while others (modifiers) allow defining\n * custom handlers to apply complex behaviors to targets.\n *\n * Each apply-to target defines what effects are applicable to it and how changes are to be applied. These differing behaviors\n * are defined in <>EffectsFlow.ts or <>ChangeFlow.ts and follow the Foundry interface of 'apply' and 'allApplicableEffects' methods.\n *\n * While actors apply effects as part of their prepareData flow the modifier apply-to target applies effects as part of the calculation of their\n * situational modifiers and others still can behave differently.\n */\nexport class SR6ActiveEffectConfig extends ActiveEffectConfig {\n    override object: SR6ActiveEffect;\n\n    override get template(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/effect/active-effect-config.html';\n    }\n\n    override async getData(options?: Application.RenderOptions): Promise<ActiveEffectConfig.Data> {\n        const data = await super.getData(options) as any;\n\n        data.modes = this.applyModifyLabelToCustomMode(data.modes);\n\n        data.applyTo = this.document.applyTo;\n        data.onlyForWireless = this.document.onlyForWireless;\n        data.onlyForEquipped = this.document.onlyForEquipped;\n        data.onlyForItemTest = this.document.onlyForItemTest;\n\n        data.applyToOptions = this.prepareApplyToOptions();\n        data.hasChanges = this.prepareEffectHasChanges();\n        data.isv11 = game.version.startsWith('11.');\n\n        return data;\n    }\n\n    override activateListeners(html: JQuery<HTMLElement>): void {\n        super.activateListeners(html);\n\n        html.find('select[name=\"flags.shadowrun6-elysium.applyTo\"]').on('change', this._onApplyToChange.bind(this));\n\n        this._activateTagifyListeners(html);\n    }\n\n    /**\n     * Handle adding a new change to the changes array.\n     *\n     * This overrides the Foundry default behavior of using ADD as default.\n     * Shadowrun mostly uses MODIFY, so we use that as default.\n     *\n     * @private\n     */\n    override async _addEffectChange(): Promise<this> {\n        const idx = this.document.changes.length;\n        return this.submit({\n            preventClose: true, updateData: {\n                [`changes.${idx}`]: { key: \"\", mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM, value: \"\" }\n            }\n        }) as unknown as this;\n    }\n\n    /**\n     * Assure both no changes are present before changing the applyTo type\n     * and re-render the sheet to refresh prepared change value options.\n     *\n     * This is to avoid configured changes breaking when changing to other applyTo types\n     * that do not support the same change keys.\n     */\n    async _onApplyToChange(event: Event) {\n        event.preventDefault();\n\n        const select = event.currentTarget as HTMLSelectElement;\n\n        if (this.object.getFlag(SYSTEM_NAME, 'applyTo') === select.value) return;\n\n        if (this.object.changes.length) {\n            ui.notifications?.error('You must delete changes before changing the apply-to type.');\n        } else {\n            // Make sure applyTo is saved but also save all other form data on sheet.\n            const updateData = { 'flags.shadowrun6-elysium.applyTo': select.value };\n            await this._onSubmit(event, {updateData, preventClose: true})\n        }\n    }\n\n    /**\n     * Foundry provides a custom mode for systems to implement behavior with.\n     *\n     * Shadowrun uses this mode to implement 'modify' mode, with complex behavior.\n     * To give users better information about the mode, inject a 'modify' label.\n     *\n     * @param modes A object prepared for display using Foundry select handlebarjs helper.\n     * @returns Copy of the original modes and labels.\n     */\n    applyModifyLabelToCustomMode(modes: Record<number, string>): Record<number, string> {\n        return { ...modes, 0: game.i18n.localize('SR6.ActiveEffect.Modes.Modify') };\n    }\n\n    /**\n     * Depending on this effects source document being actor or item, some effect apply to\n     * should not be available.\n     */\n    prepareApplyToOptions(): Record<string, string> {\n        const effectApplyTo = foundry.utils.deepClone(SR6.effectApplyTo) as Record<string, string>;\n\n        // Actors can't use effects that only apply to tests from items.\n        if (this.object.parent instanceof SR6Actor) {\n            delete effectApplyTo.test_item;\n        }\n\n        return effectApplyTo;\n    }\n\n    /**\n     * Determine if the effect has changes applied already.\n     *\n     * This should be used to prohibit changing of applyTo selections.\n     * @returns true if changes are present, false otherwise.\n     */\n    prepareEffectHasChanges(): boolean {\n        return this.object.changes.length > 0;\n    }\n\n    _activateTagifyListeners(html: JQuery) {\n        switch (this.object.applyTo) {\n            case 'test_all':\n                this._prepareTestSelectionTagify(html);\n                this._prepareActionCategoriesSelectionTagify(html);\n                this._prepareSkillSelectionTagify(html);\n                this._prepareAttributesSelectionTagify(html);\n                this._prepareLimitsSelectionTagify(html);\n                break;\n        }\n    }\n\n    _prepareTestSelectionTagify(html: JQuery) {\n        const inputElement = html.find('input#test-selection').get(0) as HTMLInputElement;\n\n        // Tagify expects this format for localized tags.\n        const values = Object.values(game['shadowrun6-elysium'].tests).map(((test: any) => ({\n            label: test.label, id: test.name\n        })));\n\n        // Tagify dropdown should show all whitelist tags.\n        const maxItems = values.length;\n\n        // Fetch current selections.\n        const value = this.object.getFlag(SYSTEM_NAME, 'selection_tests') as string;\n        const selected = value ? JSON.parse(value) : [];\n\n        createTagifyOnInput(inputElement, values, maxItems, selected);\n    }\n\n    /**\n     * Action Categories multi selection via tagify element.\n     *\n     * @param html ActiveEffectConfig html\n     */\n    _prepareActionCategoriesSelectionTagify(html: JQuery) {\n        const inputElement = html.find('input#categories-selection').get(0) as HTMLInputElement;\n\n        // Tagify expects this format for localized tags.\n        const values = Object.entries(SR6.actionCategories).map(([category, label]) => ({label, id: category}));\n\n        // Tagify dropdown should show all whitelist tags.\n        const maxItems = values.length;\n\n        // Fetch current selections.\n        const value = this.object.getFlag(SYSTEM_NAME, 'selection_categories') as string;\n        const selected = value ? JSON.parse(value) : [];\n\n        createTagifyOnInput(inputElement, values, maxItems, selected);\n    }\n\n    _prepareSkillSelectionTagify(html: JQuery) {\n        const inputElement = html.find('input#skill-selection').get(0) as HTMLInputElement;\n\n        if (!this.object.parent) return console.error('Shadowrun 6e | SR6ActiveEffect unexpecedtly has no parent document', this.object, this);\n\n        // Discard token effects\n        // Create a SR6ActiveEffect.actorOwner similar to SR6Item.actorOwner\n        const actor = this.object.isOriginOwned ? this.object.parent.parent : this.object.parent;\n        const actorOrNothing = !(actor instanceof SR6Actor) ? undefined : actor;\n\n        // Use ActionFlow to assure either custom skills or global skills to be included.\n        const skills = ActionFlow.sortedActiveSkills(actorOrNothing);\n        const values = Object.entries(skills).map(([id, label]) => ({label: label as Translation, id}));\n        const maxItems = values.length;\n        const value = this.object.getFlag(SYSTEM_NAME, 'selection_skills') as string;\n        const selected = value ? JSON.parse(value) : [];\n\n        createTagifyOnInput(inputElement, values, maxItems, selected);\n    }\n\n    _prepareAttributesSelectionTagify(html: JQuery) {\n        const inputElement = html.find('input#attribute-selection').get(0) as HTMLInputElement;\n\n        const values = Object.entries(SR6.attributes).map(([attribute, label]) => ({label, id: attribute}));\n        const maxItems = values.length;\n        const value = this.object.getFlag(SYSTEM_NAME, 'selection_attributes') as string;\n        const selected = value ? JSON.parse(value) : [];\n\n        createTagifyOnInput(inputElement, values, maxItems, selected);\n    }\n\n    _prepareLimitsSelectionTagify(html: JQuery) {\n        const inputElement = html.find('input#limit-selection').get(0) as HTMLInputElement;\n\n        const values = Object.entries(SR6.limits).map(([limit, label]) => ({label, id: limit}));\n        const maxItems = values.length;\n        const value = this.object.getFlag(SYSTEM_NAME, 'selection_limits') as string;\n        const selected = value ? JSON.parse(value) : [];\n\n        createTagifyOnInput(inputElement, values, maxItems, selected);\n    }\n}\n", "import {SR6BaseActorSheet} from \"./SR6BaseActorSheet\";\nimport SR6ActorSheetData = Shadowrun.SR6ActorSheetData;\nimport {SR6Actor} from \"../SR6Actor\";\nimport { SR6Item } from '../../item/SR6Item';\nimport { NetworkDeviceFlow } from '../../item/flows/NetworkDeviceFlow';\n\ninterface VehicleSheetDataFields {\n    driver: SR6Actor|undefined\n    networkController: SR6Item | undefined\n}\n\ninterface VehicleActorSheetData extends SR6ActorSheetData {\n    vehicle: VehicleSheetDataFields\n}\n\n\nexport class SR6VehicleActorSheet extends SR6BaseActorSheet {\n    /**\n     * Vehicle actors will handle these item types specifically.\n     *\n     * All others will be collected within the gear tab.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getHandledItemTypes(): string[] {\n        let itemTypes = super.getHandledItemTypes();\n\n        return [\n            ...itemTypes,\n            'program',\n        ];\n    }\n\n    /**\n     * Vehicle actors will always show these item types.\n     *\n     * For more info see into super.getInventoryItemTypes jsdoc.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getInventoryItemTypes(): string[] {\n        const itemTypes = super.getInventoryItemTypes();\n\n        return [\n            ...itemTypes,\n            'weapon',\n            'ammo',\n            'armor',\n            'bioware',\n            'cyberware',\n            'device',\n            'equipment',\n            'modification'\n        ];\n    }\n\n    override async getData(options) {\n        const data = await super.getData(options);\n\n        // Vehicle actor type specific fields.\n        data.vehicle = await this._prepareVehicleFields();\n\n        return data;\n    }\n\n    override activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        // Vehicle Sheet related handlers...\n        html.find('.driver-remove').on('click', this._handleRemoveVehicleDriver.bind(this));\n\n        // PAN/WAN\n        html.find('.origin-link').on('click', this._onOpenOriginLink.bind(this));\n        html.find('.controller-remove').on('click', this._onControllerRemove.bind(this));\n    }\n\n    /**\n     * Vehicle specific drop events\n     * @param event A DataTransferEvent containing some form of FoundryVTT Document / Data\n     */\n    override async _onDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.dataTransfer) return;\n\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        // Handle specific system drop events.\n        switch (dropData.type) {\n            case \"Actor\":\n                return await this.actor.addVehicleDriver(dropData.uuid)\n        }\n\n        // Handle none specific drop events.\n        return super._onDrop(event);\n    }\n\n    async _prepareVehicleFields(): Promise<VehicleSheetDataFields> {\n        const driver = this.actor.getVehicleDriver();\n\n        const networkControllerLink = this.actor.getNetworkController();\n        const networkController = networkControllerLink ? await NetworkDeviceFlow.resolveItemLink(networkControllerLink) : undefined;\n\n        return {\n            driver,\n            networkController,\n        };\n    }\n\n    async _handleRemoveVehicleDriver(event) {\n        event.preventDefault();\n        await this.actor.removeVehicleDriver();\n    }\n\n    async _onOpenOriginLink(event) {\n        event.preventDefault();\n\n        console.log('Shadowrun 6e | Opening PAN/WAN network controller');\n\n        const originLink = event.currentTarget.dataset.originLink;\n        const device = await fromUuid(originLink);\n        if (!device) return;\n\n        // @ts-expect-error\n        device.sheet.render(true);\n    }\n\n    async _onControllerRemove(event) {\n        event.preventDefault();\n\n        await NetworkDeviceFlow.removeDeviceFromController(this.actor);\n    }\n}\n", "import {SR6BaseActorSheet} from \"./SR6BaseActorSheet\";\nimport MarkedDocument = Shadowrun.MarkedDocument;\nimport { Helpers } from \"../../helpers\";\nimport SR6ActorSheetData = Shadowrun.SR6ActorSheetData;\n\n\nexport interface CharacterSheetData extends SR6ActorSheetData {\n    awakened: boolean\n    emerged: boolean\n    woundTolerance: number\n    markedDocuments: MarkedDocument[]\n    handledItemTypes: string[]\n    inventory: Record<string, any>\n}\n\n\nexport class SR6CharacterSheet extends SR6BaseActorSheet {\n    /**\n     * Character actors will handle these item types specifically.\n     *\n     * All others will be collected within the gear tab.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getHandledItemTypes(): string[] {\n        let itemTypes = super.getHandledItemTypes();\n\n        return [\n            ...itemTypes,\n            'program',\n            'sin',\n            'lifestyle',\n            'contact',\n            'spell',\n            'ritual_spells',\n            'adept_power',\n            'complex_form',\n            'quality',\n            'echo',\n            'metamagic',\n            'critter_power',\n            'call_in_action',\n            'ritual'\n        ];\n    }\n\n    /**\n     * Character actors will always show these item types.\n     *\n     * For more info see into super.getInventoryItemTypes jsdoc.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getInventoryItemTypes(): string[] {\n        const itemTypes = super.getInventoryItemTypes();\n\n        return [\n            ...itemTypes,\n            'weapon',\n            'ammo',\n            'armor',\n            'bioware',\n            'cyberware',\n            'device',\n            'equipment',\n            'modification'\n        ];\n    }\n\n    override async getData(options) {\n        const data = await super.getData(options) as CharacterSheetData;\n\n        // Character actor types are matrix actors.\n        super._prepareMatrixAttributes(data);\n        data['markedDocuments'] = this.actor.getAllMarkedDocuments();\n\n        // Separate matrix actions from regular actions\n        this._prepareActions(data);\n\n        return data;\n    }\n\n    /**\n     * Cache for matrix actions to avoid recalculating them every time\n     * @type {Object}\n     * @private\n     */\n    _matrixActionsCache = null;\n\n    /**\n     * Clear the matrix actions cache\n     * This should be called when items are added or removed\n     */\n    clearMatrixActionsCache() {\n        this._matrixActionsCache = null;\n        console.log('Shadowrun 6e | Matrix actions cache cleared');\n    }\n\n    /**\n     * Force a refresh of the character sheet\n     * This should be called when the actor's data changes\n     */\n    forceRefresh() {\n        console.log('Shadowrun 6e | Forcing refresh of character sheet');\n\n        // Get the latest data from the actor\n        const actor = game.actors.get(this.actor.id);\n        if (actor) {\n            console.log('Shadowrun 6e | Character sheet data before refresh:', {\n                sheetActions: this.actor.system.initiative.actions,\n                actorActions: actor.system.initiative.actions\n            });\n        }\n\n        // We can't directly set this.actor as it only has a getter\n        // Instead, we'll just re-render the sheet which will get the latest actor data\n        this.render(true);\n    }\n\n    /**\n     * Separate matrix actions from regular actions\n     * @param sheetData The data for the actor sheet\n     * @private\n     */\n    _prepareActions(sheetData) {\n        // Initialize the data structure if it doesn't exist\n        if (!sheetData.itemType) {\n            sheetData.itemType = {};\n        }\n\n        // Get all actions\n        const actions = sheetData.itemType.action || [];\n\n        // Check if we have a valid cache and the actor has the matrix actions flag set\n        const hasMatrixActions = this.actor.getFlag('shadowrun6-elysium', 'hasMatrixActions');\n        if (this._matrixActionsCache && hasMatrixActions) {\n            // Use the cached matrix actions\n            sheetData.matrixActions = this._matrixActionsCache.matrixActions;\n            sheetData.nonMatrixActions = this._matrixActionsCache.nonMatrixActions;\n            sheetData.itemType.action = this._matrixActionsCache.nonMatrixActions;\n            return;\n        }\n\n        // Separate matrix actions from regular actions\n        const matrixActions = [];\n        const nonMatrixActions = [];\n\n        // Categorize actions\n        for (const action of actions) {\n            // Check if this is a matrix action\n            const isMatrixAction = this._isMatrixAction(action);\n\n            if (isMatrixAction) {\n                matrixActions.push(action);\n            } else {\n                nonMatrixActions.push(action);\n            }\n        }\n\n        // Add actions to sheet data\n        sheetData.matrixActions = matrixActions;\n        sheetData.nonMatrixActions = nonMatrixActions;\n\n        // Replace the original action array with only non-matrix actions\n        // This ensures matrix actions don't show up in the Actions tab\n        sheetData.itemType.action = nonMatrixActions;\n\n        // Cache the matrix actions if the actor has the matrix actions flag set\n        if (hasMatrixActions) {\n            this._matrixActionsCache = {\n                matrixActions: [...matrixActions],\n                nonMatrixActions: [...nonMatrixActions]\n            };\n        }\n    }\n\n    /**\n     * Get the saved state of a folder\n     * @param folderId The ID of the folder\n     * @param defaultState The default state if no saved state is found\n     * @returns {boolean} True if the folder is collapsed\n     * @private\n     */\n    _getFolderState(folderId, defaultState = false) {\n        const key = `folders.${folderId}`;\n        const state = this.actor.getFlag('shadowrun6-elysium', key);\n        return state !== undefined ? state : defaultState;\n    }\n\n\n\n    /**\n     * Override the _onItemEdit method to clear the matrix actions cache\n     * @param event The click event\n     * @private\n     */\n    override async _onItemEdit(event) {\n        await super._onItemEdit(event);\n        this.clearMatrixActionsCache();\n    }\n\n    /**\n     * Override the _onItemDelete method to clear the matrix actions cache\n     * @param event The click event\n     * @private\n     */\n    override async _onItemDelete(event) {\n        await super._onItemDelete(event);\n        this.clearMatrixActionsCache();\n    }\n\n    /**\n     * Determine if an action is a matrix action\n     * @param action The action item\n     * @returns {boolean} True if the action is a matrix action\n     * @private\n     */\n    _isMatrixAction(action) {\n        // Check action categories for matrix-related categories\n        const matrixCategories = [\n            'matrix'\n        ];\n\n        // Check if action has any matrix categories\n        if (action.system?.action?.categories) {\n            const categories = action.system.action.categories;\n            return categories.some(category => matrixCategories.includes(category));\n        }\n    }\n\n    /**\n     * Inject special case handling for call in action items, only usable by character actors.\n     * Also clears the matrix actions cache when items are created.\n     */\n    override async _onItemCreate(event) {\n        event.preventDefault();\n        const type = event.currentTarget.closest('.list-header').dataset.itemId;\n\n        if (type !== 'summoning' && type !== 'compilation') {\n            await super._onItemCreate(event);\n            this.clearMatrixActionsCache();\n            return;\n        }\n\n        await this._onCallInActionCreate(type);\n        this.clearMatrixActionsCache();\n    }\n\n    /**\n     * Create a call in action item with pre configured actor type.\n     *\n     * @param type The call in action sub type.\n     */\n    async _onCallInActionCreate(type: 'summoning'|'compilation') {\n        // Determine actor type from sub item type.\n        const typeToActorType = {\n            'summoning': 'spirit',\n            'compilation': 'sprite'\n        }\n        const actor_type = typeToActorType[type];\n        if (!actor_type) return console.error('Shadowrun 6e | Call In Action Unknown actor type during creation');\n\n        // TODO: Add translation for item names...\n        const itemData = {\n            name: `${game.i18n.localize('SR6.New')} ${Helpers.label(type)}`,\n            type: 'call_in_action',\n            'system.actor_type': actor_type\n        };\n\n        await this.actor.createEmbeddedDocuments('Item',  [itemData], {renderSheet: true});\n    }\n}\n", "import { SR6Item } from \"../../item/SR6Item\";\nimport { SR6Actor } from \"../SR6Actor\";\nimport {SR6BaseActorSheet} from \"./SR6BaseActorSheet\";\n\n\nexport class SR6SpiritActorSheet extends SR6BaseActorSheet {\n    /**\n     * Spirit actors will handle these item types specifically.\n     *\n     * All others will be collected within the gear tab.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getHandledItemTypes(): string[] {\n        let itemTypes = super.getHandledItemTypes();\n\n        return [\n            ...itemTypes,\n            'critter_power',\n            'spell',\n            'quality'\n        ];\n    }\n\n    /**\n     * Spirit actors sheets deviate from base actors around the summoning workflows.\n     *\n     * @param options\n     * @returns\n     */\n    override async getData(options: any) {\n        const data = await super.getData(options);\n\n        const spirit = this.document.asSpirit();\n        if (spirit) {\n            if (spirit.system.summonerUuid) {\n                data['summoner'] = await fromUuid((this.document.system as Shadowrun.SpiritData).summonerUuid);\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Spirit actor sheets do provide some specific functionality.\n     * @param html\n     */\n    override activateListeners(html) {\n        super.activateListeners(html);\n\n        html.find('.summoner-remove').on('click', this._onRemoveSummoner.bind(this));\n    }\n\n    override async _onDrop(event: DragEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (!event.dataTransfer) return;\n        // Keep upstream document created for actions base on it.\n        const documents = await super._onDrop(event);\n\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        await this._addSummonerOnDrop(dropData);\n\n        return documents;\n    }\n\n    /**\n     * Determine if a dropped actor should be used as a spirit summoner.\n     * @param dropData Actor drop data.\n     */\n    async _addSummonerOnDrop(dropData: { type: string; uuid: string; }) {\n        if (dropData.type !== 'Actor') return;\n        const actor = await fromUuid(dropData.uuid) as SR6Actor;\n        if (!actor.isCharacter()) return;\n\n        await this.document.addSummoner(actor);\n    }\n\n    /**\n     * Remove the summoner from this spirit actor.\n     * @param event Any interaction event.\n     */\n    async _onRemoveSummoner(event: MouseEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        await this.document.removeSummoner();\n    }\n}\n", "import { SR6Actor } from \"../SR6Actor\";\nimport {SR6BaseActorSheet} from \"./SR6BaseActorSheet\";\n\n\nexport class SR6SpriteActorSheet extends SR6BaseActorSheet {\n    /**\n     * Sprite actors will handle these item types specifically.\n     *\n     * All others will be collected within the gear tab.\n     *\n     * @returns An array of item types from the template.json Item section.\n     */\n    override getHandledItemTypes(): string[] {\n        let itemTypes = super.getHandledItemTypes();\n\n        return [\n            ...itemTypes,\n            'sprite_power'\n        ];\n    }\n\n    override activateListeners(html: any): void {\n        super.activateListeners(html);\n\n        html.find('.technomancer-remove').on('click', this._onRemoveTechnomancer.bind(this));\n    }\n\n    override async getData(options: any) {\n        const data = await super.getData(options);\n\n        // Collect sprite technomancer for easy interaction.\n        const sprite = this.document.asSprite();\n        if (sprite !== undefined) {\n            if (sprite.system.technomancerUuid !== '') {\n                data['technomancer'] = await fromUuid(sprite.system.technomancerUuid);\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * Sprites have support for dropping actors onto them.\n     */\n    override async _onDrop(event: DragEvent): Promise<void> {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.dataTransfer === null) return;\n\n        const dropData = JSON.parse(event.dataTransfer.getData('text/plain'));\n\n        await this._addTechnomancerOnDrop(dropData);\n\n        return await super._onDrop(event);\n    }\n\n    /**\n     * Determine if a dropped actor should be used as a technomancer.\n     * @param dropData Drop Data of any kind\n     */\n    async _addTechnomancerOnDrop(dropData: any): Promise<void> {\n        if (dropData.type !== 'Actor') return;\n        const actor = await fromUuid(dropData.uuid) as SR6Actor;\n        if (!actor.isCharacter()) return;\n\n        this.document.addTechnomancer(actor);\n    }\n\n    /**\n     * Remove the technomancer from the sprite.\n     */\n    async _onRemoveTechnomancer(event: MouseEvent): Promise<void> {\n        event.preventDefault();\n        event.stopPropagation();\n\n        await this.document.removeTechnomancer();\n    }\n}\n", "import { SR6Actor } from '../SR6Actor';\nimport {FLAGS, SYSTEM_NAME} from '../../constants';\nimport { SocketMessage } from \"../../sockets\";\nimport { SuccessTest } from '../../tests/SuccessTest';\nimport { Helpers } from '../../helpers'\n\nexport interface TeamworkMessageData {\n    skill: string,\n    additionalDice: number,\n    additionalLimit: number,\n    criticalGlitch: boolean\n}\n\nexport class TeamworkTest {\n\n    static async chatLogListeners(chatLog: ChatLog, html) {\n         // setup chat listener messages for each message as some need the message context instead of chatlog context.\n         html.find('.chat-message').each(async (index, element) => {\n            element = $(element);\n            const id = element.data('messageId');\n            const message = game.messages?.get(id);\n            if (!message) return;\n\n            await this.chatMessageListeners(message, element)\n        });\n    }\n\n    static async chatMessageListeners(message: ChatMessage, html) {\n        if( !html.find('.sr6-teamwork-addparticipant'))\n            return;\n\n        html.find('.sr6-teamwork-addparticipant').on('click', _ => this.addParticipant(message));\n        html.find('.sr6-teamwork-start').on('click', _ => this.rollTeamworkTest(message));\n    }\n\n    /**\n     * This method prompts the user to roll the skill chosen in the teamwork test from a chosen actor @see Helpers.chooseFromAvailableActors\n     * The result is forwarded to @see addResultsToMessage to add text and flag data to the original message\n     *\n     * @param message\n     * @returns\n     */\n    static async addParticipant(message: ChatMessage) {\n        let actor = await Helpers.chooseFromAvailableActors()\n\n        if(actor == undefined) {\n            //in a normal running game this should not happen\n            ui.notifications?.error('SR6.Errors.NoAvailableActorFound', {localize: true});\n            return\n        }\n\n        let teamworkData = message.getFlag(SYSTEM_NAME, FLAGS.Test) as TeamworkMessageData\n        let results = await actor?.rollSkill(teamworkData.skill) as SuccessTest;\n        if(results.rolls.length > 0) {\n            this.addResultsToMessage(message, actor, results, teamworkData)\n        }\n    }\n\n    /**\n     * This method analyses the roll result and adds the text and flag data to the original message\n     * @param message to add text too\n     * @param actor that made the roll\n     * @param results of the roll\n     * @param teamworkData flag data to add too\n     */\n    static async addResultsToMessage(message: ChatMessage, actor: SR6Actor, results: SuccessTest, teamworkData: TeamworkMessageData) {\n        //wrap the old content to presever it, this is necessary for pre-render hooks\n        const wrapper = document.createElement(\"d\u00EDv\");\n        //@ts-expect-error v11 type\n        wrapper.innerHTML = message.content;\n\n        let participantsRoot = wrapper.getElementsByClassName(\"sr6-teamwork-participants\")[0];\n\n        let roll = results.rolls[0];\n        let netHits = results.data.values.netHits.value\n        console.log(results)\n        let participant = document.createElement('div');\n        participant.innerHTML += actor.name + \": \" + netHits;\n\n        if(roll.glitched == true) {\n            participant.innerHTML += \" \" + game.i18n.localize('SR6.Skill.Teamwork.Glitched')\n        }\n\n        teamworkData.additionalDice = (teamworkData.additionalDice ?? 0) + netHits;\n        if(roll.total != 0 && roll.glitched != true) {\n            teamworkData.additionalLimit = (teamworkData.additionalLimit ?? 0) + 1;\n        }\n\n        if(roll.total === 0 && roll.glitched) {\n            teamworkData.criticalGlitch = true;\n        }\n\n        participantsRoot.appendChild(participant)\n\n        if(game.user?.isGM) {\n            message.setFlag(SYSTEM_NAME, FLAGS.Test, teamworkData)\n            message.update({content: wrapper.innerHTML})\n        }\n        else {\n            this._sendUpdateSocketMessage(message, wrapper.innerHTML, teamworkData)\n        }\n\n    }\n\n    /**\n     * This method prompts the roll of the final teamwork test of the leader\n     * @param message\n     */\n    static async rollTeamworkTest(message: ChatMessage) {\n        let teamworkData = message.getFlag(SYSTEM_NAME, FLAGS.Test) as TeamworkMessageData\n        //@ts-expect-error v11 type\n        let actor = game.actors?.get(message.speaker.actor)\n\n        actor?.rollTeamworkTest(teamworkData.skill, teamworkData)\n    }\n\n    /**\n     * Send out a socket message to a connected GM to update the message.\n     * @param actor The actor to create the effects on.\n     * @param effectsData The effects data to be applied;\n     */\n    static async _sendUpdateSocketMessage(message: ChatMessage, content: String, teamworkData: TeamworkMessageData) {\n        await SocketMessage.emitForGM(FLAGS.TeamworkTestFlow, { messageUuid: message.uuid, content: content, teamworkData: teamworkData });\n    }\n\n    /**\n     * Handle a sent socket message to update the content and flags of a message.\n     * @param {string} message.actorUuid Must contain the uuid of the actor to create the effects on.\n     * @param {ActiveEffectData[]} message.effectsData Must contain a list of effects data to be applied.\n     * @returns\n     */\n    static async _handleUpdateSocketMessage(socketMessage: Shadowrun.SocketMessageData) {\n        if (!socketMessage.data.hasOwnProperty('messageUuid') || !socketMessage.data.hasOwnProperty('content') || !socketMessage.data.hasOwnProperty('teamworkData')) {\n            console.error(`Shadowrun 6e | Teamwork Socket Message is missing necessary properties`, socketMessage);\n            return;\n        }\n\n        const message = fromUuidSync(socketMessage.data.messageUuid);\n\n        message?.setFlag(SYSTEM_NAME, FLAGS.Test, socketMessage.data.teamworkData)\n        message?.update({content: socketMessage.data.content})\n    }\n\n}\n", "import { TestDialog } from '../apps/dialogs/TestDialog';\nimport {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {SR6} from \"../config\";\nimport {FireModeRules} from \"../rules/FireModeRules\";\nimport { SR6Item } from \"../item/SR6Item\";\nimport { TestCreator } from './TestCreator';\nimport { RANGE_CATEGORIES, WeaponRangeTestBehavior, WeaponRangeTestDataFragment } from '../rules/WeaponRangeRules';\nimport { Helpers } from '../helpers';\nimport { SR6Actor } from '../actor/SR6Actor';\nimport { SYSTEM_NAME } from '../constants';\nimport { PartsList } from '../parts/PartsList';\nimport { CharacterPrep } from '../rules/CharacterPrep';\nimport { SR6ItemDataWrapper } from '../item/SR6ItemDataWrapper';\n\nexport interface RangedAttackTestData extends SuccessTestData, WeaponRangeTestDataFragment {\n    damage: Shadowrun.DamageData\n    fireModes: Shadowrun.FireModeData[]\n    fireMode: Shadowrun.FireModeData\n    // index of selected fireMode in fireModes\n    fireModeSelected: number\n    ranges: Shadowrun.RangesTemplateData\n    range: number\n    targetRanges: Shadowrun.TargetRangeTemplateData[]\n    // index of selected target range in targetRanges\n    targetRangesSelected: number\n    // Distance to target in meters.\n    distance: number,\n    attackerAR: number\n    defenderDRs: number[]\n    attackerEdge: boolean\n    defenders: {\n        actorUuid: string;\n        name: string\n        dr: number\n        isWinner: boolean    // Add this to track who wins\n        edgeAwarded: boolean // Add this to track if edge was awarded\n        edgeReason: string   // Add this to track the reason for not gaining edge\n    }[]\n    noEdge: boolean\n}\n\n\nexport class RangedAttackTest extends SuccessTest<RangedAttackTestData> {\n    public override item: SR6Item;\n\n    override _prepareData(data, options): RangedAttackTestData {\n        data = super._prepareData(data, options);\n\n        console.log('Shadowrun 6e | RangedAttackTest preparation started');\n\n        data.fireModes = [];\n        data.fireMode = {value: 0, defense: 0, label: ''};\n        WeaponRangeTestBehavior.prepareData(this, data);\n\n        data.attackerAR = 5;\n\n        console.log('Shadowrun 6e | Getting user targets');\n        const targets = Helpers.getUserTargets(game.user);\n        console.log('Shadowrun 6e | Found targets:', targets);\n\n        if(this.actor) {\n            console.log('Shadowrun 6e | Processing targets for actor:', this.actor.name);\n\n            // Map targets to defenders with their actual DR values\n            data.defenders = targets.map(token => {\n                console.log('Shadowrun 6e | Processing target token:', token.name);\n\n                const targetActor = token.actor;\n                let dr = 5; // default DR\n\n                if (!targetActor) {\n                    console.log('Shadowrun 6e | No actor found for token:', token.name);\n                    return null;\n                }\n\n                if (!(targetActor instanceof SR6Actor)) {\n                    console.log('Shadowrun 6e | Actor is not SR6Actor:', token.name);\n                    return null;\n                }\n\n                console.log('Shadowrun 6e | Processing SR6Actor target:', {\n                    name: targetActor.name,\n                    type: targetActor.type,\n                    hasSystem: !!targetActor.system,\n                    hasAttributes: !!targetActor.system?.attributes\n                });\n\n                // Get the calculated DR\n                const targetArmor = targetActor.system.armor;\n                dr = targetArmor?.defense_rating?.value || 5;\n\n                console.log('Shadowrun 6e | Target DR Calculation:', {\n                    name: targetActor.name,\n                    armor: targetArmor,\n                    dr: dr,\n                    body: targetActor.system.attributes?.body?.value,\n                    rawSystem: targetActor.system\n                });\n\n                return {\n                    actorUuid: targetActor.uuid,\n                    dr: dr,\n                    name: token.name || '',\n                    isWinner: false,\n                    edgeAwarded: false,\n                    hasSignificantAdvantage: false\n                };\n            }).filter(defender => defender !== null);\n\n            console.log('Shadowrun 6e | Final defenders data:', data.defenders);\n        } else {\n            console.log('Shadowrun 6e | No actor found for this test');\n        }\n\n        return data;\n    }\n\n    override _testDialogListeners() {\n        return [{\n            query: '#reset-progressive-recoil',\n            on: 'click',\n            callback: this._handleResetProgressiveRecoil\n        }]\n    }\n\n    /**\n     * User want's to manually reset progressive recoil before casting the attack test.\n     */\n    async _handleResetProgressiveRecoil(event: JQuery<HTMLElement>, test: TestDialog) {\n        if (!this.actor) return;\n        await this.actor.clearProgressiveRecoil();\n\n        // Refresh test values.\n        this.prepareBaseValues();\n        this.calculateBaseValues();\n\n        // Inform user about changes.\n        test.render();\n    }\n\n    override get canBeExtended() {\n        return false;\n    }\n\n    override get showSuccessLabel(): boolean {\n        return this.success;\n    }\n\n    _selectFireMode(index: number) {\n        this.data.fireMode = this.data.fireModes[index];\n    }\n\n    /**\n     * Weapon fire modes will affect recoil during test.\n     *\n     * To show the user the effect of recoil, it's applied during selection but progressive recoil is only ever fully applied\n     * after the test is executed.\n     */\n    _prepareFireMode() {\n        // No fire modes selectable on dialog for invalid item provided.\n        const weapon = this.item.asWeapon;\n        if (!weapon) return;\n\n        this.data.fireModes = FireModeRules.availableFireModes(weapon.system.range.modes);\n\n        // To avoid problems when no firemode is configured on the weapon, add at least one to what's available\n        if (this.data.fireModes.length === 0) {\n            this.data.fireModes.push(SR6.fireModes[0]);\n            ui.notifications?.warn('SR6.Warnings.NoFireModeConfigured', {localize: true});\n        }\n\n        // Current firemode selected\n        const lastFireMode = this.item.getLastFireMode() || DataDefaults.fireModeData();\n        // Try pre-selection based on last fire mode.\n        this.data.fireModeSelected = this.data.fireModes.findIndex(available => lastFireMode.label === available.label);\n        if (this.data.fireModeSelected == -1) this.data.fireModeSelected = 0;\n        this._selectFireMode(this.data.fireModeSelected);\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['attack', 'attack_ranged']\n    }\n\n    override get testModifiers(): Shadowrun.ModifierTypes[] {\n        return ['global', 'wounds', 'environmental'];\n    }\n\n    override async prepareDocumentData() {\n        WeaponRangeTestBehavior.prepareDocumentData(this);\n        this._prepareFireMode();\n\n        await super.prepareDocumentData();\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/ranged-attack-test-dialog.html';\n    }\n\n    /**\n     * If a suppression fire mode is used, ignore action opposed test configuration.\n     */\n    override get _opposedTestClass() {\n        if (this.data.fireMode.suppression) return TestCreator._getTestClass(SR6.suppressionDefenseTest);\n        return super._opposedTestClass;\n    }\n\n    /**\n     * Save selections made back to documents.\n     * @returns\n     */\n    override async saveUserSelectionAfterDialog() {\n        if (!this.actor) return;\n        if (!this.item) return;\n\n        // Save fire mode selection\n        await this.item.setLastFireMode(this.data.fireMode);\n        await WeaponRangeTestBehavior.saveUserSelectionAfterDialog(this);\n    }\n\n    /**\n     * Apply test selections made by user in dialog.\n     * @returns\n     */\n    override async prepareBaseValues() {\n        await super.prepareBaseValues();\n\n        if (!this.actor || !this.item) return;\n\n        // Use selection for actual fireMode, overwriting possible previous selection for item.\n        this._selectFireMode(this.data.fireModeSelected);\n\n        // Alter fire mode by ammunition constraints.\n        this.data.fireMode.defense = FireModeRules.fireModeDefenseModifier(this.data.fireMode, this.item.ammoLeft);\n\n        // Calculate AR\n        this.calculateAR();\n\n        // Get range data for selected target\n        if (this.data.targetRanges.length > 0) {\n            const selectedTarget = this.data.targetRanges[this.data.targetRangesSelected];\n            if (selectedTarget) {\n                // Update weapon range data\n                await this.item.update({\n                    'system.range.current': selectedTarget.distance,\n                    'system.range.category': selectedTarget.range.category,\n                    'system.range.modifier': selectedTarget.range.modifier\n                });\n            }\n        }\n    }\n\n    /**\n     * Ranged attack tests allow for temporarily changing of modifiers without altering the document.\n     */\n    override prepareTestModifiers() {\n        const modifiers = new PartsList<number>(this.data.modifiers.mod);\n\n        // Add range modifier if we have a target\n        if (this.data.targetRanges.length > 0) {\n            const selectedTarget = this.data.targetRanges[this.data.targetRangesSelected];\n            if (selectedTarget) {\n                modifiers.addUniquePart('range', selectedTarget.range.modifier);\n            }\n        }\n\n        super.prepareTestModifiers();\n    }\n\n    /**\n     * Enough resources according to test configuration?\n     *\n     * Ranged weapons need ammunition in enough quantity.\n     *\n     * NOTE: In this case it's only checked if at least ONE bullet exists.\n     *       It's done this way as no matter the fire mode, you can fire it.\n     */\n    override canConsumeDocumentResources() {\n        if (!this.item.isRangedWeapon) return true;\n\n        // Ammo consumption\n        const fireMode = this.data.fireMode;\n        if (fireMode.value === 0) return true;\n\n        if (!this.item.hasAmmo(1)) {\n            ui.notifications?.error('SR6.MissingRessource.Ammo', {localize: true});\n            return false;\n        }\n\n        return super.canConsumeDocumentResources();\n    }\n\n    /**\n     * Ranged Attacks not only can consume edge but also reduce ammunition.\n     *\n     */\n    override async consumeDocumentRessources() {\n        if (!await super.consumeDocumentRessources()) return false;\n        if (!await this.consumeWeaponAmmo()) return false;\n\n        return true;\n    }\n\n    /**\n     * Reduce ranged weapon ammunition according to the fire mode used.\n     */\n    async consumeWeaponAmmo(): Promise<boolean> {\n        if (!this.item) return true;\n        if (!this.item.isRangedWeapon) return true;\n\n        const fireMode = this.data.fireMode;\n        if (fireMode.value === 0) return true;\n\n        // Notify user about some but not no ammo. Still fire though.\n        if (!this.item.hasAmmo(fireMode.value)) {\n            ui.notifications?.warn('SR6.MissingRessource.SomeAmmo', {localize: true});\n        }\n\n        await this.item.useAmmo(fireMode.value);\n        await this.actor?.addProgressiveRecoil(fireMode);\n\n        return true;\n    }\n\n    override async processResults() {\n        console.log('Shadowrun 6e | Processing ranged attack test results');\n        await super.processResults();\n        console.log('Shadowrun 6e | Starting edge award calculations');\n        await this.calculateEdgeAwards();\n        console.log('Shadowrun 6e | Finished edge award calculations');\n        await WeaponRangeTestBehavior.processResults(this);\n    }\n\n    private async calculateEdgeAwards() {\n        if (!this.actor) {\n            console.log('Shadowrun 6e | Cannot calculate edge awards: No actor found');\n            return;\n        }\n\n        console.log(`Shadowrun 6e | Calculating edge awards for combat between ${this.actor.name} and ${this.data.defenders.length} defender(s)`);\n\n        for (const defender of this.data.defenders) {\n            console.log('Shadowrun 6e | Processing defender:', {\n                name: defender.name,\n                uuid: defender.actorUuid,\n                dr: defender.dr\n            });\n\n            const attackerWins = this.data.attackerAR >= defender.dr;\n            const hasSignificantAdvantage = Math.abs(this.data.attackerAR - defender.dr) >= 4;\n\n            defender.isWinner = !attackerWins;\n            defender.hasSignificantAdvantage = hasSignificantAdvantage;\n            defender.edgeReason = ''; // Add this to track the reason\n\n            if (!attackerWins && hasSignificantAdvantage) {\n                console.log(`Shadowrun 6e | ${defender.name} (DR: ${defender.dr}) has significant advantage over ${this.actor.name} (AR: ${this.data.attackerAR})`);\n\n                try {\n                    const defenderActor = await fromUuid(defender.actorUuid);\n                    console.log('Shadowrun 6e | Defender actor lookup result:', {\n                        found: !!defenderActor,\n                        type: defenderActor?.constructor.name,\n                        name: defenderActor?.name\n                    });\n\n                    if (defenderActor instanceof SR6Actor) {\n                        const edge = defenderActor.getEdge();\n                        const edgeGainedThisRound = defenderActor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n\n                        // Check conditions and set reasons\n                        if (!edge) {\n                            defender.edgeReason = `${defenderActor.name} has no Edge attribute`;\n                        } else if (edgeGainedThisRound >= 2) {\n                            defender.edgeReason = `${defenderActor.name} has already gained the maximum Edge (${edgeGainedThisRound}) this round`;\n                        } else if (edge.uses >= 7) {\n                            defender.edgeReason = `${defenderActor.name} is already at maximum Edge (${edge.uses})`;\n                        }\n\n                        const canGainEdge = edge && edgeGainedThisRound < 2 && edge.uses < 7;\n\n                        console.log('Shadowrun 6e | Edge check for defender:', {\n                            hasEdge: !!edge,\n                            edgeValue: edge?.uses,\n                            edgeGainedThisRound,\n                            canGainEdge\n                        });\n\n                        if (canGainEdge) {\n                            console.log('Shadowrun 6e | Attempting to award edge to defender');\n                            defender.edgeAwarded = await this.awardEdge(defenderActor);\n                        }\n                    } else {\n                        defender.edgeReason = 'Invalid actor type for Edge calculation';\n                        console.log('Shadowrun 6e | Defender actor is not an SR6Actor:', defenderActor);\n                    }\n                } catch (error) {\n                    defender.edgeReason = 'Error processing Edge calculation';\n                    console.error('Shadowrun 6e | Error processing defender:', error);\n                }\n            }\n        }\n    }\n\n    private async awardEdge(actor: SR6Actor) {\n        const edge = actor.getEdge();\n        if (!edge) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: No edge attribute found`);\n            await ChatMessage.create({\n                content: `${actor.name} cannot gain Edge (no Edge attribute found)`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if actor has already gained maximum edge this round\n        const edgeGainedThisRound = actor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n        if (edgeGainedThisRound >= 2) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Maximum edge gained this round (${edgeGainedThisRound})`);\n            await ChatMessage.create({\n                content: `${actor.name} has already gained maximum Edge this round (${edgeGainedThisRound})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if adding edge would exceed maximum\n        const newEdgeUses = Math.min(7, edge.uses + 1);\n        if (newEdgeUses <= edge.uses) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Already at maximum edge (${edge.uses})`);\n            await ChatMessage.create({\n                content: `${actor.name} is already at maximum Edge (${edge.uses})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Only proceed with edge award if we haven't returned false above\n        await actor.update({\n            'system.attributes.edge.uses': newEdgeUses\n        });\n        await actor.setFlag(SYSTEM_NAME, 'edgeGainedThisRound', edgeGainedThisRound + 1);\n\n        // Show floating text - try both token and primary token\n        const token = actor.token || actor.getActiveTokens()[0];\n        if (token) {\n            canvas.interface?.createScrollingText(token.center, `Edge +1`, {\n                anchor: CONST.TEXT_ANCHOR_POINTS.TOP,\n                direction: CONST.TEXT_ANCHOR_POINTS.TOP,\n                distance: 20,\n                fontSize: 24,\n                fill: \"#00FF00\",\n                stroke: \"#000000\",\n                strokeThickness: 4,\n                duration: 1000\n            });\n        }\n\n        // Notify in chat\n        await ChatMessage.create({\n            content: `${actor.name} gains Edge (+1)`,\n            speaker: ChatMessage.getSpeaker({actor: actor})\n        });\n\n        console.log(`Shadowrun 6e | Edge awarded to ${actor.name}: ${edge.uses} \u2192 ${newEdgeUses}`);\n        return true;  // Return true to indicate edge was successfully awarded\n    }\n\n    /**\n     * Get the Attack Rating (AR) for the current range.\n     * Each weapon has specific ARs defined for different ranges.\n     * If no AR is defined for the current range, the weapon cannot be used.\n     */\n    calculateAR(): number {\n        if (!this.actor || !this.item) return 0;\n\n        const weapon = this.item.asWeapon;\n        if (!weapon) return 0;\n\n        // Get the current range category\n        let rangeCategory = RANGE_CATEGORIES.NEAR.toLowerCase(); // Convert to lowercase to match data structure\n        if (this.data.targetRanges.length > 0) {\n            const selectedTarget = this.data.targetRanges[this.data.targetRangesSelected];\n            if (selectedTarget) {\n                rangeCategory = selectedTarget.range.category.toLowerCase(); // Convert to lowercase\n            }\n        }\n\n        // Get the AR for the specific range\n        const rangeAR = weapon.system.range.attackRating?.[rangeCategory];\n\n        // If no AR is defined for this range, the weapon cannot be used\n        if (typeof rangeAR !== 'number') {\n            console.log('Shadowrun 6e | Weapon cannot be used at range:', {\n                weapon: weapon.name,\n                targetName: this.data.targetRanges[this.data.targetRangesSelected]?.name,\n                range: {\n                    category: rangeCategory,\n                    distance: this.data.targetRanges[this.data.targetRangesSelected]?.distance\n                },\n                attackRatings: weapon.system.range.attackRating,\n                selectedTarget: this.data.targetRanges[this.data.targetRangesSelected],\n                hasTargets: this.data.targetRanges.length > 0,\n                selectedTargetIndex: this.data.targetRangesSelected\n            });\n\n            ui.notifications?.warn(\n                game.i18n.format('SR6.WeaponRange.CannotBeUsedAtRange', {\n                    weapon: weapon.name,\n                    range: game.i18n.localize(`SR6.WeaponRange.${rangeCategory}`)\n                })\n            );\n            return 0;\n        }\n\n        this.data.attackerAR = rangeAR;\n\n        console.log('Shadowrun 6e | AR Selection:', {\n            weapon: weapon.name,\n            range: rangeCategory,\n            ar: rangeAR,\n            allRanges: weapon.system.range.attackRating\n        });\n\n        return this.data.attackerAR;\n    }\n}\n", "import {SR6Actor} from \"../SR6Actor\";\nimport {SR6Item} from '../../item/SR6Item';\nimport DamageData = Shadowrun.DamageData;\n\nexport class SoakFlow {\n    knocksDown(damage: DamageData, actor:SR6Actor) {\n        // TODO: SR5 195 Called Shot Knock Down (Melee Only), requires attacker STR and actually announcing that called shot.\n        const gelRoundsEffect = this.isDamageFromGelRounds(damage) ? -2 : 0;  // SR5 434\n        const impactDispersionEffect = this.isDamageFromImpactDispersion(damage) ? -2 : 0  // FA 52\n\n        // SR5 194\n        const knockedDown = damage.value > actor.getAttribute(\"body\").value;\n\n        console.log(`SR6: Elysium | Determined target ${actor.id} knocked down status as: ${knockedDown}`, damage, actor);\n\n        return knockedDown;\n    }\n\n    isDamageFromGelRounds(damage: DamageData) {\n        if (damage.source && damage.source.actorId && damage.source.itemId) {\n            const attacker = game.actors?.find(actor => actor.id == damage.source?.actorId);\n            if (attacker) {\n                const item = attacker.items.find(item => item.id == damage.source?.itemId) as SR6Item;\n                if (item) {\n                    return item.items\n                        .filter(mod => mod.getTechnologyData()?.equipped)\n                        .filter(tech => tech.name == game.i18n.localize(\"SR6.AmmoGelRounds\")).length > 0;\n                }\n            }\n        }\n        return false;\n    }\n\n    isDamageFromImpactDispersion(damage: DamageData) {\n        // TODO: FA 52. Ammo currently cannot have mods, so not sure how to implement Alter Ballistics idiomatically.\n        return false;\n    }\n}\n", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {CombatRules} from \"../rules/CombatRules\";\nimport {Helpers} from \"../helpers\";\nimport {PhysicalDefenseTestData} from \"./PhysicalDefenseTest\";\nimport {SoakFlow} from \"../actor/flows/SoakFlow\";\nimport DamageData = Shadowrun.DamageData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nimport { Translation } from '../utils/strings';\n\n\nexport interface PhysicalResistTestData extends SuccessTestData {\n    // The original test this resistance is taking its data from.\n    following: PhysicalDefenseTestData\n    // The damage BEFORE this test is done.\n    incomingDamage: DamageData\n    // The damage AFTER this test is done.\n    modifiedDamage: DamageData\n    // Determine if an actor should be knockedDown after a defense.\n    knockedDown: boolean\n}\n\nexport type PhysicalResistSuccessCondition = {\n    test: () => boolean,\n    label?: Translation,\n    effect?: () => void,\n}\n\n/**\n * A physical resist test handles SR5#173 Defend B\n *\n * Physical resist specifically handles physical damage dealt by ranged, melee and physical spell attacks.\n */\nexport class PhysicalResistTest extends SuccessTest<PhysicalResistTestData> {\n\n    override _prepareData(data: PhysicalResistTestData, options): any {\n        data = super._prepareData(data, options);\n\n        // Is this test part of a followup test chain? defense => resist\n        if (data.following) {\n            data.incomingDamage = foundry.utils.duplicate(data.following?.modifiedDamage || DataDefaults.damageData());\n            data.modifiedDamage = foundry.utils.duplicate(data.incomingDamage);\n        // This test is part of either a standalone resist or created with its own data (i.e. edge reroll).\n        } else {\n            data.incomingDamage = data.incomingDamage ?? DataDefaults.damageData();\n            data.modifiedDamage = foundry.utils.duplicate(data.incomingDamage);\n        }\n\n        const armor = this.actor?.getArmor();\n        if(armor?.hardened){\n            data.hitsIcon = {\n                icon: \"systems/shadowrun6-elysium/dist/icons/bell-shield.svg\",\n                tooltip: \"SR6.ArmorHardenedFull\",\n            };\n        }\n\n        return data;\n    }\n\n    override get _chatMessageTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/defense-test-message.html';\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/physical-resist-test-dialog.html';\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            'attribute': 'body',\n            'armor': true\n        };\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['resist']\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['soak'];\n    }\n\n    override applyPoolModifiers() {\n        super.applyPoolModifiers();\n        this.applyArmorPoolModifier();\n    }\n\n    /**\n     * Resisting against damage on the physical plane includes the modified armor value.\n     */\n    applyArmorPoolModifier() {\n        if (this.data.action.armor) {\n            if (this.actor) {\n                const armor = this.actor.getArmor(this.data.incomingDamage);\n                this.data.pool.mod = PartsList.AddUniquePart(this.data.pool.mod,'SR6.Armor', armor.value);\n            }\n        }\n    }\n\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n\n        // Calculate damage values in case of user dialog interaction.\n        Helpers.calcTotal(this.data.incomingDamage, {min: 0});\n        Helpers.calcTotal(this.data.incomingDamage.ap);\n\n        // Remove user override and resulting incoming damage as base.\n        this.data.modifiedDamage = foundry.utils.duplicate(this.data.incomingDamage);\n        this.data.modifiedDamage.base = this.data.incomingDamage.value;\n        this.data.modifiedDamage.mod = [];\n        delete this.data.modifiedDamage.override;\n        this.data.modifiedDamage.ap.base = this.data.incomingDamage.ap.value;\n        this.data.modifiedDamage.ap.mod = [];\n        delete this.data.modifiedDamage.ap.override;\n\n        Helpers.calcTotal(this.data.modifiedDamage);\n        Helpers.calcTotal(this.data.modifiedDamage.ap);\n    }\n\n    override get canSucceed() {\n        return true;\n    }\n\n    /**\n     * Resist Test success means ALL damage has been soaked.\n     */\n    override get success() {\n        return !!this.getSuccessCondition();\n    }\n\n    private isFullySoaked(): boolean {\n        return this.data.incomingDamage.value <= this.hits.value;\n    }\n\n    private successConditions: PhysicalResistSuccessCondition[] = [\n        {\n            test: () => this.actor !== undefined && CombatRules.isBlockedByHardenedArmor(this.data.incomingDamage, 0, 0, this.actor),\n            label: \"SR6.TestResults.SoakBlockedByHardenedArmor\",\n            effect: () => {\n                this.data.autoSuccess = true;\n            }\n        },\n        {\n            test: () => this.isFullySoaked(),\n        },\n    ]\n\n    private getSuccessCondition(): PhysicalResistSuccessCondition|undefined {\n        return this.successConditions.find(({ test }) => test());\n    }\n\n    override get showSuccessLabel(): boolean {\n        return this.success;\n    }\n\n    override get successLabel(): Translation {\n        return this.getSuccessCondition()?.label || 'SR6.TestResults.ResistedAllDamage';\n    }\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.ResistedSomeDamage';\n    }\n\n    override async processSuccess() {\n        await super.processSuccess();\n\n        this.getSuccessCondition()?.effect?.();\n    }\n\n    override async evaluate(): Promise<this> {\n        await super.evaluate();\n\n        // Automatic hits from hardened armor (SR5#397)\n        const armor = this.actor?.getArmor(this.data.modifiedDamage);\n        if(armor?.hardened) {\n            PartsList.AddUniquePart(this.hits.mod, 'SR6.AppendedHits', Math.ceil(armor.value/2));\n            Helpers.calcTotal(this.hits);\n        }\n\n        return this;\n    }\n\n    override async processResults() {\n\n        await super.processResults();\n\n        if (!this.actor) return;\n\n        // Handle damage modification.\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterResist(this.actor, this.data.modifiedDamage, this.hits.value);\n\n        // Handle Knock Down Rules with legacy flow handling.\n        this.data.knockedDown = new SoakFlow().knocksDown(this.data.modifiedDamage, this.actor);\n    }\n}\n", "import { SuccessTest, SuccessTestData } from \"./SuccessTest\";\nimport { DataDefaults } from \"../data/DataDefaults\";\nimport { SR6Actor } from \"../actor/SR6Actor\";\nimport { Helpers } from \"../helpers\";\nimport { SYSTEM_NAME } from \"../constants\";\nimport ModifierTypes = Shadowrun.ModifierTypes;\n\nexport interface MeleeAttackData extends SuccessTestData {\n    reach: number\n    attackerAR: number\n    attackerEdge: boolean\n    defenders: {\n        actorUuid: string;\n        name: string\n        dr: number\n        isWinner: boolean    // Track who wins\n        edgeAwarded: boolean // Track if edge was awarded\n        hasSignificantAdvantage: boolean // Track if there's a significant advantage\n        edgeReason: string   // Track the reason for not gaining edge\n    }[]\n}\n\nexport class MeleeAttackTest extends SuccessTest<MeleeAttackData> {\n\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        data.damage = data.damage || DataDefaults.damageData();\n        data.attackerAR = data.attackerAR || 0;\n        data.attackerEdge = data.attackerEdge || false;\n        data.defenders = data.defenders || [];\n\n        // Initialize defenders data with target tokens\n        if (data.defenders.length === 0 && this.actor) {\n            console.log('Shadowrun 6e | Getting user targets for melee attack');\n            const targets = Helpers.getUserTargets(game.user);\n            console.log('Shadowrun 6e | Found targets:', targets);\n\n            if (targets && targets.length > 0) {\n                data.defenders = targets.map(token => {\n                    const targetActor = token.actor;\n                    if (!targetActor) return null;\n\n                    // Get the defense rating\n                    let dr = 5; // Default DR\n\n                    // Get the calculated DR\n                    const targetArmor = targetActor.system.armor;\n                    dr = targetArmor?.defense_rating?.value || 5;\n\n                    console.log('Shadowrun 6e | Target DR Calculation:', {\n                        name: targetActor.name,\n                        armor: targetArmor,\n                        dr: dr\n                    });\n\n                    return {\n                        actorUuid: targetActor.uuid,\n                        dr: dr,\n                        name: token.name || '',\n                        isWinner: false,\n                        edgeAwarded: false,\n                        hasSignificantAdvantage: false,\n                        edgeReason: ''\n                    };\n                }).filter(defender => defender !== null);\n\n                console.log('Shadowrun 6e | Final defenders data:', data.defenders);\n            } else {\n                console.log('Shadowrun 6e | No targets found for this test');\n            }\n        }\n\n        return data;\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['attack', 'attack_melee'];\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'wounds', 'environmental'];\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/melee-attack-test-dialog.html';\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/success-test-message.html';\n    }\n\n    override get showSuccessLabel(): boolean {\n        return this.success;\n    }\n\n    override async prepareDocumentData() {\n        if (!this.item || !this.item.isMeleeWeapon) return;\n\n        this.data.reach = this.item.getReach();\n        this.data.reach += this.actor?.system.modifiers.reach || 0;\n\n        // Calculate the attack rating for melee weapons\n        this.calculateAR();\n\n        // Set targets for the chat message\n        this.prepareTargets();\n\n        await super.prepareDocumentData();\n    }\n\n    /**\n     * Prepare targets for the chat message\n     */\n    prepareTargets() {\n        // Only proceed if we have defenders\n        if (!this.data.defenders || this.data.defenders.length === 0) return;\n\n        // Set targets for the chat message\n        this.targets = [];\n\n        // Add each defender as a target\n        for (const defender of this.data.defenders) {\n            // Try to get the token for this actor\n            const actor = game.actors?.get(defender.actorUuid.split('.').pop());\n            if (!actor) continue;\n\n            // Get the token for this actor\n            const token = actor.getActiveTokens()[0];\n            if (!token) continue;\n\n            // Add the token to the targets\n            this.targets.push(token);\n        }\n\n        console.log('Shadowrun 6e | Prepared targets for melee attack test:', this.targets);\n    }\n\n    /**\n     * Calculate the Attack Rating (AR) for melee weapons\n     * If the melee attack is using strength, then Agility is used as the AR calculation\n     * If the melee attack uses agility, then Strength is used for calculating the AR\n     * Melee AR calculation is AR stat + weapon AR\n     */\n    calculateAR(): number {\n        if (!this.actor || !this.item) return 0;\n\n        // Default AR value\n        let arStat = 0;\n        let weaponAR = 0;\n\n        // Get the weapon AR from the item\n        if (this.item.system.action?.damage?.value) {\n            weaponAR = this.item.system.action.damage.value;\n        }\n\n        // Determine which attribute to use based on the weapon type\n        if (this.item.usesAgility()) {\n            // If the weapon uses agility, use strength for AR\n            const strengthAttr = this.actor.findAttribute('strength');\n            if (strengthAttr) {\n                arStat = strengthAttr.value;\n            }\n        } else {\n            // If the weapon uses strength (default), use agility for AR\n            const agilityAttr = this.actor.findAttribute('agility');\n            if (agilityAttr) {\n                arStat = agilityAttr.value;\n            }\n        }\n\n        // For unarmed combat, AR is Strength + Reaction\n        if (this.item.system.category === 'unarmed') {\n            const strengthAttr = this.actor.findAttribute('strength');\n            const reactionAttr = this.actor.findAttribute('reaction');\n\n            arStat = (strengthAttr ? strengthAttr.value : 0) + (reactionAttr ? reactionAttr.value : 0);\n            weaponAR = 0; // No weapon AR for unarmed\n        }\n\n        // Calculate the total AR\n        this.data.attackerAR = arStat + weaponAR;\n\n        // Determine which attributes were used\n        let statName = this.item.usesAgility() ? 'Strength' : 'Agility';\n        if (this.item.system.category === 'unarmed') {\n            statName = 'Strength + Reaction';\n        }\n\n        // Create a detailed log message\n        const logMessage = `Melee AR Calculation for ${this.actor.name} using ${this.item.name}:\\n` +\n                          `${statName} (${arStat}) + Weapon AR (${weaponAR}) = ${this.data.attackerAR}`;\n\n        // Log the calculation details\n        console.log(logMessage);\n\n        // Also log the object for debugging\n        console.log('Shadowrun 6e | Melee AR Calculation Details:', {\n            actor: this.actor.name,\n            weapon: this.item.name,\n            statName,\n            arStat,\n            weaponAR,\n            formula: `${arStat} + ${weaponAR} = ${this.data.attackerAR}`,\n            totalAR: this.data.attackerAR\n        });\n\n        // Add a chat message to show the calculation\n        ChatMessage.create({\n            content: `<div class=\"sr6 chat-card roll-card\"><div class=\"card-content\"><b>Melee AR Calculation for ${this.item.name}:</b><br>${statName} (${arStat}) + Weapon AR (${weaponAR}) = ${this.data.attackerAR}</div></div>`,\n            speaker: ChatMessage.getSpeaker({actor: this.actor})\n        });\n\n        return this.data.attackerAR;\n    }\n\n    /**\n     * Remove unneeded environmental modifier categories for melee tests.\n     *\n     * See SR5#187 'Environmental Modifiers'\n     *\n     * @param actor\n     * @param type\n     */\n    override prepareActorModifier(actor: SR6Actor, type: ModifierTypes): { name: string; value: number; } {\n        if (type !== 'environmental') return super.prepareActorModifier(actor, type);\n\n        // Only light and visibility apply.\n        const modifiers = actor.getSituationModifiers();\n        modifiers.environmental.apply({ applicable: ['light', 'visibility'] });\n\n        const name = this._getModifierTypeLabel(type);\n        const value = modifiers.environmental.total;\n\n        return { name, value };\n    }\n\n    /**\n     * Some Melee Weapons have ammo and can consume it.\n     */\n    override canConsumeDocumentResources(): boolean {\n        if (this.item === undefined) return true;\n        if (!this.item.usesAmmo) return true;\n\n        // Consume one ammo per attack.\n        if (!this.item.hasAmmo(1)) {\n            ui.notifications?.error('SR6.MissingRessource.SomeAmmoMelee', {localize: true});\n            return false;\n        }\n\n        return super.canConsumeDocumentResources();\n    }\n\n    /**\n     * Some Melee Weapons can consume ammo resources.\n     */\n    override async consumeDocumentRessources(): Promise<boolean> {\n        if (!await super.consumeDocumentRessources()) return false;\n        if (!await this.consumeWeaponAmmo()) return false;\n\n        return true;\n    }\n\n    /**\n     * Reduce the melee weapon ammunition for this attack.\n     */\n    async consumeWeaponAmmo(): Promise<boolean> {\n        if (this.item === undefined) return true;\n        if (!this.item.usesAmmo) return true;\n\n        // Notify user about some but not no ammo. Still let them punch though.\n        if (!this.item.hasAmmo(1)) {\n            ui.notifications?.warn('SR6.MissingRessource.SomeAmmoMelee', {localize: true});\n        }\n\n        await this.item.useAmmo(1);\n\n        return true;\n    }\n\n    override async processResults() {\n        console.log('Shadowrun 6e | Processing melee attack test results');\n        await super.processResults();\n        console.log('Shadowrun 6e | Starting edge award calculations');\n        await this.calculateEdgeAwards();\n        console.log('Shadowrun 6e | Finished edge award calculations');\n    }\n\n    /**\n     * Calculate edge awards based on Attack Rating vs Defense Rating\n     * Edge is awarded when there is a significant advantage (AR vs DR difference >= 4)\n     */\n    private async calculateEdgeAwards() {\n        if (!this.actor) {\n            console.log('Shadowrun 6e | Cannot calculate edge awards: No actor found');\n            return;\n        }\n\n        console.log(`Shadowrun 6e | Calculating edge awards for combat between ${this.actor.name} and ${this.data.defenders.length} defender(s)`);\n\n        for (const defender of this.data.defenders) {\n            console.log('Shadowrun 6e | Processing defender:', {\n                name: defender.name,\n                uuid: defender.actorUuid,\n                dr: defender.dr\n            });\n\n            const attackerWins = this.data.attackerAR >= defender.dr;\n            const hasSignificantAdvantage = Math.abs(this.data.attackerAR - defender.dr) >= 4;\n\n            defender.isWinner = !attackerWins;\n            defender.hasSignificantAdvantage = hasSignificantAdvantage;\n            defender.edgeReason = ''; // Reset the reason\n\n            if (!attackerWins && hasSignificantAdvantage) {\n                console.log(`Shadowrun 6e | ${defender.name} (DR: ${defender.dr}) has significant advantage over ${this.actor.name} (AR: ${this.data.attackerAR})`);\n\n                try {\n                    const defenderActor = await fromUuid(defender.actorUuid);\n                    if (defenderActor instanceof SR6Actor) {\n                        const edge = defenderActor.getEdge();\n                        const edgeGainedThisRound = defenderActor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n\n                        // Check conditions and set reasons with detailed explanations\n                        if (!edge) {\n                            defender.edgeReason = `${defenderActor.name} has no Edge attribute`;\n                        } else if (edgeGainedThisRound >= 2) {\n                            defender.edgeReason = `${defenderActor.name} has already gained the maximum Edge (${edgeGainedThisRound}) this round`;\n                        } else if (edge.uses >= 7) {\n                            defender.edgeReason = `${defenderActor.name} is already at maximum Edge (${edge.uses})`;\n                        } else if (!defender.hasSignificantAdvantage) {\n                            defender.edgeReason = `No significant advantage (DR vs AR difference must be 4+)`;\n                        } else if (!defender.isWinner) {\n                            defender.edgeReason = `${defenderActor.name} did not have a higher DR than the attacker's AR`;\n                        }\n\n                        const canGainEdge = edge && edgeGainedThisRound < 2 && edge.uses < 7;\n\n                        console.log('Shadowrun 6e | Edge check for defender:', {\n                            hasEdge: !!edge,\n                            edgeValue: edge?.uses,\n                            edgeGainedThisRound,\n                            canGainEdge\n                        });\n\n                        if (canGainEdge) {\n                            console.log('Shadowrun 6e | Attempting to award edge to defender');\n                            defender.edgeAwarded = await this.awardEdge(defenderActor);\n                        }\n                    } else {\n                        defender.edgeReason = 'Invalid actor type for Edge calculation';\n                        console.log('Shadowrun 6e | Defender actor is not an SR6Actor:', defenderActor);\n                    }\n                } catch (error) {\n                    defender.edgeReason = 'Error processing Edge calculation';\n                    console.error('Shadowrun 6e | Error processing defender:', error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Award edge to an actor\n     * @param actor The actor to award edge to\n     * @returns True if edge was awarded, false otherwise\n     */\n    private async awardEdge(actor: SR6Actor) {\n        const edge = actor.getEdge();\n        if (!edge) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: No edge attribute found`);\n            await ChatMessage.create({\n                content: `${actor.name} cannot gain Edge (no Edge attribute found)`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if actor has already gained maximum edge this round\n        const edgeGainedThisRound = actor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n        if (edgeGainedThisRound >= 2) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Maximum edge gained this round (${edgeGainedThisRound})`);\n            await ChatMessage.create({\n                content: `${actor.name} has already gained maximum Edge this round (${edgeGainedThisRound})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if adding edge would exceed maximum\n        const newEdgeUses = Math.min(7, edge.uses + 1);\n        if (newEdgeUses <= edge.uses) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Already at maximum edge (${edge.uses})`);\n            await ChatMessage.create({\n                content: `${actor.name} is already at maximum Edge (${edge.uses})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Only proceed with edge award if we haven't returned false above\n        await actor.update({\n            'system.attributes.edge.uses': newEdgeUses\n        });\n        await actor.setFlag(SYSTEM_NAME, 'edgeGainedThisRound', edgeGainedThisRound + 1);\n\n        // Show floating text - try both token and primary token\n        const token = actor.token || actor.getActiveTokens()[0];\n        if (token) {\n            canvas.interface?.createScrollingText(token.center, `Edge +1`, {\n                anchor: CONST.TEXT_ANCHOR_POINTS.TOP,\n                direction: CONST.TEXT_ANCHOR_POINTS.TOP,\n                distance: 20,\n                fontSize: 24,\n                fill: \"#00FF00\",\n                stroke: \"#000000\",\n                strokeThickness: 4,\n                duration: 1000\n            });\n        }\n\n        // Notify in chat\n        await ChatMessage.create({\n            content: `${actor.name} gains Edge (+1)`,\n            speaker: ChatMessage.getSpeaker({actor: actor})\n        });\n\n        console.log(`Shadowrun 6e | Edge awarded to ${actor.name}: ${edge.uses} \u2192 ${newEdgeUses}`);\n        return true;  // Return true to indicate edge was successfully awarded\n    }\n}\n", "import { TestDialog, TestDialogListener } from \"./TestDialog\";\nimport { SpellCastingTest } from \"../../tests/SpellCastingTest\";\n\n/**\n * Custom TestDialog for spellcasting tests that adds support for the number spinner buttons\n */\nexport class SpellcastingTestDialog extends TestDialog {\n    override activateListeners(html: JQuery) {\n        super.activateListeners(html);\n\n        // Add listeners for the number spinner buttons\n        html.find('.number-spinner-button').on('click', this._onNumberSpinnerButtonClick.bind(this));\n    }\n\n    /**\n     * Handle clicks on the number spinner buttons\n     */\n    _onNumberSpinnerButtonClick(event: JQuery.ClickEvent) {\n        event.preventDefault();\n        \n        const button = event.currentTarget;\n        const action = button.dataset.action;\n        const field = button.dataset.field;\n        \n        if (!field) return;\n        \n        // Find the input field\n        const input = this.element.find(`input[name=\"${field}\"]`);\n        if (!input.length) return;\n        \n        // Get the current value\n        let value = parseInt(input.val() as string) || 0;\n        \n        // Increment or decrement the value\n        if (action === 'increment') {\n            value += 1;\n        } else if (action === 'decrement') {\n            value = Math.max(0, value - 1);\n        }\n        \n        // Update the input field\n        input.val(value);\n        \n        // Trigger the change event to update the test data\n        input.trigger('change');\n    }\n}\n", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {SpellcastingRules} from \"../rules/SpellcastingRules\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {DrainRules} from \"../rules/DrainRules\";\nimport {Helpers} from \"../helpers\";\nimport {SYSTEM_NAME} from \"../constants\";\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport { SpellcastingTestDialog } from \"../apps/dialogs/SpellcastingTestDialog\";\nimport DamageData = Shadowrun.DamageData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\n\n\nexport interface SpellCastingTestData extends SuccessTestData {\n    drain: number\n    reckless: boolean\n    attackerAR: number\n    attackerEdge: boolean\n    ampUp: number       // Number of amp up levels applied\n    increasedArea: number  // Number of increased area levels applied\n    defenders: {\n        actorUuid: string;\n        name: string\n        dr: number\n        isWinner: boolean    // Track who wins\n        edgeAwarded: boolean // Track if edge was awarded\n        hasSignificantAdvantage: boolean // Track if there's a significant advantage\n        edgeReason: string   // Track the reason for not gaining edge\n    }[]\n\n    drainDamage: DamageData\n}\n\n\n/**\n * Spellcasting tests as described on SR5#281 in the spellcasting chapter.\n *\n */\nexport class SpellCastingTest extends SuccessTest<SpellCastingTestData> {\n\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        data.drain = data.drain || 0;\n        data.reckless = data.reckless || false;\n        data.attackerAR = data.attackerAR || 0;\n        data.attackerEdge = data.attackerEdge || false;\n        data.ampUp = data.ampUp || 0;\n        data.increasedArea = data.increasedArea || 0;\n        data.defenders = data.defenders || [];\n        data.drainDamage = data.drainDamage || DataDefaults.damageData();\n\n        // Ensure the drain damage has a value property\n        if (data.drainDamage && data.drainDamage.value === undefined) {\n            data.drainDamage.value = data.drainDamage.base || 0;\n        }\n\n        console.log('Shadowrun 6e | SpellCastingTest prepared data:', {\n            drain: data.drain,\n            ampUp: data.ampUp,\n            increasedArea: data.increasedArea,\n            drainDamage: data.drainDamage\n        });\n\n        // Initialize defenders data with target tokens\n        if (data.defenders.length === 0 && this.actor) {\n            console.log('Shadowrun 6e | Getting user targets for spell casting');\n            const targets = Helpers.getUserTargets(game.user);\n            console.log('Shadowrun 6e | Found targets:', targets);\n\n            if (targets && targets.length > 0) {\n                data.defenders = targets.map(token => {\n                    const targetActor = token.actor;\n                    if (!targetActor) return null;\n\n                    // Get the defense rating\n                    let dr = 5; // Default DR\n\n                    // Get the calculated DR\n                    const targetArmor = targetActor.system.armor;\n                    dr = targetArmor?.defense_rating?.value || 5;\n\n                    console.log('Shadowrun 6e | Target DR Calculation:', {\n                        name: targetActor.name,\n                        armor: targetArmor,\n                        dr: dr\n                    });\n\n                    return {\n                        actorUuid: targetActor.uuid,\n                        dr: dr,\n                        name: token.name || '',\n                        isWinner: false,\n                        edgeAwarded: false,\n                        hasSignificantAdvantage: false,\n                        edgeReason: ''\n                    };\n                }).filter(defender => defender !== null);\n\n                console.log('Shadowrun 6e | Final defenders data:', data.defenders);\n            } else {\n                console.log('Shadowrun 6e | No targets found for this test');\n            }\n        }\n\n        return data;\n    }\n\n    override get _dialogTemplate()  {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/spellcasting-test-dialog.html';\n    }\n\n    /**\n     * Override to use the SpellcastingTestDialog class\n     */\n    override _createTestDialog() {\n        return new SpellcastingTestDialog({ test: this, templatePath: this._dialogTemplate }, undefined, this._testDialogListeners());\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/spellcasting-test-message.html';\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            skill: 'spellcasting',\n            attribute: 'magic'\n        };\n    }\n\n    /**\n     * Spellcasting test category directly depends on the spell cast.\n     */\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        const spell = this.item?.asSpell;\n        if (!spell) return [];\n\n        switch (spell.system.category) {\n            case 'combat': return ['spell_combat'];\n            case 'detection': return ['spell_detection'];\n            case 'health': return ['spell_healing'];\n            case 'illusion': return ['spell_illusion'];\n            case 'manipulation': return ['spell_manipulation'];\n            case 'ritual': return ['spell_ritual'];\n        }\n\n        return []\n\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'wounds', 'background_count'];\n    }\n\n    override async prepareDocumentData() {\n        // Calculate the attack rating for magical attacks\n        this.calculateAR();\n\n        // Set targets for the chat message\n        this.prepareTargets();\n\n        await super.prepareDocumentData();\n    }\n\n    /**\n     * Prepare targets for the chat message\n     */\n    prepareTargets() {\n        // Only proceed if we have defenders\n        if (!this.data.defenders || this.data.defenders.length === 0) return;\n\n        // Set targets for the chat message\n        this.targets = [];\n\n        // Add each defender as a target\n        for (const defender of this.data.defenders) {\n            // Try to get the token for this actor\n            const actor = game.actors?.get(defender.actorUuid.split('.').pop());\n            if (!actor) continue;\n\n            // Get the token for this actor\n            const token = actor.getActiveTokens()[0];\n            if (!token) continue;\n\n            // Add the token to the targets\n            this.targets.push(token);\n        }\n\n        console.log('Shadowrun 6e | Prepared targets for spell casting test:', this.targets);\n    }\n\n    /**\n     * Calculate the Attack Rating (AR) for magical attacks\n     * For magical attack rating, the AR is the Magic + tradition attribute\n     * The tradition attribute comes from the drain attribute setting\n     */\n    calculateAR(): number {\n        if (!this.actor) return 0;\n\n        // Get the magic attribute\n        const magicAttr = this.actor.findAttribute('magic');\n        if (!magicAttr) return 0;\n\n        // Get the drain attribute (tradition attribute)\n        let drainAttr = 'charisma'; // Default to charisma if no drain attribute is found\n\n        // Log the actor's magic data for debugging\n        console.log('Shadowrun 6e | Actor magic data:', {\n            actorName: this.actor.name,\n            magicData: this.actor.system.magic,\n            drainAttribute: this.actor.system.magic?.attribute\n        });\n\n        // Check if the actor has a drain attribute defined\n        if (this.actor.system.magic?.attribute) {\n            drainAttr = this.actor.system.magic.attribute;\n            console.log(`Shadowrun 6e | Using drain attribute from actor: ${drainAttr}`);\n        } else {\n            console.log(`Shadowrun 6e | No drain attribute found, using default: ${drainAttr}`);\n        }\n\n        // Get the drain attribute value\n        const drainAttrValue = this.actor.findAttribute(drainAttr)?.value || 0;\n\n        // Calculate the total AR as Magic + drain attribute\n        this.data.attackerAR = magicAttr.value + drainAttrValue;\n\n        // Create a detailed log message\n        const logMessage = `Magical AR Calculation for ${this.actor.name}:\\n` +\n                          `Magic (${magicAttr.value}) + ${drainAttr.charAt(0).toUpperCase() + drainAttr.slice(1)} (${drainAttrValue}) = ${this.data.attackerAR}`;\n\n        // Log the calculation details\n        console.log(logMessage);\n\n        // Also log the object for debugging\n        console.log('Shadowrun 6e | Magical AR Calculation Details:', {\n            actor: this.actor.name,\n            magic: magicAttr.value,\n            drainAttribute: drainAttr,\n            drainValue: drainAttrValue,\n            formula: `${magicAttr.value} + ${drainAttrValue} = ${this.data.attackerAR}`,\n            totalAR: this.data.attackerAR\n        });\n\n        // Add a chat message to show the calculation\n        if (this.item) {\n            ChatMessage.create({\n                content: `<div class=\"sr6 chat-card roll-card\"><div class=\"card-content\"><b>Spell AR Calculation for ${this.item.name}:</b><br>Magic (${magicAttr.value}) + ${drainAttr.charAt(0).toUpperCase() + drainAttr.slice(1)} (${drainAttrValue}) = ${this.data.attackerAR}</div></div>`,\n                speaker: ChatMessage.getSpeaker({actor: this.actor})\n            });\n        }\n\n        return this.data.attackerAR;\n    }\n\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n    }\n\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n        this.calculateDrainValue();\n    }\n\n    /**\n     * Precalculate drain for user display.\n     */\n    calculateDrainValue() {\n        const drain = Number(this.item?.getDrain);\n        const reckless = this.data.reckless;\n        const ampUp = Number(this.data.ampUp);\n        const increasedArea = Number(this.data.increasedArea);\n\n        // In SR6e, drain is the base drain value of the spell\n        let totalDrain = drain;\n\n        // Add drain for reckless casting if applicable\n        if (reckless) {\n            totalDrain += 3; // Keeping the SR5 reckless modifier for now\n        }\n\n        // Add drain for amp up: +2 drain per level\n        if (ampUp > 0) {\n            totalDrain += ampUp * 2;\n        }\n\n        // Add drain for increased area: +1 drain per level\n        if (increasedArea > 0) {\n            totalDrain += increasedArea;\n        }\n\n        // Ensure minimum drain of 2\n        totalDrain = Math.max(2, totalDrain);\n\n        console.log('Shadowrun 6e | Calculated drain value:', {\n            baseDrain: drain,\n            reckless,\n            ampUp,\n            increasedArea,\n            totalDrain\n        });\n\n        this.data.drain = totalDrain;\n    }\n\n    /**\n     * Derive the actual drain damage from spellcasting values.\n     */\n    calcDrainDamage() {\n        if (!this.actor) return DataDefaults.damageData();\n\n        const drain = Number(this.data.drain);\n        const magic = this.actor.getAttribute('magic').value;\n\n        console.log('Shadowrun 6e | Calculating drain damage with:', { drain, magic, hits: this.hits.value });\n\n        // Create drain damage data with isDrain=true to default to stun damage\n        const damage = DataDefaults.damageData({}, true);\n        damage.base = drain;\n        damage.value = drain;\n\n        // In SR6e, drain is always stun damage unless the number of hits exceeds the magic attribute\n        // Only change to physical in rare cases\n        if (this.hits.value > magic) {\n            damage.type.base = 'physical';\n            damage.type.value = 'physical';\n        }\n\n        this.data.drainDamage = damage;\n\n        // Ensure all properties are set\n        this._ensureDamageProperties(this.data.drainDamage);\n\n        console.log('Shadowrun 6e | Created drain damage:', this.data.drainDamage);\n    }\n\n    /**\n     * Ensure that a damage object has all the required properties\n     */\n    _ensureDamageProperties(damage) {\n        if (!damage) return;\n\n        // Ensure value is set\n        if (damage.value === undefined) {\n            damage.value = damage.base || 0;\n        }\n\n        // Ensure type is set\n        if (!damage.type) {\n            damage.type = { base: 'stun', value: 'stun' };\n        } else {\n            // Ensure type.value is set\n            if (damage.type.value === undefined) {\n                damage.type.value = damage.type.base || 'stun';\n            }\n        }\n\n        console.log('Shadowrun 6e | Ensured damage properties:', damage);\n    }\n\n    override async processResults() {\n        this.calcDrainDamage();\n        this.modifySpellDamageForAmpUp();\n\n        // Debug the drain damage before processing results\n        console.log('Shadowrun 6e | Drain damage before processing results:', {\n            drainDamage: this.data.drainDamage,\n            drain: this.data.drain\n        });\n\n        // Force the drain damage to have the correct values\n        if (this.data.drainDamage) {\n            this.data.drainDamage.value = this.data.drain;\n            this.data.drainDamage.base = this.data.drain;\n            if (this.data.drainDamage.type) {\n                this.data.drainDamage.type.value = 'stun';\n                this.data.drainDamage.type.base = 'stun';\n            }\n            console.log('Shadowrun 6e | Forced drain damage values:', this.data.drainDamage);\n        }\n\n        await super.processResults();\n\n        // Debug the drain damage after processing results\n        console.log('Shadowrun 6e | Drain damage after processing results:', {\n            drainDamage: this.data.drainDamage,\n            drain: this.data.drain\n        });\n\n        console.log('Shadowrun 6e | Starting edge award calculations');\n        await this.calculateEdgeAwards();\n        console.log('Shadowrun 6e | Finished edge award calculations');\n    }\n\n    /**\n     * Modify the spell's damage value based on amp up levels\n     * In SR6e, each amp up level increases damage by 1\n     */\n    modifySpellDamageForAmpUp() {\n        const spell = this.item?.asSpell;\n        if (!spell) return;\n\n        const ampUp = Number(this.data.ampUp);\n        if (ampUp <= 0) return;\n\n        // Only modify damage for combat spells\n        if (spell.system.category !== 'combat') return;\n\n        // Get the action damage\n        const damage = spell.system.action.damage;\n        if (!damage) return;\n\n        // Increase damage by 1 for each level of amp up\n        const damageBonus = ampUp;\n\n        console.log('Shadowrun 6e | Modifying spell damage for amp up:', {\n            originalDamage: damage.value,\n            ampUp,\n            damageBonus,\n            newDamage: damage.value + damageBonus\n        });\n\n        // Create a chat message to show the damage modification\n        ChatMessage.create({\n            content: `<div class=\"sr6 chat-card roll-card\"><div class=\"card-content\"><b>Amp Up Damage Bonus:</b> +${damageBonus} damage</div></div>`,\n            speaker: ChatMessage.getSpeaker({actor: this.actor})\n        });\n    }\n\n    /**\n     * Calculate edge awards based on Attack Rating vs Defense Rating\n     * Edge is awarded when there is a significant advantage (AR vs DR difference >= 4)\n     */\n    private async calculateEdgeAwards() {\n        if (!this.actor) {\n            console.log('Shadowrun 6e | Cannot calculate edge awards: No actor found');\n            return;\n        }\n\n        console.log(`Shadowrun 6e | Calculating edge awards for combat between ${this.actor.name} and ${this.data.defenders.length} defender(s)`);\n\n        for (const defender of this.data.defenders) {\n            console.log('Shadowrun 6e | Processing defender:', {\n                name: defender.name,\n                uuid: defender.actorUuid,\n                dr: defender.dr\n            });\n\n            const attackerWins = this.data.attackerAR >= defender.dr;\n            const hasSignificantAdvantage = Math.abs(this.data.attackerAR - defender.dr) >= 4;\n\n            defender.isWinner = !attackerWins;\n            defender.hasSignificantAdvantage = hasSignificantAdvantage;\n            defender.edgeReason = ''; // Reset the reason\n\n            if (!attackerWins && hasSignificantAdvantage) {\n                console.log(`Shadowrun 6e | ${defender.name} (DR: ${defender.dr}) has significant advantage over ${this.actor.name} (AR: ${this.data.attackerAR})`);\n\n                try {\n                    const defenderActor = await fromUuid(defender.actorUuid);\n                    if (defenderActor instanceof SR6Actor) {\n                        const edge = defenderActor.getEdge();\n                        const edgeGainedThisRound = defenderActor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n\n                        // Check conditions and set reasons with detailed explanations\n                        if (!edge) {\n                            defender.edgeReason = `${defenderActor.name} has no Edge attribute`;\n                        } else if (edgeGainedThisRound >= 2) {\n                            defender.edgeReason = `${defenderActor.name} has already gained the maximum Edge (${edgeGainedThisRound}) this round`;\n                        } else if (edge.uses >= 7) {\n                            defender.edgeReason = `${defenderActor.name} is already at maximum Edge (${edge.uses})`;\n                        } else if (!defender.hasSignificantAdvantage) {\n                            defender.edgeReason = `No significant advantage (DR vs AR difference must be 4+)`;\n                        } else if (!defender.isWinner) {\n                            defender.edgeReason = `${defenderActor.name} did not have a higher DR than the caster's AR`;\n                        }\n\n                        const canGainEdge = edge && edgeGainedThisRound < 2 && edge.uses < 7;\n\n                        console.log('Shadowrun 6e | Edge check for defender:', {\n                            hasEdge: !!edge,\n                            edgeValue: edge?.uses,\n                            edgeGainedThisRound,\n                            canGainEdge\n                        });\n\n                        if (canGainEdge) {\n                            console.log('Shadowrun 6e | Attempting to award edge to defender');\n                            defender.edgeAwarded = await this.awardEdge(defenderActor);\n                        }\n                    } else {\n                        defender.edgeReason = 'Invalid actor type for Edge calculation';\n                        console.log('Shadowrun 6e | Defender actor is not an SR6Actor:', defenderActor);\n                    }\n                } catch (error) {\n                    defender.edgeReason = 'Error processing Edge calculation';\n                    console.error('Shadowrun 6e | Error processing defender:', error);\n                }\n            }\n        }\n    }\n\n    /**\n     * Award edge to an actor\n     * @param actor The actor to award edge to\n     * @returns True if edge was awarded, false otherwise\n     */\n    private async awardEdge(actor: SR6Actor) {\n        const edge = actor.getEdge();\n        if (!edge) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: No edge attribute found`);\n            await ChatMessage.create({\n                content: `${actor.name} cannot gain Edge (no Edge attribute found)`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if actor has already gained maximum edge this round\n        const edgeGainedThisRound = actor.getFlag(SYSTEM_NAME, 'edgeGainedThisRound') || 0;\n        if (edgeGainedThisRound >= 2) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Maximum edge gained this round (${edgeGainedThisRound})`);\n            await ChatMessage.create({\n                content: `${actor.name} has already gained maximum Edge this round (${edgeGainedThisRound})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Check if adding edge would exceed maximum\n        const newEdgeUses = Math.min(7, edge.uses + 1);\n        if (newEdgeUses <= edge.uses) {\n            console.log(`Shadowrun 6e | Could not award edge to ${actor.name}: Already at maximum edge (${edge.uses})`);\n            await ChatMessage.create({\n                content: `${actor.name} is already at maximum Edge (${edge.uses})`,\n                speaker: ChatMessage.getSpeaker({actor: actor})\n            });\n            return false;  // Return false to indicate edge was not awarded\n        }\n\n        // Only proceed with edge award if we haven't returned false above\n        await actor.update({\n            'system.attributes.edge.uses': newEdgeUses\n        });\n        await actor.setFlag(SYSTEM_NAME, 'edgeGainedThisRound', edgeGainedThisRound + 1);\n\n        // Show floating text - try both token and primary token\n        const token = actor.token || actor.getActiveTokens()[0];\n        if (token) {\n            canvas.interface?.createScrollingText(token.center, `Edge +1`, {\n                anchor: CONST.TEXT_ANCHOR_POINTS.TOP,\n                direction: CONST.TEXT_ANCHOR_POINTS.TOP,\n                distance: 20,\n                fontSize: 24,\n                fill: \"#00FF00\",\n                stroke: \"#000000\",\n                strokeThickness: 4,\n                duration: 1000\n            });\n        }\n\n        // Notify in chat\n        await ChatMessage.create({\n            content: `${actor.name} gains Edge (+1)`,\n            speaker: ChatMessage.getSpeaker({actor: actor})\n        });\n\n        console.log(`Shadowrun 6e | Edge awarded to ${actor.name}: ${edge.uses} \u2192 ${newEdgeUses}`);\n        return true;  // Return true to indicate edge was successfully awarded\n    }\n\n    // No need to save force value in SR6e\n\n    /**\n     * Override to ensure drain value is properly passed to the template\n     */\n    override async _prepareMessageTemplateData() {\n        const templateData = await super._prepareMessageTemplateData();\n\n        // Add debugging to see what's in the template data\n        console.log('Shadowrun 6e | SpellCastingTest _prepareMessageTemplateData - Template data:', templateData);\n\n        // Ensure the test object has the correct drain value\n        if (templateData && templateData.test) {\n            // Make sure the data property exists\n            if (!templateData.test.data) {\n                templateData.test.data = {};\n            }\n\n            // Log the original drain value\n            console.log('Shadowrun 6e | SpellCastingTest _prepareMessageTemplateData - Original drain value:', templateData.test.data.drain);\n\n            // Make sure the drain value is set\n            if (templateData.test.data.drain === undefined || templateData.test.data.drain === 0) {\n                templateData.test.data.drain = this.data.drain || 4; // Default to 4 if no drain value is set\n            }\n\n            console.log('Shadowrun 6e | SpellCastingTest _prepareMessageTemplateData - Updated drain value:', templateData.test.data.drain);\n        }\n\n        return templateData;\n    }\n}\n", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {SpellCastingTestData} from \"./SpellCastingTest\";\nimport {DrainRules} from \"../rules/DrainRules\";\nimport {Helpers} from \"../helpers\";\nimport DamageData = Shadowrun.DamageData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nimport GenericValueField = Shadowrun.GenericValueField;\nimport { Translation } from '../utils/strings';\nimport { DataDefaults } from \"../data/DataDefaults\";\n\nexport interface DrainTestData extends SuccessTestData {\n    incomingDrain: DamageData\n    modifiedDrain: DamageData\n\n    against: SpellCastingTestData\n}\n\n\n/**\n * Implement a Drain Test as is defined in SR5#282 'Step 6 - Resist Drain'\n *\n * Drain defines it's incoming drain and modifies it to it's modified drain,\n * both of which the user can apply.\n */\nexport class DrainTest extends SuccessTest<DrainTestData> {\n\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        // Is this test part of a followup test chain? spell => drain\n        if (data.against) {\n            console.log('Shadowrun 6e | DrainTest preparing data with against:', data.against);\n\n            // Create a new drain damage object with the correct values\n            const drainValue = data.against.drain || 0;\n            console.log('Shadowrun 6e | Drain value from against data:', drainValue);\n\n            data.incomingDrain = DataDefaults.damageData({\n                base: drainValue,\n                value: drainValue,\n                type: {\n                    base: 'stun',\n                    value: 'stun'\n                }\n            }, true);\n\n            console.log('Shadowrun 6e | Created new incoming drain:', data.incomingDrain);\n\n            data.modifiedDrain = foundry.utils.duplicate(data.incomingDrain);\n        // This test is part of either a standalone test or created with its own data (i.e. edge reroll).\n        } else {\n            console.log('Shadowrun 6e | DrainTest preparing data without against');\n            data.incomingDrain = data.incomingDrain ?? DataDefaults.damageData({}, true);\n            data.modifiedDrain = foundry.utils.duplicate(data.incomingDrain);\n        }\n\n        // Ensure the damage objects have value properties\n        this._ensureDamageProperties(data.incomingDrain);\n        this._ensureDamageProperties(data.modifiedDrain);\n\n        console.log('Shadowrun 6e | DrainTest prepared data:', {\n            incomingDrain: data.incomingDrain,\n            modifiedDrain: data.modifiedDrain\n        });\n\n        return data;\n    }\n\n    /**\n     * Ensure that a damage object has all the required properties\n     */\n    _ensureDamageProperties(damage) {\n        if (!damage) return;\n\n        // Ensure value is set\n        if (damage.value === undefined) {\n            damage.value = damage.base || 0;\n        }\n\n        // Ensure type is set\n        if (!damage.type) {\n            damage.type = { base: 'stun', value: 'stun' };\n        } else {\n            // Ensure type.value is set\n            if (damage.type.value === undefined) {\n                damage.type.value = damage.type.base || 'stun';\n            }\n        }\n\n        console.log('Shadowrun 6e | Ensured damage properties:', damage);\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/drain-test-dialog.html';\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/drain-test-message.html';\n    }\n\n    /**\n     * Override to add debugging for drain test message template data\n     */\n    override async _prepareMessageTemplateData() {\n        const templateData = await super._prepareMessageTemplateData();\n\n        console.log('Shadowrun 6e | DrainTest _prepareMessageTemplateData:', {\n            templateData,\n            incomingDrain: this.data.incomingDrain,\n            modifiedDrain: this.data.modifiedDrain,\n            testObject: templateData.test\n        });\n\n        return templateData;\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            'attribute2': 'willpower'\n        };\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['drain'];\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'drain']\n    }\n\n    static override async _getDocumentTestAction(item, actor) {\n        const documentAction = await super._getDocumentTestAction(item, actor);\n\n        if (!actor.isAwakened) {\n            console.error(`Shadowrun 6e | A ${this.name} expected an awakened actor but got this`, actor);\n            return documentAction;\n        }\n\n        // Get magic school attribute.\n        const attribute = actor.system.magic.attribute;\n        foundry.utils.mergeObject(documentAction, {attribute});\n\n        // Return the school attribute based on actor configuration.\n        return documentAction;\n    }\n\n    /**\n     * Re-calculate incomingDrain in case of user input\n     */\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n\n        Helpers.calcValue<typeof this.data.incomingDrain.type.base>(this.data.incomingDrain.type as GenericValueField);\n\n        // Copy to get all values changed by user (override) but also remove all.\n        this.data.modifiedDrain = foundry.utils.duplicate(this.data.incomingDrain);\n        this.data.modifiedDrain.base = Helpers.calcTotal(this.data.incomingDrain, {min: 0});\n        delete this.data.modifiedDrain.override;\n    }\n\n    /**\n     * A drain test is successful whenever it has more hits than drain damage\n     */\n    override get success(): boolean {\n        return this.data.modifiedDrain.value <= 0;\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.ResistedAllDamage';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.ResistedSomeDamage'\n    }\n\n    override async processResults() {\n        // Don't use incomingDrain as it might have a user value override applied.\n        this.data.modifiedDrain = DrainRules.modifyDrainDamage(this.data.modifiedDrain, this.hits.value);\n\n        console.log('Shadowrun 6e | Drain test modified drain:', this.data.modifiedDrain);\n\n        // Ensure both drain damage objects have all required properties\n        this._ensureDamageProperties(this.data.incomingDrain);\n        this._ensureDamageProperties(this.data.modifiedDrain);\n\n        // Debug the drain test data before processing results\n        console.log('Shadowrun 6e | Drain test data before processing results:', {\n            incomingDrain: this.data.incomingDrain,\n            modifiedDrain: this.data.modifiedDrain\n        });\n\n        await super.processResults();\n\n        // Debug the drain test data after processing results\n        console.log('Shadowrun 6e | Drain test data after processing results:', {\n            incomingDrain: this.data.incomingDrain,\n            modifiedDrain: this.data.modifiedDrain\n        });\n    }\n}\n", "import DamageData = Shadowrun.DamageData;\nimport {PartsList} from \"../parts/PartsList\";\nimport {Helpers} from \"../helpers\";\nimport {CombatRules} from \"./CombatRules\";\nimport CombatSpellType = Shadowrun.CombatSpellType;\nimport SpellType = Shadowrun.SpellType;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport { SR6Actor } from \"../actor/SR6Actor\";\n\nexport class CombatSpellRules {\n    /**\n     * Calculate combat spell damage as defined in SR5#283 Combat Spells Direct section.\n     *\n     * This includes only the attack portion of damage calculation.\n     *\n     * @param damage The DamageData so far.\n     */\n    static calculateDirectDamage(damage: DamageData): DamageData {\n        return foundry.utils.duplicate(damage);\n    }\n\n    /**\n     * Calculate combat spell damage as defined in SR5#283 Combat Spells Indirect section.\n     *\n     * This includes only the attack portion of damage calculation.\n     *\n     * @param damage The DamageData so far.\n     * @param force The force used during combat spell.\n     */\n    static calculateIndirectDamage(damage: DamageData, force: number): DamageData {\n        damage = foundry.utils.duplicate(damage);\n\n        const ap = -force;\n        damage.ap.mod = PartsList.AddUniquePart(damage.ap.mod, 'SR6.Force', ap);\n        damage.mod = PartsList.AddUniquePart(damage.mod, 'SR6.Force', force);\n\n        // Armor piercing can both be a negative and positive value.\n        Helpers.calcTotal(damage.ap);\n        Helpers.calcTotal(damage, {min: 0});\n\n        return damage;\n    }\n\n    /**\n     * Modify incoming direct combat spell damage as defined in SR5#283 Combat Spell direct section.\n     *\n     * @param defender The active defender\n     * @param damage Incoming damage including base damage values.\n     * @param attackerHits The attackers hits achieved\n     * @param defenderHits The defenders hits achieved\n     */\n    static modifyDirectDamageAfterHit(defender: SR6Actor, damage: DamageData, attackerHits: number, defenderHits: number): DamageData {\n        return CombatRules.modifyDamageAfterHit(defender, attackerHits, defenderHits, damage);\n    }\n\n    static modifyIndirectDamageAfterHit(defender: SR6Actor, damage: DamageData, attackerHits: number, defenderHits): DamageData {\n        return CombatRules.modifyDamageAfterHit(defender, attackerHits, defenderHits, damage);\n    }\n\n    static modifyDamageAfterMiss(damage: DamageData): DamageData {\n        return CombatRules.modifyDamageAfterMiss(damage);\n    }\n\n    /**\n     * Should a damage resist test be allowed according to SR5#283 section 'Combat Spells'\n     * @param type The general combat spell type.\n     * @returns When true, a damage resist test should be cast.\n     */\n    static allowDamageResist(type: CombatSpellType): boolean {\n        return type === 'indirect';\n    }\n\n    /**\n     * Calculate base damage for all combat spell types.\n     *\n     * This will not include net hits after defense.\n     *\n     * @param type The combat spell type\n     * @param damage The incoming damage\n     * @param force Used force value during original spellcasting\n     * @returns A modified damage resulting\n     */\n    static calculateBaseDamage(type: CombatSpellType, damage: DamageData, force: number): DamageData {\n        switch (type) {\n            case 'indirect':\n                return CombatSpellRules.calculateIndirectDamage(damage, force);\n            case 'direct':\n                return CombatSpellRules.calculateDirectDamage(damage);\n        }\n\n        return foundry.utils.duplicate(damage);\n    }\n\n    /**\n     * Modify incoming damage for a combat spell after the spell hit the defending target according to SR5#283 Section 'Combat Defense'\n     *\n     * @param defender The active defender\n     * @param spellType The general spell type.\n     * @param combatType The combat spell type.\n     * @param damage The incoming damage.\n     * @param attackerHits Hits achieved by the spell attack aster.\n     * @param defenderHits Hits achieved by the defender against the spell attack.\n     */\n    static modifyDamageAfterHit(defender: SR6Actor, spellType: SpellType, combatType: CombatSpellType, damage: DamageData, attackerHits: number, defenderHits: number): DamageData {\n\n        if (spellType === 'mana' && combatType === 'direct') {\n            return CombatSpellRules.modifyDirectDamageAfterHit(\n                defender,\n                damage,\n                attackerHits,\n                defenderHits);\n        }\n        if (spellType === 'physical' && combatType === 'direct') {\n            return CombatSpellRules.modifyDirectDamageAfterHit(\n                defender,\n                damage,\n                attackerHits,\n                defenderHits);\n        }\n        if (combatType === 'indirect') {\n            return CombatSpellRules.modifyIndirectDamageAfterHit(\n                defender,\n                damage,\n                attackerHits,\n                defenderHits);\n        }\n\n        return foundry.utils.duplicate(damage);\n    }\n\n    /**\n     * Return a testable action for combat spell defense based on SR5#283 Section 'Combat Defense'\n     *\n     * @param spellType The general spell type.\n     * @param combatType The combat spell type.\n     */\n    static defenseTestAction(spellType: SpellType, combatType: CombatSpellType): MinimalActionData {\n        if (spellType === '' || combatType === '')\n            console.warn(`SR6: Elysium | The given spell or combat spell types are empty and won't form a complete defense test action`);\n\n        const itemAction = DataDefaults.minimalActionData();\n\n        if (spellType === 'mana' && combatType === 'direct') {\n            itemAction.attribute = 'willpower';\n        }\n        if (spellType === 'physical' && combatType === 'direct') {\n            itemAction.attribute = 'body';\n        }\n        if (combatType === 'indirect') {\n            itemAction.attribute = 'reaction';\n            itemAction.attribute2 = 'intuition';\n        }\n\n        return itemAction;\n    }\n}\n", "import {DefenseTest, DefenseTestData} from \"./DefenseTest\";\nimport {SpellCastingTest, SpellCastingTestData} from \"./SpellCastingTest\";\nimport {SR6Item} from \"../item/SR6Item\";\nimport {SR6Actor} from \"../actor/SR6Actor\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {CombatSpellRules} from \"../rules/CombatSpellRules\";\nimport {TestCreator} from \"./TestCreator\";\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\n\nexport interface CombatSpellDefenseTestData extends DefenseTestData {\n    against: SpellCastingTestData\n}\n\nexport class CombatSpellDefenseTest extends DefenseTest<CombatSpellDefenseTestData> {\n    override against: SpellCastingTest\n\n    /**\n     * A combat spell defense test changes it's behaviour based on the spell it's defending against.\n     *\n     * @param item A spell item.\n     * @param actor The actor to defend with.\n     */\n    static override async _getDocumentTestAction(item: SR6Item, actor: SR6Actor): Promise<MinimalActionData> {\n        const action = DataDefaults.minimalActionData(await super._getDocumentTestAction(item, actor));\n\n        const spellData = item.asSpell\n        if (!spellData) return action;\n\n        const itemAction = CombatSpellRules.defenseTestAction(spellData.system.type, spellData.system.combat.type);\n        return TestCreator._mergeMinimalActionDataInOrder(action, itemAction);\n    }\n\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.calculateCombatSpellDamage();\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        const spell = this.item?.asSpell;\n        if (!spell) return [];\n\n        // Defending against a indirect physical spell, is a physical defense test.\n        if (spell.system.type === 'physical' && spell.system.combat.type === 'indirect') {\n            return ['defense'];\n        }\n\n        return [];\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        const spell = this.item?.asSpell;\n        if (!spell) return ['global'];\n\n        if (spell.system.type === 'mana' && spell.system.combat.type === 'direct') {\n            return ['global'];\n        }\n        if (spell.system.type === 'physical' && spell.system.combat.type === 'direct') {\n            return ['global'];\n        }\n        if (spell.system.combat.type === 'indirect') {\n            return ['global', 'defense', 'multi_defense', 'wounds'];\n        }\n\n        return ['global'];\n    }\n\n    /**\n     * A combat spells damage depends on\n     */\n    calculateCombatSpellDamage() {\n        const spell = this.item?.asSpell;\n        if (!spell) return;\n\n        this.data.incomingDamage = CombatSpellRules.calculateBaseDamage(spell.system.combat.type, this.data.incomingDamage, this.data.against.force);\n    }\n\n    override async processResults() {\n        await super.processResults();\n\n        await this.applyActorEffectsForDefense();\n    }\n\n\n    /**\n     * A success on a defense test is a MISS on the initial attack.\n     */\n    override async processSuccess() {\n        this.data.modifiedDamage = CombatSpellRules.modifyDamageAfterMiss(this.data.incomingDamage);\n\n        await super.processSuccess();\n    }\n\n    /**\n     * A failure on a defense test is a HIT on the initial attack.\n     */\n    override async processFailure() {\n        const spell = this.item?.asSpell;\n        if (!spell) return;\n        if (!this.actor) return;\n\n        this.data.modifiedDamage = CombatSpellRules.modifyDamageAfterHit(this.actor, spell.system.type, spell.system.combat.type,\n            this.data.incomingDamage, this.against.hits.value, this.hits.value);\n\n        await super.processFailure();\n    }\n\n    /**\n     * Combat Spell Defense allows a resist test for the defending actor.\n     */\n    override async afterFailure() {\n        await super.afterFailure();\n\n        const spell = this.item?.asSpell;\n        if (!spell) return;\n\n        // Only allow a defense test for in\n        if (CombatSpellRules.allowDamageResist(spell.system.combat.type)) {\n            const test = await TestCreator.fromOpposedTestResistTest(this, this.data.options);\n            if (!test) return;\n            await test.execute();\n        }\n    }\n\n    /**\n     * Increase the actors multi defense modifier for indirect combat spells.\n     */\n    async applyActorEffectsForDefense() {\n        if (!this.actor) return;\n\n        const spell = this.item?.asSpell;\n        if (!spell) return;\n        if (spell.system.category !== 'combat' || spell.system.combat.type === 'direct') return;\n\n        this.actor.calculateNextDefenseMultiModifier();\n    }\n}\n", "/**\n * Shadowrun 5 related rules to threading complex forms.\n */\nexport const ComplexFormRules = {\n    /**\n     * As defined in SR5#251-252 section Fading.\n     */\n    minimalFade: 2,\n    /**\n     * Based on the minimal level value use this as the minimal usable level value.\n     * @param fadeModifier The fade modifier defined within the complex forms action configuration.\n     */\n    calculateMinimalLevel: function(fadeModifier: number): number {\n        return Math.max(1, this.minimalFade - fadeModifier);\n    },\n\n    calculateLevel: function(level: number): number {\n        return Math.max(1, level);\n    },\n\n    /**\n     * The threading test limit as defined in SR5#250 Thread Complex Form action.\n     * @param level\n     */\n    calculateLimit: function(level: number): number {\n        return level;\n    },\n\n    /**\n     * Calculate fade for complex forms based on SR5#250\n     *\n     * @param level The level chosen to thread this complex form.\n     * @param fadeModifier The action modifier for fade damage.\n     */\n    calculateFade: function(level: number, fadeModifier: number): number {\n        const fade = level + fadeModifier;\n        return Math.max(this.minimalFade, fade);\n    }\n}", "import DamageData = Shadowrun.DamageData;\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport DamageType = Shadowrun.DamageType;\nimport {Helpers} from \"../helpers\";\nimport {PartsList} from \"../parts/PartsList\";\n\nexport const FadeRules = {\n\n    /**\n     * Calculate fade damage according to SR5#251 section Fading\n     *\n     * @param fade The fade value after threading test\n     * @param hits The amount of hits during threading\n     * @param resonance The resonance attribute rating\n     */\n    calcFadeDamage: function (fade: number, hits: number, resonance: number): DamageData {\n        if (hits < 0) hits = 0;\n        if (resonance < 1) resonance = 1;\n\n        const damage = DataDefaults.damageData();\n        damage.base = fade;\n        Helpers.calcTotal(damage, {min: 0});\n\n        damage.type.base = damage.type.value = FadeRules.calcFadeDamageType(hits, resonance);\n\n        return damage;\n    },\n\n    /**\n     * Calculate the damage type for fade damage according to threading hits according to SR5#251 section Fading\n     * @param hits Threading test hits\n     * @param resonance attribute rating\n     */\n    calcFadeDamageType: function(hits: number, resonance: number): DamageType {\n        if (hits < 0) hits = 0;\n        if (resonance < 0) resonance = 1;\n        return hits > resonance ? 'physical' : 'stun';\n    },\n\n    /**\n     * Modify fade damage after a fade resist test according to SR5#251 section Fading\n     */\n    modifyFadeDamage: function(fadeDamage: DamageData, hits: number) {\n        if (hits < 0) hits = 0;\n\n        fadeDamage = foundry.utils.duplicate(fadeDamage);\n\n        PartsList.AddUniquePart(fadeDamage.mod, 'SR6.Hits', -hits);\n        Helpers.calcTotal(fadeDamage, {min: 0});\n\n        return fadeDamage;\n    }\n}\n", "import {SuccessTest, SuccessTestData} from \"./SuccessTest\";\nimport {DataDefaults} from \"../data/DataDefaults\";\nimport {ComplexFormRules} from \"../rules/ComplexFormRules\";\nimport {PartsList} from \"../parts/PartsList\";\nimport {FadeRules} from \"../rules/FadeRules\";\nimport DamageData = Shadowrun.DamageData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nexport interface ComplexFormTestData extends SuccessTestData {\n    level: number\n    fade: number\n\n    fadeDamage: DamageData\n}\n\n/**\n * Handles threading complex forms as described on SR5#251.\n */\nexport class ComplexFormTest extends SuccessTest<ComplexFormTestData> {\n\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        // Restore previous values or set defaults.\n        data.level =  data.level || 0;\n        data.fade = data.face || 0;\n        data.fadeDamage = data.fadeDamage || DataDefaults.damageData();\n\n        return data;\n    }\n\n    override get _dialogTemplate()  {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/complexform-test-dialog.html';\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/complexform-test-message.html';\n    }\n\n    /**\n     * This test type can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            skill: 'software',\n            attribute: 'resonance'\n        };\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['complex_form'];\n    }\n\n    // TODO: Add missing modifiers (gitter) // SR5#251\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'wounds'];\n    }\n\n    override async prepareDocumentData() {\n        this.prepareInitialLevelValue();\n        await super.prepareDocumentData();\n    }\n\n    /**\n     * Set a level value based on the items history or viable suggestions.\n     */\n    prepareInitialLevelValue() {\n        if (!this.item) return;\n\n        const lastUsedLevel = this.item.getLastComplexFormLevel();\n        const suggestedLevel = ComplexFormRules.calculateMinimalLevel(this.item.getFade());\n        this.data.level = lastUsedLevel.value || suggestedLevel;\n    }\n\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareLevelValue();\n        this.prepareLimitValue();\n    }\n\n    /**\n     * Assert user input doesn't create unusable level values.\n     */\n    prepareLevelValue() {\n        this.data.level = ComplexFormRules.calculateLevel(this.data.level);\n    }\n\n    /**\n     * Derive limit value based on complex form rules.\n     */\n    prepareLimitValue() {\n        const level = Number(this.data.level);\n        this.data.limit.mod = PartsList.AddUniquePart(\n            this.data.limit.mod,\n            'SR6.Level',\n            ComplexFormRules.calculateLimit(level)\n        )\n    }\n\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n        this.calculateFadeValue();\n    }\n\n    calculateFadeValue() {\n        const level = Number(this.data.level);\n        const fade = Number(this.item?.getFade() || 0);\n        this.data.fade = ComplexFormRules.calculateFade(level, fade);\n    }\n\n    calculateFadeDamage() {\n        if (!this.actor) return DataDefaults.valueData();\n\n        const fade = Number(this.data.fade);\n        const resonance = this.actor.getAttribute('resonance').value;\n\n        this.data.fadeDamage = FadeRules.calcFadeDamage(fade, this.hits.value, resonance);\n    }\n\n    override async processResults() {\n        this.calculateFadeDamage();\n\n        await super.processResults();\n    }\n\n    override async afterTestComplete() {\n        await this.saveLastUsedLevel();\n\n        await super.afterTestComplete();\n    }\n\n    /**\n     * Allow the currently used level value for this complex form item to be reused next time.\n     */\n    async saveLastUsedLevel() {\n        if (!this.item) return;\n\n        await this.item.setLastComplexFormLevel({value: this.data.level});\n    }\n}\n", "import {SuccessTest} from \"./SuccessTest\";\nimport {PartsList} from \"../parts/PartsList\";\n\nexport class NaturalRecoveryStunTest extends SuccessTest {\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareThreshold();\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['recovery', 'recovery_stun']\n    }\n\n    /**\n     * A recovery test has its damage track as a threshold.\n     */\n    prepareThreshold() {\n        if (!this.actor) return;\n\n        const track = this.actor.getStunTrack();\n        const boxes = track?.value || 0;\n\n        const threshold = new PartsList(this.threshold.mod);\n        threshold.addUniquePart('SR6.StunTrack', boxes)\n    }\n\n    /**\n     * A recovery test will heal on each test iteration\n     */\n    override async processResults() {\n        await super.processResults();\n\n        // Don't bother healing if the actor can't.\n        if (!this.actor) return;\n        if (!this.actor.hasNaturalRecovery) return;\n\n        // Don't bother healing without hits.\n        if (this.hits.value === 0) return;\n\n        await this.actor.healStunDamage(this.hits.value);\n    }\n}\n", "import {SuccessTest} from \"./SuccessTest\";\nimport {PartsList} from \"../parts/PartsList\";\n\nexport class NaturalRecoveryPhysicalTest extends SuccessTest {\n    override async execute(): Promise<this> {\n        if (!this.actor) return this;\n        if (!this.actor.canRecoverPhysicalDamage) {\n            ui.notifications?.warn(game.i18n.localize('SR6.Warnings.CantRecoverPhysicalWithStunDamage'));\n            return this;\n        }\n\n        return super.execute();\n    }\n\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareThreshold();\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['recovery', 'recovery_physical']\n    }\n\n    /**\n     * A recovery test has its damage track as a threshold.\n     */\n    prepareThreshold() {\n        if (!this.actor) return;\n\n        const track = this.actor.getPhysicalTrack();\n        const boxes = track?.value || 0;\n\n        const threshold = new PartsList(this.threshold.mod);\n        threshold.addUniquePart('SR6.PhysicalTrack', boxes)\n    }\n\n    /**\n     * A recovery test will heal on each test iteration\n     */\n    override async processResults() {\n        await super.processResults();\n\n        // Don't bother healing if the actor can't.\n        if (!this.actor) return;\n        if (!this.actor.hasNaturalRecovery) return;\n\n        // Don't bother healing without hits.\n        if (this.hits.value === 0) return;\n\n        await this.actor.healPhysicalDamage(this.hits.value);\n    }\n}\n", "import { SuccessTest, SuccessTestData } from \"./SuccessTest\";\nimport { ComplexFormTest, ComplexFormTestData } from \"./ComplexFormTest\";\nimport { Helpers } from \"../helpers\";\nimport { FadeRules } from \"../rules/FadeRules\";\nimport DamageData = Shadowrun.DamageData;\nimport MinimalActionData = Shadowrun.MinimalActionData;\nimport ModifierTypes = Shadowrun.ModifierTypes;\nimport { Translation } from '../utils/strings';\nimport { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR6Item } from \"../item/SR6Item\";\nimport { DataDefaults } from \"../data/DataDefaults\";\n\nexport interface FadeTestData extends SuccessTestData {\n    incomingFade: DamageData\n    modifiedFade: DamageData\n\n    against: ComplexFormTestData\n}\n\nexport class FadeTest extends SuccessTest<FadeTestData> {\n    against: ComplexFormTest\n\n    override _prepareData(data, options): any {\n        data = super._prepareData(data, options);\n\n        // Is this test part of a followup test chain? complex form => fade\n        if (data.against) {\n            data.incomingFade = foundry.utils.duplicate(data.against.fadeDamage);\n            data.modifiedFade = foundry.utils.duplicate(data.incomingFade);\n        // This test is part of either a standalone test or created with its own data (i.e. edge reroll).\n        } else {\n            data.incomingFade = data.incomingFade ?? DataDefaults.damageData();\n            data.modifiedFade = foundry.utils.duplicate(data.incomingFade);\n        }\n\n        return data;\n    }\n\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/fade-test-dialog.html';\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/fade-test-message.html';\n    }\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            'attribute2': 'resonance'\n        };\n    }\n\n    static override async _getDocumentTestAction(item: SR6Item, actor: SR6Actor) {\n        const documentAction = await super._getDocumentTestAction(item, actor);\n\n        const character = actor.asCharacter();\n\n        if (!character || !actor.isEmerged) {\n            console.error(`Shadowrun 6e | A ${this.name} expected an emerged actor but got this`, actor);\n            return documentAction;\n        }\n\n        // Get technomancer fade attribute\n        const attribute = character.system.technomancer.attribute;\n        foundry.utils.mergeObject(documentAction, {attribute});\n\n        return documentAction;\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['fade'];\n    }\n\n    override get testModifiers(): ModifierTypes[] {\n        return ['global', 'fade']\n    }\n\n    override get canBeExtended() {\n        return false;\n    }\n\n    /**\n     * A drain test is successful whenever it has more hits than drain damage\n     */\n    override get success(): boolean {\n        return this.data.modifiedFade.value <= 0;\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.ResistedAllDamage';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.ResistedSomeDamage'\n    }\n\n    /**\n     * Re-calculate incomingFade in case of user input\n     */\n    override calculateBaseValues() {\n        super.calculateBaseValues();\n\n        // Avoid using a user defined value override.\n        this.data.modifiedFade.base = Helpers.calcTotal(this.data.incomingFade, { min: 0 });\n    }\n\n    override async processResults() {\n        // Don't use incomingDrain as it might have a user value override applied.\n        this.data.modifiedFade = FadeRules.modifyFadeDamage(this.data.modifiedFade, this.hits.value);\n\n        await super.processResults();\n    }\n}\n", "import { SuccessTest, SuccessTestData } from './SuccessTest';\nimport { RangedAttackTestData } from './RangedAttackTest';\nimport { SR6Item } from '../item/SR6Item';\nimport { WeaponRangeTestBehavior, WeaponRangeTestDataFragment } from '../rules/WeaponRangeRules';\n\nexport interface ThrownAttackTestData extends SuccessTestData, WeaponRangeTestDataFragment {\n}\n\n/**\n * Test implementation for attack tests using weapon of category thrown.\n */\nexport class ThrownAttackTest extends SuccessTest<ThrownAttackTestData> {\n    public override item: SR6Item;\n\n    override _prepareData(data, options): RangedAttackTestData {\n        data = super._prepareData(data, options);\n\n        WeaponRangeTestBehavior.prepareData(this, data);\n\n        return data;\n    }\n\n    override get canBeExtended() {\n        return false;\n    }\n\n    override get showSuccessLabel(): boolean {\n        return this.success;\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['attack', 'attack_thrown']\n    }\n\n    override get testModifiers(): Shadowrun.ModifierTypes[] {\n        return ['global', 'wounds', 'environmental'];\n    }\n\n    override async prepareDocumentData(){\n        WeaponRangeTestBehavior.prepareDocumentData(this, (weapon) => weapon.system.thrown.ranges);\n        await super.prepareDocumentData();\n    }\n\n    override get _dialogTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/thrown-attack-test-dialog.html';\n    }\n\n    /**\n     * Save selections made back to documents.\n     * @returns\n     */\n    override async saveUserSelectionAfterDialog() {\n        await WeaponRangeTestBehavior.saveUserSelectionAfterDialog(this);\n    }\n\n    /**\n     * Apply test selections made by user in dialog.\n     * @returns\n     */\n    override prepareBaseValues() {\n        WeaponRangeTestBehavior.prepareBaseValues(this);\n\n        super.prepareBaseValues();\n    }\n\n    /**\n     * Ranged attack tests allow for temporarily changing of modifiers without altering the document.\n     */\n    override prepareTestModifiers() {\n        WeaponRangeTestBehavior.prepareTestModifiers(this);\n    }\n\n\n    override async processResults() {\n        await super.processResults();\n\n        await WeaponRangeTestBehavior.processResults(this);\n    }\n}\n", "import {SuccessTest} from \"./SuccessTest\";\nexport class PilotVehicleTest extends SuccessTest {\n    /**\n     * Piloting a vehicle will alter the kind of test that needs to be made based on a few factors.\n     *\n     * @param item The testing item to cast\n     * @param actor The vehicle actor to be casting with\n     */\n    static override async _getDocumentTestAction(item, actor) {\n        // Both item and actor are needed to determine what to roll.\n        if (!item || !actor) return {};\n\n        const vehicleData = actor.asVehicle();\n        if (!vehicleData) {\n            await ui.notifications?.error(game.i18n.localize('SR6.Errors.TestExpectsVehicleOnly'))\n            return {};\n        }\n\n        switch (vehicleData.system.controlMode) {\n            case \"autopilot\": {\n                const attribute = 'pilot';\n                const skill = actor.getVehicleTypeSkillName();\n                const limit = {attribute: vehicleData.system.environment};\n\n                return {attribute, skill, limit};\n            }\n\n            default:\n                const skillId = actor.getVehicleTypeSkillName();\n                return actor.skillActionData(skillId);\n        }\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['rigging']\n    }\n}\n", "import {SuccessTest} from \"./SuccessTest\";\n\nexport class DronePerceptionTest extends SuccessTest {\n    static override async _getDocumentTestAction(item, actor) {\n        // Both item and actor are needed to determine what to roll.\n        if (!item || !actor) return {};\n\n        const vehicleData = actor.asVehicle();\n        if (!vehicleData) {\n            await ui.notifications?.error(game.i18n.localize('SR6.Errors.TestExpectsVehicleOnly'))\n            return {};\n        }\n\n        switch (vehicleData.system.controlMode) {\n            case \"autopilot\": {\n                const attribute = 'pilot';\n                const skill = 'perception';\n                const limit = {attribute: 'sensor'};\n\n                return {attribute, skill, limit};\n            }\n\n            default:\n                return actor.skillActionData('perception');\n        }\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['rigging'];\n    }\n}\n", "import {SuccessTest} from \"./SuccessTest\";\n\nexport class DroneInfiltrationTest extends SuccessTest {\n    static override async _getDocumentTestAction(item, actor) {\n        // Both item and actor are needed to determine what to roll.\n        if (!item || !actor) return {};\n\n        const vehicleData = actor.asVehicle();\n        if (!vehicleData) {\n            await ui.notifications?.error(game.i18n.localize('SR6.Errors.TestExpectsVehicleOnly'))\n            return {};\n        }\n\n        switch (vehicleData.system.controlMode) {\n            // See SR5#270 'Drone Infiltration'\n            case \"autopilot\": {\n                const attribute = 'pilot';\n                const skill = 'sneaking';\n                const limit = {attribute: 'handling'};\n\n                return {attribute, skill, limit};\n            }\n            case \"rigger\": {\n                const attribute = 'intuition';\n                const skill = 'sneaking';\n                const limit = 'handling';\n\n                return {attribute, skill, limit};\n            }\n\n            default:\n                return actor.skillActionData('perception');\n        }\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['rigging'];\n    }\n}\n", "import { CombatRules } from \"../rules/CombatRules\";\nimport { PhysicalDefenseTest, PhysicalDefenseTestData } from \"./PhysicalDefenseTest\";\nimport MinimalActionData = Shadowrun.MinimalActionData;\n\n\nexport class SuppressionDefenseTest extends PhysicalDefenseTest<PhysicalDefenseTestData> {\n\n    static override _getDefaultTestAction(): Partial<MinimalActionData> {\n        return {\n            'attribute': 'reaction',\n            'attribute2': 'edge'\n        };\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['defense_suppression'];\n    }\n\n    override async processFailure() {\n        this.data.modifiedDamage = CombatRules.modifyDamageAfterSuppressionHit(this.data.incomingDamage);\n    }\n}", "/**\n * Shadowrun 5 rules related to magic / spellcasting.\n */\nexport class SpellcastingRules {\n    /**\n     * Calculate spellcasting drain value without its damage type\n     *\n     * As defined in SR5#282 - Step 6 Resist Drain.\n     *\n     * @param force The force the spell is cast with.\n     * @param drainModifier The drain modifier defined within the spells action configuration.\n     * @param reckless Set this to true should the spell be cast recklessly as defined in SR5#281 Cast Spell.\n     */\n    static calculateDrain(force: number, drainModifier: number, reckless: boolean = false): number {\n        const recklessModifier = reckless ? this.recklessDrainModifier : 0;\n        const drain = force + drainModifier + recklessModifier;\n        return Math.max(this.minimalDrain, drain);\n    }\n\n    /**\n     * As defined in SR5#282 - Step 6 Resist Drain\n     */\n    static get minimalDrain(): number {\n        return 2;\n    }\n\n    /**\n     * As defined in SR5#281 - Step 4 Cast Spell.\n     *\n     * Reckless spellcasting will alter drain damage.\n     */\n    static get recklessDrainModifier(): number {\n        return 3;\n    }\n\n    /**\n     * Based on the minimal drain value use this as the minimal usable force value.\n     * @param drainModifier The drain modifier defined within the spells action configuration.\n     */\n    static calculateMinimalForce(drainModifier: number): number {\n        return Math.max(1, this.minimalDrain - drainModifier);\n    }\n\n    /**\n     * Calculate spell casting limit based on the force chosen.\n     *\n     * As defined in SR5#281 - Step 3 Choose Spell Force\n     * As defined in SR5#316-317 'Reagents'\n     *\n     * @param force The spell force chosen by test configuration.\n     * @param reagents The amount of reagents / drams used for the spell.\n     * @returns The limit value to be applied.\n     */\n    static calculateLimit(force: number, reagents: number=0): number {\n        return SpellcastingRules.limitIsReagentInsteadOfForce(reagents) ? \n            reagents : force;\n    }\n\n    /**\n     * As defined in SR5#316-317 'Reagents'\n     * @param reagents The amount of drams used from reagents\n     * @returns True if reagents should be used \n     */\n    static limitIsReagentInsteadOfForce(reagents: number=0): boolean {\n        return reagents > 0;\n    }\n}", "import { SR6 } from './../config';\nimport { DataDefaults } from \"../data/DataDefaults\";\nimport { SuccessTest, SuccessTestData } from \"./SuccessTest\";\nimport { PartsList } from '../parts/PartsList';\nimport { SpellcastingRules } from '../rules/SpellcastingRules';\nimport { ConjuringRules } from '../rules/ConjuringRules';\n\n\ninterface SummonSpiritTestData extends SuccessTestData {\n    spiritTypes: typeof SR6.spiritTypes\n    spiritTypeSelected: string\n\n    // Force value as described on SR5#300\n    force: number\n    // Drain value as described on SR5#300\n    drain: number\n    drainDamage: Shadowrun.DamageData\n\n    // Reagent value as described on SR5#317 'Summoning'\n    reagent: number\n\n    // Determine that summoning concluded and drain is ready to be cast.\n    drainReady: boolean\n\n    preparedSpiritUuid: string\n}\n\n/**\n * Summoning a spirit is described in SR5#300.\n *\n * NOTE: While we need spell casting data, we don't need general spell casting flow.\n *       This is due to spell casting operating on spell items, while summoning is a call_in_action item.\n *\n * Summoning uses the default Success Test, Opposed Test and Followup Flow.\n */\nexport class SummonSpiritTest extends SuccessTest<SummonSpiritTestData> {\n\n    override _prepareData(data: any, options: any) {\n        data = super._prepareData(data, options);\n\n        this._prepareSummoningData(data);\n\n        data.drain = data.drain || 0;\n        data.drainDamage = data.drainDamage || DataDefaults.damageData();\n\n        return data;\n    }\n\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/summonspirit-test-dialog.html';\n    }\n\n    override get testCategories(): Shadowrun.ActionCategories[] {\n        return ['summoning']\n    }\n\n    /**\n     * A summoning test can't be extended.\n     */\n    override get canBeExtended() {\n        return false;\n    }\n\n    /**\n     * Drain test is configured here but will be executed within the opposing tests context.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    /**\n     * Skill + Attribute [Limit] as defined in SR5#300 'Attempt summoning'\n     *\n     * Limit 'force' is a dynamic test value, so it's missing here as it can't be taken from actor values.\n     */\n    static override _getDefaultTestAction(): Partial<Shadowrun.MinimalActionData> {\n        return {\n            skill: 'summoning',\n            attribute: 'magic'\n        }\n    }\n\n    /**\n     * Summoning actions are magic actions and get their modifiers.\n     */\n    override get testModifiers(): Shadowrun.ModifierTypes[] {\n        const modifiers = super.testModifiers;\n        modifiers.push('background_count');\n        return modifiers;\n    }\n\n    /**\n     * Summoning uses Force as limit, which needs to be injected into the normal test flow.\n     */\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareLimitValue();\n    }\n\n    /**\n     * Validate user input during dialog or creation and inform user about invalid values.\n     */\n    override validateBaseValues() {\n        this.warnAboutInvalidForce();\n    }\n\n    /**\n     * Notify summoners about incomplete summoning. To avoid pre mature drain tests.\n     */\n    override async executeFollowUpTest() {\n        if (!this.data.drainReady) ui.notifications?.warn('SR6.Warnings.SummoningNotConcluded', {localize: true});\n        await super.executeFollowUpTest();\n    }\n\n    /**\n     * Don't abort execution as there might be some reason users would want to allow 'invalid' values.\n     */\n    warnAboutInvalidForce() {\n        const force = Number(this.data.force);\n        const magic = Number(this.actor?.getAttribute('magic')?.value ?? 0);\n        if (!ConjuringRules.validForce(force, magic)) {\n            ui.notifications?.warn('SR6.Warnings.InvalidSummoningForce', {localize: true});\n        }\n    }\n\n    /**\n     * Calculate limit based on force selected by user.\n     *\n     * According to SR5#300 'Summoning' and SR5#316 'Reagents'.\n     */\n    prepareLimitValue() {\n        const force = Number(this.data.force);\n        const reagent = Number(this.data.reagent);\n        const label = SpellcastingRules.limitIsReagentInsteadOfForce(reagent) ?\n            'SR6.Reagent' : 'SR6.Force';\n        const limit = SpellcastingRules.calculateLimit(force, reagent);\n\n        // Cleanup previous calculation and add new limit part.\n        // NOTE: Instead of removing all parts, be specific in case of future additions to limit parts elsewhere.\n        const limitParts = new PartsList(this.data.limit.mod);\n\n        limitParts.removePart('SR6.Force');\n        limitParts.removePart('SR6.Reagent');\n\n        limitParts.addUniquePart(label, limit);\n    }\n\n    /**\n     * TODO: Reduce all spirit types to those available to the Summoner according to tradition or validate against selection.\n     * @returns A subset of all spirit types\n     */\n    _prepareSpiritTypes() {\n        return SR6.spiritTypes;\n    }\n\n    /**\n     * Take data from summoning item for test execution.\n     * @param data Test data to be extended\n     */\n    _prepareSummoningData(data: SummonSpiritTestData) {\n        if (!this.item) return;\n        const summoning = this.item.asCallInAction;\n        if (!summoning || !this.item.isSummoning) return;\n\n        data.spiritTypes = this._prepareSpiritTypes();\n\n        // Lower from more to less explicit values being given.\n        // Don't let force go below one.\n        data.force = Math.max(data.force || summoning.system.spirit.force || 1, 1);\n        data.spiritTypeSelected = data.spiritTypeSelected || summoning.system.spirit.type;\n        data.preparedSpiritUuid = data.preparedSpiritUuid || summoning.system.spirit.uuid;\n        data.reagent = data.reagent || 0;\n    }\n\n    /**\n     * Derive the actual drain damage from spellcasting values.\n     *\n     * NOTE: This will be called by the opposing test via a follow up test action.\n     */\n    calcDrain(opposingHits: number) {\n        this.data.drainReady = true;\n        this.data.drain = ConjuringRules.summoningDrainValue(opposingHits);\n        this.data.drainDamage = this.calcDrainDamage(opposingHits);\n    }\n\n    calcDrainDamage(opposingHits: number): Shadowrun.DamageData {\n        if (!this.actor) return DataDefaults.damageData();\n\n        const magic = this.actor.getAttribute('magic').value;\n        const force = this.data.force;\n\n        return ConjuringRules.calcDrainDamage(opposingHits, force, magic);\n    }\n\n    /**\n     * Indicate the use of a prepared actor.\n     */\n    get preparedActorUsed(): boolean {\n        return this.data.preparedSpiritUuid !== '';\n    }\n}\n", "import { rootCertificates } from 'tls';\nimport { SR6Roll } from '../module/rolls/SR6Roll';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\n\n/**\n * Testing of the SR6Roll helper for Shadowrun style pool rolling.\n *\n * TODO: Inject a mock dice engine to test the dice rolling.\n *\n * @param quench\n */\nexport const shadowrunRolling = (quench: QuenchBatchContext) => {\n    const {describe, it, assert, before, after, expect} = quench;\n\n    describe('SR5Roll', () => {\n        it('Amount of dice to bethrown in shadowrun style pool, excluding explosions', async () => {\n            const roll = new SR6Roll('100d6');\n            await roll.evaluate({async: true});\n\n            assert.equal(roll.pool, 100);\n            assert.equal(roll.poolThrown, 100);\n        });\n\n        it('Amount of dice thrown in shadowrun style pool, including explosions', async () => {\n            const roll = new SR6Roll('100d6x6');\n            await roll.evaluate({async: true});\n\n            assert.equal(roll.pool, 100);\n            // More often than not, this should result in at least one dice explosion... :-)\n            expect(roll.poolThrown).to.be.greaterThan(100);\n        });\n    });\n};\n", "export class SR6TestingDocuments<DocumentType> {\n        documentClass: DocumentType;\n        documents: foundry.abstract.Document<any>[] = [];\n\n        constructor(documentClass) {\n            this.documentClass = documentClass;\n        }\n\n        async create(data): Promise<DocumentType> {\n            // @ts-expect-error\n            const document = await this.documentClass.create({name: `#QUENCH_TEST_DOCUMENT_SHOULD_HAVE_BEEN_DELETED`, ...data, ...{folder: this.folder}});\n            this.documents.push(document);\n            return document;\n        }\n\n        // Register document created outside SR6TestingDocuments to be torn down at the end of testing\n        register(document: foundry.abstract.Document<any>): void {\n          this.documents.push(document);\n        }\n\n        async teardown() {\n            this.documents.forEach(document => document.delete());\n        }\n    }\n", "import { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { SR6Item } from '../module/item/SR6Item';\n\n/**\n * Unit tests around rules for ranged weapons.\n *\n * Recoil, firemode and so forth.\n * @param context\n */\nexport const shadowrunSR5RangedWeaponRules = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    const getWeaponWithEquippedAmmo = async (weaponAmmo: number, weaponAmmoMax: number, ammoQuantity: number) => {\n        const item = await testItem.create({type: 'weapon', system: {category: 'ranged', ammo: {current: {value: weaponAmmo, max: weaponAmmoMax}}}}) as SR6Item;\n        //@ts-expect-error\n        const ammoItem = new SR6Item({type: 'ammo', name: 'ammo', system: {technology: {quantity: ammoQuantity, equipped: true}}}, {parent: item});\n        await item.createNestedItem(ammoItem.toObject());\n\n        // NOTE: I don't know why ammo is not equipped when created as such... this can be removed, if that is fixed.\n        await item.equipAmmo(item.items[0].id);\n\n        return item;\n    };\n\n    describe('Handle recoil, recoil compensation and recoil modifier', () => {\n        it('Combine actor and item recoil compensation', async () => {\n            // const actor = await testActor.create({type: 'character'});\n            // const item = await testItem.create({type: 'weapon', system: {category: 'ranged'}});\n            // const modification = new SR6Item({name: 'Mod', type: 'modification', system: {type: 'weapon', rc: 2}}, {parent: item});\n            // //@ts-expect-error TODO: foundry-vtt-types v10\n            // await item.createNestedItem(modification._source);\n\n            // const character = actor.asCharacter() as Shadowrun.CharacterActorData;\n            // const actorRc = character.system.values.recoil_compensation.value;\n            // const itemRc = item.system.range?.rc.value;\n\n            // assert.strictEqual(actorRc, 2);\n            // assert.strictEqual(itemRc, 2);\n        });\n\n        it('Reload weapon causes reduction in available clips', async () => {\n            const item = await testItem.create({type: 'weapon', system: {category: 'ranged', ammo: {current: {value: 0, max: 30}, spare_clips: {value: 1, max: 1}}}}) as SR6Item;\n            assert.strictEqual(item.system.ammo?.spare_clips.value, 1);\n            await item.reloadAmmo(true);\n            assert.strictEqual(item.system.ammo?.spare_clips.value, 0);\n        });\n\n        it('Reloads weapon fully when no ammo is used', async () => {\n            const item = await testItem.create({type: 'weapon', system: {category: 'ranged', ammo: {current: {value: 0, max: 30}}}}) as SR6Item;\n            assert.strictEqual(item.system.ammo?.current.value, 0);\n            await item.reloadAmmo(true);\n            assert.strictEqual(item.system.ammo?.current.value, item.system.ammo?.current.max);\n        });\n\n        it('Reloads weapon fully when ammo is equipped and reduced ammo', async () => {\n            // Set current bullets to partial value.\n            const item = await getWeaponWithEquippedAmmo(15, 30, 30);\n\n            const ammo = item.getEquippedAmmo();\n            assert.strictEqual(item.system.ammo?.current.value, 15);\n            assert.strictEqual(ammo.system.technology?.quantity, 30);\n            await item.reloadAmmo(true);\n            assert.strictEqual(item.system.ammo?.current.value, item.system.ammo?.current.max);\n            assert.strictEqual(ammo.system.technology?.quantity, 15);\n        });\n\n        it('Does not reload when equipped ammo has no bullets left', async () => {\n            // Set current bullets to partial value.\n            const item = await getWeaponWithEquippedAmmo(15, 30, 0);\n\n            const ammo = item.getEquippedAmmo();\n            assert.strictEqual(item.system.ammo?.current.value, 15);\n            assert.strictEqual(ammo.system.technology?.quantity, 0);\n            await item.reloadAmmo(true);\n            assert.strictEqual(item.system.ammo?.current.value, 15);\n            assert.strictEqual(ammo.system.technology?.quantity, 0);\n        });\n\n        it('Does partially reload when equipped ammo has some bullets left', async () => {\n            // Set current bullets to partial value.\n            const item = await getWeaponWithEquippedAmmo(15, 30, 10);\n\n            const ammo = item.getEquippedAmmo();\n            assert.strictEqual(item.system.ammo?.current.value, 15);\n            assert.strictEqual(ammo.system.technology?.quantity, 10);\n            await item.reloadAmmo(true);\n            assert.strictEqual(item.system.ammo?.current.value, 25);\n            assert.strictEqual(ammo.system.technology?.quantity, 0);\n        });\n    });\n}\n", "import { FireModeRules } from '../module/rules/FireModeRules';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { SR6 } from '../module/config';\nimport { SR6TestingDocuments } from './utils';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6Item } from '../module/item/SR6Item';\nimport { DataDefaults } from '../module/data/DataDefaults';\nimport { CombatRules } from '../module/rules/CombatRules';\nimport DamageType = Shadowrun.DamageType;\nimport DamageElement = Shadowrun.DamageElement;\nimport DamageData = Shadowrun.DamageData;\n\nexport const shadowrunAttackTesting = (context: QuenchBatchContext) => {\n    const {describe, it,assert, before, after} = context;\n\n    before(async () => {})\n    after(async () => {})\n\n    describe('Fire Mode Rules', () => {\n        it('apply defense modifier per fire mode', () => {\n            // Check no modifier\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\n                label: \"SR6.Weapon.Mode.SingleShot\",\n                value: 1,\n                recoil: false,\n                defense: 0,\n                suppression: false,\n                action: 'simple',\n                mode: 'single_shot'\n            }), 0);\n            // Check positive modifiers\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\n                label: \"SR6.Weapon.Mode.SingleShot\",\n                value: 1,\n                recoil: false,\n                defense: 3,\n                suppression: false,\n                action: 'simple',\n                mode: 'single_shot'\n            }), 3);\n            // Check correct negative modifiers\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\n                label: \"SR6.Weapon.Mode.SingleShot\",\n                value: 1,\n                recoil: false,\n                defense: -3,\n                suppression: false,\n                action: 'simple',\n                mode: 'single_shot'\n            }), -3);\n        })\n\n        it('reduce defense modifier per firemode by ammo available', () => {\n            // Check with enough ammo\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\n                label: \"SR6.Weapon.Mode.SingleShot\",\n                value: 3,\n                recoil: false,\n                defense: -3,\n                suppression: false,\n                action: 'simple',\n                mode: 'single_shot'\n            }, 3), -3);\n\n            // Check with to little ammo\n            assert.strictEqual(FireModeRules.fireModeDefenseModifier({\n                label: \"SR6.Weapon.Mode.SingleShot\",\n                value: 6,\n                recoil: false,\n                defense: -6,\n                suppression: false,\n                action: 'simple',\n                mode: 'single_shot'\n            }, 3), -3);\n        })\n\n        it('apply attack modifier per fire mode', () => {\n            // A mode without recoil, shouldn't cause recoil modifiers.\n            assert.strictEqual(FireModeRules.recoilModifierAfterAttack({\n                label: \"SR6.Weapon.Mode.BurstFireLong\",\n                value: 6,\n                recoil: false,\n                defense: -5,\n                suppression: false,\n                action: 'complex',\n                mode: 'burst_fire',\n            }, 0), 0);\n\n            // No compensation should cause full recoil modifier\n            assert.strictEqual(FireModeRules.recoilModifierAfterAttack({\n                label: \"SR6.Weapon.Mode.BurstFireLong\",\n                value: 6,\n                recoil: true,\n                defense: -5,\n                suppression: false,\n                action: 'complex',\n                mode: 'burst_fire',\n            }, 0), -6);\n\n            // recoil modifier should be reduced by compensation,\n            // compensation shouldbe reduced\n            assert.strictEqual(FireModeRules.recoilModifierAfterAttack({\n                label: \"SR6.Weapon.Mode.BurstFireLong\",\n                value: 6,\n                recoil: true,\n                defense: -5,\n                suppression: false,\n                action: 'complex',\n                mode: 'burst_fire',\n            }, 3), -3);\n\n            // handle faulty value input gracefully, don't fire. Keep compensation.\n            assert.strictEqual(FireModeRules.recoilModifierAfterAttack({\n                label: \"SR6.Weapon.Mode.BurstFireLong\",\n                value: -6,\n                recoil: true,\n                defense: -5,\n                suppression: false,\n                action: 'complex',\n                mode: 'burst_fire',\n            }, 3), 0);\n        })\n\n        it('reduce the available fire modes', () => {\n            assert.lengthOf(FireModeRules.availableFireModes({\n                single_shot: true,\n                semi_auto: true,\n                burst_fire: true,\n                full_auto: true\n            }), SR6.fireModes.length);\n\n            assert.lengthOf(FireModeRules.availableFireModes({\n                single_shot: true,\n                semi_auto: false,\n                burst_fire: false,\n                full_auto: false\n            }), 1); // per default rules only one single shot mode\n\n            assert.lengthOf(FireModeRules.availableFireModes({\n                single_shot: false,\n                semi_auto: true,\n                burst_fire: false,\n                full_auto: false\n            }), 2); // per default rules only one single shot mode\n\n            assert.lengthOf(FireModeRules.availableFireModes({\n                single_shot: false,\n                semi_auto: false,\n                burst_fire: true,\n                full_auto: false\n            }), 2); // per default rules only one single shot mode\n\n            assert.lengthOf(FireModeRules.availableFireModes({\n                single_shot: false,\n                semi_auto: false,\n                burst_fire: false,\n                full_auto: true\n            }), 3); // per default rules only one single shot mode\n        })\n    })\n\n    describe('CombatRules', () => {\n        let testActor;\n        let testItem;\n        let testScene;\n\n        before(async () => {\n            testActor = new SR6TestingDocuments(SR6Actor);\n            testItem = new SR6TestingDocuments(SR6Item);\n            testScene = new SR6TestingDocuments(Scene);\n        });\n\n        after(async () => {\n            await testActor.teardown();\n            await testItem.teardown();\n            await testScene.teardown();\n        })\n\n        const getCharacterWithArmor = async (armorValue: number, {\n            hardened = false\n        }: {\n            hardened?: boolean\n        } = {}): Promise<SR6Actor> => {\n            const characterActor = await testActor.create({\n                type: 'character',\n            }) as SR6Actor;\n            const armor = await testItem.create({\n                type: 'armor',\n                name: 'Test Armor',\n                system: {\n                    armor: {\n                        base: armorValue,\n                        value: armorValue,\n                        hardened,\n                        mod: null, // Without this, the system defaults to an empty array for mod and thinks this is an armor accessory, therefore not applying hardened armor rules\n                    },\n                    technology: DataDefaults.technologyData({\n                        equipped: true,\n                    })\n                }\n            });\n            await characterActor.createEmbeddedDocuments('Item',  [armor]);\n            return characterActor;\n        }\n\n        const getVehicleWithArmor = async (armorValue: number): Promise<SR6Actor> => {\n            const armor = DataDefaults.actorArmor({\n                value: armorValue,\n                base: armorValue,\n            });\n            return await testActor.create({\n                type: 'vehicle', system: {\n                    armor,\n                },\n            }) as SR6Actor;\n        }\n\n        const getDamage = (damageValue: number, {\n            type = \"physical\",\n            ap = 0,\n            element,\n        }: {\n            type?: DamageType,\n            ap?: number,\n            element?: DamageElement\n        } = {}): DamageData => {\n            return DataDefaults.damageData({\n                type: {\n                    value: type,\n                    base: type,\n                },\n                value: damageValue,\n                base: damageValue,\n                ...(ap && {\n                    ap: {\n                        base: ap,\n                        value: ap,\n                    }\n                }),\n                ...(element && {\n                    element: {\n                        base: element,\n                        value: element,\n                    }\n                }),\n            });\n        }\n\n        describe(\"isBlockedByVehicleArmor\", () => {\n            it('blocks damage due to vehicle armor', async () => {\n                const vehicle = await getVehicleWithArmor(50);\n                const damage = getDamage(4);\n\n                const result:boolean = CombatRules.isBlockedByVehicleArmor(damage, 5, 2, vehicle);\n\n                assert.strictEqual(result, true);\n            });\n\n            it(\"doesn't block damage for non-vehicle actors\", async () => {\n                const vehicleActor = await getVehicleWithArmor(50);\n                const characterActor = await getCharacterWithArmor(50);\n                const damage = getDamage(4);\n\n                const characterResult = CombatRules.isBlockedByVehicleArmor(damage, 5, 2, characterActor);\n                const vehicleResult = CombatRules.isBlockedByVehicleArmor(damage, 5, 2, vehicleActor);\n\n                // @ts-ignore\n                assert.isFalse(characterResult);\n                // @ts-ignore\n                assert.isTrue(vehicleResult);\n            });\n\n            it(\"takes net hits into account\", async () => {\n                const vehicle = await getVehicleWithArmor(6);\n                const damage = getDamage(4);\n\n                const blockedResult = CombatRules.isBlockedByVehicleArmor(damage, 5, 4, vehicle);\n                const notBlockedResult = CombatRules.isBlockedByVehicleArmor(damage, 5, 3, vehicle);\n\n                // @ts-ignore\n                assert.isTrue(blockedResult);\n                // @ts-ignore\n                assert.isFalse(notBlockedResult);\n            });\n\n            it(\"takes AP into account\", async () => {\n                const vehicle = await getVehicleWithArmor(6);\n                // This is \"high\" AP but a negative number, just go with it\n                const highApDamage = getDamage(4, { ap: -5 });\n                const lowApDamage = getDamage(4, { ap: 5 });\n\n                const blockedResult = CombatRules.isBlockedByVehicleArmor(lowApDamage, 5, 3, vehicle);\n                const notBlockedResult = CombatRules.isBlockedByVehicleArmor(highApDamage, 5, 3, vehicle);\n\n                // @ts-ignore\n                assert.isTrue(blockedResult);\n                // @ts-ignore\n                assert.isFalse(notBlockedResult);\n            });\n        });\n\n        describe(\"isBlockedByHardenedArmor\", () => {\n            it('blocks damage due to hardened armor', async () => {\n                const vehicle = await getCharacterWithArmor(50, { hardened: true });\n                const damage = getDamage(4);\n\n                const result = CombatRules.isBlockedByHardenedArmor(damage, 5, 2, vehicle);\n\n                assert.strictEqual(result, true);\n            });\n\n            it(\"doesn't block damage for non-vehicle actors\", async () => {\n                const hardenedArmorActor = await getCharacterWithArmor(50, { hardened: true });\n                const normalArmorActor = await getCharacterWithArmor(50);\n                const damage = getDamage(4);\n\n                const characterResult = CombatRules.isBlockedByHardenedArmor(damage, 5, 2, normalArmorActor);\n                const vehicleResult = CombatRules.isBlockedByHardenedArmor(damage, 5, 2, hardenedArmorActor);\n\n                assert.strictEqual(characterResult, false);\n                assert.strictEqual(vehicleResult, true);\n            });\n\n            it(\"takes net hits into account\", async () => {\n                const actor = await getCharacterWithArmor(6, { hardened: true });\n                const damage = getDamage(4);\n\n                const blockedResult = CombatRules.isBlockedByHardenedArmor(damage, 5, 4, actor);\n                const notBlockedResult = CombatRules.isBlockedByHardenedArmor(damage, 5, 3, actor);\n\n                assert.strictEqual(blockedResult, true);\n\n                assert.strictEqual(notBlockedResult, false);\n            });\n\n            it(\"takes AP into account\", async () => {\n                const actor = await getCharacterWithArmor(6, { hardened: true });\n                // This is \"high\" AP but a negative number, just go with it\n                const highApDamage = getDamage(4, { ap: -5 });\n                const lowApDamage = getDamage(4, { ap: 5 });\n\n                const blockedResult = CombatRules.isBlockedByHardenedArmor(lowApDamage, 5, 3, actor);\n                const notBlockedResult = CombatRules.isBlockedByHardenedArmor(highApDamage, 5, 3, actor);\n\n                assert.isTrue(blockedResult);\n                assert.isFalse(notBlockedResult);\n            });\n        });\n\n        describe(\"doesNoPhysicalDamageToVehicle\", () => {\n            it(\"blocks non-physical damage to vehicle\", async () => {\n                const vehicle = await testActor.create({ type: 'vehicle' }) as SR6Actor;\n                const damage = getDamage(4, { type: 'stun' });\n\n                const result = CombatRules.doesNoPhysicalDamageToVehicle(damage, vehicle);\n\n                assert.isTrue(result);\n            });\n\n            it(\"does not block physical damage to vehicle\", async () => {\n                const vehicle = await testActor.create({ type: 'vehicle' }) as SR6Actor;\n                const damage = getDamage(4, { type: 'physical' });\n\n                const result = CombatRules.doesNoPhysicalDamageToVehicle(damage, vehicle);\n\n                assert.isFalse(result);\n            });\n\n            it(\"does not block electric stun damage to vehicle\", async () => {\n                const vehicle = await testActor.create({ type: 'vehicle' }) as SR6Actor;\n                const damage = getDamage(4, { type: 'stun', element: 'electricity' });\n\n                const result = CombatRules.doesNoPhysicalDamageToVehicle(damage, vehicle);\n\n                assert.isFalse(result);\n            });\n        });\n    });\n};\n", "import { BackgroundCountModifier } from './../module/rules/modifiers/BackgroundCountModifier';\nimport { NoiseModifier } from './../module/rules/modifiers/NoiseModifier';\nimport { EnvironmentalModifier } from './../module/rules/modifiers/EnvironmentalModifier';\n\nimport {DocumentSituationModifiers} from \"../module/rules/DocumentSituationModifiers\";\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { SituationModifier } from \"../module/rules/modifiers/SituationModifier\";\nimport { SR6TestingDocuments } from './utils';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6Item } from '../module/item/SR6Item';\n\nexport const shadowrunRulesModifiers = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    let testActor;\n    let testItem;\n    let testScene;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n        testScene = new SR6TestingDocuments(Scene);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n        await testScene.teardown();\n    })\n\n    const defaultSourceModifiers = {\n        environmental: {\n            active: {}\n        },\n        noise: {\n            active: {}\n        },\n        background_count: {\n            active: {}\n        }\n    };\n\n    describe('SR5 Modifiers', () => {\n\n        describe('class SituationalModifiers', () => {\n            it('create valid applied modifiers without any input', () => {\n                const sitMod = new SituationModifier();\n\n                assert.deepEqual(sitMod.source, {active: {}});\n                assert.equal(sitMod.hasActive, false);\n                assert.equal(sitMod.total, 0);\n            });\n\n            it('determine if documents have been added to it', () => {\n                assert.equal(new SituationModifier().hasDocuments, false);\n                assert.equal(new SituationModifier(undefined, new DocumentSituationModifiers()).hasDocuments, true);\n            });\n\n            it('determine it has active modifiers', () => {\n                assert.equal(new SituationModifier({active: {a: 0}}).hasActive, true);\n            })\n\n            it('apply source active values to a sum of all active modifiers', () => {\n                const sitMod = new SituationModifier({\n                    active: {\n                        a: -1,\n                        b: -3\n                    }\n                });\n\n                // Result of -1 + -3\n                assert.equal(sitMod.total, -4);\n            });\n\n            it('apply source fixed value instead of the sum of all active modifiers', () => {\n                const sitMod = new SituationModifier({\n                    active: {\n                        a: -1,\n                        b: -3\n                    },\n                    fixed: 0\n                });\n\n                // Result of -1 + -3\n                assert.equal(sitMod.total, 0);\n                assert.equal(sitMod._calcActiveTotal(), -4);\n            });\n\n            it('correctly report the state of active modifier selections', () => {\n                const sitMod = new SituationModifier({\n                    active: {\n                        a: -1\n                    }\n                });\n\n                assert.equal(sitMod.isActive('a'), true);\n                assert.equal(sitMod.isActive('b'), false);\n                assert.equal(sitMod.isActive(''), false);\n            })\n\n            it('correctly active a modifier selection', () => {\n                const sitMod = new SituationModifier();\n                assert.equal(sitMod.source.active['a'], undefined);\n\n                sitMod.setActive('a', 1);\n                assert.equal(sitMod.source.active['a'], 1);\n            })\n\n            it('correctly deactivate a modifier selection', () => {\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}});\n                assert.equal(sitMod.isActive('a'), true)\n\n                sitMod.setInactive('a');\n                assert.equal(sitMod.isActive('a'), false); // Make sure it's not active anymore.\n                assert.equal(sitMod.isActive('b'), true); // Make sure only a is touched.\n            });\n\n            it('correctly determine if a fixed modifier is set', () => {\n                const sitMod = new SituationModifier();\n                sitMod.apply({source: {fixed: 0, active: {}}});\n                assert.isTrue(sitMod.hasFixed);\n\n                sitMod.apply({source: {active: {}}});\n                assert.isFalse(sitMod.hasFixed);\n            });\n\n            it('correctly determine if an active modifier selection matches', () => {\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}});\n\n                sitMod.apply();\n\n                assert.equal(sitMod.isMatching('a', 1), true); // matching\n                assert.equal(sitMod.isMatching('b', 1), false); // matching wrong value\n                assert.equal(sitMod.isMatching('c', 0), false); // matching wrong active\n            });\n\n            it('correctly clear an active set of selections', () => {\n                const sitMod = new SituationModifier({active: {a: 1, b: 2}, fixed: 0});\n                assert.equal(sitMod.hasActive, true);\n\n                sitMod.clear();\n                assert.equal(sitMod.hasActive, false);\n            });\n\n            it('use a fixed user selection instead of summing up', () => {\n                const sitMod = new SituationModifier({active: {value: 3, a: 1, b: 3}});\n                sitMod.apply();\n\n                assert.equal(sitMod.total, 3);\n            });\n\n            it('use a fixed value before a fixed user selection', () => {\n                const sitMod = new SituationModifier({active: {value: 3, a: 1, b: 3}, fixed: -3});\n                assert.equal(sitMod.total, -3);\n            });\n\n            it('should only apply applicable selections', () => {\n                const sitMod = new SituationModifier({active: {a: 1, b: 3, c: 4}});\n                sitMod.apply({applicable: ['a', 'c']});\n\n                assert.equal(sitMod.total, 5);\n            });\n        });\n\n        describe('class EnvironmentalModifier', () => {\n            it('apply higher level modifier for two same level selections', () => {\n                const envMod = new EnvironmentalModifier();\n                envMod.apply({source: {active: {light: 0, wind: 0}}});\n                assert.equal(envMod.total, 0);\n\n                envMod.apply({source: {active: {light: -1, wind: -1}}});\n                assert.equal(envMod.total, -3);\n\n                envMod.apply({source: {active: {light: -3, wind: -3}}});\n                assert.equal(envMod.total, -6);\n\n                envMod.apply({source: {active: {light: -6, wind: -6}}});\n                assert.equal(envMod.total, -10);\n            });\n\n            it('apply fixed modifier values instead of level selections', () => {\n                const envMod = new EnvironmentalModifier();\n                envMod.apply({source: {active: {light: 0, wind: 0, value: -3}}});\n                assert.equal(envMod.total, -3);\n\n                envMod.apply({source: {active: {light: -1, wind: -1, value: -1}}});\n                assert.equal(envMod.total, -1);\n            });\n        });\n\n        describe('class DocumentSituationModifiers', () => {\n            it('create default modifier values', () => {\n                const modifiers = DocumentSituationModifiers._defaultModifiers;\n\n                assert.deepEqual(modifiers, defaultSourceModifiers)\n            })\n\n            it('use default modifiers for faulty constructor params', () => {\n                //@ts-expect-error\n                assert.deepEqual(new DocumentSituationModifiers({}).source, defaultSourceModifiers);\n                assert.deepEqual(new DocumentSituationModifiers(undefined).source, defaultSourceModifiers);\n                //@ts-expect-error\n                assert.deepEqual(new DocumentSituationModifiers(null).source, defaultSourceModifiers);\n                //@ts-expect-error\n                assert.deepEqual(new DocumentSituationModifiers(0).source, defaultSourceModifiers);\n                //@ts-expect-error\n                assert.deepEqual(new DocumentSituationModifiers(1).source, defaultSourceModifiers);\n                assert.deepEqual(new DocumentSituationModifiers().source, defaultSourceModifiers);\n            })\n\n            it('Store data depending on document type', async () => {\n                const actor = await testActor.create({type: 'character'}) as SR6Actor;\n                let modifiers = actor.getSituationModifiers();\n\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\n\n                modifiers.source.noise.fixed = 1;\n                await modifiers.updateDocument();\n\n                assert.equal(modifiers.source.noise.fixed, 1);\n\n                const scene = await testScene.create() as Scene;\n                modifiers = DocumentSituationModifiers.fromDocument(scene);\n\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\n\n                modifiers.source.noise.fixed = 1;\n                await modifiers.updateDocument();\n\n                assert.equal(modifiers.source.noise.fixed, 1);\n            })\n\n            it('clear documents data to defaults', async () => {\n\n                const actor = await testActor.create({\n                    type: 'character'}) as SR6Actor;\n\n                const modifiers = actor.getSituationModifiers();\n\n                modifiers.source.noise.fixed = 1;\n                await modifiers.updateDocument();\n                assert.notDeepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\n\n                await modifiers.clearAll();\n                assert.deepEqual(modifiers.source, DocumentSituationModifiers._defaultModifiers);\n            });\n        })\n    })\n}\n\n", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\nimport {SR6Item} from \"../module/item/SR6Item\";\nimport {SR6TestingDocuments} from \"./utils\";\n\nexport const shadowrunSR5Item = (context: QuenchBatchContext) => {\n    /**\n     * Setup handling for all items within this test.\n     */\n        const {describe, it, assert, before, after} = context;\n    let testItem;\n\n    before(async () => {\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testItem.teardown();\n    })\n\n    describe('SR5Items', () => {\n        it('create a naked item of any type', async () => {\n            const item = await testItem.create({type: 'action'});\n\n            // Check basic foundry data integrity\n            assert.notStrictEqual(item.id, '');\n            assert.notStrictEqual(item.id, undefined);\n            assert.notStrictEqual(item.id, null);\n\n            // Check foundry item collection integrity\n            const itemFromCollection = game.items?.get(item.id);\n            assert.notStrictEqual(itemFromCollection, null);\n            assert.strictEqual(item.id, itemFromCollection?.id);\n        });\n\n        it('update an item of any type', async () => {\n            const item = await testItem.create({type: 'action'});\n\n            assert.notProperty(item.system, 'test');\n            await item.update({'system.test': true});\n\n            assert.property(item.system, 'test');\n            assert.propertyVal(item.system, 'test', true);\n        });\n\n        it('embedd a ammo into a weapon and not the global item collection', async () => {\n            const weapon = await testItem.create({type: 'weapon'}) as SR6Item;\n            const ammo = await testItem.create({type: 'ammo'}) as SR6Item;\n\n            await weapon.createNestedItem(ammo.toObject());\n\n            const embeddedItemDatas = weapon.getNestedItems();\n            assert.isNotEmpty(embeddedItemDatas);\n            assert.lengthOf(embeddedItemDatas, 1);\n\n            const embeddedAmmoData = embeddedItemDatas[0];\n            assert.strictEqual(embeddedAmmoData.type, ammo.type);\n\n            // An embedded item should NOT appear in the items collection.\n            const embeddedAmmoInCollection = game.items?.get(embeddedAmmoData._id);\n            assert.strictEqual(embeddedAmmoInCollection, undefined);\n        });\n\n        it('update a nested ammunition item', async () => {\n            const weapon = await testItem.create({type: 'weapon'}) as SR6Item;\n            const ammo = await testItem.create({type: 'ammo'}) as SR6Item;\n\n            // Embed the item and get\n            await weapon.createNestedItem(ammo.toObject());\n            const embeddedItemDatas = weapon.getNestedItems();\n            assert.lengthOf(embeddedItemDatas, 1);\n            const embeddedAmmoData = embeddedItemDatas[0];\n            const embeddedAmmo = weapon.getOwnedItem(embeddedAmmoData._id);\n\n            assert.notStrictEqual(embeddedAmmo, undefined);\n            assert.instanceOf(embeddedAmmo, SR6Item);\n            if (!embeddedAmmo) return; //type script gate...\n\n            // Set an unexsting random property and check for it to be set.\n            assert.notProperty(embeddedAmmo.system, 'test');\n            await embeddedAmmo.update({'system.test': true});\n            assert.property(embeddedAmmo.system, 'test');\n            assert.propertyVal(embeddedAmmo.system, 'test', true);\n        });\n\n        describe('Testing related data injection', () => {\n            it('Correctly add default test to spells', async () => {\n                // const item = await testItem.create({type: 'spell'});\n\n                // assert.equal(item.system.action.test, 'SpellCastingTest');\n                // assert.equal(item.system.action.followed.test, 'DrainTest');\n                // assert.equal(item.system.action.opposed.test, '');\n            });\n\n            it('Correctly add defense tests to spells', async () => {\n                const item = await testItem.create({type: 'spell'});\n\n                await item.update({'system.category': 'combat'});\n                assert.equal(item.system.action.test, 'SpellCastingTest');\n                assert.equal(item.system.action.followed.test, 'DrainTest');\n                assert.equal(item.system.action.opposed.test, 'CombatSpellDefenseTest');\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\n\n                await item.update({'system.category': 'detection'});\n                assert.equal(item.system.action.test, 'SpellCastingTest');\n                assert.equal(item.system.action.followed.test, 'DrainTest');\n                assert.equal(item.system.action.opposed.test, 'OpposedTest');\n                assert.equal(item.system.action.opposed.resist.test, '');\n            });\n            it('Correctly add default tests to melee weapons', async () => {\n                const item = await testItem.create({type: 'weapon'});\n\n                await item.update({'system.category': 'melee'});\n                assert.equal(item.system.action.test, 'MeleeAttackTest');\n                assert.equal(item.system.action.followed.test, '');\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\n            });\n            it('Correctly add default tests to range weapons', async () => {\n                const item = await testItem.create({type: 'weapon'});\n\n                await item.update({'system.category': 'range'});\n                assert.equal(item.system.action.test, 'RangedAttackTest');\n                assert.equal(item.system.action.followed.test, '');\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\n            });\n            it('Correctly add defense tests to complex forms', async () => {\n                const item = await testItem.create({type: 'complex_form'});\n\n                assert.equal(item.system.action.test, 'ComplexFormTest');\n                assert.equal(item.system.action.followed.test, 'FadeTest');\n                assert.equal(item.system.action.opposed.test, 'OpposedTest');\n                assert.equal(item.system.action.opposed.resist.test, '');\n            });\n            it('Correctly alter default test for weapon category changes', async () => {\n                const item = await testItem.create({type: 'weapon'});\n\n                await item.update({'system.category': 'range'});\n                assert.equal(item.system.action.test, 'RangedAttackTest');\n                assert.equal(item.system.action.followed.test, '');\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\n\n                await item.update({'system.category': ''});\n                assert.equal(item.system.action.test, '');\n                assert.equal(item.system.action.followed.test, '');\n                assert.equal(item.system.action.opposed.test, 'PhysicalDefenseTest');\n                assert.equal(item.system.action.opposed.resist.test, 'PhysicalResistTest');\n            });\n            it('Correctly stop injection when mergeOptions recursive or diff are set to false', async () => {\n                /**\n                 * Foundry sometimes updates document data by replacing foundry data segements fully:\n                 * recusrive: true and sometimes diff: true\n                 *\n                 * In that case, injecting ANYthing into systemdata will replace ALL of system data\n                 * with what is meant to be injected.\n                 *\n                 * This is testing UpdateActionFlow.injectActionTestsIntoChangeData which is connected to some\n                 * document lifecycle methods.\n                 */\n                const item = await testItem.create({type: 'complex_form'});\n                // Should not inject.\n                await item.update({'name': 'Test'}, {recursive: false});\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\n                await item.update({'name': 'Test2'}, {diff: false});\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\n                await item.update({'name': 'Test'}, {recursive: true});\n                assert.equal(item.system.action.skill, ''); // Check if system data still exists\n            });\n        });\n    });\n};\n", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\nimport {MatrixRules} from \"../module/rules/MatrixRules\";\n\nexport const shadowrunMatrix = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    describe('Matrix Rules', () => {\n        it('calculate IC device rating', () => {\n            let hostRating = 5;\n            assert.strictEqual(MatrixRules.getICDeviceRating(hostRating), hostRating);\n            // Negative values shouldn't break the system.\n            hostRating = -1;\n            assert.strictEqual(MatrixRules.getICDeviceRating(hostRating), 0);\n        });\n\n        it('calculate IC condition monitor', () => {\n            // 8 is the minimum value possible\n            assert.strictEqual(MatrixRules.getConditionMonitor(0), 8);\n            // Check round up\n            assert.strictEqual(MatrixRules.getConditionMonitor(1), 9);\n            // Check no rounding\n            assert.strictEqual(MatrixRules.getConditionMonitor(4), 10);\n            // Negative values shouldn't break the system.\n            assert.strictEqual(MatrixRules.getConditionMonitor(-1), 8);\n        });\n\n        it('calculate IC matrix initiative base', () => {\n            // 0 is the minimum value possible\n            assert.strictEqual(MatrixRules.getICInitiativeBase(0), 0);\n            assert.strictEqual(MatrixRules.getICInitiativeBase(-3), 0);\n            // Check expected value scaling\n            assert.strictEqual(MatrixRules.getICInitiativeBase(1), 2);\n            assert.strictEqual(MatrixRules.getICInitiativeBase(2), 4);\n            assert.strictEqual(MatrixRules.getICInitiativeBase(3), 6);\n            assert.strictEqual(MatrixRules.getICInitiativeBase(12), 24);\n        });\n\n        it('calculate IC matrix initiative dice', () => {\n            // 4 is the only value possible\n            assert.strictEqual(MatrixRules.getICInitiativeDice(), 4);\n        });\n\n        it('calculate meat attribute base with the host rating', () => {\n            // 0 is the minimum value possible\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(0), 0);\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(-3), 0);\n\n            // All other values should equal\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(3), 3);\n            assert.strictEqual(MatrixRules.getICMeatAttributeBase(27), 27);\n        });\n\n        it('disallow invalid marks counters', () => {\n            assert.isTrue(MatrixRules.isValidMarksCount(0));\n            assert.isTrue(MatrixRules.isValidMarksCount(1));\n            assert.isTrue(MatrixRules.isValidMarksCount(2));\n            assert.isTrue(MatrixRules.isValidMarksCount(3));\n\n            assert.isFalse(MatrixRules.isValidMarksCount(-1));\n            assert.isFalse(MatrixRules.isValidMarksCount(4));\n\n            assert.isFalse(MatrixRules.isValidMarksCount(1.5));\n        });\n\n        it('return valid marks counts', () => {\n            assert.strictEqual(MatrixRules.getValidMarksCount(-1), MatrixRules.minMarksCount());\n            assert.strictEqual(MatrixRules.getValidMarksCount(0), 0);\n            assert.strictEqual(MatrixRules.getValidMarksCount(1), 1);\n            assert.strictEqual(MatrixRules.getValidMarksCount(2), 2);\n            assert.strictEqual(MatrixRules.getValidMarksCount(3), 3);\n            assert.strictEqual(MatrixRules.getValidMarksCount(4), MatrixRules.maxMarksCount());\n        });\n\n        it('return expected host matrix attribute ratings', () => {\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(1), [1, 2, 3, 4]);\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(2), [2, 3, 4, 5]);\n            assert.deepEqual(MatrixRules.hostMatrixAttributeRatings(10), [10, 11, 12, 13]);\n        });\n    })\n};", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\nimport {SR6Actor} from \"../module/actor/SR6Actor\";\nimport {SR6Item} from \"../module/item/SR6Item\";\nimport {SR6TestingDocuments} from \"./utils\";\n\nexport const shadowrunSR5Actor = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n    let  testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('SR5Actor', () => {\n        it('create a naked actor of any type', async () => {\n            const actor = await testActor.create({type: 'character'});\n\n            // Check basic foundry data integrity\n            assert.notStrictEqual(actor.id, '');\n            assert.notStrictEqual(actor.id, undefined);\n            assert.notStrictEqual(actor.id, null);\n\n            // Check foundry item collection integrity\n            const fromCollection = game.actors?.get(actor.id);\n            assert.isOk(fromCollection);\n            assert.strictEqual(actor.id, fromCollection?.id);\n        });\n\n        it('update an actor of any type', async () => {\n            const actor = await testActor.create({type: 'character'});\n\n            assert.notProperty(actor.system, 'test');\n            await actor.update({'system.test': true});\n\n            assert.property(actor.system, 'test');\n            assert.propertyVal(actor.system, 'test', true);\n        });\n\n        it('embedd a weapon into an actor and not the global item colection', async () => {\n            const actor = await testActor.create({type: 'character'});\n            const weapon = await testItem.create({type: 'weapon'});\n\n            await actor.createEmbeddedDocuments('Item', [weapon.toObject()]);\n\n            const ownedItems = Array.from(actor.items) as SR6Item[];\n            assert.isNotEmpty(ownedItems);\n            assert.lengthOf(ownedItems, 1);\n\n            const ownedItem = ownedItems[0];\n            assert.strictEqual(ownedItem.type, weapon.type);\n\n            // An owned item should NOT appear in the items collection.\n            const ownedInCollection = game.items?.get(ownedItem.id as string);\n            assert.isNotOk(ownedInCollection);\n        });\n    });\n}\n", "import { SR6TestingDocuments } from \"./utils\";\nimport { SR6Actor } from \"../module/actor/SR6Actor\";\nimport { SR6Item } from \"../module/item/SR6Item\";\nimport { SR } from \"../module/constants\";\nimport CharacterActorData = Shadowrun.CharacterActorData;\nimport SpiritActorData = Shadowrun.SpiritActorData;\nimport SpriteActorData = Shadowrun.SpriteActorData;\nimport ICActorData = Shadowrun.ICActorData;\nimport VehicleActorData = Shadowrun.VehicleActorData;\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\n\nexport const shadowrunSR5CharacterDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('CharacterDataPrep', () => {\n        it('default attribute values', async () => {\n            const character = await testActor.create({ type: 'character', 'system.metatype': 'human' });\n\n            // Check for attribute min values;\n            console.log('Physical attributes');\n            assert.strictEqual(character.system.attributes.body.value, SR.attributes.ranges['body'].min);\n            assert.strictEqual(character.system.attributes.agility.value, SR.attributes.ranges['agility'].min);\n            assert.strictEqual(character.system.attributes.reaction.value, SR.attributes.ranges['reaction'].min);\n            assert.strictEqual(character.system.attributes.strength.value, SR.attributes.ranges['strength'].min);\n            assert.strictEqual(character.system.attributes.willpower.value, SR.attributes.ranges['willpower'].min);\n            assert.strictEqual(character.system.attributes.logic.value, SR.attributes.ranges['logic'].min);\n            assert.strictEqual(character.system.attributes.intuition.value, SR.attributes.ranges['intuition'].min);\n            assert.strictEqual(character.system.attributes.charisma.value, SR.attributes.ranges['charisma'].min);\n\n            console.log('Common special attributes');\n            assert.strictEqual(character.system.attributes.edge.value, SR.attributes.ranges['edge'].min);\n            assert.strictEqual(character.system.attributes.essence.value, SR.attributes.defaults['essence']);\n\n            console.log('Special special attributes');\n            assert.strictEqual(character.system.attributes.resonance.value, SR.attributes.ranges['resonance'].min);\n            assert.strictEqual(character.system.attributes.magic.value, SR.attributes.ranges['magic'].min);\n        });\n\n\n        it('visibility checks', async () => {\n            const actor = await testActor.create({ type: 'character', 'system.metatype': 'human' });\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, true);\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n\n        it('monitor calculation', async () => {\n            const actor = await testActor.create({ type: 'character' }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            // Check default values.\n            assert.strictEqual(character.system.track.stun.max, 9); // 8 + round_up(1 / 2)\n            assert.strictEqual(character.system.track.physical.max, 9); // 8 + round_up(1 / 2)\n            assert.strictEqual(character.system.track.physical.overflow.max, SR.attributes.ranges.body.min); // body value\n\n            // Check calculated values after update.\n            await actor.update({\n                'system.attributes.body.base': 6,\n                'system.attributes.willpower.base': 6,\n            });\n\n            character = actor.asCharacter() as CharacterActorData;\n            assert.strictEqual(character.system.track.stun.max, 11); // 8 + round_up(6 / 2)\n            assert.strictEqual(character.system.track.physical.max, 11); // 8 + round_up(6 / 2)\n            assert.strictEqual(character.system.track.physical.overflow.max, 6); // body value\n        });\n\n        it('Matrix condition monitor track calculation with modifiers', async () => {\n            const actor = await testActor.create({ type: 'character', 'system.modifiers.matrix_track': 1 }) as SR6Actor;\n            await actor.createEmbeddedDocuments('Item', [{\n                'name': 'Commlink',\n                'type': 'device',\n                'system.category': 'commlink',\n                'system.technology.equipped': true\n            }]);\n\n            const character = actor.asCharacter() as CharacterActorData;\n            assert.equal(character.system.matrix.condition_monitor.max, 10); // 9 + 1\n        });\n\n        it('initiative calculation', async () => {\n            const actor = await testActor.create({ type: 'character' }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            // Check default values.\n            assert.strictEqual(character.system.initiative.meatspace.base.base, 2); // REA+INT\n            assert.strictEqual(character.system.initiative.meatspace.dice.base, 1);\n            assert.strictEqual(character.system.initiative.matrix.base.base, 1); // No matrix device\n            assert.strictEqual(character.system.initiative.matrix.dice.base, 3); // Cold SIM\n            assert.strictEqual(character.system.initiative.astral.base.base, 2); // INT+INT\n            assert.strictEqual(character.system.initiative.astral.dice.base, 2);\n\n\n            // Check calculated values.\n            await actor.update({\n                // Meatspace ini\n                'system.attributes.reaction.base': 6,\n                'system.attributes.intuition.base': 6,\n                'system.modifiers.meat_initiative': 2,\n                'system.modifiers.meat_initiative_dice': 1,\n\n                // Astral ini\n                'system.modifiers.astral_initiative': 2,\n                'system.modifiers.astral_initiative_dice': 1,\n\n                // Matrix ini\n                'system.modifiers.matrix_initiative': 2,\n                'system.modifiers.matrix_initiative_dice': 1,\n            });\n\n            // Matrix ini - Cold SIM\n            await actor.createEmbeddedDocuments('Item', [{\n                'name': 'Commlink',\n                'type': 'device',\n                'system.category': 'commlink',\n                'system.technology.equipped': true,\n                'system.atts.att3.value': 6,\n            }]);\n\n            assert.strictEqual(character.system.initiative.meatspace.base.value, 14); // REA+INT\n            assert.strictEqual(character.system.initiative.meatspace.dice.value, 2);\n            assert.strictEqual(character.system.initiative.matrix.base.value, 14); // No matrix device\n            assert.strictEqual(character.system.initiative.matrix.dice.value, 4); // Cold SIM\n            assert.strictEqual(character.system.initiative.astral.base.value, 14); // INT+INT\n            assert.strictEqual(character.system.initiative.astral.dice.value, 3);\n\n            // Matrix ini - Hot SIM\n            await actor.update({\n                'system.matrix.hot_sim': true\n            });\n\n            assert.strictEqual(character.system.initiative.matrix.dice.value, 5); // Cold SIM\n\n\n            // Check for ini dice upper limits\n            await actor.update({\n                // Meatspace ini\n                'system.modifiers.meat_initiative_dice': 6,\n\n                // Astral ini\n                'system.modifiers.astral_initiative_dice': 6,\n\n                // Matrix ini\n                'system.modifiers.matrix_initiative_dice': 6,\n            });\n\n            assert.strictEqual(character.system.initiative.meatspace.dice.value, 5);\n            assert.strictEqual(character.system.initiative.matrix.dice.value, 5);\n            assert.strictEqual(character.system.initiative.astral.dice.value, 5);\n        });\n\n        it('limit calculation', async () => {\n            const actor = await testActor.create({ type: 'character' }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.limits.physical.value, 2); // (STR*2 + BOD + REA) / 3\n            assert.strictEqual(character.system.limits.mental.value, 2);   // (LOG*2 + INT + WIL) / 3\n            assert.strictEqual(character.system.limits.social.value, 3);   // (CHA*2 + WILL + ESS) / 3\n\n            await actor.update({\n                'system.attributes.strength.base': 6,\n                'system.attributes.body.base': 6,\n                'system.attributes.reaction.base': 6,\n                'system.attributes.logic.base': 6,\n                'system.attributes.intuition.base': 6,\n                'system.attributes.willpower.base': 6,\n                'system.attributes.charisma.base': 6,\n                'system.attributes.essence.base': 6,\n            });\n\n            character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.limits.physical.value, 8);\n            assert.strictEqual(character.system.limits.mental.value, 8);\n            assert.strictEqual(character.system.limits.social.value, 8);\n        });\n\n        it('movement calculation', async () => {\n            const actor = await testActor.create({ type: 'character' }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.movement.walk.value, 10); // Fixed value for SR6e\n            assert.strictEqual(character.system.movement.run.value, 15);  // Fixed value for SR6e\n\n            // Test that modifiers still work\n            await actor.update({\n                'system.modifiers.walk': 2,\n                'system.modifiers.run': 3\n            });\n\n            character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.movement.walk.value, 12); // 10 + 2\n            assert.strictEqual(character.system.movement.run.value, 18);  // 15 + 3\n        });\n\n        it('skill calculation', async () => {\n            const actor = await testActor.create({\n                type: 'character',\n                'system.skills.active.arcana.base': 6,\n                'system.skills.active.arcana.bonus': [{ key: 'Test', value: 1 }],\n                'system.skills.active.arcana.specs': ['Test']\n            }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.skills.active.arcana.value, 7);\n        });\n\n        it('damage application to wounds', async () => {\n            const actor = await testActor.create({ type: 'character' }) as SR6Actor;\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 0);\n            assert.strictEqual(character.system.track.stun.wounds, 0);\n            assert.strictEqual(character.system.track.physical.value, 0);\n            assert.strictEqual(character.system.track.physical.wounds, 0);\n\n            assert.strictEqual(character.system.wounds.value, 0);\n\n            await actor.update({\n                'system.track.stun.value': 3,\n                'system.track.physical.value': 3,\n            });\n\n            character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 3);\n            assert.strictEqual(character.system.track.stun.wounds, 1);\n            assert.strictEqual(character.system.track.physical.value, 3);\n            assert.strictEqual(character.system.track.physical.wounds, 1);\n\n            assert.strictEqual(character.system.wounds.value, 2);\n        });\n\n        it('damage application with low pain/wound tolerance', async () => {\n            const actor = await testActor.create({\n                type: 'character',\n                'system.track.stun.value': 6,\n                'system.track.physical.value': 6,\n                'system.modifiers.wound_tolerance': -1\n            }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 6);\n            assert.strictEqual(character.system.track.stun.wounds, 3); // would normally be 2\n            assert.strictEqual(character.system.track.physical.value, 6);\n            assert.strictEqual(character.system.track.physical.wounds, 3);\n        });\n\n        it('damage application with high pain tolerance / damage compensators', async () => {\n            const actor = await testActor.create({\n                type: 'character',\n                'system.track.stun.value': 9,\n                'system.track.physical.value': 9,\n                'system.modifiers.pain_tolerance_stun': 3,\n                'system.modifiers.pain_tolerance_physical': 6\n            }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 9);\n            assert.strictEqual(character.system.track.stun.wounds, 2); // would normally be 3\n            assert.strictEqual(character.system.track.physical.value, 9);\n            assert.strictEqual(character.system.track.physical.wounds, 1); // would normally be 3\n        });\n\n        it('damage application with high AND low pain to lerance / damage compensators', async () => {\n            const actor = await testActor.create({\n                type: 'character',\n                'system.track.stun.value': 9,\n                'system.track.physical.value': 9,\n                'system.modifiers.pain_tolerance_stun': 3,\n                'system.modifiers.pain_tolerance_physical': 6,\n                'system.modifiers.wound_tolerance': -1\n\n            }) as SR6Actor;\n\n            let character = actor.asCharacter() as CharacterActorData;\n\n            /**\n             * Wound tolerance should alter the amount of boxes of damage per wound\n             * Pain tolerance should raise damage taken BEFORE wounds are derived from the remaining damage\n             */\n            assert.strictEqual(character.system.track.stun.value, 9);\n            assert.strictEqual(character.system.track.stun.wounds, 3);\n            assert.strictEqual(character.system.track.physical.value, 9);\n            assert.strictEqual(character.system.track.physical.wounds, 1);\n        });\n        it('Character recoil compensation', () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'character', system: { attributes: { strength: { base: 5 } } } });\n            let character = actor.asCharacter();\n            if (!character) return assert.fail();\n\n            assert.strictEqual(character.system.values.recoil_compensation.value, 3); // SR5#175: 5 / 3 = 1,6 (rounded up) = 2 => 2 + 1\n\n            actor = new SR6Actor({ name: 'Testing', type: 'character', system: { attributes: { strength: { base: 1 } } } });\n            character = actor.asCharacter();\n            if (!character) return assert.fail();\n\n            assert.strictEqual(character.system.values.recoil_compensation.value, 2); // SR5#175: 1 / 3 = 0,3 (rounded up) = 1 => 1 + 1\n        });\n\n        it('A NPC Grunt should only have physical track', async () => {\n            const actor = await testActor.create({ type: 'character', 'system.is_npc': true, 'system.npc.is_grunt': true, 'system.attributes.willpower.base': 6}) as SR6Actor;\n            const character = actor.asCharacter() as unknown as Shadowrun.CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 0);\n            assert.strictEqual(character.system.track.stun.disabled, true);\n            assert.strictEqual(character.system.track.physical.disabled, false);\n        });\n    });\n}\n\n", "import { SR6Item } from '../module/item/SR6Item';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunSR5CritterDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('CritterDataPrep', () => {\n        it('Critter character recoil compensation', () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'critter', system: { attributes: { strength: { base: 5 } } } });\n            let critter = actor.asCritter();\n            if (!critter) return assert.fail();\n\n            assert.strictEqual(critter.system.values.recoil_compensation.value, 3); // SR5#175: 5 / 3 = 1,6 (rounded up) = 2 => 2 + 1\n\n            actor = new SR6Actor({ name: 'Testing', type: 'critter', system: { attributes: { strength: { base: 1 } } } });\n            critter = actor.asCritter();\n            if (!critter) return assert.fail();\n\n            assert.strictEqual(critter.system.values.recoil_compensation.value, 2); // SR5#175: 1 / 3 = 0,3 (rounded up) = 1 => 1 + 1\n        });\n\n        it('visibility checks', async () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'critter', system: { attributes: { strength: { base: 5 } } } });\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, true);\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, false);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n        it('A NPC Grunt should only have physical track', async () => {\n            const actor = await testActor.create({ type: 'critter', 'system.is_npc': true, 'system.npc.is_grunt': true, 'system.attributes.willpower.base': 6}) as SR6Actor;\n            const character = actor.asCritter() as unknown as Shadowrun.CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 0);\n            assert.strictEqual(character.system.track.stun.disabled, true);\n            assert.strictEqual(character.system.track.physical.disabled, false);\n        });\n    });\n};\n", "import { SR6Item } from '../module/item/SR6Item';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunSR5SpiritDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('SpiritDataPrep', () => {\n        it('Spirits are always magical', async () => {\n            const character = await testActor.create({ type: 'spirit' }) as SR6Actor;\n\n            assert.strictEqual(character.system.special, 'magic');\n        });\n\n        it('visibility checks', async () => {\n            const actor = await testActor.create({ type: 'spirit' }) as SR6Actor;\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, true);\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, true);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, false);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, false);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n\n\n        it('Spirit default/overrides by example type', async () => {\n            const actor = await testActor.create({ type: 'spirit', 'system.spiritType': 'air' }) as SR6Actor;\n            let spirit = actor.asSpirit() as Shadowrun.SpiritActorData;\n\n            // Without adequate force there will be negative base values with minimum attribute values.\n            assert.strictEqual(spirit.system.attributes.body.base, -2);\n            assert.strictEqual(spirit.system.attributes.agility.base, 3);\n            assert.strictEqual(spirit.system.attributes.reaction.base, 4);\n            assert.strictEqual(spirit.system.attributes.strength.base, -3);\n            assert.strictEqual(spirit.system.attributes.intuition.base, 0);\n\n            assert.strictEqual(spirit.system.initiative.meatspace.base.base, 4); // force * 2 + override;\n\n            assert.strictEqual(spirit.system.skills.active.assensing.base, 0);\n\n            await actor.update({\n                'system.force': 6\n            });\n\n            spirit = actor.asSpirit() as Shadowrun.SpiritActorData;\n\n            assert.strictEqual(spirit.system.attributes.body.base, 4);\n            assert.strictEqual(spirit.system.attributes.agility.base, 9);\n            assert.strictEqual(spirit.system.attributes.reaction.base, 10);\n            assert.strictEqual(spirit.system.attributes.strength.base, 3);\n            assert.strictEqual(spirit.system.attributes.intuition.base, 6); // set by force without spirit type mods.\n\n            assert.strictEqual(spirit.system.initiative.meatspace.base.base, 16);\n\n            assert.strictEqual(spirit.system.skills.active.assensing.base, 6);\n            assert.strictEqual(spirit.system.skills.active.arcana.base, 0); // not for this spirit type.\n        });\n\n        it('Spirit recoil compensation', () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'spirit', system: { attributes: { strength: { base: 5 } } } });\n            let spirit = actor.asSpirit();\n            if (!spirit) return assert.fail();\n\n            assert.strictEqual(spirit.system.values.recoil_compensation.value, 3); // SR5#175: 5 / 3 = 1,6 (rounded up) = 2 => 2 + 1\n        });\n        it('A NPC Grunt should only have physical track', async () => {\n            const actor = await testActor.create({ type: 'spirit', 'system.is_npc': true, 'system.npc.is_grunt': true }) as SR6Actor;\n            const character = actor.asSpirit() as unknown as Shadowrun.CharacterActorData;\n\n            assert.strictEqual(character.system.track.stun.value, 0);\n            assert.strictEqual(character.system.track.stun.disabled, true);\n            assert.strictEqual(character.system.track.physical.disabled, false);\n        });\n    });\n};\n", "import { SR6Item } from '../module/item/SR6Item';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunSR5SpriteDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('SpriteDataPrep', () => {\n        it('Sprites are always resonat', async () => {\n            const sprite = await testActor.create({ type: 'sprite' });\n            assert.strictEqual(sprite.system.special, 'resonance');\n        });\n\n        it('visibility checks', async () => {\n            const actor = await testActor.create({ type: 'sprite' });\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, false);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n\n        it('Sprites default/override values by example type', async () => {\n            const actor = await testActor.create({ type: 'sprite', 'system.spriteType': 'courier' }) as SR6Actor;\n            let sprite = actor.asSprite() as Shadowrun.SpriteActorData;\n\n            assert.strictEqual(sprite.system.matrix.sleaze.base, 3);\n            assert.strictEqual(sprite.system.matrix.data_processing.base, 1);\n            assert.strictEqual(sprite.system.matrix.firewall.base, 2);\n            assert.strictEqual(sprite.system.matrix.sleaze.base, 3);\n\n            assert.strictEqual(sprite.system.initiative.matrix.base.base, 1);\n\n            assert.strictEqual(sprite.system.skills.active.hacking.base, 0);\n\n            await actor.update({\n                'system.level': 6\n            });\n\n            sprite = actor.asSprite() as Shadowrun.SpriteActorData;\n\n            assert.strictEqual(sprite.system.level, 6);\n\n            assert.strictEqual(sprite.system.matrix.sleaze.base, 9);\n            assert.strictEqual(sprite.system.matrix.data_processing.base, 7);\n            assert.strictEqual(sprite.system.matrix.firewall.base, 8);\n            assert.strictEqual(sprite.system.matrix.sleaze.base, 9);\n\n            assert.strictEqual(sprite.system.initiative.matrix.base.base, 13);\n            assert.strictEqual(sprite.system.initiative.matrix.dice.base, 4);\n\n            assert.strictEqual(sprite.system.skills.active.hacking.base, 6);\n            assert.strictEqual(sprite.system.skills.active.computer.base, 6); // all sprites\n            assert.strictEqual(sprite.system.skills.active.electronic_warfare.base, 0); // not set by sprite type.\n        })\n\n        it('Matrix condition monitor track calculation with modifiers', async () => {\n            const actor = await testActor.create({ type: 'sprite' }) as SR6Actor;\n\n            let sprite = actor.asSprite() as Shadowrun.SpriteActorData;\n            assert.equal(sprite.system.matrix.condition_monitor.max, 8);\n\n            await actor.update({ 'system.modifiers.matrix_track': 1 });\n            sprite = actor.asSprite() as Shadowrun.SpriteActorData;\n            assert.equal(sprite.system.matrix.condition_monitor.max, 9);\n        });\n    });\n};\n", "import { SR6Item } from '../module/item/SR6Item';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunSR5ICDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('ICDataPrep', () => {\n        it('Matrix condition monitor track calculation with modifiers', async () => {\n            const actor = await testActor.create({ type: 'ic' }) as SR6Actor;\n\n            let ic = actor.asIC() as Shadowrun.ICActorData;\n            assert.equal(ic.system.matrix.condition_monitor.max, 8);\n\n            await actor.update({ 'system.modifiers.matrix_track': 1 });\n            ic = actor.asIC() as Shadowrun.ICActorData;\n            assert.equal(ic.system.matrix.condition_monitor.max, 9);\n        });\n\n\n        it('visibility checks', async () => {\n            const actor = await testActor.create({ type: 'ic' }) as SR6Actor;\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, false);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n\n        it('has meat attributes based on the host rating', async () => {\n            const ic = await testActor.create({ type: 'ic', 'system.host.rating': 5}) as SR6Actor;\n\n            assert.strictEqual(ic.system.attributes.agility.value, 5);\n            assert.strictEqual(ic.system.attributes.reaction.value, 5);\n            assert.strictEqual(ic.system.attributes.body.value, 5);\n            assert.strictEqual(ic.system.attributes.strength.value, 5);\n            assert.strictEqual(ic.system.attributes.logic.value, 5);\n            assert.strictEqual(ic.system.attributes.willpower.value, 5);\n            assert.strictEqual(ic.system.attributes.charisma.value, 5);\n            assert.strictEqual(ic.system.attributes.intuition.value, 5);\n        });\n\n        it('has rating attribute based on the host rating', async () => {\n            const ic = await testActor.create({ type: 'ic', 'system.host.rating': 5}) as SR6Actor;\n\n            assert.strictEqual(ic.system.attributes.rating.value, 5);\n        });\n    });\n};\n", "import { SR6Item } from '../module/item/SR6Item';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6TestingDocuments } from './utils';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunSR5VehicleDataPrep = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('VehicleDataPrep', () => {\n        it('Matrix condition monitor track calculation with modifiers', async () => {\n            const actor = await testActor.create({ type: 'vehicle' }) as SR6Actor;\n\n            let vehicle = actor.asVehicle() as Shadowrun.VehicleActorData;\n            assert.equal(vehicle.system.matrix.condition_monitor.max, 8);\n\n            await actor.update({ 'system.modifiers.matrix_track': 1 });\n            vehicle = actor.asVehicle() as Shadowrun.VehicleActorData;\n            assert.equal(vehicle.system.matrix.condition_monitor.max, 9);\n\n            console.log('visibility checks');\n\n        });\n\n        it('visibility checks', () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'vehicle', system: { attributes: { body: { base: 5 } } } });\n            assert.strictEqual(actor.system.visibilityChecks.astral.hasAura, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.astralActive, false);\n            assert.strictEqual(actor.system.visibilityChecks.astral.affectedBySpell, false);\n            assert.strictEqual(actor.system.visibilityChecks.meat.hasHeat, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.hasIcon, true);\n            assert.strictEqual(actor.system.visibilityChecks.matrix.runningSilent, false);\n        });\n\n        it('Recoil compensation', () => {\n            let actor = new SR6Actor({ name: 'Testing', type: 'vehicle', system: { attributes: { body: { base: 5 } } } });\n            let vehicle = actor.asVehicle();\n            if (!vehicle) return assert.fail();\n\n            assert.strictEqual(vehicle.system.values.recoil_compensation.value, 5); // SR5#175: 5\n        });\n\n        it('Attributes based on pilot', async () => {\n            // Create temporary actor\n            const actor = await testActor.create({\n                type: 'vehicle', system: {\n                    vehicle_stats: { pilot: { base: 3 } },\n                    attributes: { body: { base: 5 } }\n                }\n            });\n            const vehicle = actor.asVehicle();\n\n            // Mental Attributes should be pilot. SR5#199\n            assert.strictEqual(vehicle?.system.attributes.willpower.value, 3);\n            assert.strictEqual(vehicle?.system.attributes.logic.value, 3);\n            assert.strictEqual(vehicle?.system.attributes.intuition.value, 3);\n            assert.strictEqual(vehicle?.system.attributes.charisma.value, 3);\n\n            // Agility SHOULD NOT be pilot, but we default to it for ease of use in some skill cases...\n            assert.strictEqual(vehicle?.system.attributes.agility.value, 3);\n\n            // Reaction should be pilot. SR5#199\n            assert.strictEqual(vehicle?.system.attributes.charisma.value, 3);\n\n            // Strength should be body (when using a drone arm, Rigger50#125), we default to that...\n            assert.strictEqual(vehicle?.system.attributes.strength.value, 5);\n\n        });\n    });\n};\n", "import { DataDefaults } from '../data/DataDefaults';\nimport { PartsList } from '../parts/PartsList';\nimport { SuccessTest, SuccessTestData, TestOptions } from './SuccessTest';\nimport { Translation } from '../utils/strings';\n\nexport interface SkillTestData extends SuccessTestData {\n    attribute: string\n    limitSelection: string\n}\n\n\n/**\n * Skill tests allow users to change the connected attribute and limit.\n *\n * Rule wise a skill test doesn't alter a default success test.\n */\nexport class SkillTest extends SuccessTest<SkillTestData> {\n    // temporary selection information.\n    lastUsedAttribute: string;\n\n    constructor(data, documents, options) {\n        super(data, documents, options);\n\n        this.lastUsedAttribute = this.data.attribute;\n    }\n\n    /**\n     * Allow users to alter detailed skill values.\n     */\n    override get _dialogTemplate() {\n        return 'systems/shadowrun6-elysium/dist/templates/apps/dialogs/skill-test-dialog.html';\n    }\n\n    /**\n     * Show skill label as title instead of the generic success test label.\n     */\n    override get title() {\n        if (!this.actor) return super.title;\n        return `${game.i18n.localize(this.actor.getSkillLabel(this.data.action.skill) as Translation)} ${game.i18n.localize('SR6.Test')}`;\n    }\n\n    /**\n     * A SkillTest has the need to store attribute and limit selections\n     */\n    override _prepareData(data: any, options: TestOptions) {\n        data = super._prepareData(data, options);\n\n        data.action = data.action || DataDefaults.actionRollData();\n\n        // Preselect based on action.\n        data.attribute = data.action.attribute;\n        data.limitSelection = data.action.limit.attribute;\n\n        return data;\n    }\n\n    /**\n     * Skill test provides a selection for attribute and limit during TestDialog.\n     */\n    override prepareBaseValues() {\n        super.prepareBaseValues();\n        this.prepareAttributeSelection();\n    }\n\n    /**\n     * Change out previous attribute with new selection.\n     */\n    prepareAttributeSelection() {\n        if (!this.actor) return;\n\n        // Remove last used attribute and its modifiers and replace with new selection.\n        const useSelection = this.data.attribute !== this.data.action.attribute;\n        const selectedAttribute = useSelection ? this.data.attribute : this.data.action.attribute;\n        const usedAttribute = this.actor.getAttribute(selectedAttribute);\n        const lastUsedAttribute = this.actor.getAttribute(this.lastUsedAttribute);\n\n        if (!usedAttribute || !lastUsedAttribute) return;\n\n\n        const pool = new PartsList<number>(this.pool.mod);\n\n        // Replace previous attribute with new one, without changing other modifiers\n        pool.removePart(lastUsedAttribute.label);\n        this.actor._removeMatrixParts(pool);\n        pool.addPart(usedAttribute.label, usedAttribute.value);\n\n        if (this.actor._isMatrixAttribute(selectedAttribute)) this.actor._addMatrixParts(pool, true);\n\n        this.lastUsedAttribute = selectedAttribute;\n    }\n\n    /**\n     * Change out previous limit with new selection.\n     */\n    prepareLimitSelection() {\n        if (!this.actor) return;\n\n        // Remove last used limit and its modifiers and replace with new selection.\n        const useSelection = this.data.limitSelection !== this.data.action.limit.attribute;\n        const selectedLimit = useSelection ? this.data.limitSelection : this.data.action.limit.attribute;\n\n        const pool = new PartsList<number>(this.pool.mod);\n\n        this.actor._removeMatrixParts(pool);\n\n        if (this.actor._isMatrixAttribute(selectedLimit)) this.actor._addMatrixParts(pool, true);\n    }\n}\n", "import { SR6TestingDocuments } from \"./utils\";\nimport { SR6Actor } from \"../module/actor/SR6Actor\";\nimport { SR6Item } from \"../module/item/SR6Item\";\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\nimport { TestCreator } from \"../module/tests/TestCreator\";\nimport { SuccessTest } from \"../module/tests/SuccessTest\";\nimport { DataDefaults } from \"../module/data/DataDefaults\";\nimport { RangedAttackTest } from \"../module/tests/RangedAttackTest\";\nimport { SkillTest } from \"../module/tests/SkillTest\";\nimport { Helpers } from \"../module/helpers\";\n\nexport const shadowrunSR5ActiveEffect = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('SR5ActiveEffect', () => {\n        it('MODIFY mode: apply system custom mode to main and sub value-keys', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                origin: actor.uuid,\n                disabled: false,\n                label: 'Test Effect',\n                changes: [\n                    { key: 'system.attributes.body.mod', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'system.attributes.body', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.deepEqual(actor.system.attributes.body.mod, [\n                {\n                    name: 'Test Effect',\n                    value: 2\n                }, {\n                    name: 'Test Effect',\n                    value: 2\n                }\n            ]);\n            assert.strictEqual(actor.system.attributes.body.value, 4);\n        });\n\n        it('MODIFY mode: check for add fallback when key points to none value property', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            await actor.createEmbeddedDocuments('ActiveEffect', [{\n                origin: actor.uuid,\n                disabled: false,\n                label: 'Test Effect',\n                changes: [{\n                    key: 'system.modifiers.global', // flat value field\n                    value: 3,\n                    mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM\n                }]\n            }]);\n\n            // change value should only ADD but NOT change .mod or .override\n            assert.strictEqual(actor.system.modifiers.global, 3);\n            assert.strictEqual(actor.system.modifiers.global.mod, undefined);\n            assert.strictEqual(actor.system.modifiers.global.override, undefined);\n        });\n\n        it('OVERRIDE mode: apply the system override mode', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            await actor.createEmbeddedDocuments('ActiveEffect', [{\n                origin: actor.uuid,\n                disabled: false,\n                label: 'Test Effect',\n                changes: [\n                    { key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE },\n                    { key: 'system.attributes.agility.value', value: 4, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE },\n                    { key: 'system.skills.active.automatics.canDefault', value: false, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE }\n                ]\n            }]);\n\n            // Body should be overwritten as a Valuefield.\n            assert.deepEqual(actor.system.attributes.body.override, { name: 'Test Effect', value: 3 });\n            assert.strictEqual(actor.system.attributes.body.base, 0);\n            assert.deepEqual(actor.system.attributes.body.mod, []);\n            assert.strictEqual(actor.system.attributes.body.value, 3);\n\n            // Agility should be overwritten as a object property without system behavior.\n            // However total will be calculated to be 1 again due to the systems ValueField flow\n            assert.deepEqual(actor.system.attributes.agility.mod, []);\n            assert.equal(actor.system.attributes.agility.override, undefined);\n            assert.strictEqual(actor.system.attributes.agility.base, 0);\n            assert.strictEqual(actor.system.attributes.agility.value, 1);\n\n            // A ValueField value outside of value calculation should still work\n            // Skill automatics normally can default, wich we overwrite here.\n            assert.deepEqual(actor.system.skills.active.automatics.mod, []);\n            assert.strictEqual(actor.system.skills.active.automatics.override, undefined);\n            assert.strictEqual(actor.system.skills.active.automatics.canDefault, false);\n        });\n\n        it('OVERRIDE mode: override all existing .mod values', async () => {\n            it('apply the custom override mode', async () => {\n                const actor = await testActor.create({ type: 'character' });\n                await actor.createEmbeddedDocuments('ActiveEffect', [{\n                    origin: actor.uuid,\n                    disabled: false,\n                    label: 'Test Effect',\n                    changes: [\n                        { key: 'system.attributes.body', value: 5, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                        { key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE }\n                    ]\n                }]);\n\n                assert.strictEqual(actor.system.attributes.body.mod.length, 1);\n                assert.deepEqual(actor.system.attributes.body.override, { name: 'Test Effect', value: 3 });\n                assert.deepEqual(actor.system.attributes.body.mod, [{ name: 'Test Effect', value: 5 }]);\n                assert.strictEqual(actor.system.attributes.body.value, 3);\n            });\n\n            it('apply custom override mode, none ModifiableValue should work without altering anything', async () => {\n                const actor = await testActor.create({ type: 'character' });\n                const effect = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                    origin: actor.uuid,\n                    disabled: false,\n                    label: 'Test Effect'\n                }]);\n                await effect[0].update({\n                    'changes': [{\n                        key: 'system.modifiers.global',\n                        value: 3,\n                        mode: CONST.ACTIVE_EFFECT_MODES.OVERRIDE\n                    }]\n                });\n\n                assert.strictEqual(actor.system.modifiers.global, 3);\n                assert.strictEqual(actor.system.modifiers.global.mod, undefined);\n                assert.strictEqual(actor.system.modifiers.global.override, undefined);\n            });\n        });\n\n    });\n    /**\n * Tests around the systems 'advanced' effects on top of Foundry core active effects.\n */\n    describe('SR5AdvancedEffect apply-to modes', () => {\n        it('A default active effect should adhere to apply-to actor rules', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const effect = effects.pop();\n            assert.strictEqual(effect.applyTo, 'actor');\n        });\n\n        it('Create an item effect and assert its not created on actor as until FoundryVTT v10', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [{\n                name: 'Test Item',\n                type: 'weapon',\n                system: {\n                    category: 'range'\n                }\n            }]);\n            const weapon = items[0];\n            const effects = await weapon.createEmbeddedDocuments('ActiveEffect', [{\n                origin: weapon.uuid,\n                label: 'Test Effect',\n                transfer: true, // Foundry uses transfer to find item effects that should be transferred. This is disabled by the system.\n                changes: [{ key: 'system.limit', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            // Effects with a custom applyTo should not be applied to the actor.\n            assert.lengthOf(effects, 1);\n            assert.lengthOf(actor.effects.contents, 0);\n            assert.lengthOf(weapon.effects.contents, 1);\n        });\n\n        it('ACTOR apply-to: Only actor and targeted_actor effects should apply onto an actor', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Actor Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'actor' } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }, {\n                label: 'Targeted Actor Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'targeted_actor' } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }, {\n                label: 'Test_All Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_all' } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }, {\n                label: 'Test_Item Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_item' } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }, {\n                label: 'Modifiers Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'modifiers' } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.lengthOf(actor.effects.contents, 5);\n            assert.lengthOf(actor.system.attributes.body.mod, 2);\n            assert.equal(actor.system.attributes.body.value, 6);\n        });\n\n        it('TEST_ALL apply-to: Actor effect applies to test', async () => {\n            const expectedFlags = {\n                \"shadowrun6-elysium\": { applyTo: 'test_all' }\n            }\n            const limitValue = 3;\n            const poolValue = 3;\n            const hitsValue = 3;\n\n            const actor = await testActor.create({ type: 'character' });\n            await actor.createEmbeddedDocuments('ActiveEffect', [{\n                origin: actor.uuid,\n                label: 'Test Effect',\n                flags: expectedFlags,\n                'changes': [\n                    // NOTE: test doesn't use system.\n                    { key: 'data.limit', value: limitValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.values.hits', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n            const action = DataDefaults.actionRollData({ test: 'SuccessTest' });\n\n            const test = await TestCreator.fromAction(action, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            await test.execute();\n\n            assert.deepEqual(test.limit.mod, [{ name: 'Test Effect', value: limitValue }]);\n            assert.equal(test.limit.value, limitValue);\n            // SuccessTest will always include global and wounds modifier by default.\n            assert.deepEqual(test.pool.mod, [\n                { name: 'Test Effect', value: poolValue },\n                { name: 'SR5.ModifierTypes.Global', value: 0 },\n                { name: 'SR5.ModifierTypes.Wounds', value: 0 }]);\n            assert.equal(test.pool.value, poolValue);\n            assert.deepEqual(test.hits.mod, [{ name: 'Test Effect', value: hitsValue }]);\n            assert.isAtLeast(test.hits.value, hitsValue);\n        });\n\n        it('TEST_ALL apply-to: Item effect applies to test', async () => {\n            const expectedFlags = {\n                \"shadowrun6-elysium\": { applyTo: 'test_all' }\n            }\n            const limitValue = 3;\n            const poolValue = 3;\n            const hitsValue = 3;\n\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [{ type: 'action', name: 'Test Action' }]);\n\n            const item = items.pop();\n\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: expectedFlags,\n                'changes': [\n                    // NOTE: test doesn't use system.\n                    { key: 'data.limit', value: limitValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.values.hits', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n            const test = await TestCreator.fromItem(item, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            await test.execute();\n\n            assert.deepEqual(test.limit.mod, [{ name: 'Test Effect', value: limitValue }]);\n            assert.equal(test.limit.value, limitValue);\n            // SuccessTest will always include global and wounds modifier by default.\n            assert.deepEqual(test.pool.mod, [\n                { name: 'Test Effect', value: poolValue },\n                { name: 'SR5.ModifierTypes.Global', value: 0 },\n                { name: 'SR5.ModifierTypes.Wounds', value: 0 }]);\n            assert.equal(test.pool.value, poolValue);\n            assert.deepEqual(test.hits.mod, [{ name: 'Test Effect', value: hitsValue }]);\n            assert.isAtLeast(test.hits.value, hitsValue);\n        });\n\n        it('TEST_ITEM apply-to: Item effect applies only when on test item', async () => {\n            const expectedFlags = {\n                \"shadowrun6-elysium\": { applyTo: 'test_item' }\n            }\n            const limitValue = 3;\n            const poolValue = 3;\n            const hitsValue = 3;\n\n            const actor = await testActor.create({ type: 'character' });\n\n            // Create a effect on actor that should NOT apply.\n            await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect Actor',\n                flags: expectedFlags,\n                changes: [\n                    { key: 'data.limit', value: limitValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.values.hits', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n            // Create one item that will carry the correct effect and one carries the wrong effect.\n            const items = await actor.createEmbeddedDocuments('Item', [\n                { type: 'action', name: 'Test Action' },\n                { type: 'action', name: 'Test Action 2' }]\n            );\n\n            const item = items.pop();\n\n            // Create the correct effect on the correct item.\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect Correct Item',\n                flags: expectedFlags,\n                changes: [\n                    { key: 'data.limit', value: limitValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.values.hits', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n            const item2 = items.pop();\n\n            // Create the wrong effect on the wrong item.\n            await item2.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect Wrong Item',\n                flags: expectedFlags,\n                changes: [\n                    { key: 'data.limit', value: limitValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.values.hits', value: poolValue, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n\n            // Test is created using the correct item.\n            const test = await TestCreator.fromItem(item, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            await test.execute();\n\n            assert.deepEqual(test.limit.mod, [{ name: 'Test Effect Correct Item', value: limitValue }]);\n            assert.equal(test.limit.value, limitValue);\n            // SuccessTest will always include global and wounds modifier by default.\n            assert.deepEqual(test.pool.mod, [\n                { name: 'Test Effect Correct Item', value: poolValue },\n                { name: 'SR5.ModifierTypes.Global', value: 0 },\n                { name: 'SR5.ModifierTypes.Wounds', value: 0 }]);\n            assert.equal(test.pool.value, poolValue);\n            assert.deepEqual(test.hits.mod, [{ name: 'Test Effect Correct Item', value: hitsValue }]);\n            assert.isAtLeast(test.hits.value, hitsValue);\n        });\n    });\n\n    describe('AdvancedEffects suppress application', () => {\n        it('A disabled effect should not apply', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                disabled: true,\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const effect = effects.pop();\n\n            assert.isTrue(effect.disabled);\n            assert.lengthOf(actor.effects.contents, 1);\n            assert.lengthOf(actor.system.attributes.body.mod, 0);\n        });\n\n        it('A wireless only effect should not apply for a wireless item', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [\n                { type: 'cyberware', name: 'Wireless Item', system: { technology: { wireless: true } } },\n                { type: 'cyberware', name: 'Wired Item', system: { technology: { wireless: false } } }\n            ]);\n\n            const item = items.pop();\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForWireless: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const item2 = items.pop();\n            await item2.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForWireless: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.lengthOf(actor.system.attributes.body.mod, 1);\n            assert.equal(actor.system.attributes.body.value, 3);\n        });\n\n        it('A equipped only effect should not apply for an  unequipped item', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [\n                { type: 'cyberware', name: 'Equipped Item', system: { technology: { equipped: true } } },\n                { type: 'cyberware', name: 'Unequipped Item', system: { technology: { equipped: false } } }\n            ]);\n\n            const item = items.pop();\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForEquipped: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const item2 = items.pop();\n            await item2.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForEquipped: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.lengthOf(actor.system.attributes.body.mod, 1);\n            assert.equal(actor.system.attributes.body.value, 3);\n        });\n\n        it('A wireless and equipped only effect should not apply for a wired and unequipped item', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [\n                { type: 'cyberware', name: 'Wireless Equipped Item', system: { technology: { equipped: true, wireless: true } } },\n                { type: 'cyberware', name: 'Wired Unequipped Item', system: { technology: { equipped: false, wireless: false } } }\n            ]);\n\n            const item = items.pop();\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForEquipped: true, onlyForWireless: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const item2 = items.pop();\n            await item2.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { onlyForEquipped: true, onlyForeWireless: false } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.lengthOf(actor.system.attributes.body.mod, 1);\n            assert.equal(actor.system.attributes.body.value, 3);\n        });\n\n        it('A wireless and equipped only effect should if it is disabled', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const items = await actor.createEmbeddedDocuments('Item', [\n                { type: 'cyberware', name: 'Wireless Equipped Item', system: { technology: { equipped: true, wireless: true } } },\n            ]);\n\n            const item = items.pop();\n            await item.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                disabled: true,\n                flags: { \"shadowrun6-elysium\": { onlyForEquipped: true, onlyForWireless: true } },\n                changes: [{ key: 'system.attributes.body', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            assert.lengthOf(actor.system.attributes.body.mod, 0);\n            assert.equal(actor.system.attributes.body.value, 1);\n        });\n\n        it('A extended test should not apply effects on extended rolls', async () => {\n            /**\n             * Sum all modifier values for the given name.\n             *\n             * @param name The modifier name\n             * @returns the sum of all modifier values matching the name\n             */\n            const reduceModifiersByName = (name: string) => (acc: number, { name: n, value }) => n === name ? acc + value : acc;\n\n            const actor = await testActor.create({ type: 'character' });\n            let actions = await actor.createEmbeddedDocuments('Item', [{ name: 'Test Action', type: 'action' }]);\n            await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_all', selection_tests: \"[{\\\"value\\\":\\\"Success Test\\\",\\\"id\\\":\\\"SuccessTest\\\"}]\" } },\n                changes: [{ key: 'data.pool', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            let test = await TestCreator.fromItem(actions[0], actor, { showDialog: false, showMessage: false }) as SuccessTest;\n            await test.execute();\n\n            // The first roll should have the effect applied\n            assert.equal(test.pool.mod.reduce(reduceModifiersByName('Test Effect'), 0), 2);\n\n            // Trigger the extended roll...\n            test = await test.executeAsExtended();\n            // ... assure effects aren't re applied but taken from the first roll.\n            assert.equal(test.pool.mod.reduce(reduceModifiersByName('Test Effect'), 0), 2);\n\n            actions = await actor.createEmbeddedDocuments('Item', [{ name: 'Test Action', type: 'action', 'system.action.extended': true }]);\n            test = await TestCreator.fromItem(actions[0], actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            // This will trigger the first and all extended rolls...\n            await test.execute();\n\n            /// ... the test reference is for the first roll and should have the effect applied.\n            assert.equal(test.pool.mod.reduce(reduceModifiersByName('Test Effect'), 0), 2);\n        });\n    });\n\n    describe('AdvancedEffects with dynamic values', () => {\n        it('ACTOR apply-to: Grab dynamic actor values', async () => {\n            const actor = await testActor.create({ type: 'character', system: { modifiers: { global: 6 } } });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                label: 'Actor Effect',\n                changes: [\n                    { key: 'system.attributes.body', value: '@system.modifiers.global', mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                ]\n            }]);\n\n            assert.lengthOf(actor.effects.contents, 1);\n            assert.equal(actor.system.attributes.body.value, 6);\n        });\n    });\n\n    /**\n     * All these tests check for cases that caused issues in the past, due to specific implementation details\n     * of some test implementations.\n     */\n    describe('Advanced effects modify problematic test implementations', () => {\n        it('TEST modify damage on RangedAttackTest', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const weapon = await testItem.create({ type: 'weapon', system: { category: 'ranged' } });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                name: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_all' } },\n                changes: [{ key: 'data.damage', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            const test = await TestCreator.fromItem(weapon, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            await test.execute();\n\n            assert.equal(test.data.damage.value, 3);\n        });\n\n        it('TEST modify attribute and limit on SkillTest', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                name: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_all' } },\n                changes: [\n                    { key: 'data.limit', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'data.pool', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }\n                ]\n            }]);\n\n            // @ts-expect-error DeepPartial fails for partial sub object literals\n            const action = DataDefaults.actionRollData({ test: SkillTest.name, limit: {attribute: 'social'} });\n            const test = await TestCreator.fromAction(action, actor, { showDialog: false, showMessage: false }) as SkillTest;\n\n            // Simulate relevant part of #execute\n            test.effects.applyAllEffects();\n\n            test.prepareAttributeSelection();\n            test.prepareLimitSelection();\n            test.prepareBaseValues();\n            test.calculateBaseValues();\n\n            assert.strictEqual(test.limit.value, actor.getLimit('social').value + 3);\n            assert.strictEqual(test.pool.value, 3);\n\n            // Simulate change of selection\n            test.data.attribute = 'body';\n            test.data.limitSelection = 'physical';\n\n            test.prepareAttributeSelection();\n            test.prepareLimitSelection();\n            test.prepareBaseValues();\n            test.calculateBaseValues();\n\n            assert.strictEqual(test.limit.value, actor.getLimit('physical').value + 3);\n        });\n    });\n\n    describe('AdvanceEffects apply modification based on test categories', () => {\n        it('Should apply modifier to a single category only', async () => {\n            const actor = await testActor.create({ type: 'character' });\n            const effects = await actor.createEmbeddedDocuments('ActiveEffect', [{\n                name: 'Test Effect',\n                flags: { \"shadowrun6-elysium\": { applyTo: 'test_all', selection_categories: '[{\"value\":\"Social Actions\",\"id\":\"social\"}]' } },\n                changes: [{ key: 'data.pool', value: 3, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n\n            // CASE - Test uses the same category\n            let action = DataDefaults.actionRollData({ test: 'SkillTest', categories: ['social'] });\n            let test = await TestCreator.fromAction(action, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            // Simulate relevant part of #execute\n            test.prepareTestCategories();\n            test.effects.applyAllEffects();\n\n            Helpers.calcTotal(test.pool);\n\n            assert.strictEqual(test.pool.value, 3);\n\n            // CASE - Test uses different category\n            action = DataDefaults.actionRollData({ test: 'SkillTest', categories: ['matrix'] });\n            test = await TestCreator.fromAction(action, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            // Simulate relevant part of #execute\n            test.prepareTestCategories();\n            test.effects.applyAllEffects();\n\n            Helpers.calcTotal(test.pool);\n\n            assert.strictEqual(test.pool.value, 0);\n\n            // CASE - Test uses no category\n            action = DataDefaults.actionRollData({ test: 'SkillTest', categories: [] });\n            test = await TestCreator.fromAction(action, actor, { showDialog: false, showMessage: false }) as SuccessTest;\n\n            // Simulate relevant part of #execute\n            test.prepareTestCategories();\n            test.effects.applyAllEffects();\n\n            Helpers.calcTotal(test.pool);\n\n            assert.strictEqual(test.pool.value, 0);\n        });\n    })\n};\n", "import {SR6TestingDocuments} from \"./utils\";\nimport {SR6Actor} from \"../module/actor/SR6Actor\";\nimport {SR6Item} from \"../module/item/SR6Item\";\nimport {NetworkDeviceFlow} from \"../module/item/flows/NetworkDeviceFlow\";\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\n\nexport const shadowrunNetworkDevices = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    let testActor;\n    let testItem;\n    let testScene;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n        testScene = new SR6TestingDocuments(Scene);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n        await testScene.teardown();\n    })\n\n    describe('Network Devices handling', () => {\n        it('Handle PAN/WAN networks and device linking', () => {\n            assert.fail('Test suite is deactivated');\n        })\n        // TODO: Redesign them with only necessary update methods in place. Instead start of with ActorData prefilled on create.\n        // it('give a network link to given document class', async () => {\n        //     const actor = await testActor.create({'type': 'character'});\n        //     const link = NetworkDeviceFlow.buildLink(actor);\n\n        //     const nodes = link.split('.');\n\n        //     assert.strictEqual(nodes[0], 'Actor');\n        //     assert.strictEqual(nodes.length, 2); // Actor.<randomId>;\n        // });\n\n        // it('resolve a network link back to a sidebar document', async () => {\n        //     // Test collection Actor.\n        //     const actor = await testActor.create({'type': 'character'});\n\n        //     const link = NetworkDeviceFlow.buildLink(actor);\n        //     const resolvedActor = await NetworkDeviceFlow.resolveLink(link);\n\n        //     assert.isNotNull(resolvedActor);\n        //     assert.strictEqual(resolvedActor?.id, actor.id);\n        // });\n\n        // it('resolve a network link back to a embedded collection document', async () => {\n        //     const actor = await testActor.create({'type': 'character'});\n        //     const item = await testItem.create({type: 'weapon'});\n        //     const embeddedItems = await actor.createEmbeddedDocuments('Item', [item.toObject()]);\n        //     const embeddedItem = embeddedItems[0];\n        //     const link = NetworkDeviceFlow.buildLink(embeddedItem);\n        //     const resolvedItem = await NetworkDeviceFlow.resolveLink(link)\n\n        //     assert.isNotNull(resolvedItem);\n        //     assert.strictEqual(resolvedItem?.id, embeddedItem?.id);\n        // });\n\n        // it('resolve a network link back to a token collection document', async () => {\n        //     // Test TokenDocument Actor\n        //     const scene = await testScene.create({name: 'Test'});\n        //     const actor = await testActor.create({'type': 'character'});\n        //     const token = await getDocumentClass('Token').create(await actor.getTokenData({x: 0, y: 0}), {parent: scene});\n\n        //     // @ts-expect-error // ignore null\n        //     const link = NetworkDeviceFlow.buildLink(token);\n        //     const resolvedToken = await NetworkDeviceFlow.resolveLink(link);\n\n        //     assert.isNotNull(resolvedToken);\n        //     assert.strictEqual(token?.id, resolvedToken?.id);\n        // });\n\n        // it('connect a device controller to an item network device', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testItem.create({type: 'weapon'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n\n        //     assert.strictEqual(device.system.technology.networkController, controller.uuid);\n        //     assert.strictEqual(device.getNetworkController(), controller.uuid);\n        //     assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.technology.networkController), controller);\n\n        //     assert.deepEqual(controller.system.networkDevices, [device.uuid]);\n        // });\n\n        // it('connect a device controller to a vehicle network device', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testActor.create({type: 'vehicle'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n\n        //     assert.strictEqual(device.system.networkController, controller.uuid);\n        //     assert.strictEqual(device.getNetworkController(), controller.uuid);\n        //     assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.networkController), controller);\n\n        //     assert.deepEqual(controller.system.networkDevices, [device.uuid]);\n        // });\n\n        // it('connect a host controller to a item network device', async () => {\n        //     const controller = await testItem.create({type: 'host'});\n        //     const device = await testItem.create({type: 'weapon'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n\n        //     assert.strictEqual(device.system.technology.networkController, controller.uuid);\n        //     assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.technology.networkController), controller);\n\n        //     assert.deepEqual(controller.system.networkDevices, [device.uuid]);\n        // });\n\n        // it('connect a host controller to a vehicle network device', async () => {\n        //     const controller = await testItem.create({type: 'host'});\n        //     const device = await testActor.create({type: 'vehicle'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n\n        //     assert.strictEqual(device.system.networkController, controller.uuid);\n        //     assert.strictEqual(device.getNetworkController(), controller.uuid);\n        //     assert.strictEqual(await NetworkDeviceFlow.resolveLink(device.system.networkController), controller);\n\n        //     assert.deepEqual(controller.system.networkDevices, [device.uuid]);\n        // });\n\n        // it('get all connected network devices of a controller as their Document', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const devices = [\n        //         await testItem.create({type: 'weapon'}),\n        //         await testActor.create({type: 'vehicle'}),\n        //     ];\n\n        //     for (const device of devices) {\n        //         await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     }\n\n        //     const fetchedDevices = await NetworkDeviceFlow.getNetworkDevices(controller);\n\n        //     // Check for structural equality.\n        //     assert.strictEqual(controller.system.networkDevices.length, 2);\n        //     assert.strictEqual(fetchedDevices.length, 2);\n\n        //     // Check for referential equality.\n        //     for (const fetched of fetchedDevices) {\n        //         assert.include(devices, fetched);\n        //     }\n        // });\n\n        // it('remove a item device from a network', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testItem.create({type: 'weapon'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, device.uuid);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.strictEqual(device.system.technology.networkController, '');\n        // });\n\n        // it('remove a vehicle device from a network', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testActor.create({type: 'vehicle'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, device.uuid);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.strictEqual(device.system.networkController, '');\n        // });\n\n\n        // it('remove an item device from a network when it is added to a new one', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const newController = await testItem.create({type: 'device'});\n        //     const device = await testItem.create({type: 'weapon'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     await NetworkDeviceFlow.addDeviceToNetwork(newController, device);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.deepEqual(newController.system.networkDevices, [device.uuid]);\n        //     assert.strictEqual(device.system.technology.networkController, newController.uuid);\n        // });\n\n        // it('remove a vehicle device from a network when it is added to a new one', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const newController = await testItem.create({type: 'device'});\n        //     const device = await testActor.create({type: 'vehicle'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     await NetworkDeviceFlow.addDeviceToNetwork(newController, device);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.deepEqual(newController.system.networkDevices, [device.uuid]);\n        //     assert.strictEqual(device.system.networkController, newController.uuid);\n        // });\n\n        // it(\"remove an item network device that doesn't exist anymore\", async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testItem.create({type: 'weapon'});\n        //     const deviceId = device.id;\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     // Simulate user deleting the network item.\n        //     await device.delete();\n\n        //     // Make sure item is actually deleted.\n        //     const collectionItem = game.items?.get(deviceId);\n        //     assert.strictEqual(collectionItem, undefined);\n\n        //     // However the device is still connected to the controller.\n        //     assert.strictEqual(controller.system.networkDevices.length, 1);\n        //     await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, controller.system.networkDevices[0]);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        // });\n\n        // it(\"remove a vehicle network device that doesn't exist anymore\", async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testActor.create({type: 'vehicle'});\n        //     const deviceId = device.id;\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     // Simulate user deleting the network item.\n        //     await device.delete();\n\n        //     // Make sure item is actually deleted.\n        //     const collectionItem = game.items?.get(deviceId);\n        //     assert.strictEqual(collectionItem, undefined);\n\n        //     // However the device is still connected to the controller.\n        //     assert.strictEqual(controller.system.networkDevices.length, 1);\n        //     await NetworkDeviceFlow.removeDeviceLinkFromNetwork(controller, controller.system.networkDevices[0]);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        // });\n\n        // it('remove all devices from a controller', async () => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const itemDevice = await testItem.create({type: 'weapon'});\n        //     const vehicleDevice = await testActor.create({type: 'vehicle'});\n        //     const devices = [\n        //         itemDevice,\n        //         vehicleDevice,\n        //     ];\n\n        //     for (const device of devices) {\n        //         await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n        //     }\n\n        //     await NetworkDeviceFlow.removeAllDevicesFromNetwork(controller);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.strictEqual(itemDevice.system.technology.networkController, '');\n        //     assert.strictEqual(vehicleDevice.system.networkController, '');\n        // });\n\n        // it('should not allow non-vehicle actors to be added to controller', async() => {\n        //     const controller = await testItem.create({type: 'device'});\n        //     const device = await testActor.create({type: 'character'});\n\n        //     await NetworkDeviceFlow.addDeviceToNetwork(controller, device);\n\n        //     assert.deepEqual(controller.system.networkDevices, []);\n        //     assert.strictEqual(device.system.networkController, undefined);\n        // });\n    });\n};\n", "import {SR6TestingDocuments} from \"./utils\";\nimport {SR6Actor} from \"../module/actor/SR6Actor\";\nimport {SR6Item} from \"../module/item/SR6Item\";\nimport {TestCreator} from \"../module/tests/TestCreator\";\nimport { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\n\nexport const shadowrunTesting = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    })\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    })\n\n    describe('SuccessTest', () => {\n        it('evaluate a roll from action data', async () => {\n           const actionData = {\n                'system.action.test': 'SuccessTest',\n                'type': 'action',\n                'system.action.type': 'simple',\n                'system.action.attribute': 'body',\n                'system.action.skill': 'automatics',\n                'system.action.spec': false,\n                'system.action.limit': {\n                    base: 1,\n                    value: 1,\n                    attribute: 'physical',\n                },\n                'system.action.threshold': {\n                    base: 1,\n                    value: 1,\n                },\n                'system.action.damage': {\n                    ap: {value: 5, base: 5, mod: Array(0)},\n                    attribute: \"\",\n                    base: 5,\n                    base_formula_operator: \"add\",\n                    element: {value: '', base: ''},\n                    itemSource: {actorId: '', itemId: '', itemType: '', itemName: ''},\n                    mod: [],\n                    type: {value: 'physical', base: 'physical'},\n                    value: 5\n                }\n            };\n\n            const action = await testItem.create(actionData);\n\n            const actorData = {'type': 'character',\n                               'system.attributes.body.base': 5,\n                               'system.skills.active.automatics.base': 45};\n            const actor = await testActor.create(actorData);\n\n            const test = await TestCreator.fromItem(action, actor, {showMessage: false, showDialog: false});\n\n            // For a broken test just fail.v\n            if (!test) assert.strictEqual(true, false);\n\n            // Evaluate a working test.\n            if (test) {\n                await test.evaluate();\n\n                assert.strictEqual(test.pool.value, 50); // 5 body, 45 automatics\n                assert.strictEqual(test.threshold.value, 1); // 1\n                assert.strictEqual(test.limit.value, 4); // 4 Physical + 1\n\n                // TODO: Implement mocking for SR6Roll to test none-random results\n            }\n        });\n\n        it('evaluate a roll from simple pool data', async () => {\n            const test = TestCreator.fromPool({pool: 10}, {showMessage: false, showDialog: false});\n            await test.evaluate();\n\n            assert.strictEqual(test.pool.value, 10);\n        });\n\n        it('evaluate an opposed roll from a opposed action', async () => {\n            const actionData = {\n                'type': 'action',\n                'data.action.test': 'SuccessTest',\n\n                'data.action.type': 'simple',\n                'data.action.attribute': 'body',\n                'data.action.skill': 'automatics',\n                'data.action.spec': false,\n                'data.action.limit': {\n                    base: 1,\n                    value: 1,\n                    attribute: 'physical',\n                },\n                'data.action.threshold': {\n                    base: 1,\n                    value: 1,\n                },\n                'data.action.opposed': {\n                    \"type\": \"custom\",\n                    // TODO: This could maybe simply be SuccessTest?\n                    \"test\": \"OpposedTest\",\n                    \"attribute\": \"reaction\",\n                    \"attribute2\": \"intuition\",\n                    \"skill\": \"\",\n                    \"mod\": 0,\n                    \"description\": \"\"\n                }\n            };\n\n            const action = await testItem.create(actionData);\n            const actorData = {'type': 'character',\n                               'data.attributes.body.base': 5,\n                               'data.skills.active.automatics.base': 45};\n            const actor = await testActor.create(actorData);\n\n            const test = await TestCreator.fromItem(action, actor, {showMessage: false, showDialog: false});\n\n            if (test) {\n                await test.toMessage();\n            }\n        });\n    });\n\n    describe('OpposedTest', () => {\n\n    });\n};\n", "import { SR6TestingDocuments } from './utils';\nimport { SR6Actor } from '../module/actor/SR6Actor';\nimport { SR6Item } from '../module/item/SR6Item';\nimport { QuenchBatchContext } from '@ethaks/fvtt-quench';\n\nexport const shadowrunInventoryFlow = (context: QuenchBatchContext) => {\n    const { describe, it, assert, should, before, after } = context;\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments<SR6Actor>(SR6Actor);\n        testItem = new SR6TestingDocuments<SR6Item>(SR6Item);\n    });\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    });\n\n    describe('InventoryFlow testing', () => {\n        it('create a new inventory and know of its existance', async () => {\n            const actor = await testActor.create({ type: 'character' });\n\n            await actor.inventory.create('test');\n\n            assert.exists(actor.system.inventories['test']);\n            assert.deepEqual(actor.system.inventories['test'], {\n                name: 'test',\n                label: 'test',\n                itemIds: [],\n            });\n\n            assert.strictEqual(actor.inventory.exists('test'), true);\n        });\n\n        it('remove an inventory', async () => {\n            const inventoriesData = { test: { name: 'test', label: 'test', itemIds: [] } };\n            const actor = await testActor.create({ 'type': 'character', 'system.inventories': inventoriesData });\n\n            await actor.inventory.remove('test');\n\n            assert.notExists(actor.system.inventories['test']);\n        });\n\n        it('add and remove an item to and from an inventory', async () => {\n            const inventoriesData = { test: { name: 'test', label: 'test', itemIds: [] } };\n            const actor = await testActor.create({ 'type': 'character', 'system.inventories': inventoriesData });\n            const item = await actor.createEmbeddedDocuments('Item', [{ type: 'weapon', name: 'Test Weapon' }]);\n\n            await actor.inventory.addItems('test', item);\n            const itemIds = item.map((item) => item.id);\n            assert.deepEqual(actor.system.inventories.test.itemIds, itemIds);\n\n            await actor.inventory.removeItem(item[0]);\n            assert.deepEqual(actor.system.inventories.test.itemIds, []);\n        });\n\n        it('rename an existing inventory', async () => {\n            const inventoriesData = { test: { name: 'test', label: 'test', itemIds: ['notAnItemId'] } };\n            const actor = await testActor.create({ 'type': 'character', 'system.inventories': inventoriesData });\n\n            const before = 'test';\n            const after = 'betterTest';\n            await actor.inventory.rename(before, after);\n\n            assert.notExists(actor.system.inventories[before]);\n            assert.exists(actor.system.inventories[after]);\n            assert.deepEqual(actor.system.inventories[after], {\n                name: after,\n                label: after,\n                itemIds: ['notAnItemId'],\n            });\n        });\n\n        it('create and rename an inventory including prohibited foundry chars', async () => {\n            const actor = await testActor.create({ type: 'character' });\n\n            await actor.inventory.create('Test.');\n\n            assert.exists(actor.system.inventories['Test']);\n            assert.notExists(actor.system.inventories['Test']['']);\n            assert.deepEqual(actor.system.inventories['Test'], {\n                name: 'Test',\n                label: 'Test',\n                itemIds: [],\n            });\n\n            await actor.inventory.rename('Test', 'Test.');\n            assert.exists(actor.system.inventories['Test']);\n            assert.notExists(actor.system.inventories['Test']['']);\n            assert.deepEqual(actor.system.inventories['Test'], {\n                name: 'Test',\n                label: 'Test',\n                itemIds: [],\n            });\n\n            await actor.inventory.remove('Test');\n            assert.notExists(actor.system.inventories['Test']);\n            await actor.inventory.create('-=Fisch.');\n            assert.exists(actor.system.inventories['Fisch']);\n            assert.deepEqual(actor.system.inventories['Fisch'], {\n                name: 'Fisch',\n                label: 'Fisch',\n                itemIds: [],\n            });\n        });\n    });\n};\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { WeaponParserBase } from '../module/apps/itemImport/parser/weapon/WeaponParserBase';\nimport DamageData = Shadowrun.DamageData;\nimport { DataDefaults } from '../module/data/DataDefaults';\n\nclass TestWeaponParser extends WeaponParserBase {\n    public override GetDamage(jsonData: object): DamageData {\n        return super.GetDamage(jsonData);\n    }\n}\n\nfunction mockXmlData(data: object): object {\n    return Object.fromEntries(Object.entries(data)\n        .map(([key, value]) =>\n            [key, { '_TEXT': value }]));\n}\n\nfunction getData(damageString: string): object {\n    return mockXmlData({\n        damage: damageString,\n    });\n}\n\nexport const weaponParserBaseTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let mut = new TestWeaponParser();\n\n    before(async () => {})\n    after(async () => {})\n\n    describe(\"Weapon Damage Values\", () => {\n        it(\"Parses simple damage\", () => {\n            const output = mut.GetDamage(getData(\"12P\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 12,\n                value: 12,\n                type: {\n                    base: 'physical',\n                    value: 'physical',\n                },\n            }));\n        });\n\n        it(\"Parses elemental damage\", () => {\n            const output = mut.GetDamage(getData(\"8S(e)\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 8,\n                value: 8,\n                type: {\n                    base: 'stun',\n                    value: 'stun',\n                },\n                element: {\n                    base: 'electricity',\n                    value: 'electricity',\n                },\n            }));\n        });\n\n        it(\"Parses strength-based damage\", () => {\n            const output = mut.GetDamage(getData(\"({STR}+3)P\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 3,\n                value: 3,\n                type: {\n                    base: 'physical',\n                    value: 'physical',\n                },\n                attribute: 'strength',\n            }));\n        });\n\n        it(\"Parses damage without type as physical\", () => {\n            const output = mut.GetDamage(getData(\"11\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 11,\n                value: 11,\n                type: {\n                    base: 'physical',\n                    value: 'physical',\n                },\n            }));\n        });\n\n        it(\"Parses 0 damage\", () => {\n            const output = mut.GetDamage(getData(\"0\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 0,\n                value: 0,\n                type: {\n                    base: 'physical',\n                    value: 'physical',\n                },\n            }));\n        });\n\n        it(\"Parses basic matrix damage\", () => {\n            const output = mut.GetDamage(getData(\"7M\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 7,\n                value: 7,\n                type: {\n                    base: 'matrix',\n                    value: 'matrix',\n                },\n            }));\n        });\n\n        it(\"Parses strength-based damage without modifier\", () => {\n            const output = mut.GetDamage(getData(\"({STR})P\"));\n            assert.deepEqual(output, DataDefaults.damageData({\n                base: 0,\n                value: 0,\n                type: {\n                    base: 'physical',\n                    value: 'physical',\n                },\n                attribute: 'strength',\n            }));\n        });\n    })\n}\n\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { CharacterImporter } from '../../../module/apps/importer/actorImport/characterImporter/CharacterImporter';\nimport { SR6TestingDocuments } from '../../utils';\nimport { SR6Actor } from '../../../module/actor/SR6Actor';\nimport { SR6Item } from '../../../module/item/SR6Item';\n\nexport const characterImporterTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    let importOptions = {};\n    let chummerFile = {\n        characters: {\n            character: {},\n        },\n    };\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n    });\n    after(async () => {\n        await testActor.teardown();\n    });\n\n    describe('Chummer Character Importer', () => {\n        let testItem = new SR6TestingDocuments(SR6Item);\n\n        it('Does nothing when no character found', async () => {\n            const item = await testItem.create({ type: 'weapon' }) as SR6Item;\n            const character = await testActor.create({ 'type': 'character', 'system.metatype': 'human' });\n            await character.createEmbeddedDocuments('Item', [item]);\n            assert.lengthOf(character.items, 1);\n\n            await new CharacterImporter().importChummerCharacter(character, {}, importOptions);\n\n            assert.lengthOf(character.items, 1);\n            assert.strictEqual(character.items.contents[0].name, item.name);\n            assert.strictEqual(character.items.contents[0].type, item.type);\n        });\n\n        it('Clears all imported items', async () => {\n            const item = await testItem.create({ type: 'weapon' }) as SR6Item;\n            await item.update({'system.importFlags.isImported': true})\n\n            const character = await testActor.create({ 'type': 'character', 'system.metatype': 'human' });\n            await character.createEmbeddedDocuments('Item', [item]);\n\n            assert.lengthOf(character.items, 1);\n\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.isEmpty(character.items);\n        });\n\n        it('Clears all items but not imported ones', async () => {\n            const item = await testItem.create({ type: 'weapon' }) as SR6Item;\n\n            const character = await testActor.create({ 'type': 'character', 'system.metatype': 'human' });\n            await character.createEmbeddedDocuments('Item', [item]);\n\n            assert.lengthOf(character.items, 1);\n\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.lengthOf(character.items, 1);\n        });\n\n        it('Clears all items but actions', async () => {\n            const item = await testItem.create({ type: 'action' }) as SR6Item;\n            const character = await testActor.create({ 'type': 'character', 'system.metatype': 'human' });\n            await character.createEmbeddedDocuments('Item', [item]);\n\n            assert.lengthOf(character.items, 1);\n\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.lengthOf(character.items, 1);\n            assert.strictEqual(character.items.contents[0].name, item.name);\n            assert.strictEqual(character.items.contents[0].type, item.type);\n        });\n\n        it('Clears all items but effects', async () => {\n            let item = await testItem.create({ type: 'weapon' }) as Item;\n            item.createEmbeddedDocuments('ActiveEffect', [{\n                origin: item.uuid,\n                disabled: false,\n                label: 'Test Effect',\n                changes: [\n                    { key: 'system.attributes.body.mod', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM },\n                    { key: 'system.attributes.body', value: 2, mode: CONST.ACTIVE_EFFECT_MODES.CUSTOM }]\n            }]);\n            const character = await testActor.create({ 'type': 'character', 'system.metatype': 'human' });\n            await character.createEmbeddedDocuments('Item', [item]);\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.lengthOf(character.items, 1);\n            assert.strictEqual(character.items.contents[0].name, item.name);\n            assert.strictEqual(character.items.contents[0].type, item.type);\n        });\n    });\n\n};\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { CharacterImporter } from '../../../module/apps/importer/actorImport/characterImporter/CharacterImporter';\nimport { SR6TestingDocuments } from '../../utils';\nimport { SR6Actor } from '../../../module/actor/SR6Actor';\n\nexport const characterInfoUpdaterTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActorFactory;\n    let importOptions = {};\n    let chummerFile;\n\n    before(async () => {\n        testActorFactory = new SR6TestingDocuments(SR6Actor);\n    });\n\n    beforeEach(async () => {\n        chummerFile = {\n            characters: {\n                character: {},\n            },\n        };\n    });\n\n    after(async () => {\n        await testActorFactory.teardown();\n    });\n\n    describe('Chummer Character Info Updater handles alias correctly', () => {\n        it('Imports name', async () => {\n            chummerFile.characters.character = {\n                alias: 'ImportTester',\n            };\n\n            const character = await testActorFactory.create({ 'type': 'character', 'system.metatype': 'human' });\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.name, 'ImportTester');\n            assert.strictEqual(character.prototypeToken.name, 'ImportTester');\n        });\n\n        it('Sets placeholder when no alias', async () => {\n            const character = await testActorFactory.create({ 'type': 'character', 'system.metatype': 'human' });\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.name, '[Name not found]');\n            assert.strictEqual(character.prototypeToken.name, '[Name not found]');\n        });\n    });\n\n    describe('Chummer Character Info Updater handles attributes correctly', () => {\n        it('Imports standard attributes', async () => {\n            chummerFile.characters.character = {\n                attributes: [\n                    '0',\n                    {\n                        attributecategory_english: 'Standard',\n                        attribute: [\n                            {\n                                name_english: 'BOD',\n                                name: 'KON',\n                                base: '3',\n                                total: '3',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'AGI',\n                                name: 'GES',\n                                base: '3',\n                                total: '3',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'REA',\n                                name: 'REA',\n                                base: '5',\n                                total: '5',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'STR',\n                                name: 'STR',\n                                base: '1',\n                                total: '1',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'CHA',\n                                name: 'CHA',\n                                base: '2',\n                                total: '2',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '10',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'INT',\n                                name: 'INT',\n                                base: '6',\n                                total: '6',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'LOG',\n                                name: 'LOG',\n                                base: '4',\n                                total: '4',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'WIL',\n                                name: 'WIL',\n                                base: '5',\n                                total: '5',\n                                min: '1',\n                                max: '6',\n                                aug: '10',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                            {\n                                name_english: 'EDG',\n                                name: 'EDG',\n                                base: '3',\n                                total: '3',\n                                min: '2',\n                                max: '7',\n                                aug: '7',\n                                bp: '15',\n                                metatypecategory: 'Special',\n                            },\n                            {\n                                name_english: 'ESS',\n                                name: 'ESS',\n                                base: '1',\n                                total: '1',\n                                min: '1',\n                                max: '6',\n                                aug: '6',\n                                bp: '0',\n                                metatypecategory: 'Standard',\n                            },\n                        ],\n                    },\n                ],\n            };\n\n            const character = await testActorFactory.create({ 'type': 'character', 'system.metatype': 'human' });\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.attributes.body.value, 3);\n            assert.strictEqual(character.system.attributes.charisma.value, 2);\n            assert.strictEqual(character.system.attributes.intuition.value, 6);\n            assert.strictEqual(character.system.attributes.logic.value, 4);\n            assert.strictEqual(character.system.attributes.reaction.value, 5);\n            assert.strictEqual(character.system.attributes.strength.value, 1);\n            assert.strictEqual(character.system.attributes.willpower.value, 5);\n            assert.strictEqual(character.system.attributes.agility.value, 3);\n\n            assert.strictEqual(character.system.attributes.edge.value, 3);\n            assert.strictEqual(character.system.attributes.essence.value, 6);\n        });\n\n        it('Imports magic attribute', async () => {\n            chummerFile.characters.character = {\n                attributes: [\n                    '0',\n                    {\n                        attributecategory_english: 'Standard',\n                        attribute: [\n                            {\n                                name_english: 'MAG',\n                                name: 'MAG',\n                                base: '7',\n                                total: '7',\n                                min: '6',\n                                max: '12',\n                                aug: '12',\n                                bp: '35',\n                                metatypecategory: 'Special',\n                            },\n                        ],\n                    },\n                ],\n            };\n\n            const character = await testActorFactory.create({ 'type': 'character', 'system.metatype': 'human' });\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.attributes.magic.value, 7);\n            assert.strictEqual(character.system.attributes.resonance.value, 0);\n        });\n\n        it('Imports resonance attribute', async () => {\n            chummerFile.characters.character = {\n                attributes: [\n                    '0',\n                    {\n                        attributecategory_english: 'Standard',\n                        attribute: [\n                            {\n                                name_english: 'RES',\n                                name: 'RES',\n                                base: '7',\n                                total: '7',\n                                min: '6',\n                                max: '12',\n                                aug: '12',\n                                bp: '35',\n                                metatypecategory: 'Special',\n                            },\n                        ],\n                    },\n                ],\n            };\n\n            const character = await testActorFactory.create({ 'type': 'character', 'system.metatype': 'human' });\n            await new CharacterImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.attributes.magic.value, 0);\n            assert.strictEqual(character.system.attributes.resonance.value, 7);\n        });\n    });\n};\n", "\nexport const emptySpirit = {\n    characters: {\n        character: {\n            attributes: [\n                0,\n                {\n                    attributecategory_english: 'Standard',\n                    attribute: [\n                        {\n                            name_english: 'MAG',\n                            name: 'MAG',\n                            base: 7,\n                            total: 7,\n                            min: 6,\n                            max: 12,\n                            aug: 12,\n                            bp: 35,\n                            metatypecategory: 'Special'\n                        }                            \n                    ]\n                }\n            ]\n        }\n    }\n}", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { SpiritImporter } from '../../../module/apps/importer/actorImport/spiritImporter/SpiritImporter';\nimport { SR6TestingDocuments } from '../../utils';\nimport { SR6Actor } from '../../../module/actor/SR6Actor';\nimport { SR6Item } from '../../../module/item/SR6Item';\nimport { emptySpirit } from './spirits';\n\n\nexport const spiritImporterTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActor;\n    const actorType = 'spirit';\n\n    const importOptions = {};\n    let chummerFile;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n    });\n\n    beforeEach(async () => {\n        chummerFile = structuredClone(emptySpirit);\n    });\n\n    after(async () => {\n        await testActor.teardown();\n    });\n\n    describe('Chummer Spirit Importer', () => {\n        const testItem = new SR6TestingDocuments(SR6Item);\n\n        it('Does nothing when no character found', async () => {\n            const item = await testItem.create({ type: 'weapon' });\n            const character = await testActor.create({ type: actorType });\n            await character.createEmbeddedDocuments('Item', [item]);\n\n            assert.lengthOf(character.items, 1);\n            // @ts-expect-error\n            assert.strictEqual(character.items.contents[0].name, item.name);\n            // @ts-expect-error\n            assert.strictEqual(character.items.contents[0].type, item.type);\n        });\n\n        it('Clears all items no actions present', async () => {\n            const item = await testItem.create({ type: 'weapon' });\n            const character = await testActor.create({ type: actorType });\n            await character.createEmbeddedDocuments('Item', [item]);\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.isEmpty(character.items);\n        });\n\n        it('Clears all items but actions', async () => {\n            const item = await testItem.create({ type: 'action' });\n            const character = await testActor.create({ type: actorType });\n            await character.createEmbeddedDocuments('Item', [item]);\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.lengthOf(character.items, 1);\n            // @ts-expect-error\n            assert.strictEqual(character.items.contents[0].name, item.name);\n            // @ts-expect-error\n            assert.strictEqual(character.items.contents[0].type, item.type);\n        });\n    });\n};\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { SpiritImporter } from '../../../module/apps/importer/actorImport/spiritImporter/SpiritImporter.js';\nimport { SR6TestingDocuments } from '../../utils';\nimport { SR6Actor } from '../../../module/actor/SR6Actor';\nimport { emptySpirit } from './spirits';\n\nexport const spiritInfoUpdaterTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let testActorFactory;\n    const actorType = 'spirit';\n\n    const importOptions = {};\n    let chummerFile;\n\n    before(async () => {\n        testActorFactory = new SR6TestingDocuments(SR6Actor);\n    });\n\n    beforeEach(async () => {\n        chummerFile = structuredClone(emptySpirit);\n    });\n\n    after(async () => {\n        await testActorFactory.teardown();\n    });\n\n    describe('Chummer Info Updater handles alias correctly', () => {\n        it('Imports name', async () => {\n            chummerFile.characters.character.alias = 'ImportTester';\n\n            const character = await testActorFactory.create({ 'type': actorType });\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.name, 'ImportTester');\n            assert.strictEqual(character.prototypeToken.name, 'ImportTester');\n        });\n\n        it('Sets placeholder when no alias', async () => {\n            const character = await testActorFactory.create({ 'type': actorType });\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.name, '[Name not found]');\n            assert.strictEqual(character.prototypeToken.name, '[Name not found]');\n        });\n    });\n\n    describe('Chummer Info Updater handles attributes correctly', () => {\n        it('Imports force attribute', async () => {\n            chummerFile.characters.character = {\n                attributes: [\n                    '0',\n                    {\n                        attributecategory_english: 'Standard',\n                        attribute: [\n                            {\n                                name_english: 'MAG',\n                                total: '3'\n                            },\n                        ],\n                    },\n                ],\n            };\n            const character = await testActorFactory.create({ 'type': actorType });\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.force, 3);\n        });\n    });\n\n    describe('Chummer Info Updater handles spirit type correctly', () => {\n        it('maps existing spirit type', async () => {\n            chummerFile.characters.character.metatype_english = 'Spirit of Fire';\n            const character = await testActorFactory.create({ 'type': actorType });\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.spiritType, 'fire');\n        });\n\n        it('writes nothing when spirit type not found', async () => {\n            chummerFile.characters.character.metatype_english = 'Spirit of Bullshit';\n            const character = await testActorFactory.create({ 'type': actorType });\n            await new SpiritImporter().importChummerCharacter(character, chummerFile, importOptions);\n\n            assert.strictEqual(character.system.spiritType, '');\n        });\n    });\n};\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport { WeaponParser } from '../../../../module/apps/importer/actorImport/itemImporter/weaponImport/WeaponParser';\n\nexport const weaponParserTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let chummerCharacter;\n    let chummerRangedWeapon = {\n        guid: '8a88eb37-cf7b-4c0b-bb73-74f950e33fc8',\n        sourceid: '61c59a89-3c51-46b7-880a-933b29394315',\n        name: 'Ruger Super Warhawk',\n        fullname: 'Ruger Super Warhawk',\n        name_english: 'Ruger Super Warhawk',\n        category: 'Heavy Pistols',\n        category_english: 'Heavy Pistols',\n        type: 'Ranged',\n        reach: '0',\n        accuracy: '5 (8)',\n        accuracy_noammo: '5 (8)',\n        rawaccuracy: '5',\n        damage: '11S',\n        damage_noammo: '9P',\n        damage_english: '11S',\n        damage_noammo_english: '9P',\n        rawdamage: '9P',\n        ap: '-2',\n        ap_noammo: '-3',\n        rawap: '-2',\n        mode: 'SS',\n        mode_noammo: 'SS',\n        rc: '2',\n        rc_noammo: '2',\n        rawrc: '0',\n        ammo: '6(cy)',\n        ammo_english: '6(cy)',\n        maxammo: '6(cy)',\n        conceal: '-5',\n        avail: '6R',\n        cost: '4,775',\n        owncost: '400',\n        weight: '0',\n        ownweight: '0',\n        source: 'SR5',\n        page: '427',\n        weaponname: null,\n        location: null,\n        attack: '0',\n        sleaze: '0',\n        dataprocessing: '2',\n        firewall: '2',\n        devicerating: '2',\n        programlimit: '0',\n        iscommlink: 'False',\n        isprogram: 'False',\n        active: 'False',\n        homenode: 'False',\n        conditionmonitor: '9',\n        matrixcmfilled: '0',\n        accessories: {\n            accessory: [\n                {\n                    guid: 'f15e3860-c3c1-4eca-95ab-67c2b7eacfef',\n                    sourceid: '85b01b5c-c788-4b43-8190-9e0c18391436',\n                    name: 'Personalized Grip',\n                    name_english: 'Personalized Grip',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '2',\n                    ratinglabel: 'String_Rating',\n                    cost: '100',\n                    owncost: '100',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'HT',\n                    page: '182',\n                    accuracy: '+1',\n                    notes: 'ANGEPASSTER GRIFF\\nDurch diese Modikation kann der Besitzer einer Waffe diese exakt an Gr\u00F6\u00DFe und Form seiner Hand anpassen. Das ist besonders f\u00FCr Metamenschen am oberen und unteren Ende der Gr\u00F6\u00DFenskala der Metamenschheit n\u00FCtzlich. Die Modikation steigert die Pr\u00E4zision der Waffe f\u00FCr ihren Besitzer um 1.',\n                },\n                {\n                    guid: '6e3b7028-299e-46cc-b140-6da3fb2d6ecd',\n                    sourceid: 'ea64527d-0e1e-4248-957b-7c02d79dad30',\n                    name: 'Concealed Quick-Draw Holster',\n                    name_english: 'Concealed Quick-Draw Holster',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '-1',\n                    avail: '6',\n                    ratinglabel: 'String_Rating',\n                    cost: '275',\n                    owncost: '275',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'RG',\n                    page: '51',\n                    accuracy: '0',\n                    notes: null,\n                },\n                {\n                    guid: '715bb07c-fbc4-4c2e-ae43-3dd5ca066eb7',\n                    sourceid: 'd57d2c64-1f61-4f5f-a465-8ce0dfacec6a',\n                    name: 'Smartgun System, Internal',\n                    name_english: 'Smartgun System, Internal',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '+2R',\n                    ratinglabel: 'String_Rating',\n                    cost: '400',\n                    owncost: '400',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'SR5',\n                    page: '433',\n                    accuracy: '+2',\n                    gears: {\n                        gear: [\n                            {\n                                guid: 'cf17ef4c-1535-4663-b64c-e1aedb53a996',\n                                sourceid: '3a79e046-8106-4089-a1ab-895eee956b86',\n                                name: 'Laser Range Finder',\n                                name_english: 'Laser Range Finder',\n                                category: 'Sensor Functions',\n                                category_english: 'Sensor Functions',\n                                ispersona: 'False',\n                                isammo: 'False',\n                                issin: 'False',\n                                capacity: '[1]',\n                                armorcapacity: '[1]',\n                                maxrating: null,\n                                rating: '0',\n                                qty: '1',\n                                avail: '0',\n                                avail_english: '0',\n                                cost: '0',\n                                owncost: '1',\n                                weight: '0',\n                                ownweight: '0',\n                                extra: null,\n                                bonded: 'False',\n                                equipped: 'True',\n                                wirelesson: 'False',\n                                location: null,\n                                gearname: null,\n                                source: 'SR5',\n                                page: '446',\n                                attack: '0',\n                                sleaze: '0',\n                                dataprocessing: '0',\n                                firewall: '0',\n                                devicerating: '0',\n                                programlimit: '0',\n                                iscommlink: 'False',\n                                isprogram: 'False',\n                                active: 'False',\n                                homenode: 'False',\n                                conditionmonitor: '8',\n                                matrixcmfilled: '0',\n                                children: null,\n                                weaponbonusdamage: '+0',\n                                weaponbonusdamage_english: '+0',\n                                weaponbonusap: '+0',\n                                weaponbonusacc: '+0',\n                                weaponbonusrange: '0',\n                                flechetteweaponbonusdamage: '+0',\n                                flechetteweaponbonusdamage_english: '+0',\n                                flechetteweaponbonusap: '+0',\n                                flechetteweaponbonusacc: '+0',\n                                flechetteweaponbonusrange: '0',\n                                notes: 'Laser-Entfernungsmesser: Dieser einfache Sensor sendet einen Laserstrahl aus, der von der Oberfi \u00E4che eines Ziels re- fi ektiert und von einem Detektor erfasst wird, um die genaue Entfernung zum Ziel zu berechnen.',\n                            },\n                            {\n                                guid: '77b8308d-40b6-4b3a-aa48-5244be279863',\n                                sourceid: 'fa6fa434-107b-4f36-a138-f98b044dae76',\n                                name: 'Camera, Micro',\n                                name_english: 'Camera, Micro',\n                                category: 'Vision Devices',\n                                category_english: 'Vision Devices',\n                                ispersona: 'False',\n                                isammo: 'False',\n                                issin: 'False',\n                                capacity: '1',\n                                armorcapacity: '[1]',\n                                maxrating: null,\n                                rating: '0',\n                                qty: '1',\n                                avail: '0',\n                                avail_english: '0',\n                                cost: '0',\n                                owncost: '1',\n                                weight: '0',\n                                ownweight: '0',\n                                extra: null,\n                                bonded: 'False',\n                                equipped: 'True',\n                                wirelesson: 'False',\n                                location: null,\n                                gearname: null,\n                                source: 'SR5',\n                                page: '443',\n                                attack: '0',\n                                sleaze: '0',\n                                dataprocessing: '0',\n                                firewall: '0',\n                                devicerating: '0',\n                                programlimit: '0',\n                                iscommlink: 'False',\n                                isprogram: 'False',\n                                active: 'False',\n                                homenode: 'False',\n                                conditionmonitor: '8',\n                                matrixcmfilled: '0',\n                                children: null,\n                                weaponbonusdamage: '+0',\n                                weaponbonusdamage_english: '+0',\n                                weaponbonusap: '+0',\n                                weaponbonusacc: '+0',\n                                weaponbonusrange: '0',\n                                flechetteweaponbonusdamage: '+0',\n                                flechetteweaponbonusdamage_english: '+0',\n                                flechetteweaponbonusap: '+0',\n                                flechetteweaponbonusacc: '+0',\n                                flechetteweaponbonusrange: '0',\n                                notes: null,\n                            },\n                        ],\n                    },\n                    notes: null,\n                },\n                {\n                    guid: 'b5e5dd9f-7b96-4254-b78c-c7beb6002ae3',\n                    sourceid: '03243dcd-fe82-441c-bee7-971949e80a33',\n                    name: 'Slumratte',\n                    name_english: 'Slumratte',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '-1',\n                    avail: '0',\n                    ratinglabel: 'String_Rating',\n                    cost: '0',\n                    owncost: '0',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'HT',\n                    page: '184',\n                    accuracy: '0',\n                    notes: 'SLUMRATTE\\n(KOSTEN: 5 KARMA)\\nDer Charakter ist auf der Stra\u00DFe aufgewachsen und hat schnell gelernt, dass er das Wenige, das er besa\u00DF, gut verbergen musste. Und dass er nach M\u00F6glichkeit auch eine verborgene Waffe tragen sollte. Wenn der Charakter einen Gegenstand am eigenen K\u00F6rper oder unter der Kleidung versteckt, wird dessen Tarnmodikator zus\u00E4tzlich um 1 gesenkt. Der Charakter kann gleichzeitig h\u00F6chstens eine Anzahl von [Geschicklichkeit \u00F7 2] Gegenst\u00E4nden (aufgerundet) verstecken, damit diese die Senkung ihres Tarnmodikators erhalten.',\n                },\n                {\n                    guid: 'e83a9839-6ee9-4e69-a207-795b250f3b14',\n                    sourceid: 'a0d3e552-a575-42b0-a532-340a4d079ea5',\n                    name: 'Markentreue',\n                    name_english: 'Markentreue',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '0',\n                    ratinglabel: 'String_Rating',\n                    cost: '0',\n                    owncost: '0',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'RG',\n                    page: '127',\n                    accuracy: '0',\n                    notes: 'MARKENTREUE\\nKOSTEN: 3 KARMA\\nMarkentreue wird in der Sechsten Welt ins Extreme \u00FCbersteigert.\\nPersonen werden von ihren Konzernherren gehirngewaschen, und das kommt besonders bei Feuerwaffen zum Tragen. Manchmal kann Markentreue aber auch von Vorteil sein. Charaktere, die markentreu sind, kennen die Produkte ihrer Lieblingsmarke in- und auswendig. Diesen Vorteil gibt es auf zwei Ebenen: Hersteller und Produkt. Auf der Hersteller-Ebene w\u00E4hlt der Charakter einen Hersteller wie zum Beispiel Ares, Saeder-Krupp, Krime, H&K oder Novatech aus und erh\u00E4lt einen W\u00FCrfelpoolbonus von +1 f\u00FCr jede Probe mit Ger\u00E4ten dieses Herstellers. Auf der Produkt-Ebene erh\u00E4lt er den Bonus nur f\u00FCr ein bestimmtes Ger\u00E4t, wie zum Beispiel eine Ares Predator V, einen S-K-Bentley Concordat, eine Krime Kannon, eine HK227 oder ein Novatech Airware. Der Nachteil ist, dass ein Charakter, der so sehr von einer Marke abh\u00E4ngt, einen W\u00FCrfelpoolmalus von -1 erh\u00E4lt, wenn er Ger\u00E4te anderer Hersteller benutzt. Auf der Produkt-Ebene erh\u00E4lt er einen W\u00FCrfelpoolmalus von -1 f\u00FCr alle Ger\u00E4te desselben Typs anderer Hersteller, wie zum Beispiel schwere Pistolen, Autos, Maschinenpistolen, Sturmkanonen oder Kommlinks.',\n                },\n                {\n                    guid: 'ac1e4eeb-2158-4f7e-a4d2-9d96a01ad759',\n                    sourceid: '5cc39a55-3973-4368-81ee-c7a5c0432323',\n                    name: 'Chameleon Coating (Pistol)',\n                    name_english: 'Chameleon Coating (Pistol)',\n                    mount: 'Side',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '-2',\n                    avail: '10R',\n                    ratinglabel: 'String_Rating',\n                    cost: '1,000',\n                    owncost: '1,000',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'HT',\n                    page: '180',\n                    accuracy: '0',\n                    notes: null,\n                },\n                {\n                    guid: '5c74273b-5d82-48b1-bf14-ba385733a31e',\n                    sourceid: '21bc8b85-3fd7-4bde-ac8d-35e1fa099f21',\n                    name: 'Improved Range Finder',\n                    name_english: 'Improved Range Finder',\n                    mount: 'Barrel',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '6',\n                    ratinglabel: 'String_Rating',\n                    cost: '2,000',\n                    owncost: '2,000',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'RG',\n                    page: '52',\n                    accuracy: '0',\n                    notes: null,\n                },\n                {\n                    guid: '4026928a-e7e8-4e95-ad9e-65657716744f',\n                    sourceid: '93be91c1-3f77-4e7b-9ac2-eb349b76d017',\n                    name: 'Special Modification: Improved Concealment',\n                    name_english: 'Special Modification: Improved Concealment',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '-1',\n                    avail: '0',\n                    ratinglabel: 'String_Rating',\n                    cost: '0',\n                    owncost: '0',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'BTB',\n                    page: '161',\n                    accuracy: '0',\n                    notes: null,\n                },\n                {\n                    guid: '23e5f9b6-2038-4f50-92aa-09ad6d7c4b39',\n                    sourceid: 'b741b729-106e-46f2-9143-0f745fd48789',\n                    name: 'Special Modification: Improved AP',\n                    name_english: 'Special Modification: Improved AP',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '0',\n                    ratinglabel: 'String_Rating',\n                    cost: '0',\n                    owncost: '0',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'BTB',\n                    page: '161',\n                    accuracy: '0',\n                    notes: null,\n                },\n                {\n                    guid: '43ced279-1a49-427b-8ea8-1aa2eec0a78c',\n                    sourceid: '4c47baf0-6b34-4e00-8627-a0f605f84ba0',\n                    name: 'Speed Loader',\n                    name_english: 'Speed Loader',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '2',\n                    ratinglabel: 'String_Rating',\n                    cost: '25',\n                    owncost: '25',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'SR5',\n                    page: '433',\n                    accuracy: '0',\n                    notes: 'Schnelllader: Der Schnelllader ist eine einfache Vorrich- tung, die einen Ring von Kugeln h\u00E4lt, die dadurch schneller in die Trommel eines Revolvers geladen werden k\u00F6nnen. Je- der Schnelllader ist speziell f\u00FCr die Waffe angepasst, f\u00FCr die er entwickelt wurde. Mit einem Schnelllader kann man einen Re- volver mittels einer Komplexen Handlung vollst\u00E4ndig laden, statt eine Kugel nach der anderen reinschieben zu m\u00FCssen (s. Tabelle Waffen Nachladen, S. 165).',\n                },\n                {\n                    guid: '277204e1-5a44-4d0f-af2a-94e6f6280b71',\n                    sourceid: '4c47baf0-6b34-4e00-8627-a0f605f84ba0',\n                    name: 'Speed Loader',\n                    name_english: 'Speed Loader',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '2',\n                    ratinglabel: 'String_Rating',\n                    cost: '25',\n                    owncost: '25',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'SR5',\n                    page: '433',\n                    accuracy: '0',\n                    notes: 'Schnelllader: Der Schnelllader ist eine einfache Vorrich- tung, die einen Ring von Kugeln h\u00E4lt, die dadurch schneller in die Trommel eines Revolvers geladen werden k\u00F6nnen. Je- der Schnelllader ist speziell f\u00FCr die Waffe angepasst, f\u00FCr die er entwickelt wurde. Mit einem Schnelllader kann man einen Re- volver mittels einer Komplexen Handlung vollst\u00E4ndig laden, statt eine Kugel nach der anderen reinschieben zu m\u00FCssen (s. Tabelle Waffen Nachladen, S. 165).',\n                },\n                {\n                    guid: '2c78e5bd-2921-4605-b88f-130838ecd8d5',\n                    sourceid: '4c47baf0-6b34-4e00-8627-a0f605f84ba0',\n                    name: 'Speed Loader',\n                    name_english: 'Speed Loader',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '2',\n                    ratinglabel: 'String_Rating',\n                    cost: '25',\n                    owncost: '25',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'SR5',\n                    page: '433',\n                    accuracy: '0',\n                    notes: 'Schnelllader: Der Schnelllader ist eine einfache Vorrich- tung, die einen Ring von Kugeln h\u00E4lt, die dadurch schneller in die Trommel eines Revolvers geladen werden k\u00F6nnen. Je- der Schnelllader ist speziell f\u00FCr die Waffe angepasst, f\u00FCr die er entwickelt wurde. Mit einem Schnelllader kann man einen Re- volver mittels einer Komplexen Handlung vollst\u00E4ndig laden, statt eine Kugel nach der anderen reinschieben zu m\u00FCssen (s. Tabelle Waffen Nachladen, S. 165).',\n                },\n                {\n                    guid: '8f08edfb-1465-4338-a73e-3600b2a3cbde',\n                    sourceid: '4c47baf0-6b34-4e00-8627-a0f605f84ba0',\n                    name: 'Speed Loader',\n                    name_english: 'Speed Loader',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '2',\n                    ratinglabel: 'String_Rating',\n                    cost: '25',\n                    owncost: '25',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'SR5',\n                    page: '433',\n                    accuracy: '0',\n                    notes: 'Schnelllader: Der Schnelllader ist eine einfache Vorrich- tung, die einen Ring von Kugeln h\u00E4lt, die dadurch schneller in die Trommel eines Revolvers geladen werden k\u00F6nnen. Je- der Schnelllader ist speziell f\u00FCr die Waffe angepasst, f\u00FCr die er entwickelt wurde. Mit einem Schnelllader kann man einen Re- volver mittels einer Komplexen Handlung vollst\u00E4ndig laden, statt eine Kugel nach der anderen reinschieben zu m\u00FCssen (s. Tabelle Waffen Nachladen, S. 165).',\n                },\n                {\n                    guid: '84eb2269-929f-4d20-a31e-1c82b932fe54',\n                    sourceid: '806bfacc-095e-448d-a5b2-c271c569ae51',\n                    name: 'Melee Hardening',\n                    name_english: 'Melee Hardening',\n                    mount: 'None',\n                    extramount: 'None',\n                    rc: null,\n                    conceal: '0',\n                    avail: '6',\n                    ratinglabel: 'String_Rating',\n                    cost: '500',\n                    owncost: '500',\n                    weight: '0',\n                    ownweight: '0',\n                    included: 'False',\n                    source: 'HT',\n                    page: '181',\n                    accuracy: '0',\n                    notes: null,\n                },\n            ],\n        },\n        ranges: [\n            {\n                name: 'Heavy Pistols',\n                short: '0-5',\n                medium: '6-20',\n                long: '21-40',\n                extreme: '41-60',\n            },\n            {\n                name: 'Heavy Pistols',\n                short: '0-5',\n                medium: '6-20',\n                long: '21-40',\n                extreme: '41-60',\n            },\n        ],\n        alternateranges: [\n            {\n                name: null,\n                short: null,\n                medium: null,\n                long: null,\n                extreme: null,\n            },\n            {\n                name: null,\n                short: null,\n                medium: null,\n                long: null,\n                extreme: null,\n            },\n        ],\n        availableammo: '140',\n        currentammo: 'Ammo +DV: Gel Rounds',\n        clips: {\n            clip: [\n                {\n                    name: 'Ammo +DV: Gel Rounds',\n                    count: '6',\n                    location: 'loaded',\n                    id: 'b1b49412-d21c-4bbe-87fc-667f9f963422',\n                    ammotype: {\n                        weaponbonusdamage: '+2S',\n                        weaponbonusdamage_english: '+2S',\n                        weaponbonusap: '+1',\n                        weaponbonusacc: '+0',\n                        weaponbonusrange: '0',\n                        flechetteweaponbonusdamage: '+0',\n                        flechetteweaponbonusdamage_english: '+0',\n                        flechetteweaponbonusap: '+0',\n                        flechetteweaponbonusacc: '+0',\n                        flechetteweaponbonusrange: '0',\n                        DV: '+2S',\n                        BonusRange: '0',\n                    },\n                },\n                {\n                    name: 'Ammo +DV: APDS',\n                    count: '6',\n                    location: 'loaded',\n                    id: '7f937f11-bcdd-4472-a840-c645143ddfa8',\n                    ammotype: {\n                        weaponbonusdamage: '+1',\n                        weaponbonusdamage_english: '+1',\n                        weaponbonusap: '-4',\n                        weaponbonusacc: '+0',\n                        weaponbonusrange: '0',\n                        flechetteweaponbonusdamage: '+0',\n                        flechetteweaponbonusdamage_english: '+0',\n                        flechetteweaponbonusap: '+0',\n                        flechetteweaponbonusacc: '+0',\n                        flechetteweaponbonusrange: '0',\n                        DV: '+1',\n                        BonusRange: '0',\n                    },\n                },\n                {\n                    name: 'Ammo: APDS',\n                    count: '6',\n                    location: 'loaded',\n                    id: '2e466af5-71c9-4051-8c87-3059c5c9605c',\n                    ammotype: {\n                        weaponbonusdamage: '+0',\n                        weaponbonusdamage_english: '+0',\n                        weaponbonusap: '-4',\n                        weaponbonusacc: '+0',\n                        weaponbonusrange: '0',\n                        flechetteweaponbonusdamage: '+0',\n                        flechetteweaponbonusdamage_english: '+0',\n                        flechetteweaponbonusap: '+0',\n                        flechetteweaponbonusacc: '+0',\n                        flechetteweaponbonusrange: '0',\n                        DV: '+0',\n                        BonusRange: '0',\n                    },\n                },\n                {\n                    name: 'Ammo +DV: Explosive Rounds',\n                    count: '6',\n                    location: 'loaded',\n                    id: '172fa39f-ce43-4533-86a9-4a6ebf304b1c',\n                    ammotype: {\n                        weaponbonusdamage: '+2',\n                        weaponbonusdamage_english: '+2',\n                        weaponbonusap: '-1',\n                        weaponbonusacc: '+0',\n                        weaponbonusrange: '0',\n                        flechetteweaponbonusdamage: '+0',\n                        flechetteweaponbonusdamage_english: '+0',\n                        flechetteweaponbonusap: '+0',\n                        flechetteweaponbonusacc: '+0',\n                        flechetteweaponbonusrange: '0',\n                        DV: '+2',\n                        BonusRange: '0',\n                    },\n                },\n                {\n                    name: 'Ammo: Tracker Rounds, Stealth Tag',\n                    count: '6',\n                    location: 'loaded',\n                    id: '95deb6d2-db28-4d0c-bdae-39312468b184',\n                    ammotype: {\n                        weaponbonusdamage: '+0',\n                        weaponbonusdamage_english: '+0',\n                        weaponbonusap: '+0',\n                        weaponbonusacc: '+0',\n                        weaponbonusrange: '0',\n                        flechetteweaponbonusdamage: '+0',\n                        flechetteweaponbonusdamage_english: '+0',\n                        flechetteweaponbonusap: '+0',\n                        flechetteweaponbonusacc: '+0',\n                        flechetteweaponbonusrange: '0',\n                        DV: '+0',\n                        BonusRange: '0',\n                    },\n                },\n            ],\n        },\n        dicepool: '23',\n        dicepool_noammo: '23',\n        skill: 'Pistols',\n        wirelesson: 'True',\n        notes: null,\n    };\n\n    let weaponParser = new WeaponParser();\n\n    beforeEach(async () => {\n        chummerCharacter = {};\n    });\n\n    describe('Weapon Parser can handle inputs', () => {\n        it('has null in character', async () => {\n            chummerCharacter = {\n                weapons: null,\n            };\n\n            let weapons = await weaponParser.parseWeapons(chummerCharacter);\n\n            assert.lengthOf(weapons, 0);\n        });\n\n        it('has empty array in character', async () => {\n            chummerCharacter = {\n                weapons: [],\n            };\n\n            let weapons = await weaponParser.parseWeapons(chummerCharacter);\n\n            assert.lengthOf(weapons, 0);\n        });\n\n        it('is missing weapons in character', async () => {\n            let weapons = await weaponParser.parseWeapons(chummerCharacter);\n\n            assert.lengthOf(weapons, 0);\n        });\n\n        it('has weapon in character', async () => {\n            chummerCharacter = {\n                weapons: {\n                    weapon: chummerRangedWeapon,\n                },\n            };\n            let weapons = await weaponParser.parseWeapons(chummerCharacter);\n\n            assert.lengthOf(weapons, 1);\n        });\n\n        it('weaponArray with empty array', async () => {\n            let weapons = await weaponParser.parseWeaponArray([]);\n\n            assert.lengthOf(weapons, 0);\n        });\n\n        it('weaponArray with one weapon', async () => {\n            let chummerWeapons = [chummerRangedWeapon];\n            let weapons = await weaponParser.parseWeaponArray(chummerWeapons);\n\n            assert.lengthOf(weapons, 1);\n        });\n    });\n\n    describe('Weapon Parser imports weapon', () => {\n        it('weapon with values - english', async () => {\n            chummerCharacter = {\n                weapons: {\n                    weapon: chummerRangedWeapon,\n                },\n            };\n            let weapons = await weaponParser.parseWeapons(chummerCharacter);\n\n            assert.lengthOf(weapons, 1);\n            let weapon = weapons[0];\n\n            //general info\n            assert.strictEqual(weapon.name, 'Ruger Super Warhawk');\n            assert.strictEqual(weapon.type, 'weapon');\n\n            //action\n            assert.strictEqual(weapon.system.action.attribute, 'agility');\n            assert.strictEqual(weapon.system.action.damage.base, 9);\n            assert.strictEqual(weapon.system.action.damage.ap.base, -2);\n            assert.strictEqual(weapon.system.action.damage.type.base, 'physical');\n            assert.strictEqual(weapon.system.action.limit.base, 5);\n            assert.strictEqual(weapon.system.action.type, 'varies');\n\n            //category\n            assert.strictEqual(weapon.system.category, 'range');\n\n            //description\n            assert.strictEqual(weapon.system.description.source, 'SR5 427');\n\n            //import flags\n            assert.strictEqual(weapon.system.importFlags.isFreshImport, true);\n\n            //range\n            assert.strictEqual(weapon.system.range.ranges.extreme, 60);\n            assert.strictEqual(weapon.system.range.ranges.long, 40);\n            assert.strictEqual(weapon.system.range.ranges.medium, 20);\n            assert.strictEqual(weapon.system.range.ranges.short, 5);\n            assert.strictEqual(weapon.system.range.modes.single_shot, true);\n\n            //technology\n        });\n    });\n};\n", "{\n  \"guid\": \"cb8dfbb8-33c1-437b-93b4-e1c19384e3ae\",\n  \"sourceid\": \"e338dcf9-3149-4519-9228-589354be5667\",\n  \"name\": \"SomeBrand Hunter Drone\",\n  \"name_english\": \"SomeBrand Hunter Drone\",\n  \"fullname\": \"SomeBrand Hunter Drone\",\n  \"category\": \"Gro\u00DFe Drohnen\",\n  \"category_english\": \"Drones: Large\",\n  \"isdrone\": \"True\",\n  \"handling\": \"5\",\n  \"accel\": \"2\",\n  \"speed\": \"4\",\n  \"pilot\": \"3\",\n  \"body\": \"6\",\n  \"armor\": \"8\",\n  \"seats\": \"0\",\n  \"sensor\": \"3\",\n  \"avail\": \"10V\",\n  \"cost\": \"31.350\",\n  \"owncost\": \"28.800\",\n  \"source\": \"SAG\",\n  \"page\": \"69\",\n  \"physicalcm\": \"9\",\n  \"physicalcmfilled\": \"0\",\n  \"vehiclename\": null,\n  \"maneuver\": \"0\",\n  \"location\": null,\n  \"attack\": \"0\",\n  \"sleaze\": \"0\",\n  \"dataprocessing\": \"3\",\n  \"firewall\": \"3\",\n  \"devicerating\": \"3\",\n  \"programlimit\": \"3\",\n  \"iscommlink\": \"False\",\n  \"isprogram\": \"False\",\n  \"active\": \"False\",\n  \"homenode\": \"False\",\n  \"matrixcm\": \"10\",\n  \"matrixcmfilled\": \"0\",\n  \"mods\": {\n    \"mod\": [\n      {\n        \"guid\": \"3cde5586-094c-488e-8379-782a73c3998e\",\n        \"sourceid\": \"518a5fdc-3b2c-42a6-a3fb-3cb88918fe72\",\n        \"name\": \"ECM\",\n        \"name_english\": \"ECM\",\n        \"fullname\": \"ECM (Stufe 3)\",\n        \"category\": \"Electromagnetic\",\n        \"category_english\": \"Electromagnetic\",\n        \"limit\": null,\n        \"slots\": \"2\",\n        \"rating\": \"3\",\n        \"ratinglabel\": \"String_Rating\",\n        \"avail\": \"9V\",\n        \"cost\": \"1.500\",\n        \"owncost\": \"1.500\",\n        \"source\": \"R5\",\n        \"wirelesson\": \"False\",\n        \"page\": \"173\",\n        \"included\": \"True\",\n        \"weapons\": null,\n        \"cyberwares\": null\n      },\n      {\n        \"guid\": \"f66fa2cf-dd5c-4a6e-a425-93290fffd18c\",\n        \"sourceid\": \"30099989-d8ca-4f9c-adf0-1de36b6f8ab6\",\n        \"source\": \"R5\",\n        \"name\": \"Riesig\",\n        \"name_english\": \"Huge (Drone)\",\n        \"fullname\": \"Riesig (Fest, Ferngesteuert, Extern)\",\n        \"category\": \"Size\",\n        \"category_english\": \"Size\",\n        \"limit\": null,\n        \"slots\": \"5\",\n        \"avail\": \"16V\",\n        \"cost\": \"1.950\",\n        \"owncost\": \"3.000\",\n        \"page\": \"132\",\n        \"location\": null,\n        \"included\": \"True\",\n        \"weapons\": {\n          \"weapon\": {\n            \"guid\": \"119bc767-e10c-4816-82b5-fac94f2c4291\",\n            \"sourceid\": \"23141cfc-e7c9-4af9-b4e0-a7f0443f1170\",\n            \"name\": \"Shiawase Arms Monsoon\",\n            \"fullname\": \"Shiawase Arms Monsoon\",\n            \"name_english\": \"Shiawase Arms Monsoon\",\n            \"category\": \"Sturmgewehre\",\n            \"category_english\": \"Assault Rifles\",\n            \"type\": \"Ranged\",\n            \"reach\": \"0\",\n            \"accuracy\": \"5 (7)\",\n            \"accuracy_noammo\": \"5 (7)\",\n            \"rawaccuracy\": \"5\",\n            \"damage\": \"10K\",\n            \"damage_noammo\": \"10K\",\n            \"damage_english\": \"10P\",\n            \"damage_noammo_english\": \"10P\",\n            \"rawdamage\": \"10P\",\n            \"ap\": \"-1\",\n            \"ap_noammo\": \"-1\",\n            \"rawap\": \"-1\",\n            \"mode\": \"HM/AM\",\n            \"mode_noammo\": \"HM/AM\",\n            \"rc\": \"2\",\n            \"rc_noammo\": \"2\",\n            \"rawrc\": \"0\",\n            \"ammo\": \"20(v)\",\n            \"ammo_english\": \"20(ml)\",\n            \"maxammo\": \"20(ml)\",\n            \"conceal\": \"+6\",\n            \"avail\": \"10V\",\n            \"cost\": \"1.900\",\n            \"owncost\": \"1.900\",\n            \"weight\": \"0\",\n            \"ownweight\": \"0\",\n            \"source\": \"GH3\",\n            \"page\": \"13\",\n            \"weaponname\": null,\n            \"location\": null,\n            \"attack\": \"0\",\n            \"sleaze\": \"0\",\n            \"dataprocessing\": \"2\",\n            \"firewall\": \"2\",\n            \"devicerating\": \"2\",\n            \"programlimit\": \"0\",\n            \"iscommlink\": \"False\",\n            \"isprogram\": \"False\",\n            \"active\": \"False\",\n            \"homenode\": \"False\",\n            \"conditionmonitor\": \"9\",\n            \"matrixcmfilled\": \"0\",\n            \"accessories\": {\n              \"accessory\": [\n                {\n                  \"guid\": \"ea8dde14-ef8a-4e7e-acc2-50f9478a353d\",\n                  \"sourceid\": \"2da4f104-cf0c-4e0c-a001-4a6da4c2b46b\",\n                  \"name\": \"Elektronisches Feuern\",\n                  \"name_english\": \"Electronic Firing\",\n                  \"mount\": \"Internal\",\n                  \"extramount\": \"None\",\n                  \"rc\": \"1\",\n                  \"conceal\": \"0\",\n                  \"avail\": \"10E\",\n                  \"ratinglabel\": \"String_Rating\",\n                  \"cost\": \"0\",\n                  \"owncost\": \"0\",\n                  \"weight\": \"0\",\n                  \"ownweight\": \"0\",\n                  \"included\": \"True\",\n                  \"source\": \"HT\",\n                  \"page\": \"172\",\n                  \"accuracy\": \"0\"\n                },\n                {\n                  \"guid\": \"bb716d62-cdfa-4f7d-9d20-02c6490d9779\",\n                  \"sourceid\": \"d57d2c64-1f61-4f5f-a465-8ce0dfacec6a\",\n                  \"name\": \"Smartgunsystem, intern\",\n                  \"name_english\": \"Smartgun System, Internal\",\n                  \"mount\": \"Internal\",\n                  \"extramount\": \"None\",\n                  \"rc\": null,\n                  \"conceal\": \"0\",\n                  \"avail\": \"+2E\",\n                  \"ratinglabel\": \"String_Rating\",\n                  \"cost\": \"0\",\n                  \"owncost\": \"0\",\n                  \"weight\": \"0\",\n                  \"ownweight\": \"0\",\n                  \"included\": \"True\",\n                  \"source\": \"SR5\",\n                  \"page\": \"435\",\n                  \"accuracy\": \"+2\",\n                  \"gears\": {\n                    \"gear\": [\n                      {\n                        \"guid\": \"e17745b5-f978-4813-9116-fe93eda45142\",\n                        \"sourceid\": \"3a79e046-8106-4089-a1ab-895eee956b86\",\n                        \"name\": \"Laser-Entfernungsmesser\",\n                        \"name_english\": \"Laser Range Finder\",\n                        \"category\": \"Sensor-Funktionen\",\n                        \"category_english\": \"Sensor Functions\",\n                        \"ispersona\": \"False\",\n                        \"isammo\": \"False\",\n                        \"issin\": \"False\",\n                        \"capacity\": \"[1]\",\n                        \"armorcapacity\": \"[1]\",\n                        \"maxrating\": null,\n                        \"rating\": \"0\",\n                        \"qty\": \"1\",\n                        \"avail\": \"0\",\n                        \"avail_english\": \"0\",\n                        \"cost\": \"0\",\n                        \"owncost\": \"1\",\n                        \"weight\": \"0\",\n                        \"ownweight\": \"0\",\n                        \"extra\": null,\n                        \"bonded\": \"False\",\n                        \"equipped\": \"True\",\n                        \"wirelesson\": \"False\",\n                        \"location\": null,\n                        \"gearname\": null,\n                        \"source\": \"SR5\",\n                        \"page\": \"450\",\n                        \"attack\": \"0\",\n                        \"sleaze\": \"0\",\n                        \"dataprocessing\": \"0\",\n                        \"firewall\": \"0\",\n                        \"devicerating\": \"0\",\n                        \"programlimit\": \"0\",\n                        \"iscommlink\": \"False\",\n                        \"isprogram\": \"False\",\n                        \"active\": \"False\",\n                        \"homenode\": \"False\",\n                        \"conditionmonitor\": \"8\",\n                        \"matrixcmfilled\": \"0\",\n                        \"children\": null,\n                        \"weaponbonusdamage\": \"+0\",\n                        \"weaponbonusdamage_english\": \"+0\",\n                        \"weaponbonusap\": \"+0\",\n                        \"weaponbonusacc\": \"+0\",\n                        \"weaponbonusrange\": \"0\",\n                        \"flechetteweaponbonusdamage\": \"+0\",\n                        \"flechetteweaponbonusdamage_english\": \"+0\",\n                        \"flechetteweaponbonusap\": \"+0\",\n                        \"flechetteweaponbonusacc\": \"+0\",\n                        \"flechetteweaponbonusrange\": \"0\"\n                      },\n                      {\n                        \"guid\": \"2d57ce71-de31-4a95-b751-4b37a5609bac\",\n                        \"sourceid\": \"fa6fa434-107b-4f36-a138-f98b044dae76\",\n                        \"name\": \"Mikrokamera\",\n                        \"name_english\": \"Camera, Micro\",\n                        \"category\": \"Sichtger\u00E4te\",\n                        \"category_english\": \"Vision Devices\",\n                        \"ispersona\": \"False\",\n                        \"isammo\": \"False\",\n                        \"issin\": \"False\",\n                        \"capacity\": \"1\",\n                        \"armorcapacity\": \"[1]\",\n                        \"maxrating\": null,\n                        \"rating\": \"0\",\n                        \"qty\": \"1\",\n                        \"avail\": \"0\",\n                        \"avail_english\": \"0\",\n                        \"cost\": \"0\",\n                        \"owncost\": \"1\",\n                        \"weight\": \"0\",\n                        \"ownweight\": \"0\",\n                        \"extra\": null,\n                        \"bonded\": \"False\",\n                        \"equipped\": \"True\",\n                        \"wirelesson\": \"False\",\n                        \"location\": null,\n                        \"gearname\": null,\n                        \"source\": \"SR5\",\n                        \"page\": \"447\",\n                        \"attack\": \"0\",\n                        \"sleaze\": \"0\",\n                        \"dataprocessing\": \"0\",\n                        \"firewall\": \"0\",\n                        \"devicerating\": \"0\",\n                        \"programlimit\": \"0\",\n                        \"iscommlink\": \"False\",\n                        \"isprogram\": \"False\",\n                        \"active\": \"False\",\n                        \"homenode\": \"False\",\n                        \"conditionmonitor\": \"8\",\n                        \"matrixcmfilled\": \"0\",\n                        \"children\": null,\n                        \"weaponbonusdamage\": \"+0\",\n                        \"weaponbonusdamage_english\": \"+0\",\n                        \"weaponbonusap\": \"+0\",\n                        \"weaponbonusacc\": \"+0\",\n                        \"weaponbonusrange\": \"0\",\n                        \"flechetteweaponbonusdamage\": \"+0\",\n                        \"flechetteweaponbonusdamage_english\": \"+0\",\n                        \"flechetteweaponbonusap\": \"+0\",\n                        \"flechetteweaponbonusacc\": \"+0\",\n                        \"flechetteweaponbonusrange\": \"0\"\n                      }\n                    ]\n                  }\n                }\n              ]\n            },\n            \"ranges\": [\n              {\n                \"name\": \"Sturmgewehre\",\n                \"short\": \"0-25\",\n                \"medium\": \"26-150\",\n                \"long\": \"151-350\",\n                \"extreme\": \"351-550\"\n              },\n              {\n                \"name\": \"Sturmgewehre\",\n                \"short\": \"0-25\",\n                \"medium\": \"26-150\",\n                \"long\": \"151-350\",\n                \"extreme\": \"351-550\"\n              }\n            ],\n            \"alternateranges\": [\n              {\n                \"name\": null,\n                \"short\": null,\n                \"medium\": null,\n                \"long\": null,\n                \"extreme\": null\n              },\n              {\n                \"name\": null,\n                \"short\": null,\n                \"medium\": null,\n                \"long\": null,\n                \"extreme\": null\n              }\n            ],\n            \"availableammo\": \"60\",\n            \"currentammo\": \"-\",\n            \"clips\": null,\n            \"dicepool\": \"14\",\n            \"dicepool_noammo\": \"14\",\n            \"skill\": \"Automatics\",\n            \"wirelesson\": \"True\"\n          }\n        },\n        \"mods\": {\n          \"mod\": {\n            \"guid\": \"657a930c-8a11-4843-96f1-822090ec6cc3\",\n            \"sourceid\": \"c3f9f5a4-b8d4-11e6-80f5-76304dec7eb7\",\n            \"name\": \"Gr\u00F6\u00DFerer Munitionsvorrat (Zweiter Beh\u00E4lter)\",\n            \"name_english\": \"Expanded Ammunition Bay (Second Bin) Weapon Mount Add-on (Drone)\",\n            \"fullname\": \"Gr\u00F6\u00DFerer Munitionsvorrat (Zweiter Beh\u00E4lter)\",\n            \"category\": \"All\",\n            \"category_english\": \"All\",\n            \"limit\": null,\n            \"slots\": \"1\",\n            \"rating\": \"0\",\n            \"ratinglabel\": \"String_Rating\",\n            \"avail\": \"0\",\n            \"cost\": \"50\",\n            \"owncost\": \"50\",\n            \"source\": \"R5\",\n            \"wirelesson\": \"False\",\n            \"page\": \"132\",\n            \"included\": \"True\",\n            \"weapons\": null,\n            \"cyberwares\": null\n          }\n        }\n      }\n    ]\n  },\n  \"gears\": {\n    \"gear\": [\n      {\n        \"guid\": \"70d28c3e-8689-4d52-8cd1-6d3b66278d6e\",\n        \"sourceid\": \"2ca81a10-d0f7-4b39-ac93-a84f2f69f9d9\",\n        \"name\": \"Sensorarray\",\n        \"name_english\": \"Sensor Array\",\n        \"category\": \"Sensorpakete\",\n        \"category_english\": \"Sensors\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"False\",\n        \"issin\": \"False\",\n        \"capacity\": \"8/[0]\",\n        \"armorcapacity\": \"[0]\",\n        \"maxrating\": \"8\",\n        \"rating\": \"3\",\n        \"qty\": \"1\",\n        \"avail\": \"7\",\n        \"avail_english\": \"7\",\n        \"cost\": \"0\",\n        \"owncost\": \"1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": null,\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"445\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"False\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": {\n          \"gear\": [\n            {\n              \"guid\": \"c1c7a346-954c-4de7-8236-746337a22632\",\n              \"sourceid\": \"07805498-75ea-441f-bd27-6536d4131b51\",\n              \"name\": \"Kamera\",\n              \"name_english\": \"Camera\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"Rating/[1]\",\n              \"armorcapacity\": \"Rating/[1]\",\n              \"maxrating\": \"{Parent Rating}\",\n              \"rating\": \"3\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"447\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            },\n            {\n              \"guid\": \"ae6226c6-3f66-402e-8a01-f7029f7b5492\",\n              \"sourceid\": \"adf3533a-461c-46ae-9ee7-77dfd31c5d5a\",\n              \"name\": \"Sichtvergr\u00F6\u00DFerung\",\n              \"name_english\": \"Vision Magnification\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"[1]\",\n              \"armorcapacity\": \"[1]\",\n              \"maxrating\": null,\n              \"rating\": \"0\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"458\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            },\n            {\n              \"guid\": \"43e69eb8-cc8d-4aa5-9106-bc22ff0a44d5\",\n              \"sourceid\": \"e853967a-a2b8-4d89-9a97-773034489a16\",\n              \"name\": \"Bewegungsmelder\",\n              \"name_english\": \"Motion Sensor\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"[1]\",\n              \"armorcapacity\": \"[1]\",\n              \"maxrating\": null,\n              \"rating\": \"0\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"450\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            },\n            {\n              \"guid\": \"fb91dcb9-22bf-48ac-a88f-77a2bdb0a42a\",\n              \"sourceid\": \"4d12e4a1-edd3-4abf-830f-aa95874b7531\",\n              \"name\": \"Radiosignalscanner\",\n              \"name_english\": \"Radio Signal Scanner\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"[1]\",\n              \"armorcapacity\": \"[1]\",\n              \"maxrating\": null,\n              \"rating\": \"0\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"450\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            },\n            {\n              \"guid\": \"77b66521-9295-4662-b3b6-cfafb4cb0abd\",\n              \"sourceid\": \"f25e4819-209c-4cbf-b24f-668359a7a2ad\",\n              \"name\": \"Lasermikrofon\",\n              \"name_english\": \"Laser Microphone\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"Rating/[1]\",\n              \"armorcapacity\": \"Rating/[1]\",\n              \"maxrating\": \"{Parent Rating}\",\n              \"rating\": \"3\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"449\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            },\n            {\n              \"guid\": \"9ba219c5-cb2a-4d0d-85fa-9e11b023f14c\",\n              \"sourceid\": \"d98f419f-7625-4228-9723-0217950d8155\",\n              \"name\": \"Geigerz\u00E4hler\",\n              \"name_english\": \"Geiger Counter\",\n              \"category\": \"Sensor-Funktionen\",\n              \"category_english\": \"Sensor Functions\",\n              \"ispersona\": \"False\",\n              \"isammo\": \"False\",\n              \"issin\": \"False\",\n              \"capacity\": \"[1]\",\n              \"armorcapacity\": \"[1]\",\n              \"maxrating\": null,\n              \"rating\": \"0\",\n              \"qty\": \"1\",\n              \"avail\": \"0\",\n              \"avail_english\": \"0\",\n              \"cost\": \"0\",\n              \"owncost\": \"0\",\n              \"weight\": \"0\",\n              \"ownweight\": \"0\",\n              \"extra\": null,\n              \"bonded\": \"False\",\n              \"equipped\": \"True\",\n              \"wirelesson\": \"False\",\n              \"location\": null,\n              \"gearname\": null,\n              \"source\": \"SR5\",\n              \"page\": \"450\",\n              \"attack\": \"0\",\n              \"sleaze\": \"0\",\n              \"dataprocessing\": \"0\",\n              \"firewall\": \"0\",\n              \"devicerating\": \"0\",\n              \"programlimit\": \"0\",\n              \"iscommlink\": \"False\",\n              \"isprogram\": \"False\",\n              \"active\": \"False\",\n              \"homenode\": \"False\",\n              \"conditionmonitor\": \"8\",\n              \"matrixcmfilled\": \"0\",\n              \"children\": null,\n              \"weaponbonusdamage\": \"+0\",\n              \"weaponbonusdamage_english\": \"+0\",\n              \"weaponbonusap\": \"+0\",\n              \"weaponbonusacc\": \"+0\",\n              \"weaponbonusrange\": \"0\",\n              \"flechetteweaponbonusdamage\": \"+0\",\n              \"flechetteweaponbonusdamage_english\": \"+0\",\n              \"flechetteweaponbonusap\": \"+0\",\n              \"flechetteweaponbonusacc\": \"+0\",\n              \"flechetteweaponbonusrange\": \"0\"\n            }\n          ]\n        },\n        \"weaponbonusdamage\": \"+0\",\n        \"weaponbonusdamage_english\": \"+0\",\n        \"weaponbonusap\": \"+0\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      },\n      {\n        \"guid\": \"156b06ee-654b-4224-91a8-f459f4ef7037\",\n        \"sourceid\": \"0949997a-acb7-49d9-9905-5ae2cd35626f\",\n        \"name\": \"Zielerfassung [Waffe] Autosoft\",\n        \"name_english\": \"[Weapon] Targeting Autosoft\",\n        \"category\": \"Autosofts\",\n        \"category_english\": \"Autosofts\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"False\",\n        \"issin\": \"False\",\n        \"capacity\": \"[0]\",\n        \"armorcapacity\": \"[0]\",\n        \"maxrating\": \"6\",\n        \"rating\": \"4\",\n        \"qty\": \"1\",\n        \"avail\": \"8\",\n        \"avail_english\": \"8\",\n        \"cost\": \"0\",\n        \"owncost\": \"1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": \"Shiawase Arms Monsoon\",\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"267\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"True\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": null,\n        \"weaponbonusdamage\": \"+0\",\n        \"weaponbonusdamage_english\": \"+0\",\n        \"weaponbonusap\": \"+0\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      },\n      {\n        \"guid\": \"1bfc2ff5-2c1b-4b7e-8abf-4ae2d9b30af8\",\n        \"sourceid\": \"149a8dd2-dfef-473f-94a4-1bdd77e4f855\",\n        \"name\": \"Clearsight Autosoft\",\n        \"name_english\": \"Clearsight Autosoft\",\n        \"category\": \"Autosofts\",\n        \"category_english\": \"Autosofts\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"False\",\n        \"issin\": \"False\",\n        \"capacity\": \"[0]\",\n        \"armorcapacity\": \"[0]\",\n        \"maxrating\": \"6\",\n        \"rating\": \"4\",\n        \"qty\": \"1\",\n        \"avail\": \"8\",\n        \"avail_english\": \"8\",\n        \"cost\": \"0\",\n        \"owncost\": \"1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": null,\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"267\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"True\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": null,\n        \"weaponbonusdamage\": \"+0\",\n        \"weaponbonusdamage_english\": \"+0\",\n        \"weaponbonusap\": \"+0\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      },\n      {\n        \"guid\": \"625dfbaf-0bb3-409e-b895-29e73aa683b9\",\n        \"sourceid\": \"ef9c8aae-26df-4fe6-88b3-79fbb5eb77c5\",\n        \"name\": \"Munition: APDS\",\n        \"name_english\": \"Ammo: APDS\",\n        \"category\": \"Munition\",\n        \"category_english\": \"Ammunition\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"True\",\n        \"issin\": \"False\",\n        \"capacity\": null,\n        \"armorcapacity\": null,\n        \"maxrating\": null,\n        \"rating\": \"0\",\n        \"qty\": \"30\",\n        \"avail\": \"12V\",\n        \"avail_english\": \"12F\",\n        \"cost\": \"360\",\n        \"owncost\": \"0,1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": \"Sturmgewehre\",\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"436\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"False\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": null,\n        \"weaponbonusdamage\": \"+0\",\n        \"weaponbonusdamage_english\": \"+0\",\n        \"weaponbonusap\": \"-4\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      },\n      {\n        \"guid\": \"efc5b9a0-7744-456e-ad52-bfd6f5a8cf45\",\n        \"sourceid\": \"d9f69780-93eb-41ff-9a9c-893f8c52794e\",\n        \"name\": \"Munition: Schocker\",\n        \"name_english\": \"Ammo: Stick-n-Shock\",\n        \"category\": \"Munition\",\n        \"category_english\": \"Ammunition\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"True\",\n        \"issin\": \"False\",\n        \"capacity\": null,\n        \"armorcapacity\": null,\n        \"maxrating\": null,\n        \"rating\": \"0\",\n        \"qty\": \"30\",\n        \"avail\": \"6E\",\n        \"avail_english\": \"6R\",\n        \"cost\": \"240\",\n        \"owncost\": \"0,1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": \"Assault Rifles\",\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"437\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"False\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": null,\n        \"weaponbonusdamage\": \"-2G(e)\",\n        \"weaponbonusdamage_english\": \"-2S(e)\",\n        \"weaponbonusap\": \"-5\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      },\n      {\n        \"guid\": \"e4d2d1cc-dbfa-4990-aa50-ed6a8eaab291\",\n        \"sourceid\": \"0025f1c7-45a4-4ec5-a692-e18aab2f97a9\",\n        \"name\": \"Transportsitz (Halterung)\",\n        \"name_english\": \"Transportsitz (Halterung)\",\n        \"category\": \"Eigene\",\n        \"category_english\": \"Custom\",\n        \"ispersona\": \"False\",\n        \"isammo\": \"False\",\n        \"issin\": \"False\",\n        \"capacity\": null,\n        \"armorcapacity\": null,\n        \"maxrating\": null,\n        \"rating\": \"0\",\n        \"qty\": \"1\",\n        \"avail\": \"0\",\n        \"avail_english\": \"0\",\n        \"cost\": \"0\",\n        \"owncost\": \"1\",\n        \"weight\": \"0\",\n        \"ownweight\": \"0\",\n        \"extra\": null,\n        \"bonded\": \"False\",\n        \"equipped\": \"True\",\n        \"wirelesson\": \"False\",\n        \"location\": null,\n        \"gearname\": null,\n        \"source\": \"SR5\",\n        \"page\": \"1\",\n        \"attack\": \"0\",\n        \"sleaze\": \"0\",\n        \"dataprocessing\": \"0\",\n        \"firewall\": \"0\",\n        \"devicerating\": \"0\",\n        \"programlimit\": \"0\",\n        \"iscommlink\": \"False\",\n        \"isprogram\": \"False\",\n        \"active\": \"False\",\n        \"homenode\": \"False\",\n        \"conditionmonitor\": \"8\",\n        \"matrixcmfilled\": \"0\",\n        \"children\": null,\n        \"weaponbonusdamage\": \"+0\",\n        \"weaponbonusdamage_english\": \"+0\",\n        \"weaponbonusap\": \"+0\",\n        \"weaponbonusacc\": \"+0\",\n        \"weaponbonusrange\": \"0\",\n        \"flechetteweaponbonusdamage\": \"+0\",\n        \"flechetteweaponbonusdamage_english\": \"+0\",\n        \"flechetteweaponbonusap\": \"+0\",\n        \"flechetteweaponbonusacc\": \"+0\",\n        \"flechetteweaponbonusrange\": \"0\"\n      }\n    ]\n  },\n  \"weapons\": null\n}", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport MountedWeaponParser from '../../../../module/apps/importer/actorImport/itemImporter/vehicleImport/MountedWeaponParser';\nimport * as chummerVehicle from './drone.json';\n\nexport const mountedWeaponParserTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let mountedWeaponParser = new MountedWeaponParser();\n\n    describe('Mounted Weapon Parser', () => {\n        it('parses weapons', async () => {\n            let weapons = await mountedWeaponParser.parseWeapons(chummerVehicle);\n\n            assert.lengthOf(weapons, 1);\n        });\n    });\n};\n", "import { QuenchBatchContext } from \"@ethaks/fvtt-quench\";\nimport { SR6Item } from \"../module/item/SR6Item\";\nimport { SR6TestingDocuments } from \"./utils\";\nimport { TechnologyPrep } from \"../module/item/prep/functions/TechnologyPrep\";\nimport { ActionPrep } from \"../module/item/prep/functions/ActionPrep\";\nimport { SR6Actor } from \"../module/actor/SR6Actor\";\nimport { RangePrep } from \"../module/item/prep/functions/RangePrep\";\n\n/**\n * Tests involving data preparation for SR6Item types.\n */\nexport const shadowrunSR5ItemDataPrep = (context: QuenchBatchContext) => {\n    const {describe, it, assert, before, after} = context;\n\n    let testItem: SR6TestingDocuments<SR6Item>;\n    let testActor: SR6TestingDocuments<SR6Actor>;\n\n    before(async () => {\n        testItem = new SR6TestingDocuments(SR6Item);\n        testActor = new SR6TestingDocuments(SR6Actor);\n    })\n\n    after(async () => {\n        await testItem.teardown();\n        await testActor.teardown();\n    });\n\n    describe('TechnologyData preparation', () => {\n        it('Calculate the correct device item condition monitor', () => {\n            const device = foundry.utils.duplicate(game.model.Item.device) as Shadowrun.DeviceData;\n\n            device.technology.rating = 4;\n            TechnologyPrep.prepareConditionMonitor(device.technology);\n\n            assert.equal(device.technology.condition_monitor.max, 10);\n        });\n        it('Calculate the correct device item condition monitor for rounded values', () => {\n            const device = foundry.utils.duplicate(game.model.Item.device) as Shadowrun.DeviceData;\n\n            device.technology.rating = 5;\n            TechnologyPrep.prepareConditionMonitor(device.technology);\n\n            assert.equal(device.technology.condition_monitor.max, 11);\n        });\n        it('Calculate a condition monitor for devices with malformed technology data', () => {\n            const device = foundry.utils.duplicate(game.model.Item.device) as Shadowrun.DeviceData;\n\n            device.technology.rating = 4;\n            // @ts-expect-error // test-case makes this necessary\n            device.technology.condition_monitor = undefined;\n            TechnologyPrep.prepareConditionMonitor(device.technology);\n\n            assert.equal(device.technology.condition_monitor.max, 10);\n        });\n\n        it('Calculate conceal data for a device', async () => {\n            const device = foundry.utils.duplicate(game.model.Item.device) as Shadowrun.DeviceData;\n            const mods: SR6Item[] = [];\n\n            // prepareConceal relies on the item name to be unique.\n            mods.push(await testItem.create({type: 'modification', name: 'UniqueNameA', system: {conceal: 2}}));\n            mods.push(await testItem.create({type: 'modification', name: 'UniqueNameB', system: {conceal: 4}}));\n\n            TechnologyPrep.prepareConceal(device.technology, mods);\n\n            assert.equal(device.technology.conceal.value, 6);\n            assert.equal(device.technology.conceal.mod.length, 2);\n        });\n    });\n\n    describe('ActionRollData preparation', () => {\n        it('Check for damage base_formula_operator migration', () => {\n            const action = foundry.utils.duplicate(game.model.Item.action) as Shadowrun.ActionData;\n            // @ts-expect-error // test-case makes this necessary\n            action.action.damage.base_formula_operator = '+';\n\n            ActionPrep.prepareWithMods(action.action, []);\n\n            assert.equal(action.action.damage.base_formula_operator, 'add');\n        });\n\n        it('Setup damage source data', async () => {\n            const actor = await testActor.create({type: 'character'});\n            const documents = await actor.createEmbeddedDocuments('Item', [{type: 'action', name: 'TestAction'}]);\n            const action = documents[0] as SR6Item;\n\n            ActionPrep.prepareDamageSource(action.system.action as Shadowrun.ActionRollData, action)\n\n            assert.deepEqual(action.system.action?.damage.source, {\n                actorId: actor.id as string,\n                itemId: action.id as string,\n                itemName: action.name as string,\n                itemType: action.type\n            })\n        });\n\n        it('Check for weapon modification setting dice pool modifiers', async () => {\n            const weapon = new SR6Item({type: 'weapon', name: 'Test'});\n            // unique names are necessary\n            const mods: SR6Item[] = [];\n            //@ts-expect-error\n            mods.push(new SR6Item({type: 'modification', name: 'TestModA', system: {type: 'weapon', dice_pool: 2}}));\n            //@ts-expect-error\n            mods.push(new SR6Item({type: 'modification', name: 'TestModB', system: {type: 'weapon', dice_pool: 4}}));\n\n            ActionPrep.prepareWithMods(weapon.system.action as Shadowrun.ActionRollData, mods);\n            ActionPrep.calculateValues(weapon.system.action as Shadowrun.ActionRollData);\n\n            assert.strictEqual(weapon.system.action?.dice_pool_mod.length, 2);\n        });\n\n        it('Check for weapon modification setting limit modifiers', async () => {\n            const weapon = new SR6Item({type: 'weapon', name: 'Test'});\n            // unique names are necessary\n            const mods: SR6Item[] = [];\n            //@ts-expect-error\n            mods.push(new SR6Item({type: 'modification', name: 'TestModA', system: {type: 'weapon', accuracy: 2}}));\n            //@ts-expect-error\n            mods.push(new SR6Item({type: 'modification', name: 'TestModB', system: {type: 'weapon', accuracy: 4}}));\n\n            ActionPrep.prepareWithMods(weapon.system.action as Shadowrun.ActionRollData, mods);\n            ActionPrep.calculateValues(weapon.system.action as Shadowrun.ActionRollData);\n\n            assert.strictEqual(weapon.system.action?.limit.mod.length, 2);\n        });\n\n        it('Check for ammo to apply its damage to the weapon', async () => {\n            const weapon = new SR6Item({type: 'weapon', name: 'Test'});\n            //@ts-expect-error\n            const ammo = new SR6Item({type: 'ammo', name: 'TestModA', system: {damage: 2}});\n\n            ActionPrep.prepareWithAmmo(weapon.system.action as Shadowrun.ActionRollData, ammo);\n            ActionPrep.calculateValues(weapon.system.action as Shadowrun.ActionRollData);\n\n            assert.strictEqual(weapon.system.action?.damage.value, 2);\n        });\n\n        it('Check for ammo to modify the weapon armor piercing', async () => {\n            const weapon = new SR6Item({type: 'weapon', name: 'Test'});\n            //@ts-expect-error\n            const ammo = new SR6Item({type: 'ammo', name: 'TestModA', system: {ap: -2}});\n\n            ActionPrep.prepareWithAmmo(weapon.system.action as Shadowrun.ActionRollData, ammo);\n            ActionPrep.calculateValues(weapon.system.action as Shadowrun.ActionRollData);\n\n            assert.strictEqual(weapon.system.action?.damage.ap.value, -2);\n        });\n\n        it('Check for ammo to override the weapon damage info', async () => {\n            //@ts-expect-error\n            const weapon = new SR6Item({type: 'weapon', name: 'Test', system: {action:\n                {damage: {\n                    element: {value: 'fire'},\n                    base: 3,\n                    type: {base: 'physical'}\n            }}}});\n            //@ts-expect-error\n            const ammo = new SR6Item({type: 'ammo', name: 'TestModA', system: {replaceDamage: true, damage: 2, damageType: 'stun', element: 'cold'}});\n\n            ActionPrep.prepareWithAmmo(weapon.system.action as Shadowrun.ActionRollData, ammo);\n            ActionPrep.calculateValues(weapon.system.action as Shadowrun.ActionRollData);\n\n            assert.strictEqual(weapon.system.action?.damage.base, 3);\n            assert.strictEqual(weapon.system.action?.damage.value, 2);\n            assert.strictEqual(weapon.system.action?.damage.type.base, 'physical');\n            assert.strictEqual(weapon.system.action?.damage.type.value, 'stun');\n            assert.strictEqual(weapon.system.action?.damage.element.base, '');\n            assert.strictEqual(weapon.system.action?.damage.element.value, 'cold');\n        });\n    });\n\n    describe('RangeData preparation', () => {\n        it('Check for weapon modification recoil modifiers' , async () => {\n            //@ts-expect-error\n            const weapon = new SR6Item({type: 'weapon', name: 'Test', system: {range: {rc: {base: 2}}}}) as unknown as Shadowrun.WeaponItemData;\n            const mods: SR6Item[] = [];\n            //@ts-expect-error\n            mods.push(new SR6Item({type: 'modification', name: 'TestModA', system: {type: 'weapon', rc: 2}}));\n\n            RangePrep.prepareRecoilCompensation(weapon.system.range, mods);\n\n            assert.strictEqual(weapon.system.range.rc.base, 2);\n            assert.strictEqual(weapon.system.range.rc.mod.length, 1);\n            assert.strictEqual(weapon.system.range.rc.value, 4);\n        });\n    });\n}\n", "{\n  \"guid\": \"3033d1f2-7eba-44a0-a1d3-99000193b109\",\n  \"sourceid\": \"56747364-dbd5-40e3-b4c1-5a361ec0c710\",\n  \"name\": \"SomeBrand Pickup Truck\",\n  \"name_english\": \"SomeBrand Pickup Truck\",\n  \"fullname\": \"SomeBrand Pickup Truck\",\n  \"category\": \"Trucks\",\n  \"category_english\": \"Trucks\",\n  \"isdrone\": \"False\",\n  \"handling\": \"5\",\n  \"accel\": \"2\",\n  \"speed\": \"4\",\n  \"pilot\": \"1\",\n  \"body\": \"14\",\n  \"armor\": \"10\",\n  \"seats\": \"3\",\n  \"sensor\": \"2\",\n  \"avail\": \"0\",\n  \"cost\": \"25,000\",\n  \"owncost\": \"25,000\",\n  \"source\": \"SR5\",\n  \"page\": \"463\",\n  \"physicalcm\": \"19\",\n  \"physicalcmfilled\": \"0\",\n  \"vehiclename\": null,\n  \"maneuver\": \"0\",\n  \"location\": null,\n  \"attack\": \"0\",\n  \"sleaze\": \"0\",\n  \"dataprocessing\": \"1\",\n  \"firewall\": \"1\",\n  \"devicerating\": \"1\",\n  \"programlimit\": \"1\",\n  \"iscommlink\": \"False\",\n  \"isprogram\": \"False\",\n  \"active\": \"False\",\n  \"homenode\": \"False\",\n  \"matrixcm\": \"9\",\n  \"matrixcmfilled\": \"0\",\n  \"mods\": {\n    \"mod\": [\n      {\n        \"guid\": \"a84fe5c0-b5e9-43b4-92fd-420030625086\",\n        \"sourceid\": \"5acc99df-ffaf-4c43-93bc-07b552fc4c1c\",\n        \"name\": \"Off-Road Suspension\",\n        \"name_english\": \"Off-Road Suspension\",\n        \"fullname\": \"Off-Road Suspension\",\n        \"category\": \"Powertrain\",\n        \"category_english\": \"Powertrain\",\n        \"limit\": null,\n        \"slots\": \"2\",\n        \"rating\": \"0\",\n        \"ratinglabel\": \"String_Rating\",\n        \"avail\": \"4\",\n        \"cost\": \"6,250\",\n        \"owncost\": \"6,250\",\n        \"source\": \"R5\",\n        \"wirelesson\": \"False\",\n        \"page\": \"155\",\n        \"included\": \"True\",\n        \"weapons\": null,\n        \"cyberwares\": null\n      },\n      {\n        \"guid\": \"8cc340c1-e011-4833-9ae7-a871805d065e\",\n        \"sourceid\": \"60481326-e91c-4ace-863e-93799ba96064\",\n        \"name\": \"Special Equipment\",\n        \"name_english\": \"Special Equipment\",\n        \"fullname\": \"Special Equipment (Open Box Storage)\",\n        \"category\": \"Body\",\n        \"category_english\": \"Body\",\n        \"limit\": null,\n        \"slots\": \"0\",\n        \"rating\": \"0\",\n        \"ratinglabel\": \"String_Rating\",\n        \"avail\": \"0\",\n        \"cost\": \"0\",\n        \"owncost\": \"0\",\n        \"source\": \"R5\",\n        \"wirelesson\": \"False\",\n        \"page\": \"165\",\n        \"included\": \"True\",\n        \"weapons\": null,\n        \"cyberwares\": null\n      }\n    ]\n  },\n  \"gears\": {\n    \"gear\": {\n      \"guid\": \"7154156a-04b5-4a27-8683-7d913a9ffee8\",\n      \"sourceid\": \"2ca81a10-d0f7-4b39-ac93-a84f2f69f9d9\",\n      \"name\": \"Sensor Array\",\n      \"name_english\": \"Sensor Array\",\n      \"category\": \"Sensors\",\n      \"category_english\": \"Sensors\",\n      \"ispersona\": \"False\",\n      \"isammo\": \"False\",\n      \"issin\": \"False\",\n      \"capacity\": \"8/[0]\",\n      \"armorcapacity\": \"[0]\",\n      \"maxrating\": \"8\",\n      \"rating\": \"2\",\n      \"qty\": \"1\",\n      \"avail\": \"7\",\n      \"avail_english\": \"7\",\n      \"cost\": \"0\",\n      \"owncost\": \"1\",\n      \"weight\": \"0\",\n      \"ownweight\": \"0\",\n      \"extra\": null,\n      \"bonded\": \"False\",\n      \"equipped\": \"True\",\n      \"wirelesson\": \"False\",\n      \"location\": null,\n      \"gearname\": null,\n      \"source\": \"SR5\",\n      \"page\": \"445\",\n      \"attack\": \"0\",\n      \"sleaze\": \"0\",\n      \"dataprocessing\": \"0\",\n      \"firewall\": \"0\",\n      \"devicerating\": \"0\",\n      \"programlimit\": \"0\",\n      \"iscommlink\": \"False\",\n      \"isprogram\": \"False\",\n      \"active\": \"False\",\n      \"homenode\": \"False\",\n      \"conditionmonitor\": \"8\",\n      \"matrixcmfilled\": \"0\",\n      \"children\": null\n    }\n  },\n  \"weapons\": null\n}", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport VehicleParser from '../../../../module/apps/importer/actorImport/itemImporter/vehicleImport/VehicleParser';\nimport * as chummerDrone from './drone.json';\nimport * as chummerVehicle from './vehicle.json';\nimport { SR6TestingDocuments } from '../../../utils';\nimport { SR6Actor } from '../../../../module/actor/SR6Actor';\nimport { SR6Item } from '../../../../module/item/SR6Item';\n\nexport const vehicleImporterTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let vehicleParser = new VehicleParser();\n\n    let testActor;\n    let testItem;\n\n    before(async () => {\n        testActor = new SR6TestingDocuments(SR6Actor);\n        testItem = new SR6TestingDocuments(SR6Item);\n    });\n\n    after(async () => {\n        await testActor.teardown();\n        await testItem.teardown();\n    });\n\n    describe('Vehicle Parser', () => {\n        it('parses vehicles', async () => {\n            const actor = await testActor.create({ type: 'character' });\n\n            const parsedVehicles = await vehicleParser.parseVehicles(\n                actor,\n                { vehicles: { vehicle: [chummerDrone, chummerVehicle] } },\n                { vehicles: true },\n            );\n\n            if (!parsedVehicles) {\n                assert.fail('Vehicle Parser failed to create vehicles!');\n                return;\n            }\n            // Register vehicle actors with testing data, so they get cleaned up during teardown\n            parsedVehicles.forEach(testActor.register.bind(testActor));\n            // Prepare derived data, used to populate system.vehicle_stats.seats.hidden\n            parsedVehicles.forEach((vehicle) => vehicle.prepareDerivedData());\n\n            const drone = parsedVehicles[0].asVehicle()!;\n            const vehicle = parsedVehicles[1].asVehicle()!;\n\n            assert.deepEqual(drone.system.vehicle_stats.seats.value, 0);\n            assert.deepEqual(drone.system.vehicle_stats.seats.hidden, true);\n            assert.deepEqual(vehicle.system.vehicle_stats.seats.value, 3);\n            assert.deepEqual(vehicle.system.vehicle_stats.seats.hidden, false);\n        });\n    });\n};\n", "import { QuenchBatchContext } from '@ethaks/fvtt-quench';\nimport VehicleModsParser from '../../../../module/apps/importer/actorImport/itemImporter/vehicleImport/VehicleModsParser';\nimport * as chummerDrone from './drone.json';\n\nexport const vehicleModParserTesting = (context: QuenchBatchContext) => {\n    const { describe, it, assert, before, after } = context;\n\n    let parser = new VehicleModsParser();\n\n    describe('Vehicle Mod Parser', () => {\n\n        it('parses mods', async () => {\n            let mods = await parser.parseMods(chummerDrone, false);\n\n            assert.lengthOf(mods, 2);\n            \n            let ecm = mods.find(mod => mod.name === \"ECM\")\n            assert.isNotNull(ecm)\n            assert.strictEqual(ecm.name, \"ECM\")\n            assert.strictEqual(ecm.type, \"modification\")\n            assert.strictEqual(ecm.system.technology.availability, \"9V\")\n            assert.strictEqual(ecm.system.description.source, \"R5 173\")\n        });\n    });\n};\n", "import { shadowrunRolling } from './sr5.SR5Roll.spec';\nimport { shadowrunSR5RangedWeaponRules } from './sr5.RangedWeapon.spec';\nimport { shadowrunAttackTesting } from './sr5.AttackTests.spec';\nimport { shadowrunRulesModifiers } from './sr5.Modifiers.spec';\nimport { shadowrunSR5Item } from './sr5.SR5Item.spec';\nimport { shadowrunMatrix } from './sr5.Matrix.spec';\nimport { shadowrunSR5Actor } from './sr5.SR5Actor.spec';\nimport { shadowrunSR5CharacterDataPrep } from './sr5.CharacterDataPrep.spec';\nimport { shadowrunSR5CritterDataPrep } from './sr5.CritterDataPrep.spec';\nimport { shadowrunSR5SpiritDataPrep } from './sr5.SpiritDataPrep.spec';\nimport { shadowrunSR5SpriteDataPrep } from './sr5.SpriteDataPrep.spec';\nimport { shadowrunSR5ICDataPrep } from './sr5.ICDataPrep.spec';\nimport { shadowrunSR5VehicleDataPrep } from './sr5.VehicleDataPrep.spec';\nimport { shadowrunSR5ActiveEffect } from './sr5.ActiveEffect.spec';\nimport { shadowrunNetworkDevices } from './sr5.NetworkDevices.spec';\nimport { shadowrunTesting } from './sr5.Testing.spec';\nimport { shadowrunInventoryFlow } from './sr5.Inventory.spec';\nimport { weaponParserBaseTesting } from './sr5.WeaponParser.spec';\nimport { characterImporterTesting } from './actorImport/characterImporter/sr5.CharacterImporter.spec';\nimport { characterInfoUpdaterTesting } from './actorImport/characterImporter/sr5.CharacterInfoUpdater.spec';\nimport { spiritImporterTesting } from './actorImport/spiritImporter/sr5.SpiritImporter.spec';\nimport { spiritInfoUpdaterTesting } from './actorImport/spiritImporter/sr5.SpiritInfoUpdater.spec';\nimport { weaponParserTesting } from './actorImport/itemImporter/weaponImport/sr5.WeaponImport.spec';\nimport { mountedWeaponParserTesting } from './actorImport/itemImporter/vehicleImport/sr5.VehicleImporterMountedWeapon.spec';\nimport { shadowrunSR5ItemDataPrep } from './sr5.ItemDataPrep.spec';\nimport { vehicleImporterTesting } from './actorImport/itemImporter/vehicleImport/sr5.VehicleImporter.spec';\nimport { vehicleModParserTesting } from './actorImport/itemImporter/vehicleImport/sr5.VehicleModImporter.spec';\n\nimport { Quench } from '@ethaks/fvtt-quench';\n\n/**\n * Register FoundryVTT Quench test batches...\n *\n * @params quench Quench unittest registry\n * https://github.com/Ethaks/FVTT-Quench\n */\nexport const quenchRegister = (quench: Quench) => {\n    if (!quench) return;\n\n    console.info('Shadowrun 5e | Registering quench unittests');\n    console.warn(\n        'Shadowrun 5e | Be aware that FoundryVTT will tank in update performance when a lot of documents are in collections. This is the case if you have all Chummer items imported and might cause tests to cross the 2000ms quench timeout threshold. Clear those collections in a test world. :)',\n    );\n\n    quench.registerBatch('shadowrun6-elysium.rules.matrix', shadowrunMatrix, {\n        displayName: 'shadowrun6-elysium: Matrix Rules Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.rules.modifiers', shadowrunRulesModifiers, {\n        displayName: 'shadowrun6-elysium: Modifiers Rules Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.rules.ranged_weapon', shadowrunSR5RangedWeaponRules, {\n        displayName: 'shadowrun6-elysium: Ranged Weapon Rules Test',\n    });\n\n    quench.registerBatch('shadowrun6-elysium.characterImporter', characterImporterTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Character Importer',\n    });\n    quench.registerBatch('shadowrun6-elysium.characterInfoUpdater', characterInfoUpdaterTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Character Info Updater',\n    });\n    quench.registerBatch('shadowrun6-elysium.spiritImporter', spiritImporterTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Spirit Importer',\n    });\n    quench.registerBatch('shadowrun6-elysium.spiritInfoUpdater', spiritInfoUpdaterTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Spirit Info Updater',\n    });\n    quench.registerBatch('shadowrun6-elysium.importerWeapons', weaponParserTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Actor Weapon Importer',\n    });\n    quench.registerBatch('shadowrun6-elysium.importerVehicles', vehicleImporterTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Vehicle Importer',\n    });\n    quench.registerBatch('shadowrun6-elysium.importerVehicleMountedWeapons', mountedWeaponParserTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Vehicle Mounted Weapon Importer',\n    });\n    quench.registerBatch('shadowrun6-elysium.importerVehicleMods', vehicleModParserTesting, {\n        displayName: 'shadowrun6-elysium: Chummer Vehicle Modification Importer',\n    });\n\n    quench.registerBatch('shadowrun6-elysium.entities.items', shadowrunSR5Item, { displayName: 'shadowrun6-elysium: SR6Item Test' });\n    quench.registerBatch('shadowrun6-elysium.entities.actors', shadowrunSR5Actor, {\n        displayName: 'shadowrun6-elysium: SR6Actor Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.entities.effects', shadowrunSR5ActiveEffect, {\n        displayName: 'shadowrun6-elysium: SR6ActiveEffect Test',\n    });\n\n    quench.registerBatch('shadowrun6-elysium.data_prep.character', shadowrunSR5CharacterDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5CharacterDataPreparation Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.data_prep.critter', shadowrunSR5CritterDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5CritterDataPreparation Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.data_prep.sprite', shadowrunSR5SpriteDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5CSpriteDataPreparation Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.data_prep.spirit', shadowrunSR5SpiritDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5SpiritDataPreparation Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.data_prep.ic', shadowrunSR5ICDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5ICDataPreparation Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.data_prep.vehicle', shadowrunSR5VehicleDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5VehicleDataPreparation Test',\n    });\n\n    quench.registerBatch('shadowrun6-elysium.data_prep.item', shadowrunSR5ItemDataPrep, {\n        displayName: 'shadowrun6-elysium: SR5ItemDataPreparation Test',\n    });\n\n    quench.registerBatch('shadowrun6-elysium.flow.networkDevices', shadowrunNetworkDevices, {\n        displayName: 'shadowrun6-elysium: Matrix Network Devices Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.flow.inventory', shadowrunInventoryFlow, {\n        displayName: 'shadowrun6-elysium: InventoryFlow Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.flow.tests', shadowrunTesting, { displayName: 'shadowrun6-elysium: SuccessTest Test' });\n    quench.registerBatch('shadowrun6-elysium.flow.tests_attack', shadowrunAttackTesting, {\n        displayName: 'shadowrun6-elysium: Attack Test',\n    });\n    quench.registerBatch('shadowrun6-elysium.flow.sr5roll', shadowrunRolling, { displayName: 'shadowrun6-elysium: SR6Roll' });\n\n    quench.registerBatch('shadowrun6-elysium.parser.weapon', weaponParserBaseTesting, {\n        displayName: 'shadowrun6-elysium: Data Importer Weapon Parsing',\n    });\n};\n", "import { SR6Item } from './item/SR6Item';\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {Object} item     The item data\n * @param {number} slot     The hotbar slot to use\n * @returns {Promise}\n */\nimport {Helpers} from \"./helpers\";\nimport SkillField = Shadowrun.SkillField;\nimport {SR6Actor} from \"./actor/SR6Actor\";\n\n/**\n * Create a roll item action macro when an item is dropped from actor sheet onto the macro hotbar.\n *\n * @param dropData Foundry DropData\n * @param slot The slot to be dropped into on the Macro bar\n */\nexport async function createItemMacro(dropData, slot) {\n    if (!game || !game.macros) return;\n\n    const item = await SR6Item.fromDropData(dropData);\n    if (!(item instanceof SR6Item)) return console.error(`Shadowrun 6e | Macro Drop expected an item document but got a different document type`, item);\n\n    const command = `game['shadowrun6-elysium'].rollItemMacro(\"${item.name}\");`;\n    let macro = game.macros.contents.find((m) => m.name === item.name);\n    if (!macro) {\n        macro = await Macro.create(\n            {\n                //@ts-expect-error\n                name: item.name,\n                type: 'script',\n                img: item.img,\n                command: command,\n                flags: { 'shadowrun6-elysium.itemMacro': true },\n            },\n            { renderSheet: false },\n        );\n    }\n\n    if (macro) game.user?.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {string} itemName\n * @return {Promise}\n */\nexport function rollItemMacro(itemName) {\n    if (!game || !game.actors) return;\n\n    const speaker = ChatMessage.getSpeaker();\n    let actor;\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\n    if (!speaker.actor) return;\n    if (!actor) actor = game.actors.get(speaker.actor);\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\n    if (!item) {\n        return ui.notifications?.warn(`Your controlled Actor does not have an item named ${itemName}`);\n    }\n\n    return item.castAction();\n}\n\n/**\n * Create a macro from an skill drop.\n *\n * @param data A data object for skill macros.\n * @param slot The hotbar slot to use.\n */\nexport async function createSkillMacro(data: {skillId: string, skill: SkillField}, slot) {\n    if (!game.macros || !game.user) return;\n\n    const {skillId, skill} = data;\n\n    // Abort when skill macro already exists. This is done for consistency with createItemMacro behavior.\n    const name = Helpers.getSkillLabelOrName(skill);\n    const existingMacro = game.macros.contents.find(macro => macro.name === name);\n    if (existingMacro) return;\n\n    // Setup macro data.\n    const command = `game['shadowrun6-elysium'].rollSkillMacro(\"${name}\");`;\n    const macro = await Macro.create({\n        name,\n        type: 'script',\n        command,\n        // TODO: Is flags needed here? See createItemMacro\n    });\n    if (macro) await game.user.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Roll a skill test from a macro for an Actor.\n *\n * @param skillLabel Custom skill names must be supported and legacy skill names might be translated.\n */\nexport async function rollSkillMacro(skillLabel) {\n    if (!game || !game.actors) return;\n    if (!skillLabel) return;\n\n    // Fetch the actor from the current users token or the actor collection.\n    const speaker = ChatMessage.getSpeaker();\n    if (!speaker) return;\n    const actor =  (game.actors.tokens[speaker.token as string] || game.actors.get(speaker.actor as string)) as SR6Actor\n\n    if (!actor) return;\n    return await actor.rollSkill(skillLabel, {byLabel: true});\n    // TODO: Macro for skills may need their own TestCreate.fromSkillMacro... as they need getSkill('Label', {byLabel: true});\n}\n", "import {SituationModifiersApplication} from './apps/SituationModifiersApplication';\nimport {OverwatchScoreTracker} from './apps/gmtools/OverwatchScoreTracker';\n\n/**\n * All systems keybindings should be registered here.\n * \n * This function is meant to be called during system setup.\n */\nexport const registerSystemKeybindings = () => {\n    game.keybindings.register(\"shadowrun6-elysium\", \"show-situation-modifier-app\", {\n        name: \"SR6.Keybinding.ShowSituationModifiers.Label\",\n        hint: \"SR6.Keybinding.ShowSituationModifiers.Hint\",\n        editable: [{ key: \"KeyM\", modifiers: [] }],\n        onDown: () => SituationModifiersApplication.openForKeybinding(),\n    });\n\n    game.keybindings.register(\"shadowrun6-elysium\", \"show-overwatch-tracker-app\", {\n        name: \"SR6.Keybinding.OverwatchScoreTracker.Label\",\n        hint: \"SR6.Keybinding.OverwatchScoreTracker.Hint\",\n        editable: [{ key: \"KeyO\", modifiers: [] }],\n        onDown: () => new OverwatchScoreTracker().render(true),\n    });\n\n    game.keybindings.register(\"shadowrun6-elysium\", \"hide-test-dialog\", {\n        name: game.i18n.localize(\"SR6.Keybinding.HideTestDialog.Label\"),\n        hint: game.i18n.localize(\"SR6.Keybinding.HideTestDialog.Hint\"),\n        editable: [{key: \"shiftKey\"}]\n    });\n\n    game.keybindings.register(\"shadowrun6-elysium\", \"show-item-card\", {\n        name: game.i18n.localize(\"SR6.Keybinding.ShowItemCard.Label\"),\n        hint: game.i18n.localize(\"SR6.Keybinding.ShowItemCard.Hint\"),\n        editable: [{key: \"ctrlKey\"}]\n    });\n}\n", "import {FLAGS, SYSTEM_NAME} from './constants';\n\ninterface DistanceOptions {\n    gridSpaces?: boolean\n}\n\n/**\n * Pulled from the FoundryVTT DND5e system: grid.mjs#measureDistance\n * \n * @param segments \n * @param options \n * @returns \n */\nconst measureDistances = function (segments, options: DistanceOptions = {}) {\n    if (!options.gridSpaces) return BaseGrid.prototype.measureDistances.call(this, segments, options);\n\n    // Track the total number of diagonals\n    let nDiagonal = 0;\n    const rule = this.diagonalRule;\n    const d = canvas.dimensions as Canvas.Dimensions;\n\n    // Iterate over measured segments\n    return segments.map((s) => {\n        let r = s.ray;\n\n        // Determine the total distance traveled\n        let nx = Math.abs(Math.ceil(r.dx / d.size));\n        let ny = Math.abs(Math.ceil(r.dy / d.size));\n\n        // Determine the number of straight and diagonal moves\n        let nd = Math.min(nx, ny);\n        let ns = Math.abs(ny - nx);\n        nDiagonal += nd;\n\n        // Estimate diagonal like other battle grid systems do. (DnD5e)\n        if (rule === '1-2-1') {\n            let nd10 = Math.floor(nDiagonal / 2) - Math.floor((nDiagonal - nd) / 2);\n            let spaces = nd10 * 2 + (nd - nd10) + ns;\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            return spaces * canvas.dimensions.distance;\n        }\n\n        // Treat diagonal as straight line\n        else if (rule === 'EUCL') {\n            // @ts-expect-error TODO: foundry-vtt-types v10\n            // return Math.round(Math.hypot(nx, ny) * canvas.scene.data.gridDistance);\n            return Math.round(Math.hypot(nx, ny) * canvas.scene?.grid.distance);\n        }\n\n        // Treat diagonal as straight movement\n        // @ts-expect-error TODO: foundry-vtt-types v10\n        else return (ns + nd) * canvas.scene?.grid.distance;\n    });\n};\n\n\nexport function canvasInit() {\n    //@ts-expect-error TODO: foundry-vtt-types v10\n    // Copy DnD5e's approach to movement measurement and add a custom field to the grid to be used in canvas.ts#measureDistances\n    canvas.grid.diagonalRule = game.settings.get(SYSTEM_NAME, FLAGS.DiagonalMovement);\n    // Add a custom measureDistances function, overwriting default to add more movement styles.\n    SquareGrid.prototype.measureDistances = measureDistances;\n}", "import { TestCreator } from \"../../tests/TestCreator\";\n\n/**\n * Handle manually initiating a follow up test on an action based test.\n * \n * This would be triggered from a chat message interaction, with the chat message containing the test to follow up on.\n */\nexport const ActionFollowupFlow = {\n    chatLogListeners: async (message: ChatLog, html, data) => {\n        // setup chat listener messages for each message as some need the message context instead of chatlog context.\n        html.find('.chat-message').each(async (index, element) => {\n            element = $(element);\n            const id = element.data('messageId');\n            const message = game.messages?.get(id);\n            if (!message) return;\n\n            await ActionFollowupFlow.chatMessageListeners(message, element, message.toObject())\n        });\n    },\n\n    chatMessageListeners: async (message: ChatMessage, html, data) => {\n        html.find('.followup-action').on('click', ActionFollowupFlow.castFollowupAction);\n    },\n\n    castFollowupAction: async (event) => {\n        event.preventDefault();\n\n        const button = $(event.currentTarget);\n        const card = button.closest('.chat-message');\n        const messageId = card.data('messageId');\n\n        const showDialog = TestCreator.shouldShowDialog(event);\n        const test = await TestCreator.fromMessage(messageId, {showDialog});\n        if (!test) return;\n\n        // Populate data before executing follow up.\n        await test.populateTests();\n        await test.populateDocuments();\n\n        // NOTE: Async but at the functions end.\n        test.executeFollowUpTest();\n    }\n};", "import { SR6Actor } from \"../actor/SR6Actor\";\nimport { SR6 } from \"../config\";\nimport { PartsList } from \"../parts/PartsList\";\nimport { CompileSpriteTest } from \"./CompileSpriteTest\";\nimport { OpposedTest, OpposedTestData } from \"./OpposedTest\";\nimport { TestDocuments, TestOptions } from \"./SuccessTest\";\nimport { Translation } from '../utils/strings';\n\n\ninterface OpposedCompileSpriteTestData extends OpposedTestData {\n    compiledSpriteUuid: string\n}\n\n/**\n * Handle the flow of opposing a compilation test by the compiled sprite.\n *\n * The technomancer is the active actor and the sprite the opposed actor.\n */\nexport class OpposedCompileSpriteTest extends OpposedTest<OpposedCompileSpriteTestData> {\n    public override against: CompileSpriteTest\n\n    constructor(data, documents?: TestDocuments, options?: TestOptions) {\n        // Due to compilation, the active actor for this test will be created during execution.\n        // The selected or user character aren't the correct choice here.\n        delete documents?.actor;\n        delete data.sourceActorUuid;\n\n        super(data, documents, options);\n\n        this._assertCorrectAgainst();\n    }\n\n    _assertCorrectAgainst() {\n        if (this.against.type !== 'CompileSpriteTest') throw new Error(`${this.constructor.name} can only oppose CompileSpriteTest but is opposing a ${this.against.type}`);\n    }\n\n    override _prepareData(data: any, options?: any) {\n        data = super._prepareData(data, options);\n\n        data.compiledSpriteUuid = data.compiledSpriteUuid || '';\n\n        return data;\n    }\n\n    override get _chatMessageTemplate(): string {\n        return 'systems/shadowrun6-elysium/dist/templates/rolls/opposed-actor-creator-message.html'\n    }\n\n    /**\n     * When compiling the opposing sprite test triggers the FadeTest from compilation.\n     * Since we can expect this test to be within GM context, we can't auto cast.\n     */\n    override get autoExecuteFollowupTest() {\n        return false;\n    }\n\n    /**\n     * To have an opposing actor, that's not on the map already, create the sprite actor.\n     */\n    override async populateDocuments() {\n        await this.createCompiledSprite();\n\n        this.data.sourceActorUuid = this.data.compiledSpriteUuid || this.against.data.preparedSpriteUuid;\n\n        await super.populateDocuments();\n    }\n\n    /**\n     * Other than force there shouldn't be any other pool parts.\n     */\n    override applyPoolModifiers() {\n        // NOTE: We don't have an actor, therefore don't need to call document modifiers.\n        PartsList.AddUniquePart(this.data.pool.mod, 'SR6.Level', this.against.data.level);\n    }\n\n    /**\n     * A failure for the sprite is a success for the summoner.\n     */\n    override async processFailure() {\n        await this.updateCompilationTestForFollowup();\n        await this.finalizeSummonedSprite();\n    }\n\n    /**\n     * A success of the sprite is a failure for the summoner.\n     */\n    override async processSuccess() {\n        await this.updateCompilationTestForFollowup();\n        await this.cleanupAfterExecutionCancel();\n    }\n\n    override get successLabel(): Translation {\n        return 'SR6.TestResults.SpriteCompilationFailure';\n    }\n\n    override get failureLabel(): Translation {\n        return 'SR6.TestResults.SpriteCompilationSuccess';\n    }\n\n    /**\n     * Cleanup created actors that aren't needed anymore.\n     *\n     * When user cancels the dialog, the sprite has been created. Remove it.\n     */\n    override async cleanupAfterExecutionCancel() {\n        if (!this.data.compiledSpriteUuid) return;\n        const actor = await fromUuid(this.data.compiledSpriteUuid);\n        await actor?.delete();\n        delete this.actor;\n    }\n\n\n    /**\n     * Update the triggering test to be ready for the followup fade test.\n     */\n    async updateCompilationTestForFollowup() {\n        // Finalize the original test values.\n        this.against.calcFade(this.hits.value);\n        await this.against.saveToMessage();\n    }\n\n    /**\n     * Finalize the existing sprite actor with context around it's summoning.\n     *\n     * This should be called as the last step in summoning.\n     */\n    async finalizeSummonedSprite() {\n        if (!this.actor) return;\n\n        const technomancer = this.against.actor as Actor;\n\n        const updateData = {\n            // 'system.services': this.deriveSpriteServices(),\n            'system.technomancerUuid': technomancer.uuid\n        }\n\n        this._addOwnershipToUpdateData(updateData);\n\n        await this.actor.update(updateData);\n    }\n\n    /**\n     * Give all users with the summoning actor permissions of the created sprite actor.\n     *\n     * TODO: Doesn't adhere to naive DRY with OpposedSummonSpiritTest.\n     *\n     * @param updateData The update data to add the permission to, that's applied to the sprite actor.\n     */\n    _addOwnershipToUpdateData(updateData: object) {\n        const summoner = this.against.actor as Actor;\n\n        // Set permissions for all users using the summoner as main character.\n        const users = game.users?.filter(user => user.character?.uuid === summoner.uuid);\n        if (!users) return;\n\n        const ownership = {};\n        users.forEach(user => {\n            if (user.isGM) return;\n            // #TODO: Add a setting to define that this should be done and what permission it should be done with.\n            //@ts-expect-error v10\n            ownership[user.id] = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER;\n        })\n        updateData['ownership'] = ownership\n    }\n\n    /**\n     * Based on this tests selection, create a sprite actor\n     */\n    async createCompiledSprite() {\n        if (!this.against) return;\n        if (!this.against.actor) return;\n\n        const technomancer = this.against.actor;\n\n        if (this.against.data.preparedSpriteUuid) {\n            // Reuse a prepared actor...\n            const preparedActor = await this.getPreparedSpriteActor();\n            if (!preparedActor) return console.error('Shadowrun 6e | Could not find prepared actor');\n            await preparedActor.addTechnomancer(technomancer);\n            console.error('Add compiler/mancer? reference to sprite');\n\n        } else {\n            // Create a new sprite actor from scratch...\n            const spriteType = this.against.data.spriteTypeSelected;\n            const spriteTypeLabel = game.i18n.localize(SR6.spriteTypes[spriteType]);\n            const name = `${technomancer.name} ${spriteTypeLabel} ${game.i18n.localize('TYPES.Actor.sprite')}`;\n            const level = this.against.data.level;\n            const system = { level, spriteType };\n\n            const actor = await Actor.create({ name, type: 'sprite', system, prototypeToken: { actorLink: true } });\n\n            if (!actor) return console.error('Shadowrun 6e | Could not create the compiled sprite actor');\n\n            this.data.compiledSpriteUuid = actor.uuid;\n        }\n    }\n\n    /**\n     * Try getting a prepared sprite actor to reuse.\n     *\n     * @returns\n     */\n    async getPreparedSpriteActor(): Promise<SR6Actor | null> {\n        return await fromUuid(this.data.compiledSpriteUuid as string) as SR6Actor;\n    }\n}\n", "import { SR6Actor } from \"../../actor/SR6Actor\";\nimport { parseDropData } from \"../../utils/sheets\";\nimport { SR6BaseItemSheetData, SR6ItemSheet } from \"../SR6ItemSheet\";\n\n\ninterface SR6CallInActionSheetData extends SR6BaseItemSheetData {\n    spirit: SR6Actor | null\n    sprite: SR6Actor | null\n\n    isForSpirit: boolean\n    isForSprite: boolean\n}\n\n/**\n * Item Sheet implementation for the call in action item type.\n *\n * This shows creation / call in of different type of actor types by an actor\n * 'creator' or 'caller'. Summoner/Conjurer, Technomancer, etc.\n */\nexport class SR6CallInActionSheet extends SR6ItemSheet {\n    override async getData(options: any): Promise<SR6CallInActionSheetData> {\n        const data = await super.getData(options) as unknown as SR6BaseItemSheetData;\n\n        const system = data.system as Shadowrun.CallInActionData;\n\n        // Allow for prepared actors to be shown on sheet.\n        const spirit = await this.prepareSpirit(system);\n        const sprite = await this.prepareSprite(system)\n\n        // Allow sheet to determine it's current creation mode.\n        const isForSpirit = system.actor_type === 'spirit';\n        const isForSprite = system.actor_type === 'sprite';\n\n        return {\n            ...data,\n            spirit,\n            sprite,\n            isForSpirit,\n            isForSprite\n        }\n    }\n\n    /**\n     * Summoning Sheets allow dropping of spirits onto them.\n     * These spirits will be used as pre-configured actors to summon.\n     */\n    override async _onDrop(event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const data = parseDropData(event);\n        if (!data) return;\n\n        if (data.type !== 'Actor') return;\n        const actor = await fromUuid(data.uuid) as SR6Actor;\n\n        if (actor.isSpirit()) await this.updatePreparedSpirit(actor);\n        if (actor.isSprite()) await this.updatePreparedSprite(actor);\n    }\n\n    override activateListeners(html: any): void {\n        super.activateListeners(html);\n\n        html.find('.spirit-remove').click(this.handleSpiritRemove.bind(this));\n        html.find('.sprite-remove').click(this.handleSpriteRemove.bind(this));\n    }\n\n    /**\n     * Summoning sheets can be connected to a pre-prepared spirit.\n     * Supply that actor if it's available.\n     *\n     * @returns null should the configured spirit not exist anymore.\n     */\n    async prepareSpirit(system: Shadowrun.CallInActionData): Promise<SR6Actor|null> {\n        if (!system.spirit.uuid) {\n            return null;\n        }\n        return await fromUuid(system.spirit.uuid) as SR6Actor;\n    }\n\n    /**\n     * Conjuring can be connected to a pre-prepared sprite.\n     * Supply that actor if it's available.\n     *\n     * @returns null should the configured sprite not exist anymore.\n     */\n    async prepareSprite(system: Shadowrun.CallInActionData): Promise<SR6Actor|null> {\n        if (!system.sprite.uuid) {\n            return null;\n        }\n        return await fromUuid(system.sprite.uuid) as SR6Actor;\n    }\n\n    /**\n     * Handling the removal of a spirit by any sheet action.\n     */\n    async handleSpiritRemove(event: any) {\n        await this.item.update({'system.spirit.uuid': ''});\n    }\n\n    /**\n     * User requested removal of the prepared sprite.\n     */\n    async handleSpriteRemove(event: any) {\n        await this.item.update({'system.sprite.uuid': ''});\n    }\n\n    /**\n     * Updating the summoning items prepared spirit.\n     *\n     * @param actor The prepared actor\n     */\n    async updatePreparedSpirit(actor: SR6Actor) {\n        const spirit = actor.asSpirit();\n        if (!spirit) return;\n\n        await this.item.update({\n            'system.spirit.uuid': actor.uuid,\n            'system.spirit.type': spirit.system.spiritType,\n            'system.spirit.force': spirit.system.force,\n        });\n    }\n\n    /**\n     * Update the compilation items prepared sprite.\n     *\n     * @param actor The prepared actor\n     */\n    async updatePreparedSprite(actor: SR6Actor) {\n        const sprite = actor.asSprite();\n        if (!sprite) return;\n\n        await this.item.update({\n            'system.sprite.uuid': actor.uuid,\n            'system.sprite.type': sprite.system.spriteType,\n            'system.sprite.level': sprite.system.level,\n        });\n    }\n}\n", "import { FLAGS, SYSTEM_NAME } from \"../constants\";\nimport { SuccessTest } from \"../tests/SuccessTest\";\nimport { TestCreator } from \"../tests/TestCreator\";\n\n/**\n * The system needs a place to override default ChatMessage behaviors, making it necessary to replace the default implementation.\n *\n * If you need to add chat related features, events and listeners you should do so here.\n */\nexport class SR6ChatMessage extends ChatMessage {\n    /**\n     * Return a SuccessTest implementation for this chat message instance, if there is one.\n     */\n    get test(): SuccessTest | undefined {\n        // Check if message contains any test data.\n        const flagData = this.getFlag(SYSTEM_NAME, FLAGS.Test);\n        if (flagData === null || flagData === undefined) return;\n        if (this.id === null || this.id === '') return;\n\n        return TestCreator._fromMessageTestData(flagData);\n    }\n}\n", "//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class AstralVisionFilter extends AbstractBaseFilter {\n  //@ts-expect-error\n  static override defaultUniforms = {\n    luminanceThreshold: 0.5,\n    alphaThreshold: 0.1,\n  };\n\n  /**\n   * fragment shader based on the following snippets:\n   * @link https://gitlab.com/peginc/swade/-/blob/develop/src/module/vision/InfravisionFilter.ts?ref_type=heads\n   */\n  //@ts-expect-error\n  static override fragmentShader = `\n  varying vec2 vTextureCoord;\n  uniform sampler2D uSampler;\n  uniform float luminanceThreshold;\n  uniform float alphaThreshold;\n\n  #define RED vec4(0.8, 0.0, 0.0, 1.0)\n  #define YELLOW vec4(0.8, 0.8, 0.0, 1.0)\n  #define BLUE vec4(0.0, 0.0, 1.0, 1.0)\n  #define GREEN vec4(0.0, 1.0, 0.0, 1.0)\n\n  void main(void) {\n    vec4 texColor = texture2D(uSampler, vTextureCoord);\n    float luminance = dot(vec3(0.30, 0.59, 0.11), texColor.rgb);\n    if ( texColor.a > alphaThreshold ) {\n      gl_FragColor = (luminance < luminanceThreshold) ? mix(RED, mix(YELLOW, vec4(0.2, 0.0, 0.0, 1.0), luminance / 0.5), luminance * 1.0 ) : mix(vec4(0.2, 0.0, 0.0, 1.0), YELLOW, (luminance - 0.5) * 3.0);\n      gl_FragColor.rgb *= 0.1 + 0.25 + 0.75 * pow( 16.0 * vTextureCoord.x * vTextureCoord.y * (1.0 - vTextureCoord.x) * (1.0 - vTextureCoord.y), 0.15 );\n      gl_FragColor.a = texColor.a;\n    } else {\n      gl_FragColor = vec4(0.0);\n    }\n  }`;\n}\n\n", "\nimport AstralVisionFilter from './astralPerceptionFilter';\n\n//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class AstralPerceptionDetectionMode extends DetectionMode {\n\n  //@ts-expect-error\n  static override getDetectionFilter() {\n    //@ts-expect-error\n    return (this._detectionFilter ??= AstralVisionFilter.create());\n  }\n\n  \n    //@ts-expect-error\n    override _canDetect(visionSource, target) {\n      const tgt = target?.document;\n      const targetAstralActive =\n        tgt instanceof TokenDocument\n        && tgt.actor?.system.visibilityChecks.astral.astralActive;\n\n      const targetHasAura =\n        tgt instanceof TokenDocument\n        && tgt.actor?.system.visibilityChecks.astral.hasAura;\n\n      const targetAffectedBySpell = tgt.actor?.system.visibilityChecks.astral.affectedBySpell;\n\n      const isAstralPerceiving = visionSource?.visionMode?.id === \"astralPerception\";\n\n      return (targetHasAura || targetAstralActive || targetAffectedBySpell) && isAstralPerceiving\n\n    }\n  }\n  ", "//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class AstralPerceptionBackgroundVisionShader extends AmplificationBackgroundVisionShader {\n    static COLOR_TINT = [1, 1, 0];\n  \n    static defaultUniforms = {\n      ...super.defaultUniforms,\n      colorTint: this.COLOR_TINT,\n    };\n  }\n  ", "//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class ThermographicVisionFilter extends AbstractBaseFilter {\n  //@ts-expect-error\n  static override defaultUniforms = {\n    luminanceThreshold: 0.5,\n    alphaThreshold: 0.1,\n  };\n\n  /**\n   * fragment shader based on the following snippets:\n   * @link https://gitlab.com/peginc/swade/-/blob/develop/src/module/vision/InfravisionFilter.ts?ref_type=heads\n   */\n  //@ts-expect-error\n  static override fragmentShader = `\n  varying vec2 vTextureCoord;\n  uniform sampler2D uSampler;\n  uniform float luminanceThreshold;\n  uniform float alphaThreshold;\n\n  #define RED vec4(1.0, 0.0, 0.0, 1.0)\n  #define YELLOW vec4(1.0, 1.0, 0.0, 1.0)\n  #define BLUE vec4(0.0, 0.0, 1.0, 1.0)\n  #define GREEN vec4(0.0, 1.0, 0.0, 1.0)\n\n  void main(void) {\n    vec4 texColor = texture2D(uSampler, vTextureCoord);\n    float luminance = dot(vec3(0.30, 0.59, 0.11), texColor.rgb);\n    if ( texColor.a > alphaThreshold ) {\n      gl_FragColor = (luminance < luminanceThreshold) ? mix(BLUE, mix(YELLOW, GREEN, luminance / 0.5), luminance * 2.0 ) : mix(YELLOW, RED, (luminance - 0.5) * 2.0);\n      gl_FragColor.rgb *= 0.1 + 0.25 + 0.75 * pow( 16.0 * vTextureCoord.x * vTextureCoord.y * (1.0 - vTextureCoord.x) * (1.0 - vTextureCoord.y), 0.15 );\n      gl_FragColor.a = texColor.a;\n    } else {\n      gl_FragColor = vec4(0.0);\n    }\n  }`;\n}\n", "\nimport ThermographicVisionFilter from './thermographicFilter';\n\n//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class ThermographicVisionDetectionMode extends DetectionMode {\n\n  //@ts-expect-error\n  static override getDetectionFilter() {\n    //@ts-expect-error\n    return (this._detectionFilter ??= ThermographicVisionFilter.create());\n  }\n\n  \n    //@ts-expect-error\n    override _canDetect(visionSource, target) {\n      const tgt = target?.document;\n      const targetHasHeat =\n        tgt instanceof TokenDocument\n        && tgt.actor?.system.visibilityChecks.meat.hasHeat;\n\n      const targetIsVisible =\n        tgt instanceof TokenDocument\n        //@ts-expect-error\n        && !tgt.actor?.statuses.has(CONFIG.specialStatusEffects.INVISIBLE);\n\n        const isAstralPerceiving = visionSource?.visionMode?.id === \"astralPerception\";\n\n      return targetHasHeat && targetIsVisible && !isAstralPerceiving\n\n    }\n  }\n  ", "//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class LowLightVisionFilter extends AbstractBaseFilter {\n  //@ts-expect-error\n  static override defaultUniforms = {\n    luminanceThreshold: 0.5,\n    alphaThreshold: 0.1,\n  };\n\n  /**\n   * fragment shader based on the following snippets:\n   * @link https://gitlab.com/peginc/swade/-/blob/develop/src/module/vision/InfravisionFilter.ts?ref_type=heads\n   */\n  //@ts-expect-error\n  static override fragmentShader = `\n  varying vec2 vTextureCoord;\n  uniform sampler2D uSampler;\n  uniform float luminanceThreshold;\n  uniform float alphaThreshold;\n\n  #define RED vec4(1.0, 0.0, 0.0, 1.0)\n  #define YELLOW vec4(1.0, 1.0, 0.0, 1.0)\n  #define BLUE vec4(0.0, 0.0, 1.0, 1.0)\n  #define GREEN vec4(0.0, 1.0, 0.0, 1.0)\n\n  void main(void) {\n    vec4 texColor = texture2D(uSampler, vTextureCoord);\n    float luminance = dot(vec3(0.30, 0.59, 0.11), texColor.rgb);\n    if ( texColor.a > alphaThreshold ) {\n      gl_FragColor = mix(vec4(0.2, 0.5, 0.2, 1), vec4(1, 1, 0.4, 1), (luminance - 0.5) * 2.0);;\n      gl_FragColor.rgb *= 0.1 + 0.25 + 0.75 * pow( 16.0 * vTextureCoord.x * vTextureCoord.y * (1.0 - vTextureCoord.x) * (1.0 - vTextureCoord.y), 0.15 );\n      gl_FragColor.a = texColor.a;\n    } else {\n      gl_FragColor = vec4(0.0);\n    }\n  }`;\n}\n", "\n//todo: v10 foundry-vtt-types \n\nimport LowLightVisionFilter from \"./lowlightFilter\";\n\n//@ts-expect-error\nexport default class LowlightVisionDetectionMode extends DetectionMode {\n\n  //@ts-expect-error\n  static override getDetectionFilter() {\n    //@ts-expect-error\n    return this._detectionFilter ??= LowLightVisionFilter.create();\n  }\n\n  \n    //@ts-expect-error\n    override _canDetect(visionSource, target) {\n      const tgt = target?.document;\n      const targetIsVisible =\n        tgt instanceof TokenDocument\n        //@ts-expect-error\n        && !tgt.actor?.statuses.has(CONFIG.specialStatusEffects.INVISIBLE);\n\n        const isAstralPerceiving = visionSource?.visionMode?.id === \"astralPerception\";\n\n      return targetIsVisible && !isAstralPerceiving\n\n    }\n  }\n  ", "//todo: v10 foundry-vtt-types \n//@ts-expect-error\nexport default class AugmentedRealityVisionFilter extends AbstractBaseFilter {\n  //@ts-expect-error\n  static override defaultUniforms = {\n    luminanceThreshold: 0.5,\n    alphaThreshold: 0.1,\n  };\n\n  /**\n   * fragment shader based on the following snippets:\n   * @link https://gitlab.com/peginc/swade/-/blob/develop/src/module/vision/InfravisionFilter.ts?ref_type=heads\n   */\n  //@ts-expect-error\n  static override fragmentShader = `\n  varying vec2 vTextureCoord;\n  uniform sampler2D uSampler;\n  uniform float luminanceThreshold;\n  uniform float alphaThreshold;\n\n  #define RED vec4(1.0, 0.0, 0.0, 1.0)\n  #define YELLOW vec4(1.0, 1.0, 0.0, 1.0)\n  #define BLUE vec4(0.0, 0.0, 1.0, 1.0)\n  #define GREEN vec4(0.0, 1.0, 0.0, 1.0)\n\n  void main(void) {\n    vec4 texColor = texture2D(uSampler, vTextureCoord);\n    float luminance = dot(vec3(0.30, 0.59, 0.11), texColor.rgb);\n    if ( texColor.a > alphaThreshold ) {\n      gl_FragColor = mix(vec4(0.1, 0.1, 0.5, 1.0), vec4(0.4, 0.4, 0.8, 1.0), (luminance - 0.5) * 2.0);;\n      gl_FragColor.rgb *= 0.1 + 0.25 + 0.75 * pow( 16.0 * vTextureCoord.x * vTextureCoord.y * (1.0 - vTextureCoord.x) * (1.0 - vTextureCoord.y), 0.15 );\n      gl_FragColor.a = texColor.a;\n    } else {\n      gl_FragColor = vec4(0.0);\n    }\n  }`;\n}\n", "\n//todo: v10 foundry-vtt-types \n\nimport AugmentedRealityVisionFilter from \"./arFilter\";\n\n//@ts-expect-error\nexport default class AugmentedRealityVisionDetectionMode extends DetectionMode {\n\n  //@ts-expect-error\n  static override getDetectionFilter() {\n    //@ts-expect-error\n    return this._detectionFilter ??= AugmentedRealityVisionFilter.create();\n\n    // return this._detectionFilter ??= GlowOverlayFilter.create({\n    //   glowColor: [0, 0.25, 0.75, 1]\n    // });\n  }\n  \n    //@ts-expect-error\n    override _canDetect(visionSource, target) {\n      const tgt = target?.document;\n      const targetHasIcon =\n        tgt instanceof TokenDocument\n        && tgt.actor?.system.visibilityChecks.matrix.hasIcon;\n\n      const targetIsNotRunningSilent = !tgt.actor?.system.visibilityChecks.matrix.runningSilent\n\n      const isAstralPerceiving = visionSource?.visionMode?.id === \"astralPerception\";\n\n      return targetHasIcon && targetIsNotRunningSilent && !isAstralPerceiving\n    }\n  }\n  ", "import AstralPerceptionDetectionMode from './astralPerception/astralPerceptionDetectionMode';\nimport AstralPerceptionBackgroundVisionShader  from './astralPerception/astralPerceptionBackgroundShader';\nimport ThermographicVisionDetectionMode from './thermographicVision/thermographicDetectionMode';\nimport LowlightVisionDetectionMode from './lowlightVision/lowlightDetectionMode';\nimport AugmentedRealityVisionDetectionMode from './augmentedReality/arDetectionMode';\n\nexport default class VisionConfigurator {\n    static configureAstralPerception() {\n        //todo: v10 foundry-vtt-types\n        //@ts-expect-error\n        CONFIG.Canvas.detectionModes.astralPerception = new AstralPerceptionDetectionMode({\n            id: 'astralPerception',\n            label: 'SR6.Vision.AstralPerception',\n            //@ts-expect-error\n            type: DetectionMode.DETECTION_TYPES.SIGHT,\n          });\n\n        //@ts-expect-error\n        CONFIG.Canvas.visionModes.astralPerception = new VisionMode({\n            id: 'astralPerception',\n            label: 'SR6.Vision.AstralPerception',\n            canvas: {\n                //@ts-expect-error\n                shader: ColorAdjustmentsSamplerShader,\n                uniforms: {\n                    saturation: 5,\n                    tint: AstralPerceptionBackgroundVisionShader.COLOR_TINT,\n                },\n            },\n            lighting: {\n                //@ts-expect-error\n                background: { visibility: VisionMode.LIGHTING_VISIBILITY.DISABLED },\n                //@ts-expect-error\n                illumination: { visibility: VisionMode.LIGHTING_VISIBILITY.DISABLED },\n                //@ts-expect-error\n                coloration: { visibility: VisionMode.LIGHTING_VISIBILITY.DISABLED },\n            },\n            vision: {\n                darkness: { adaptive: false },\n                background: { shader: AstralPerceptionBackgroundVisionShader },\n            },\n        });\n    }\n\n    static configureThermographicVision() {\n        //todo: v10 foundry-vtt-types\n        //@ts-expect-error\n        CONFIG.Canvas.detectionModes.thermographic = new ThermographicVisionDetectionMode({\n            id: 'thermographic',\n            label: 'SR6.Vision.ThermographicVision',\n            //@ts-expect-error\n            type: DetectionMode.DETECTION_TYPES.SIGHT,\n          });\n    }\n\n    static configureLowlight() {\n        //todo: v10 foundry-vtt-types\n        //@ts-expect-error\n        CONFIG.Canvas.detectionModes.lowlight = new LowlightVisionDetectionMode({\n            id: 'lowlight',\n            label: 'SR6.Vision.LowLight',\n            //@ts-expect-error\n            type: DetectionMode.DETECTION_TYPES.SIGHT,\n          });\n    }\n\n    static configureAR() {\n        //todo: v10 foundry-vtt-types\n        //@ts-expect-error\n        CONFIG.Canvas.detectionModes.augmentedReality = new AugmentedRealityVisionDetectionMode({\n            id: 'augmentedReality',\n            label: 'SR6.Vision.AugmentedReality',\n            //@ts-expect-error\n            type: DetectionMode.DETECTION_TYPES.SIGHT,\n          });\n    }\n  }\n", "import { SR6Actor } from \"../../actor/SR6Actor\";\nimport { SR6Item } from \"../../item/SR6Item\";\nimport { OpposedTest } from \"../../tests/OpposedTest\";\nimport { SuccessTest } from \"../../tests/SuccessTest\";\nimport { TestCreator } from \"../../tests/TestCreator\";\nimport { SR6ActiveEffectConfig } from \"../SR6ActiveEffectConfig\";\n\n/**\n * Collection of functionality necessary for the autocomplete inline properties module\n * https://foundryvtt.com/packages/autocomplete-inline-properties/\n *\n * All effect change key and value getters live here and should be added here for separation with the rest of the system.\n */\nexport const AutocompleteInlineHooksFlow =  {\n    /**\n     * Add support for https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties module\n     * to give auto complete for active effect attribute keys.\n     *\n     * This is taken from: https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties/blob/master/CONTRIBUTING.md\n     * It partially uses: https://github.com/schultzcole/FVTT-Autocomplete-Inline-Properties/blob/master/package-config.mjs#L141\n     */\n    setupHook: () => {\n        // Module might not be installed.\n        const aipModule = game.modules.get(\"autocomplete-inline-properties\");\n        if (!aipModule) return;\n        // @ts-expect-error\n        // API might be missing.\n        const api = aipModule.API;\n        if (!api) return;\n\n        console.debug('Shadowrun 6e | Registering support for autocomplete-inline-properties');\n        const DATA_MODE = api.CONST.DATA_MODE;\n\n        const config = {\n            packageName: \"shadowrun6-elysium\",\n            sheetClasses: [{\n                name: \"ActiveEffectConfig\",\n                fieldConfigs: [\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-key-actor input[type=\"text\"]`, defaultPath: \"system\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.OWNING_ACTOR_DATA },\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-key-targeted_actor input[type=\"text\"]`, defaultPath: \"system\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.OWNING_ACTOR_DATA },\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-key-test_all input[type=\"text\"]`, defaultPath: \"\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.keyGetterTestData},\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-key-test_item input[type=\"text\"]`, defaultPath: \"\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.keyGetterTestData},\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-key-modifier input[type=\"text\"]`, defaultPath: \"\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.keyGetterModifiersData},\n\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-value-actor input[type=\"text\"]`, defaultPath: \"system\", inlinePrefix: \"@\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.valueGetterActor},\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-value-targeted_actor input[type=\"text\"]`, defaultPath: \"\", inlinePrefix: \"@\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.valueGetterTargetedActorData},\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-value-test_all input[type=\"text\"]`, defaultPath: \"system\", inlinePrefix: \"@\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.valueGetterTestData},\n                    { selector: `.tab[data-tab=\"effects\"] .autocomplete-value-test_item input[type=\"text\"]`, defaultPath: \"system\", inlinePrefix: \"@\", showButton: true, allowHotkey: true, dataMode: DATA_MODE.CUSTOM, customDataGetter: AutocompleteInlineHooksFlow.valueGetterTestData},\n                ]\n            }]\n        };\n\n        api.PACKAGE_CONFIG.push(config);\n    },\n\n    /**\n     * Getter to show values for apply-to actor.\n     *\n     * @param EffectConfig The effect config supplying the effect context.\n     * @returns Either a SR6Actor or SR6Item source object.\n     */\n    valueGetterActor: (EffectConfig: SR6ActiveEffectConfig) => {\n        const effect = EffectConfig.object;\n        if (!effect.parent) return {};\n        return effect.parent?.toObject();\n    },\n\n    /**\n     * Getter to show keys for apply-to test_all and test_item\n     *\n     * @param EffectConfig The effect config supplying the effect context.\n     * @returns A test object for the autocomplete module to use.\n     */\n    keyGetterTestData: (EffectConfig: SR6ActiveEffectConfig) => {\n        const effect = EffectConfig.object;\n\n        // For  effects targeting specific tests, we can provide a merge of all tests data.\n        if (effect.selectionTests.length > 0) {\n            const actor = effect.actor;\n            const testData = {};\n            for (const TestClassName of effect.selectionTests) {\n                if (!TestClassName) return {};\n                const TestClass = TestCreator._getTestClass(TestClassName);\n                if (!TestClass) return {};\n                const test = new TestClass({}, {actor});\n                foundry.utils.mergeObject(testData, test.data);\n            }\n            return {data: testData};\n        }\n\n        // For actor effects, we can't determine the test type.\n        if (effect.isActorOwned) {\n            return {data: new SuccessTest({}).data};\n        }\n\n        // For item effects, we can determine the test type.\n        if (effect.isItemOwned) {\n            const item = effect.parent as SR6Item;\n            const action = item.getAction();\n            if (!action) return {};\n            const SuccessTestClass = TestCreator._getTestClass(action.test) || SuccessTest;\n            return {data: new SuccessTestClass({}, {actor: item.actor, item}).data};\n        }\n    },\n\n    /**\n     * Getter to show values for apply-to test_all and test_item\n     *\n     * @param EffectConfig\n     */\n    valueGetterTestData: (EffectConfig: SR6ActiveEffectConfig) => {\n        const effect = EffectConfig.object;\n        if (!effect.parent) return {};\n\n        // Autocomplete inline properties module doesn't support get-er properties.\n        // For this reason we have to manually convert those nested objects we want provide.\n        const values = effect.parent.toObject();\n\n        if (effect.parent.parent) {\n            values['actor'] = effect.parent.parent.toObject();\n        }\n\n        return values;\n    },\n\n    /**\n     * Getter to show data for apply-to modifier.\n     *\n     * Modifier effects don't apply directly to data but allow the system to use keys to determine what rules\n     * apply at any point in the system.\n     *\n     * environmental is applied during calculation of situational modifiers.\n     * Others might be applied where ever.\n     *\n     * @param EffectConfig The effect config supplying the effect context.\n     * @returns A simple object for autocomplete module to use.\n     */\n    keyGetterModifiersData: (EffectConfig: SR6ActiveEffectConfig) => {\n        return {environmental: {\n            low_light_vision: '',\n            image_magnification: '',\n            tracer_rounds: '',\n            smartlink: '',\n            ultrasound: '',\n            thermographic_vision: ''\n        }}\n    },\n\n    /**\n     * Getter to show as many fields available as possible as closely matching the parent item of the effect.\n     *\n     * When apply-to targeted Actor is used, the values can access all values in relation of the opposed test.\n     * Effects for targeted actors are applied from within the opposed actor context.\n     *\n     * @param EffectConfig The effect config supplying the effect context.\n     * @returns A opposed test instance for autocomplete module to use.\n     */\n    valueGetterTargetedActorData: (EffectConfig: SR6ActiveEffectConfig) => {\n        const effect = EffectConfig.object;\n\n        if (effect.parent instanceof SR6Item) {\n            const item = effect.parent as SR6Item;\n            const action = item.getAction();\n            if (!action) return {};\n            const SuccessTestClass = TestCreator._getTestClass(action.test) || SuccessTest;\n            const OpposedTestClass = TestCreator._getTestClass(action.opposed.test) || OpposedTest;\n            const successTest = new SuccessTestClass({});\n            const opposedTest = new OpposedTestClass({against: successTest.data}, {actor: item.actor, item});\n\n            return {data: opposedTest.data};\n        }\n    }\n}\n", "/**\n * Add a few system links to the settings sidebar menu for easier access and better visibility by users.\n */\nimport { Translation } from './utils/strings';\n\nexport const RenderSettings = {\n    listen: () => {\n        Hooks.on(\"renderSettings\", async (_app, $html) => {\n            const html = $html[0]!;\n\n            const systemRow = html.querySelector('.settings-sidebar li.system');\n            const systemInfo = systemRow?.cloneNode(false);\n\n            if (!(systemInfo instanceof HTMLLIElement)) {\n                throw Error(\"Unexpected error attach system information to settings sidebar\");\n            }\n\n            systemInfo.classList.remove('system');\n            systemInfo.classList.add('system-links');\n\n            const links = [\n                {\n                    url: \"https://github.com/SR5-FoundryVTT/SR5-FoundryVTT/releases/latest/\",\n                    label: \"SR6.Labels.Sidebar.Changelog\",\n                },\n                {\n                    url: \"https://github.com/SR5-FoundryVTT/SR5-FoundryVTT/issues/\",\n                    label: \"SR6.Labels.Sidebar.Issues\",\n                },\n                {\n                    url: \"http://sr5-foundryvtt.privateworks.com/index.php/Main_Page\",\n                    label: \"SR6.Labels.Sidebar.Wiki\",\n                },\n            ].map((data: { url: string, label: Translation }): HTMLAnchorElement => {\n                const anchor = document.createElement('a');\n                anchor.href = data.url;\n                anchor.innerText = game.i18n.localize(data.label);\n                anchor.target = \"_blank\";\n                return anchor;\n            });\n            systemInfo.append(...links);\n            systemRow?.after(systemInfo);\n        });\n    }\n}\n", "import { SR6Actor } from \"../actor/SR6Actor\";\n\n// @ts-expect-error\nexport default class Sr5Tour extends Tour {\n    //the type of actor that should be created for the tour\n    actorType: String;\n\n    //the tab for the tour\n    tab?: String\n\n    //this field is only for internal handling\n    actor?: SR6Actor;\n\n    /** @override */\n    async _preStep() {\n        await super._preStep();\n\n        //create actor if needed\n        if(this.actor == undefined) {\n            this.actor = new SR6Actor.implementation({\n                //@ts-expect-error\n                name: \"Tour \" + this.id,\n                // @ts-expect-error\n                type: this.config.actorType,\n                ownership: {\n                    default: 3\n                }\n            }) as SR6Actor;\n        }\n\n        // @ts-expect-error\n        await this.actor.sheet?._render(true, {editable: false});\n\n        // @ts-expect-error\n        if(this.config.tab) {\n            // @ts-expect-error\n            this.actor?.sheet?.activateTab(this.config.tab)\n        }\n    }\n\n    /** @override */\n    async complete() {\n        await this.actor?.sheet?.close()\n        return super.complete()\n      }\n}\n", "import Sr5Tour from \"./sr6Tours\";\n\nexport default async function registerSR5Tours() {\n  try {\n\n     // @ts-expect-error\n    game.tours.register(\n      'shadowrun6-elysium',\n      'ConditionMonitor',\n       // @ts-expect-error\n      await Sr5Tour.fromJSON('/systems/shadowrun6-elysium/dist/tours/ConditionMonitor.json'),\n    );\n\n\n//      game.tours.register(\n//       'shadowrun6-elysium',\n//       'CharacterImport',\n//        // @ts-expect-error\n//       await Sr5Tour.fromJSON('/systems/shadowrun6-elysium/dist/tours/character-import.json'),\n//     );\n//\n\n  } catch (err) {\n    console.log(err);\n  }\n}\n", "import { Helpers } from \"../helpers\";\n\nexport class JournalEnrichers {\n\n    static get skillKeywords() {\n        return [\"Teamwork\", \"RollSkill\"]\n    };\n    static get attributeKeywords() {\n        return [\"RollAttribute\"];\n    }\n    static get actorKeywords() {\n        return this.skillKeywords.concat(this.attributeKeywords)\n    }\n\n    static setEnrichers() {\n        const opening = \"(\\\\[|\\\\()\";\n        const closing = \"(\\\\]|\\\\))\";\n        const threshold = \"\\\\s*(\\\\d*)\";\n\n        //@ts-expect-error\n        CONFIG.TextEditor.enrichers.push(\n            {\n                pattern: new RegExp(`\\\\@(${JournalEnrichers.actorKeywords.join(\"|\")})${opening}([a-z]+)${threshold}${closing}`, \"g\"),\n                enricher: (match, options) => {\n                    const type = match[1]\n                    const rollEntity = match[3] as string\n                    const threshold = match[4]\n                    let rollEntityName = JournalEnrichers.getRollEntityTranslation(type, rollEntity);\n\n                    return $(`<a class=\"sr6-roll-request\" data-request=\"${type}\" data-skill=\"${rollEntity}\" data-threshold=${threshold}><em class=\"fas fa-dice\"></em>${rollEntityName} ${threshold}</a>`)[0]\n                }\n            },\n        )\n    }\n\n    /**\n     * This hook listens to roll-request clicks, extracts the data and forwards it to create a chat message\n     * @param journal The journal where the roll is triggered\n     * @param html the triggering html\n     * @param data\n     */\n    static async setEnricherHooks(journal, html, data) {\n        const rolls = {\n            \"Teamwork\": \"startTeamworkTest\",\n            \"RollSkill\": \"rollSkill\",\n            \"RollAttribute\": \"rollAttribute\"\n        }\n\n        html.on(\"click\", \".sr6-roll-request\", (ev) => {\n            const element = ev.currentTarget\n\n            const rollType = element.dataset.request\n            const rollTypeName = \"SR6.GMRequest.\" + rollType;\n            const rollEntity = element.dataset.skill\n            let rollEntityName = JournalEnrichers.getRollEntityTranslation(rollType, rollEntity);\n            const threshold = element.dataset.threshold\n\n            const templateData = {\n                rollType: rolls[rollType],\n                rollTypeName: rollTypeName,\n                rollEntity: rollEntity,\n                rollEntityName: rollEntityName,\n                threshold: threshold\n            }\n\n            JournalEnrichers.createChatMessage(templateData);\n        })\n    }\n\n    /**\n     * This method provides translations respecting the rollType\n     * @param type what rollType is requestd\n     * @param rollEntity what should be rolled\n     * @returns the translation or rollEntity when the keyword is unknown\n     */\n    static getRollEntityTranslation(type: string, rollEntity: string) {\n        if(JournalEnrichers.skillKeywords.includes(type)) {\n           return Helpers.getSkillTranslation(rollEntity)\n        }\n\n        if(JournalEnrichers.attributeKeywords.includes(type)) {\n            return Helpers.getAttributeTranslation(rollEntity)\n         }\n\n        return rollEntity;\n    }\n\n    static async chatlogRequestHooks(html) {\n          // setup chat listener messages for each message as some need the message context instead of chatlog context.\n          html.find('.chat-message').each(async (index, element) => {\n            element = $(element);\n            const id = element.data('messageId');\n            const message = game.messages?.get(id);\n            if (!message) return;\n\n            await this.messageRequestHooks(element)\n        });\n    }\n\n    static async messageRequestHooks(html) {\n        html.find('.sr6-requestAnswer').on('click', async (ev) => {\n            const element = ev.currentTarget\n\n            const rollType = element.dataset.request\n            const rollEntity = element.dataset.rollentity\n            const threshold = parseInt(element.dataset.threshold)\n\n            let actor = await Helpers.chooseFromAvailableActors()\n\n            if(actor == undefined) {\n                //in a normal running game this should not happen\n                ui.notifications?.error('SR6.Errors.NoAvailableActorFound', {localize: true});\n                return\n            }\n\n           actor[rollType](rollEntity, {threshold: {base: threshold, value: threshold} })\n        })\n    }\n\n    static async createChatMessage (templateData) {\n        const html = await renderTemplate('systems/shadowrun6-elysium/dist/templates/chat/rollRequest.html', templateData);\n\n        const chatData = {\n            user: game.user?.id,\n            speaker:ChatMessage.getSpeaker(),\n            content: html\n        };\n\n        await ChatMessage.create(chatData)\n    };\n}\n", "import { FLAGS, SYSTEM_NAME } from \"../constants\";\nimport { SocketMessage } from \"../sockets\";\n\n/**\n * Handle the global storage setting for the system.\n *\n * This allows you to store data globally, without a FoundryVTT document, and retrieve it later.\n * Since it's stored within a world setting, this will handle the GM socket updates for you.\n *\n * NOTE: Foundry doesn\u00B4t do it's typical differential merge on updates, nor does it handle unset / delete.\n *\n * Usage:\n * > const mydata = game['shadowrun6-elysium'].storage.get('key1.key2');\n * > mydata.subValue = 'new value';\n * > await game['shadowrun6-elysium'].storage.set('key1.key2', mydata);\n */\nexport const DataStorage = {\n    /**\n     * Assure a usable data storage, even if data is lost.\n     */\n    validate: async function () {\n        console.debug('Shadowrun 6e | Validating global data storage.');\n        const storage = DataStorage.storage();\n        if (!storage || typeof storage !== 'object') {\n            ui.notifications?.error('Shadowrun 6e | Global data storage has been reset. Please check the console (F12) for more information.');\n            console.error('Shadowrun 6e | Global data storage could not be loaded. Resetting to empty object. This might cause some game information to be deleted.', storage);\n            await game.settings.set(SYSTEM_NAME, FLAGS.GlobalDataStorage, {});\n        }\n    },\n\n    /**\n     * Retrieve the top level storage object.\n     *\n     * @returns object\n     */\n    storage: function(): any {\n        return game.settings.get(SYSTEM_NAME, FLAGS.GlobalDataStorage);\n    },\n\n    /**\n     * Overwrite the global data storage with a new object.\n     *\n     * @param storage The complete global storage. This will fully overwrite the current storage.\n     */\n    save: async function(storage: any) {\n        await game.settings.set(SYSTEM_NAME, FLAGS.GlobalDataStorage, storage);\n    },\n\n    /**\n     * Retrieve a storage key from the global data storage in a FoundryVTT typical way.\n     * @param key A object property string 'key1.key2'\n     * @returns any or undefined if not found\n     */\n    get: function (key: string): any {\n        return foundry.utils.getProperty(this.storage(), key);\n    },\n\n    /**\n     * Store a value in the global data storage.\n     *\n     * @param key A object property string 'key1.key2'\n     * @param value Any value to store. Take care to not overwrite complete objects, if unwanted.\n     */\n    set: async function (key: string, value: any) {\n        if (game.user?.isGM) await this._setAsGM(key, value);\n        else await this._setAsPlayer(key, value);\n    },\n\n    /**\n     * Store a value in the global data storage as GM, as players lack the permission for it.\n     */\n    _setAsGM: async function (key: string, value: any) {\n        const storage = this.storage();\n        console.debug('Shadowrun 6e | Setting a value in global data storage.', key, value, storage);\n        foundry.utils.setProperty(storage, key, value);\n        await DataStorage.save(storage);\n        console.debug('Shadowrun 6e | Value set in global data storage.', storage);\n    },\n\n    /**\n     * Store a value in the global data storage as a player, by requesting the GM to do it.\n     */\n    _setAsPlayer: async function (key: string, value: any) {\n        console.debug('Shadowrun 6e | Requesting GM to set a value in global data storage.', key, value);\n        await SocketMessage.emitForGM(FLAGS.SetDataStorage, {key, value});\n    },\n\n    /**\n     * Handle socket messages around setting data storage as GM only.\n     * @param message.data.key The set method key param\n     * @param message.data.value The set method value param\n     */\n    _handleSetDataStorageSocketMessage: async function (message: Shadowrun.SocketMessageData) {\n        if (!game.user?.isGM) return;\n        await DataStorage._setAsGM(message.data.key, message.data.value);\n    }\n}\n", "import { CompileSpriteTest } from './tests/CompileSpriteTest';\nimport { OpposedSummonSpiritTest } from './tests/OpposedSummonSpiritTest';\nimport { OpposedRitualTest } from './tests/OpposedRitualTest';\nimport { RitualSpellcastingTest } from './tests/RitualSpellcastingTest';\nimport {SR6} from './config';\nimport {Migrator} from './migrator/Migrator';\nimport {registerSystemSettings} from './settings';\nimport {FLAGS, SYSTEM_NAME, SYSTEM_SOCKET} from './constants';\nimport {SR6Actor} from './actor/SR6Actor';\nimport {SR6Item} from './item/SR6Item';\nimport {SR6ItemSheet} from './item/SR6ItemSheet';\nimport {SR6Token} from './token/SR6Token';\nimport {SR6ActiveEffect} from \"./effect/SR6ActiveEffect\";\nimport {_combatantGetInitiativeFormula, SR6Combat} from './combat/SR6Combat';\nimport {HandlebarManager} from './handlebars/HandlebarManager';\n\nimport {OverwatchScoreTracker} from './apps/gmtools/OverwatchScoreTracker';\nimport {Import} from './apps/itemImport/apps/import-form';\nimport {ChangelogApplication} from \"./apps/ChangelogApplication\";\nimport { SituationModifiersApplication } from './apps/SituationModifiersApplication';\nimport {SR6ICActorSheet} from \"./actor/sheets/SR6ICActorSheet\";\nimport {SR6ActiveEffectConfig} from \"./effect/SR6ActiveEffectConfig\";\nimport {SR6VehicleActorSheet} from \"./actor/sheets/SR6VehicleActorSheet\";\nimport {SR6CharacterSheet} from \"./actor/sheets/SR6CharacterSheet\";\nimport {SR6SpiritActorSheet} from \"./actor/sheets/SR6SpiritActorSheet\";\nimport {SR6SpriteActorSheet} from \"./actor/sheets/SR6SpriteActorSheet\";\n\nimport {SR6Roll} from \"./rolls/SR6Roll\";\nimport {SuccessTest} from \"./tests/SuccessTest\";\nimport {TeamworkTest} from \"./actor/flows/TeamworkFlow\";\nimport {OpposedTest} from \"./tests/OpposedTest\";\nimport {PhysicalDefenseTest} from \"./tests/PhysicalDefenseTest\";\nimport {RangedAttackTest} from \"./tests/RangedAttackTest\";\nimport {PhysicalResistTest} from \"./tests/PhysicalResistTest\";\nimport {MeleeAttackTest} from \"./tests/MeleeAttackTest\";\nimport {SpellCastingTest} from \"./tests/SpellCastingTest\";\nimport {DrainTest} from \"./tests/DrainTest\";\nimport {TestCreator} from \"./tests/TestCreator\";\nimport {CombatSpellDefenseTest} from \"./tests/CombatSpellDefenseTest\";\nimport {ComplexFormTest} from \"./tests/ComplexFormTest\";\nimport {AttributeOnlyTest} from \"./tests/AttributeOnlyTest\";\nimport {NaturalRecoveryStunTest} from \"./tests/NaturalRecoveryStunTest\";\nimport {NaturalRecoveryPhysicalTest} from \"./tests/NaturalRecoveryPhysicalTest\";\nimport {FadeTest} from \"./tests/FadeTest\";\nimport {ThrownAttackTest} from \"./tests/ThrownAttackTest\";\nimport {PilotVehicleTest} from \"./tests/PilotVehicleTest\";\nimport {DronePerceptionTest} from \"./tests/DronePerceptionTest\";\nimport {DroneInfiltrationTest} from \"./tests/DroneInfiltrationTest\";\nimport { SuppressionDefenseTest } from './tests/SuppressionDefenseTest';\nimport { SummonSpiritTest } from './tests/SummonSpiritTest';\n\nimport { quenchRegister } from '../unittests/quench';\nimport { createItemMacro, createSkillMacro, rollItemMacro, rollSkillMacro } from './macros';\n\nimport { NetworkDeviceFlow } from './item/flows/NetworkDeviceFlow';\nimport { registerSystemKeybindings } from './keybindings';\nimport { SkillTest } from './tests/SkillTest';\n\nimport {canvasInit} from './canvas';\nimport { ActionFollowupFlow } from './item/flows/ActionFollowupFlow';\nimport { OpposedCompileSpriteTest } from './tests/OpposedCompileSpriteTest';\nimport { SR6CallInActionSheet } from './item/sheets/SR6CallInActionSheet';\nimport { SR6ChatMessage } from './chatMessage/SR6ChatMessage';\nimport VisionConfigurator from './vision/visionConfigurator';\nimport { DataDefaults } from './data/DataDefaults';\nimport { AutocompleteInlineHooksFlow } from './effect/autoinline/AutocompleteInlineHooksFlow';\nimport { DocumentSituationModifiers } from './rules/DocumentSituationModifiers';\nimport { RenderSettings } from './systemLinks';\nimport registerSR6Tours from './tours/tours';\nimport { SuccessTestEffectsFlow } from './effect/flows/SuccessTestEffectsFlow';\nimport { JournalEnrichers } from './journal/enricher';\nimport { DataStorage } from './data/DataStorage';\n\n\n\n// Redeclare SR5config as a global as foundry-vtt-types CONFIG with SR5 property causes issues.\nexport const SR6CONFIG = SR6;\n\nexport class HooksManager {\n    static registerHooks() {\n        console.log('Shadowrun 6e | Registering system hooks');\n        // Register your highest level hook callbacks here for a quick overview of what's hooked into.\n\n        Hooks.once('init', HooksManager.init);\n        Hooks.once('setup', AutocompleteInlineHooksFlow.setupHook);\n\n        Hooks.on('canvasInit', canvasInit);\n        Hooks.on('ready', HooksManager.ready);\n        Hooks.on('hotbarDrop', HooksManager.hotbarDrop);\n        Hooks.on('renderSceneControls', HooksManager.renderSceneControls);\n        Hooks.on('getSceneControlButtons', HooksManager.getSceneControlButtons);\n        Hooks.on('getCombatTrackerEntryContext', SR6Combat.addCombatTrackerContextOptions);\n        Hooks.on('renderItemDirectory', HooksManager.renderItemDirectory);\n        // Hooks.on('renderTokenHUD', EnvModifiersApplication.addTokenHUDFields);\n        Hooks.on('renderTokenHUD', SituationModifiersApplication.onRenderTokenHUD);\n        Hooks.on('updateItem', HooksManager.updateIcConnectedToHostItem);\n        Hooks.on('deleteItem', HooksManager.removeDeletedItemsFromNetworks);\n        Hooks.on('getChatLogEntryContext', SuccessTest.chatMessageContextOptions);\n\n        Hooks.on(\"renderChatLog\", HooksManager.chatLogListeners);\n        Hooks.on('preUpdateCombatant', SR6Combat.onPreUpdateCombatant);\n\n        Hooks.on('quenchReady', quenchRegister);\n\n        RenderSettings.listen();\n    }\n\n    static init() {\n        console.log(`Loading Shadowrun 5e System\n___________________\n ___________ _____ \n/  ___| ___ \\\\  ___|\n\\\\ \\`--.| |_/ /___ \\\\ \n \\`--. \\\\    /    \\\\ \\\\\n/\\\\__/ / |\\\\ \\\\/\\\\__/ /\n\\\\____/\\\\_| \\\\_\\\\____/ \n===================\n`);\n        // Create a shadowrun6-elysium namespace within the game global\n        game['shadowrun6-elysium'] = {\n            /**\n             * System level Document implementations.\n             */\n            SR6Actor: SR6Actor,\n            SR6Item: SR6Item,\n            SR6ActiveEffect: SR6ActiveEffect,\n            /**\n             * Macro hooks used when something's dropped onto the hotbar.\n             */\n            rollItemMacro,\n            rollSkillMacro,\n            /**\n             * Should you only really need dice handling, use this. If you need more complex testing behaviour,\n             * check the Test implementations.\n             */\n            SR6Roll: SR6Roll,\n\n            /**\n             * You want to create a test from whatever source?\n             * Use this.\n             */\n            test: TestCreator,\n            data: DataDefaults,\n\n            /**\n             * You want to access or alter situational modifiers on any document?\n             * Use this.\n             */\n            modifiers: DocumentSituationModifiers,\n\n            /**\n             * .tests define what test implementation to use for each test type (key).\n             * Should you want to override default behavior for SuccessTest types, overwrite\n             * the SuccessTest class reference here\n             */\n            tests: {\n                SuccessTest,\n                OpposedTest,\n                MeleeAttackTest,\n                RangedAttackTest,\n                ThrownAttackTest,\n                PhysicalDefenseTest,\n                SuppressionDefenseTest,\n                PhysicalResistTest,\n                SpellCastingTest,\n                RitualSpellcastingTest,\n                OpposedRitualTest,\n                CombatSpellDefenseTest,\n                DrainTest,\n                FadeTest,\n                ComplexFormTest,\n                AttributeOnlyTest,\n                SkillTest,\n                NaturalRecoveryStunTest,\n                NaturalRecoveryPhysicalTest,\n                PilotVehicleTest,\n                DronePerceptionTest,\n                DroneInfiltrationTest,\n                SummonSpiritTest,\n                OpposedSummonSpiritTest,\n                CompileSpriteTest,\n                OpposedCompileSpriteTest,\n            },\n            /**\n             * Subset of tests meant to be used as the main, active test.\n             *\n             * These will show up on actions when defining the main test to be used.\n             */\n            activeTests: {\n                SuccessTest,\n                MeleeAttackTest,\n                RangedAttackTest,\n                ThrownAttackTest,\n                PhysicalResistTest,\n                SuppressionDefenseTest,\n                SpellCastingTest,\n                ComplexFormTest,\n                PhysicalDefenseTest,\n                NaturalRecoveryStunTest,\n                NaturalRecoveryPhysicalTest,\n                DrainTest,\n                FadeTest,\n                PilotVehicleTest,\n                DronePerceptionTest,\n                DroneInfiltrationTest,\n                SummonSpiritTest,\n                CompileSpriteTest,\n                RitualSpellcastingTest\n            },\n            /**\n             * Subset of tests meant to be used as opposed tests.\n             *\n             * These will show up on actions when defining an opposed test.\n             */\n            opposedTests: {\n                OpposedTest,\n                PhysicalDefenseTest,\n                SuppressionDefenseTest,\n                CombatSpellDefenseTest,\n                OpposedSummonSpiritTest,\n                OpposedCompileSpriteTest,\n                OpposedRitualTest\n            },\n            /**\n             * Subset of tests meant to be used as resist tests.\n             *\n             * Instead of showing on the action configuration these are connected to active or opposed test.\n             */\n            resistTests: {\n                PhysicalResistTest\n            },\n            /**\n             * Subset of tests meant to follow a main active test\n             */\n            followedTests: {\n                DrainTest,\n                FadeTest\n            },\n\n            /**\n             * Amount of delay used on user filter inputs.\n             * This came out of an unclear user issue regarding multi-char UTF symbol inputs, to allow\n             * 'interactive' changing of the delay on the user side until a sweet spot could be found.\n             */\n            inputDelay: 300,\n\n            /**\n             * The global data storage for the system.\n             */\n            storage: DataStorage\n        };\n\n        // Register document classes\n        CONFIG.Actor.documentClass = SR6Actor;\n        CONFIG.Item.documentClass = SR6Item;\n        CONFIG.Combat.documentClass = SR6Combat;\n        CONFIG.ChatMessage.documentClass = SR6ChatMessage;\n        CONFIG.ActiveEffect.documentClass = SR6ActiveEffect;\n        //@ts-expect-error TODO: foundry-vtt-types v11\n        // Setting to false, will NOT duplicate item effects on actors. Instead items will be traversed for their effects.\n        // Setting to true, will duplicate item effects on actors. Only effects on actors will be traversed.\n        CONFIG.ActiveEffect.legacyTransferral = false;\n\n        CONFIG.Token.objectClass = SR6Token;\n\n        // Register initiative directly (outside of system.json) as DnD5e does it.\n        CONFIG.Combat.initiative.formula =  \"@initiative.current.base.value[Base] + @initiative.current.dice.text[Dice] - @wounds.value[Wounds]\";\n        // @ts-expect-error\n        Combatant.prototype._getInitiativeFormula = _combatantGetInitiativeFormula;\n\n        // Register general SR6Roll for JSON serialization support.\n        CONFIG.Dice.rolls.push(SR6Roll);\n        // @ts-expect-error // Register the SR6Roll dnd5e style.\n        CONFIG.Dice.SR6oll = SR6Roll;\n\n        // Add Shadowrun configuration onto general Foundry config for module access.\n        // @ts-expect-error // TODO: Add declaration merging\n        CONFIG.SR6 = SR6;\n\n\n        registerSystemSettings();\n        registerSystemKeybindings();\n\n        // Register sheets for collection documents.\n        // NOTE: See dnd5e for a multi class approach for all actor types using the types array in Actors.registerSheet\n        Actors.unregisterSheet('core', ActorSheet);\n        Actors.registerSheet(SYSTEM_NAME, SR6CharacterSheet, {\n            label: \"SR6.SheetActor\",\n            makeDefault: true,\n            types: ['critter', 'character']\n        });\n        Actors.registerSheet(SYSTEM_NAME, SR6ICActorSheet, {\n            label: \"SR6.SheetActor\",\n            makeDefault: true,\n            types: ['ic']\n        });\n        Actors.registerSheet(SYSTEM_NAME, SR6VehicleActorSheet, {\n            label: \"SR6.SheetActor\",\n            makeDefault: true,\n            types: ['vehicle']\n        });\n        Actors.registerSheet(SYSTEM_NAME, SR6SpiritActorSheet, {\n            label: \"SR6.SheetActor\",\n            makeDefault: true,\n            types: ['spirit']\n        });\n        Actors.registerSheet(SYSTEM_NAME, SR6SpriteActorSheet, {\n            label: \"SR6.SheetActor\",\n            makeDefault: true,\n            types: ['sprite']\n        });\n\n\n        Items.unregisterSheet('core', ItemSheet);\n        Items.registerSheet(SYSTEM_NAME, SR6ItemSheet, {\n            label: \"SR6.SheetItem\",\n            makeDefault: true\n        });\n        Items.registerSheet(SYSTEM_NAME, SR6CallInActionSheet, {\n            label: \"SR6.SheetItem\",\n            makeDefault: true,\n            types: ['call_in_action']\n        });\n\n        // Register configs for embedded documents.\n        DocumentSheetConfig.unregisterSheet(ActiveEffect, 'core', ActiveEffectConfig);\n        DocumentSheetConfig.registerSheet(ActiveEffect, SYSTEM_NAME, SR6ActiveEffectConfig, {\n            makeDefault: true\n        })\n\n        HooksManager.configureVision()\n\n        HooksManager.configureTextEnrichers();\n\n        // Preload might reduce loading time during play.\n        HandlebarManager.loadTemplates();\n\n        // Register Tours\n        registerSR6Tours();\n\n        DataStorage.validate();\n    }\n\n    static async ready() {\n        if (game.user?.isGM) {\n            // Prohibit migration on empty worlds...\n            if (Migrator.isEmptyWorld) {\n                await Migrator.InitWorldForMigration();\n                return;\n            }\n\n            // On populated worlds, try migrating\n            await Migrator.BeginMigration();\n\n            if (ChangelogApplication.showApplication) {\n                await new ChangelogApplication().render(true);\n            }\n        }\n\n        // Connect chat dice icon to shadowrun basic success test roll.\n        const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\n        $(document).on('click', diceIconSelector, async () => await TestCreator.promptSuccessTest());\n        const diceIconSelectorNew = '#chat-controls .chat-control-icon .fa-dice-d20';\n        $(document).on('click', diceIconSelectorNew, async () => await TestCreator.promptSuccessTest());\n\n        Hooks.on('renderChatMessage', HooksManager.chatMessageListeners);\n        Hooks.on('renderJournalPageSheet', JournalEnrichers.setEnricherHooks);\n        HooksManager.registerSocketListeners();\n    }\n\n    /**\n     * Handle drop events on the hotbar creating different macros.\n     *\n     * NOTE: FoundryVTT Hook callbacks won't be resolved when returning a promise.\n     *       While this function calls async methods, it's order of operations isn't important.\n     *\n     * @param bar\n     * @param dropData\n     * @param slot\n     * @return false when callback has been handled, otherwise let Foundry default handling kick in\n     */\n    static hotbarDrop(bar, dropData, slot) {\n        switch (dropData.type) {\n            case 'Item':\n                createItemMacro(dropData, slot);\n                return false;\n            case 'Skill':\n                createSkillMacro(dropData.data, slot);\n                return false;\n        }\n    }\n\n    static renderSceneControls(controls, html) {\n        html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\n            event.preventDefault();\n            new OverwatchScoreTracker().render(true);\n        });\n    }\n\n    static getSceneControlButtons(controls) {\n        const tokenControls = controls.find((c) => c.name === 'token');\n\n        if (game.user?.isGM) {\n            tokenControls.tools.push({\n                name: 'overwatch-score-tracker',\n                title: 'CONTROLS.SR6.OverwatchScoreTracker',\n                icon: 'fas fa-network-wired',\n                button: true\n            });\n        }\n\n        tokenControls.tools.push(SituationModifiersApplication.getControl());\n    }\n\n    /**\n     * Register renderChatMessage Hooks using FoundryVTT Hooks.on for each registered test type.\n     *\n     * This will avoid calling the same method on different types twice.\n     *\n     * Must be called on 'ready' or after game.shadowrun is registered.\n     */\n    static renderChatMessage() {\n        console.debug('SR6: Elysium | Registering new chat messages related hooks');\n    }\n\n    static renderItemDirectory(app: Application, html: JQuery) {\n        if(!game.user?.isGM){\n            return\n        }\n\n        const button = $('<button class=\"sr6 flex0\">Import Chummer Data</button>');\n        html.find('footer').before(button);\n        button.on('click', (event) => {\n            new Import().render(true);\n        });\n    }\n\n    /**\n     * On each\n     * @param item\n     * @param data\n     * @param id\n     */\n    static async updateIcConnectedToHostItem(item: SR6Item, data: Shadowrun.ShadowrunItemDataData, id: string) {\n        if (!canvas.ready || !game.actors) return;\n\n        if (item.isHost) {\n            // Collect actors from sidebar and active scene to update / rerender\n            let connectedIC = [\n                // All sidebar actors should also include tokens with linked actors.\n                ...game.actors.filter((actor: SR6Actor) => actor.isIC() && actor.hasHost()) as SR6Actor[],\n                // All token actors that aren't linked.\n                // @ts-expect-error // TODO: foundry-vtt-types v10\n                ...canvas.scene.tokens.filter(token => !token.actorLink && token.actor?.isIC() && token.actor?.hasHost()).map(t => t.actor)\n            ];\n\n            // Update host data on the ic actor.\n            const host = item.asHost;\n            if (!host) return;\n            for (const ic of connectedIC) {\n                if (!ic) continue;\n                await ic._updateICHostData(host);\n            }\n        }\n    }\n\n    static async removeDeletedItemsFromNetworks(item: SR6Item, data: Shadowrun.ShadowrunItemDataData, id: string) {\n        await NetworkDeviceFlow.handleOnDeleteItem(item, data, id);\n    }\n\n    /**\n     * This method is used as a simple place to register socket hook handlers for the system.\n     *\n     * You can use the SocketMessage for sending messages using a socket event message id and generic data object.\n     */\n    static registerSocketListeners() {\n        if (!game.socket || !game.user) return;\n        console.log('Registering shadowrun6-elysium system socket messages...');\n        const hooks: Shadowrun.SocketMessageHooks = {\n            [FLAGS.addNetworkController]: [NetworkDeviceFlow._handleAddNetworkControllerSocketMessage],\n            [FLAGS.DoNextRound]: [SR6Combat._handleDoNextRoundSocketMessage],\n            [FLAGS.DoInitPass]: [SR6Combat._handleDoInitPassSocketMessage],\n            [FLAGS.DoNewActionPhase]: [SR6Combat._handleDoNewActionPhaseSocketMessage],\n            [FLAGS.CreateTargetedEffects]: [SuccessTestEffectsFlow._handleCreateTargetedEffectsSocketMessage],\n            [FLAGS.TeamworkTestFlow]: [TeamworkTest._handleUpdateSocketMessage],\n            [FLAGS.SetDataStorage]: [DataStorage._handleSetDataStorageSocketMessage],\n        }\n\n        game.socket.on(SYSTEM_SOCKET, async (message: Shadowrun.SocketMessageData) => {\n            console.log('Shadowrun 6e | Received system socket message.', message);\n\n            const handlers = hooks[message.type];\n            if (!handlers || handlers.length === 0) return console.warn('Shadowrun 6e | System socket message has no registered handler!', message);\n            // In case of targeted socket message only execute with target user (intended for GM usage)\n            if (message.userId && game.user?.id !== message.userId) return;\n            if (message.userId && game.user?.id) console.log('Shadowrun 6e | GM is handling system socket message');\n\n            for (const handler of handlers) {\n                console.debug(`Shadowrun 6e | Handover system socket message to handler: ${handler.name}`);\n                await handler(message);\n            }\n        });\n    }\n\n    static async chatMessageListeners(message: ChatMessage, html, data) {\n        await SuccessTest.chatMessageListeners(message, html, data);\n        await OpposedTest.chatMessageListeners(message, html, data);\n        await ActionFollowupFlow.chatMessageListeners(message, html, data);\n        await TeamworkTest.chatMessageListeners(message, html);\n        await JournalEnrichers.messageRequestHooks(html);\n    }\n\n    static async chatLogListeners(chatLog: ChatLog, html, data) {\n        await SuccessTest.chatLogListeners(chatLog, html, data);\n        await OpposedTest.chatLogListeners(chatLog, html, data);\n        await ActionFollowupFlow.chatLogListeners(chatLog, html, data);\n        await TeamworkTest.chatLogListeners(chatLog, html);\n        await JournalEnrichers.chatlogRequestHooks(html)\n    }\n\n    static configureVision() {\n        //register detection modes\n        VisionConfigurator.configureAstralPerception()\n        VisionConfigurator.configureThermographicVision()\n        VisionConfigurator.configureLowlight()\n        VisionConfigurator.configureAR()\n    }\n\n    static async configureTextEnrichers() {\n       await JournalEnrichers.setEnrichers();\n    }\n}\n", "import { HandlebarManager } from './handlebars/HandlebarManager';\nimport {HooksManager} from \"./hooks\";\n\n/* -------------------------------------------- */\n/*  Foundry VTT Initialization                  */\n/* -------------------------------------------- */\n\n\nHooksManager.registerHooks();\nHandlebarManager.registerHelpers();"],
  "mappings": "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",
  "names": ["i", "source", "XMLDOMImplementation", "XMLDOMErrorHandler", "XMLDOMStringList", "XMLDOMConfiguration", "name", "XMLAttribute", "name", "XMLNamedNodeMap", "name", "XMLElement", "name", "j", "i", "XMLCharacterData", "XMLCData", "XMLComment", "XMLDeclaration", "XMLDTDAttList", "XMLDTDEntity", "name", "XMLDTDElement", "name", "XMLDTDNotation", "name", "XMLDocType", "i", "name", "XMLRaw", "XMLText", "XMLProcessingInstruction", "XMLDummy", "XMLNodeList", "XMLNode", "i", "j", "name", "k", "XMLStringifier", "XMLWriterBase", "r", "i", "j", "name", "e", "XMLStringWriter", "i", "r", "XMLDocument", "i", "name", "source", "XMLDocumentCB", "i", "name", "XMLStreamWriter", "i", "j", "k", "name", "e", "name", "source", "i", "len", "len2", "e", "m", "i", "d", "s", "c", "Buffer", "e", "b", "i", "a", "x", "y", "n", "m", "j", "byteLength", "E", "name", "c", "Buffer", "Buffer", "r", "i", "j", "p", "c", "n", "S", "o", "F", "a", "i", "l", "m", "h", "c", "e", "s", "name", "p", "t", "x", "n", "R", "ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "n", "i", "m", "w", "once", "name", "m", "processors", "i", "Parser", "s", "err", "a", "b", "name", "body", "name", "armor", "category", "MatrixRules", "category", "name", "armor", "category", "name", "i", "m", "category", "p", "v", "MatrixRules", "source", "document", "page", "armor", "name", "i", "a", "ZERO_WIDTH_UNICODE_CHAR", "t", "e", "i", "n", "logger", "isEnabled", "window", "TAGIFY_DEBUG", "log", "_len", "arguments", "length", "args", "Array", "_key", "console", "this", "_to_consumable_array", "warn", "sameStr", "s1", "s2", "caseSensitive", "trim", "toLowerCase", "removeCollectionProp", "collection", "unwantedProps", "isArray", "map", "v", "omit", "obj", "props", "p", "newObj", "indexOf", "parseHTML", "s", "DOMParser", "parseFromString", "body", "firstElementChild", "getfirstTextNode", "elm", "action", "nodeType", "escapeHTML", "replace", "isObject", "type", "Object", "prototype", "toString", "call", "split", "slice", "extend", "o", "o1", "o2", "copy", "a", "b", "key", "hasOwnProperty", "assign", "concatWithoutDups", "newArr", "existingObj", "_iteratorNormalCompletion", "_didIteratorError", "_iteratorError", "undefined", "_step", "_iterator", "Symbol", "iterator", "arr", "value", "_iteratorNormalCompletion1", "_didIteratorError1", "_iteratorError1", "_step1", "_iterator1", "item", "push", "includes", "err", "return", "unaccent", "String", "normalize", "isChromeAndroidBrowser", "test", "navigator", "userAgent", "getUID", "c", "crypto", "getRandomValues", "Uint8Array", "isNodeTag", "node", "isNodeBelongsToThisTagifyInstance", "classList", "contains", "settings", "classNames", "tag", "isWithinNodeTag", "closest", "tagSelector", "namespaceSelector", "DOM", "scope", "injectAtCaret", "content", "range", "selection", "getSelection", "getRangeAt", "document", "createTextNode", "deleteContents", "insertNode", "getSetTagData", "tagElm", "data", "override", "__tagifyTagData", "placeCaretAfterNode", "parentNode", "nextSibling", "sel", "rangeCount", "setStartAfter", "collapse", "removeAllRanges", "addRange", "fixCaretBetweenTags", "tags", "TagifyHasFocuse", "forEach", "previousSibling", "textNode", "before", "DEFAULTS", "delimiters", "pattern", "tagTextProp", "maxTags", "Infinity", "callbacks", "addTagOnBlur", "addTagOn", "onChangeAfterBlur", "duplicates", "whitelist", "blacklist", "enforceWhitelist", "userInput", "focusable", "keepInvalidTags", "createInvalidTags", "mixTagsAllowedAfter", "mixTagsInterpolator", "backspace", "skipInvalid", "pasteAsTags", "editTags", "clicks", "keepInvalid", "transformTag", "a11y", "focusableTags", "mixMode", "insertAfterTag", "autoComplete", "enabled", "rightKey", "tabKey", "namespace", "selectMode", "input", "focus", "tagNoAnimation", "tagInvalid", "tagNotAllowed", "scopeLoading", "hasMaxTags", "hasNoTags", "empty", "inputInvalid", "dropdown", "dropdownWrapper", "dropdownHeader", "dropdownFooter", "dropdownItem", "dropdownItemActive", "dropdownItemHidden", "dropdownItemSelected", "dropdownInital", "tagText", "tagX", "tagLoading", "tagEditing", "tagFlash", "tagHide", "classname", "maxItems", "searchKeys", "fuzzySearch", "accentedSearch", "includeSelectedTags", "highlightFirst", "closeOnSelect", "clearOnSelect", "position", "appendTarget", "hooks", "beforeRemoveTag", "Promise", "resolve", "beforePaste", "suggestionClick", "beforeKeyDown", "initDropdown", "_dropdown", "bind", "refs", "__tagify", "_object_spread_props", "suggestionsMethods", "events", "binding", "bindUnbind", "_CB", "_CBR", "listeners", "onKeyDown", "onMouseOver", "onMouseLeave", "onClick", "onScroll", "state", "hasFocus", "composing", "_s", "selectedElm", "querySelector", "dropdownItemActiveSelector", "selectedElmData", "getSuggestionDataByNode", "isMixMode", "mode", "isSelectMode", "tagify", "then", "result", "preventDefault", "dropdownItems", "_this", "getAllSuggestionsRefs", "actionUp", "getNextOrPrevOption", "matches", "dropdownItemSelector", "highlightOption", "itemsPerPage", "Math", "floor", "clientHeight", "offsetHeight", "isPageUp", "currentIndex", "targetIndex", "max", "min", "hide", "actions", "ArrowLeft", "shouldAutocompleteOnKey", "editing", "getMappedValue", "autoCompleteData", "autocomplete", "set", "selectOption", "setTimeout", "tagData", "suggestionElm", "nextOrPrevOption", "nextOrPrevOptionValue", "getAttribute", "getSuggestionNodeByValue", "addTags", "inputText", "catch", "raw", "charCodeAt", "removeTags", "editTag", "ddItem", "target", "button", "pos", "scrollTop", "scrollHeight", "trigger", "percentage", "round", "refilter", "query", "suggestedListItems", "filterListItems", "fill", "find", "selected", "next", "selectedIdx", "findIndex", "adjustScroll", "itemData", "className", "ddItemElm", "remove", "removeAttribute", "ddItemData", "suggest", "add", "setAttribute", "offsetTop", "event", "onSelect", "isNoMatch", "normalizedTagData", "normalizeTags", "onEditTagDone", "__isValid", "toggleFocusClass", "addEventListener", "fillHeaderFooter", "once", "selectAll", "onlyRendered", "tagsToAdd", "suggestions", "options", "whitelistItem", "valueIsInWhitelist", "searchBy", "isDuplicate", "niddle", "l", "startsWithMatch", "exactMatch", "_searchKeys", "keys", "some", "k", "_sd", "exact", "reduce", "values", "every", "q", "isTagDuplicate", "exactMatchesList", "sortby", "list", "unshift", "d", "suggestionsCount", "hasCustomSort", "filter", "_this1", "filteredList", "concat", "mapValueTo", "createListHTML", "sugegstionsList", "suggestion", "idx", "mappedValue", "templates", "apply", "join", "parseTemplate", "getHeaderRef", "getFooterRef", "querySelectorAll", "show", "firstListItem", "firstListItemValue", "noMatchListItem", "allowNewTags", "noWhitelist", "isManual", "dropdownItemNoMatch", "isLoading", "readonly", "clearTimeout", "dropdownHide__bindEventsTimeout", "visible", "setStateSelection", "render", "overrideManual", "_this_DOM", "removeEventListener", "removeChild", "flaggedTags", "baseOffset", "toggle", "getAppendTarget", "height", "clone", "ddHeight", "cloneNode", "style", "cssText", "appendChild", "HTMLContent", "dropdownContent", "innerHTML", "newHeaderElem", "newFooterElem", "headerRef", "footerRef", "replaceChild", "rect", "top", "bottom", "left", "width", "ancestorsOffsets", "isPlacedAbove", "cssTop", "cssLeft", "ddElm", "isRTL", "RTL", "isDefaultAppendTarget", "isSelfAppended", "appendTargetScrollTop", "pageYOffset", "root", "fullscreenElement", "webkitFullscreenElement", "documentElement", "viewportHeight", "positionTo", "clientWidth", "innerWidth", "ddTarget", "r2", "r", "startContainer", "offset", "startOffset", "createRange", "setStart", "setEnd", "getBoundingClientRect", "right", "offsetLeft", "accumulatedAncestorsScrollTop", "ceil", "placeAbove", "pageXOffset", "STORE_KEY", "TEXTS", "exceed", "duplicate", "notAllowed", "wrapper", "disabled", "required", "placeholder", "param", "title", "class", "getAttributes", "_t", "hasMore", "customBinding", "customEventsList", "name", "on", "mainEvents", "eventName", "main", "bindGlobal", "isJQueryPlugin", "jQuery", "originalInput", "removeAllTags", "keydown", "onKeydown", "click", "onClickScope", "dblclick", "onDoubleClickScope", "paste", "onPaste", "drop", "onDrop", "compositionstart", "onCompositionStart", "compositionend", "onCompositionEnd", "inputMutationObserver", "MutationObserver", "onInputDOMChange", "disconnect", "observe", "childList", "bindOriginaInputListener", "delay", "DELAY", "clearInterval", "originalInputValueObserverInterval", "setInterval", "observeOriginalInputValue", "unbind", "global", "isIE", "cb", "onWindowKeyDown", "onFocusBlur", "onClickAnywhere", "useCapture", "unbindGlobal", "_this_value_", "_this_value", "nodeTag", "relatedTarget", "targetIsTagNode", "isTargetXBtn", "isFocused", "lostFocus", "Date", "text", "textContent", "currentDisplayValue", "ddEnabled", "eventData", "isTargetSelectOption", "isTargetAddNewBtn", "addNew", "postUpdate", "triggerChangeEvent", "dropdownCanBeShown", "condition2", "tagTextSelector", "setRangeAtStartEnd", "loading", "firstTagNode", "getTagElms", "nextTag", "focusedElm", "activeElement", "isBelong", "isInputNode", "isReadyOnlyTag", "hasAttribute", "isDropdownVisible", "nextElementSibling", "targetIsRemoveBtn", "deleteKeyTagDetected", "anchorOffset", "anchorNode", "prevAnchorSibling", "isCaretAfterTag", "el", "createElement", "enc", "innerText", "lastTagElems", "tagBeforeCaret", "tagElmToBeDeleted", "firstTextNodeBeforeTag", "isZWS", "nodeValue", "fromCharCode", "previousElementSibling", "_instanceof", "Element", "nodeName", "isManualDropdown", "blur", "inputSuggestion", "thingToAdd", "onInput", "onMixTagsInput", "showSuggestions", "inputElm", "validation", "validateTag", "toggleScopeValidation", "isValid", "search", "rangeText", "match", "matchedPatternCount", "matchFlaggedTag", "matchDelimiters", "lastTagsCount", "tagsElems", "fragment", "createDocumentFragment", "remainingTagsValues", "inputType", "createTagElem", "childNodes", "lastChild", "update", "withoutChangeEvent", "cloneRange", "focusNode", "endOffset", "lastIndexOf", "prefix", "onInputIE", "destroy", "tagifyValue", "loadOriginalValues", "closestTagifyDropdownElem", "dropdownSelector", "isScope", "timeDiffFocus", "index", "getNodeIndex", "fixFirefoxLastTagNoCaret", "clipboardData", "pastedText", "getData", "onEditTagInput", "editableElm", "_obj", "tagElmIdx", "textValue", "dataForChangedProp", "_define_property", "__tagId", "editTagChangeDetected", "originalIsValid", "newValue", "onEditTagPaste", "newNode", "onEditTagClick", "onEditTagFocus", "onEditTagBlur", "isRelatedTargetNodeTag", "newTagData", "originalData", "__originalData", "hasChanged", "_obj1", "message", "onEditTagkeydown", "__originalHTML", "EDITED_TAG_BLUR_DELAY", "isEditingTag", "editable", "m", "record", "addedNodes", "addedNode", "outerHTML", "replaceWith", "newlineText", "nextNode", "anythingAfterNode", "removedNodes", "removedNode", "lastInputChild", "$", "Tagify", "mockInstance", "Proxy", "get", "id", "instance", "callbacksPerType", "addRemove", "op", "ev", "removeAllCustomListeners", "entries", "cbArr", "off", "opts", "cloneData", "triggerHandler", "cloneEvent", "prop", "HTMLElement", "CustomEvent", "detail", "dispatchEvent", "isFirefox", "documentMode", "getPersistedData", "localStorage", "persistedData", "customKey", "getItem", "JSON", "parse", "setPersistedData", "setItem", "stringify", "Event", "clearPersistedData", "base", "removeItem", "applySettings", "build", "getCSSVars", "autofocus", "helpers", "dataProps", "template", "setContentEditable", "generateClassSelectors", "currentName", "defineProperty", "mergedDefaults", "attrVal", "RegExp", "_delimiters", "_object_spread", "texts", "persistedWhitelist", "attrs", "getCustomAttributes", "propName", "output", "compStyle", "getComputedStyle", "CSSVars", "tagHideTransition", "unit", "pop", "getPropertyValue", "labelWrapper", "integrated", "originalInput_tabIndex", "tabIndex", "inputSelector", "insertBefore", "_this_DOM_scope_parentNode", "blockChangeEvent", "persistedOriginalValue", "parseMixTags", "tagName", "insertAdjacentHTML", "lastOriginalValueReported", "clonedEvent", "toggleClass", "force", "setPlaceholder", "str", "changed", "bubbles", "simulated", "_valueTracker", "setValue", "random", "start", "getTagTextNode", "setTagTextNode", "HTML", "getLastTag", "tagIdx", "skipValidation", "editTagToggleValidity", "removeTagsFromValue", "previousData", "replaceTag", "reCheckInvalidTags", "getInvalidTagAttrs", "newTagElm", "updateValueByDOMTags", "clsNames", "skipNodesWithClassNames", "cls", "injectedNode", "_this_state_selection", "appendMixTags", "updateDOM", "hideDropdown", "validate", "source", "charAt", "suggestedText", "suggestionStart", "substr", "suggestionTrimmed", "substring", "dataSuggest", "replaceTextWithNode", "getTagIdx", "classess", "_sc", "tagNodes", "tagId", "dupsCount", "done", "getTagIndexByValue", "indices", "isCaseSensitive", "getTagElmByValue", "flashTag", "isTagBlacklisted", "x", "isTagWhitelisted", "getWhitelistItem", "_wi", "_wiv", "setReadonly", "attrribute", "contentEditable", "setDisabled", "isDisabled", "tagsItems", "_this_settings", "whitelistMatches", "whitelistWithProps", "isCollection", "mapStringToCollection", "acc", "trimmed", "itemCopy", "whitelistMatchesValues", "filteredItem", "matchObj", "tagsDataSet", "textProp", "preInterpolated", "maxTagsReached", "Error", "newWrapperNode", "strToReplace", "nodeToReplace", "nodeAtCaret", "firstSplitOffset", "splitText", "prepareNewTagNode", "aggregatedInvalidInput", "tagElmParams", "__preInvalidData", "postProcessNewTagNode", "selectTag", "lastTagElm", "appendTag", "addEmptyTag", "initialData", "clearInput", "tagElems", "frag", "addedTags", "addMixTags", "newTagNode", "tagsData", "prefixedTextToTag", "children", "_this_state_tag", "newTag", "createdFromDelimiters", "insertBeforeNode", "extraData", "templateData", "textnode", "iter", "createNodeIterator", "NodeFilter", "SHOW_TEXT", "tagValidation", "tagElms", "silent", "tranDuration", "tagsToRemove", "elms", "__removed", "removeNode", "parseFloat", "clientTop", "reason", "removeTagsFromDOM", "splice", "hasValue", "setOriginalInputValue", "debouncedUpdateTimeout", "inputValue", "getInputValue", "getCleanValue", "getMixedTagsAsString", "originalInputValueFormat", "that", "_interpolator", "iterateChildren", "rootNode", "removeTag", "value", "source", "d", "a", "b", "document", "c", "a", "b", "category", "document", "name", "glitches", "MatrixRules", "roll", "active", "MatrixRules", "active", "c", "a", "b", "source", "document", "category", "document", "category", "category", "a", "b", "p", "attack", "t", "i", "source", "MatrixRules", "marks", "name", "armor", "armor", "name", "active", "entries", "name", "armor", "s", "pilot", "armor", "MatrixRules", "name", "name", "changes", "a", "b", "skill", "armor", "MatrixRules", "name", "category", "mods", "e", "marks", "t", "i", "i", "name", "a", "b", "document", "active", "p", "pack", "e", "t", "name", "i", "e", "a", "b", "category", "active", "category", "document", "a", "c", "i", "name", "b", "name", "game", "updateData", "document", "t", "category", "t", "d", "a", "b", "game", "s", "k", "i", "weapons", "i", "e", "itemData", "i", "modifiers", "category", "categories", "c", "name", "e", "name", "i", "category", "name", "source", "category", "category", "i", "i", "category", "i", "item", "i", "i", "i", "category", "i", "i", "category", "category", "dataFile", "category", "document", "name", "name", "category", "inventories", "l", "name", "e", "name", "e", "e", "armor", "mods", "e", "e", "e", "e", "category", "l", "i", "weapons", "e", "chummerLifestyle", "e", "e", "e", "e", "e", "gears", "mods", "weapons", "mods", "e", "handling", "speed", "v", "category", "weapons", "armor", "name", "f", "a", "b", "document", "name", "category", "i", "category", "SR6CharacterSheet", "category", "_", "item", "armor", "name", "document", "armor", "MatrixRules", "name", "n", "item", "before", "after", "weapons", "weapons", "mods", "accel", "active", "armor", "attack", "avail", "body", "category", "category_english", "cost", "dataprocessing", "devicerating", "firewall", "fullname", "gears", "guid", "handling", "homenode", "iscommlink", "isdrone", "isprogram", "location", "maneuver", "matrixcm", "matrixcmfilled", "mods", "name", "name_english", "owncost", "page", "physicalcm", "physicalcmfilled", "pilot", "programlimit", "seats", "sensor", "sleaze", "source", "sourceid", "speed", "vehiclename", "weapons", "vehicle", "mods", "m", "i", "name", "macro", "d", "s", "r", "message", "name", "threshold", "SR6CharacterSheet", "c", "t"]
}
